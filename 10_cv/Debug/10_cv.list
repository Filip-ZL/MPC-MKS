
10_cv.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000180f0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d6c  080182a0  080182a0  000282a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c00c  0801c00c  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  0801c00c  0801c00c  0002c00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c014  0801c014  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c014  0801c014  0002c014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c018  0801c018  0002c018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0801c01c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030084  2**0
                  CONTENTS
 10 .bss          0000f010  20000084  20000084  00030084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000f094  2000f094  00030084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004993f  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008631  00000000  00000000  000799f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002280  00000000  00000000  00082028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002120  00000000  00000000  000842a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00035960  00000000  00000000  000863c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00037cc3  00000000  00000000  000bbd28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00100d47  00000000  00000000  000f39eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001f4732  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000097dc  00000000  00000000  001f4788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018288 	.word	0x08018288

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	08018288 	.word	0x08018288

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000598:	b480      	push	{r7}
 800059a:	b085      	sub	sp, #20
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005aa:	68bb      	ldr	r3, [r7, #8]
 80005ac:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <vApplicationGetIdleTaskMemory+0x30>)
 80005ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	2280      	movs	r2, #128	; 0x80
 80005b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005b6:	bf00      	nop
 80005b8:	3714      	adds	r7, #20
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200000a0 	.word	0x200000a0
 80005c8:	200000f4 	.word	0x200000f4

080005cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b088      	sub	sp, #32
 80005d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d2:	f000 fdbb 	bl	800114c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d6:	f000 f81d 	bl	8000614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005da:	f000 f8af 	bl	800073c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80005de:	f000 f883 	bl	80006e8 <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 1024);
 80005e2:	4b0a      	ldr	r3, [pc, #40]	; (800060c <main+0x40>)
 80005e4:	1d3c      	adds	r4, r7, #4
 80005e6:	461d      	mov	r5, r3
 80005e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ec:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2100      	movs	r1, #0
 80005f8:	4618      	mov	r0, r3
 80005fa:	f004 f8be 	bl	800477a <osThreadCreate>
 80005fe:	4603      	mov	r3, r0
 8000600:	4a03      	ldr	r2, [pc, #12]	; (8000610 <main+0x44>)
 8000602:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000604:	f004 f8a2 	bl	800474c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0x3c>
 800060a:	bf00      	nop
 800060c:	080182ac 	.word	0x080182ac
 8000610:	200086fc 	.word	0x200086fc

08000614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b094      	sub	sp, #80	; 0x50
 8000618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	2230      	movs	r2, #48	; 0x30
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f016 fc1c 	bl	8016e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000638:	2300      	movs	r3, #0
 800063a:	60bb      	str	r3, [r7, #8]
 800063c:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <SystemClock_Config+0xcc>)
 800063e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <SystemClock_Config+0xcc>)
 8000642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000646:	6413      	str	r3, [r2, #64]	; 0x40
 8000648:	4b25      	ldr	r3, [pc, #148]	; (80006e0 <SystemClock_Config+0xcc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000650:	60bb      	str	r3, [r7, #8]
 8000652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000654:	2300      	movs	r3, #0
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	4b22      	ldr	r3, [pc, #136]	; (80006e4 <SystemClock_Config+0xd0>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a21      	ldr	r2, [pc, #132]	; (80006e4 <SystemClock_Config+0xd0>)
 800065e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	4b1f      	ldr	r3, [pc, #124]	; (80006e4 <SystemClock_Config+0xd0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800066c:	607b      	str	r3, [r7, #4]
 800066e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000670:	2301      	movs	r3, #1
 8000672:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000674:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000678:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800067a:	2302      	movs	r3, #2
 800067c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800067e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000682:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000684:	2304      	movs	r3, #4
 8000686:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000688:	23a8      	movs	r3, #168	; 0xa8
 800068a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000690:	2307      	movs	r3, #7
 8000692:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000694:	f107 0320 	add.w	r3, r7, #32
 8000698:	4618      	mov	r0, r3
 800069a:	f002 fa23 	bl	8002ae4 <HAL_RCC_OscConfig>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006a4:	f000 f938 	bl	8000918 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a8:	230f      	movs	r3, #15
 80006aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ac:	2302      	movs	r3, #2
 80006ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006be:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006c0:	f107 030c 	add.w	r3, r7, #12
 80006c4:	2105      	movs	r1, #5
 80006c6:	4618      	mov	r0, r3
 80006c8:	f002 fc84 	bl	8002fd4 <HAL_RCC_ClockConfig>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006d2:	f000 f921 	bl	8000918 <Error_Handler>
  }
}
 80006d6:	bf00      	nop
 80006d8:	3750      	adds	r7, #80	; 0x50
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40007000 	.word	0x40007000

080006e8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ec:	4b11      	ldr	r3, [pc, #68]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006ee:	4a12      	ldr	r2, [pc, #72]	; (8000738 <MX_USART3_UART_Init+0x50>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006f2:	4b10      	ldr	r3, [pc, #64]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006f8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000706:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800070c:	4b09      	ldr	r3, [pc, #36]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800070e:	220c      	movs	r2, #12
 8000710:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000712:	4b08      	ldr	r3, [pc, #32]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_USART3_UART_Init+0x4c>)
 8000720:	f003 f934 	bl	800398c <HAL_UART_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800072a:	f000 f8f5 	bl	8000918 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20008700 	.word	0x20008700
 8000738:	40004800 	.word	0x40004800

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08c      	sub	sp, #48	; 0x30
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	61bb      	str	r3, [r7, #24]
 8000756:	4b5b      	ldr	r3, [pc, #364]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a5a      	ldr	r2, [pc, #360]	; (80008c4 <MX_GPIO_Init+0x188>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b58      	ldr	r3, [pc, #352]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	61bb      	str	r3, [r7, #24]
 800076c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
 8000772:	4b54      	ldr	r3, [pc, #336]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a53      	ldr	r2, [pc, #332]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b51      	ldr	r3, [pc, #324]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b4d      	ldr	r3, [pc, #308]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <MX_GPIO_Init+0x188>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b4a      	ldr	r3, [pc, #296]	; (80008c4 <MX_GPIO_Init+0x188>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b46      	ldr	r3, [pc, #280]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a45      	ldr	r2, [pc, #276]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b43      	ldr	r3, [pc, #268]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b3f      	ldr	r3, [pc, #252]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a3e      	ldr	r2, [pc, #248]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007cc:	f043 0308 	orr.w	r3, r3, #8
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b3c      	ldr	r3, [pc, #240]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0308 	and.w	r3, r3, #8
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b38      	ldr	r3, [pc, #224]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a37      	ldr	r2, [pc, #220]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b35      	ldr	r3, [pc, #212]	; (80008c4 <MX_GPIO_Init+0x188>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000800:	4831      	ldr	r0, [pc, #196]	; (80008c8 <MX_GPIO_Init+0x18c>)
 8000802:	f002 f955 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	2140      	movs	r1, #64	; 0x40
 800080a:	4830      	ldr	r0, [pc, #192]	; (80008cc <MX_GPIO_Init+0x190>)
 800080c:	f002 f950 	bl	8002ab0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000810:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000814:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000816:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800081a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	482a      	ldr	r0, [pc, #168]	; (80008d0 <MX_GPIO_Init+0x194>)
 8000828:	f001 ff7e 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800082c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083a:	2300      	movs	r3, #0
 800083c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083e:	f107 031c 	add.w	r3, r7, #28
 8000842:	4619      	mov	r1, r3
 8000844:	4820      	ldr	r0, [pc, #128]	; (80008c8 <MX_GPIO_Init+0x18c>)
 8000846:	f001 ff6f 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800084a:	2340      	movs	r3, #64	; 0x40
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_GPIO_Init+0x190>)
 8000862:	f001 ff61 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000866:	2380      	movs	r3, #128	; 0x80
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800086a:	2300      	movs	r3, #0
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	4814      	ldr	r0, [pc, #80]	; (80008cc <MX_GPIO_Init+0x190>)
 800087a:	f001 ff55 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800087e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000882:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000884:	2302      	movs	r3, #2
 8000886:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088c:	2303      	movs	r3, #3
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000890:	230a      	movs	r3, #10
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	480e      	ldr	r0, [pc, #56]	; (80008d4 <MX_GPIO_Init+0x198>)
 800089c:	f001 ff44 	bl	8002728 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a6:	2300      	movs	r3, #0
 80008a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4807      	ldr	r0, [pc, #28]	; (80008d4 <MX_GPIO_Init+0x198>)
 80008b6:	f001 ff37 	bl	8002728 <HAL_GPIO_Init>

}
 80008ba:	bf00      	nop
 80008bc:	3730      	adds	r7, #48	; 0x30
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40023800 	.word	0x40023800
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40021800 	.word	0x40021800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40020000 	.word	0x40020000

080008d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 80008e0:	f003 fa6a 	bl	8003db8 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpecho_init();
 80008e4:	f000 fa52 	bl	8000d8c <tcpecho_init>
  telnet_init();
 80008e8:	f000 fbf2 	bl	80010d0 <telnet_init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80008ec:	2001      	movs	r0, #1
 80008ee:	f003 ff90 	bl	8004812 <osDelay>
 80008f2:	e7fb      	b.n	80008ec <StartDefaultTask+0x14>

080008f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a04      	ldr	r2, [pc, #16]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d101      	bne.n	800090a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000906:	f000 fc43 	bl	8001190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40002000 	.word	0x40002000

08000918 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800091c:	b672      	cpsid	i
}
 800091e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000920:	e7fe      	b.n	8000920 <Error_Handler+0x8>
	...

08000924 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_MspInit+0x54>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a11      	ldr	r2, [pc, #68]	; (8000978 <HAL_MspInit+0x54>)
 8000934:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <HAL_MspInit+0x54>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b0b      	ldr	r3, [pc, #44]	; (8000978 <HAL_MspInit+0x54>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a0a      	ldr	r2, [pc, #40]	; (8000978 <HAL_MspInit+0x54>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b08      	ldr	r3, [pc, #32]	; (8000978 <HAL_MspInit+0x54>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	210f      	movs	r1, #15
 8000966:	f06f 0001 	mvn.w	r0, #1
 800096a:	f000 fd0d 	bl	8001388 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000984:	f107 0314 	add.w	r3, r7, #20
 8000988:	2200      	movs	r2, #0
 800098a:	601a      	str	r2, [r3, #0]
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	609a      	str	r2, [r3, #8]
 8000990:	60da      	str	r2, [r3, #12]
 8000992:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a19      	ldr	r2, [pc, #100]	; (8000a00 <HAL_UART_MspInit+0x84>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d12c      	bne.n	80009f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009ac:	6413      	str	r3, [r2, #64]	; 0x40
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <HAL_UART_MspInit+0x88>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_MspInit+0x8c>)
 80009f4:	f001 fe98 	bl	8002728 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40004800 	.word	0x40004800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020c00 	.word	0x40020c00

08000a0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b08c      	sub	sp, #48	; 0x30
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	6879      	ldr	r1, [r7, #4]
 8000a20:	202d      	movs	r0, #45	; 0x2d
 8000a22:	f000 fcb1 	bl	8001388 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000a26:	202d      	movs	r0, #45	; 0x2d
 8000a28:	f000 fcca 	bl	80013c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a34:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3c:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <HAL_InitTick+0xa4>)
 8000a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a44:	60fb      	str	r3, [r7, #12]
 8000a46:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a48:	f107 0210 	add.w	r2, r7, #16
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4611      	mov	r1, r2
 8000a52:	4618      	mov	r0, r3
 8000a54:	f002 fcba 	bl	80033cc <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000a58:	f002 fc90 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <HAL_InitTick+0xa8>)
 8000a66:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6a:	0c9b      	lsrs	r3, r3, #18
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000a70:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a72:	4a12      	ldr	r2, [pc, #72]	; (8000abc <HAL_InitTick+0xb0>)
 8000a74:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a7c:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000a7e:	4a0e      	ldr	r2, [pc, #56]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a82:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000a84:	4b0c      	ldr	r3, [pc, #48]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8000a90:	4809      	ldr	r0, [pc, #36]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a92:	f002 fccd 	bl	8003430 <HAL_TIM_Base_Init>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d104      	bne.n	8000aa6 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8000a9c:	4806      	ldr	r0, [pc, #24]	; (8000ab8 <HAL_InitTick+0xac>)
 8000a9e:	f002 fd21 	bl	80034e4 <HAL_TIM_Base_Start_IT>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	e000      	b.n	8000aa8 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	431bde83 	.word	0x431bde83
 8000ab8:	20008744 	.word	0x20008744
 8000abc:	40002000 	.word	0x40002000

08000ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <NMI_Handler+0x4>

08000ac6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <HardFault_Handler+0x4>

08000acc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <MemManage_Handler+0x4>

08000ad2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <UsageFault_Handler+0x4>

08000ade <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000af2:	f002 fd67 	bl	80035c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20008744 	.word	0x20008744

08000b00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <ETH_IRQHandler+0x10>)
 8000b06:	f001 f84d 	bl	8001ba4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000a0ac 	.word	0x2000a0ac

08000b14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	return 1;
 8000b18:	2301      	movs	r3, #1
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <_kill>:

int _kill(int pid, int sig)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <_kill+0x20>)
 8000b30:	2216      	movs	r2, #22
 8000b32:	601a      	str	r2, [r3, #0]
	return -1;
 8000b34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	370c      	adds	r7, #12
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	2000f080 	.word	0x2000f080

08000b48 <_exit>:

void _exit (int status)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000b50:	f04f 31ff 	mov.w	r1, #4294967295
 8000b54:	6878      	ldr	r0, [r7, #4]
 8000b56:	f7ff ffe5 	bl	8000b24 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000b5a:	e7fe      	b.n	8000b5a <_exit+0x12>

08000b5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e00a      	b.n	8000b84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b6e:	f3af 8000 	nop.w
 8000b72:	4601      	mov	r1, r0
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	1c5a      	adds	r2, r3, #1
 8000b78:	60ba      	str	r2, [r7, #8]
 8000b7a:	b2ca      	uxtb	r2, r1
 8000b7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	3301      	adds	r3, #1
 8000b82:	617b      	str	r3, [r7, #20]
 8000b84:	697a      	ldr	r2, [r7, #20]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	dbf0      	blt.n	8000b6e <_read+0x12>
	}

return len;
 8000b8c:	687b      	ldr	r3, [r7, #4]
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3718      	adds	r7, #24
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}

08000b96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b96:	b580      	push	{r7, lr}
 8000b98:	b086      	sub	sp, #24
 8000b9a:	af00      	add	r7, sp, #0
 8000b9c:	60f8      	str	r0, [r7, #12]
 8000b9e:	60b9      	str	r1, [r7, #8]
 8000ba0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	e009      	b.n	8000bbc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	60ba      	str	r2, [r7, #8]
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	697a      	ldr	r2, [r7, #20]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	dbf1      	blt.n	8000ba8 <_write+0x12>
	}
	return len;
 8000bc4:	687b      	ldr	r3, [r7, #4]
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	3718      	adds	r7, #24
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	bd80      	pop	{r7, pc}

08000bce <_close>:

int _close(int file)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
	return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bf6:	605a      	str	r2, [r3, #4]
	return 0;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <_isatty>:

int _isatty(int file)
{
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000c0e:	2301      	movs	r3, #1
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
	return 0;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3714      	adds	r7, #20
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
	...

08000c38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b087      	sub	sp, #28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c40:	4a14      	ldr	r2, [pc, #80]	; (8000c94 <_sbrk+0x5c>)
 8000c42:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <_sbrk+0x60>)
 8000c44:	1ad3      	subs	r3, r2, r3
 8000c46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c4c:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d102      	bne.n	8000c5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c54:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <_sbrk+0x64>)
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <_sbrk+0x68>)
 8000c58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c5a:	4b10      	ldr	r3, [pc, #64]	; (8000c9c <_sbrk+0x64>)
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	4413      	add	r3, r2
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d205      	bcs.n	8000c74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <_sbrk+0x6c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	e009      	b.n	8000c88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c74:	4b09      	ldr	r3, [pc, #36]	; (8000c9c <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c7a:	4b08      	ldr	r3, [pc, #32]	; (8000c9c <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	4413      	add	r3, r2
 8000c82:	4a06      	ldr	r2, [pc, #24]	; (8000c9c <_sbrk+0x64>)
 8000c84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c86:	68fb      	ldr	r3, [r7, #12]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	371c      	adds	r7, #28
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	20030000 	.word	0x20030000
 8000c98:	00000400 	.word	0x00000400
 8000c9c:	200002f4 	.word	0x200002f4
 8000ca0:	2000f098 	.word	0x2000f098
 8000ca4:	2000f080 	.word	0x2000f080

08000ca8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <SystemInit+0x20>)
 8000cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <SystemInit+0x20>)
 8000cb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop
 8000cc8:	e000ed00 	.word	0xe000ed00

08000ccc <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b08a      	sub	sp, #40	; 0x28
 8000cd0:	af02      	add	r7, sp, #8
 8000cd2:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2100      	movs	r1, #0
 8000cd8:	2010      	movs	r0, #16
 8000cda:	f006 fcfd 	bl	80076d8 <netconn_new_with_proto_and_callback>
 8000cde:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000ce0:	69fb      	ldr	r3, [r7, #28]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d04e      	beq.n	8000d84 <tcpecho_thread+0xb8>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 8000ce6:	2207      	movs	r2, #7
 8000ce8:	2100      	movs	r1, #0
 8000cea:	69f8      	ldr	r0, [r7, #28]
 8000cec:	f006 fdae 	bl	800784c <netconn_bind>
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000cf4:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d13f      	bne.n	8000d7c <tcpecho_thread+0xb0>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000cfc:	21ff      	movs	r1, #255	; 0xff
 8000cfe:	69f8      	ldr	r0, [r7, #28]
 8000d00:	f006 fddc 	bl	80078bc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	69f8      	ldr	r0, [r7, #28]
 8000d0c:	f006 fe02 	bl	8007914 <netconn_accept>
 8000d10:	4603      	mov	r3, r0
 8000d12:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000d14:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d1f3      	bne.n	8000d04 <tcpecho_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d1c:	e01b      	b.n	8000d56 <tcpecho_thread+0x8a>
          {
            do 
            {
              netbuf_data(buf, &data, &len);
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	f107 020a 	add.w	r2, r7, #10
 8000d24:	f107 010c 	add.w	r1, r7, #12
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f008 fd91 	bl	8009850 <netbuf_data>
              netconn_write(newconn, data, len, NETCONN_COPY);
 8000d2e:	6978      	ldr	r0, [r7, #20]
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	897b      	ldrh	r3, [r7, #10]
 8000d34:	461a      	mov	r2, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f007 f86c 	bl	8007e18 <netconn_write_partly>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	4618      	mov	r0, r3
 8000d44:	f008 fdce 	bl	80098e4 <netbuf_next>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dae7      	bge.n	8000d1e <tcpecho_thread+0x52>
          
            netbuf_delete(buf);
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f008 fd5d 	bl	8009810 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f107 0210 	add.w	r2, r7, #16
 8000d5c:	4611      	mov	r1, r2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f006 ffe0 	bl	8007d24 <netconn_recv>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d0d9      	beq.n	8000d1e <tcpecho_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f007 f955 	bl	800801c <netconn_close>
          netconn_delete(newconn);
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f006 fd4d 	bl	8007814 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000d7a:	e7c3      	b.n	8000d04 <tcpecho_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000d7c:	697b      	ldr	r3, [r7, #20]
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f006 fd48 	bl	8007814 <netconn_delete>
    }
  }
}
 8000d84:	bf00      	nop
 8000d86:	3720      	adds	r7, #32
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000d92:	2304      	movs	r3, #4
 8000d94:	9300      	str	r3, [sp, #0]
 8000d96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	4903      	ldr	r1, [pc, #12]	; (8000dac <tcpecho_init+0x20>)
 8000d9e:	4804      	ldr	r0, [pc, #16]	; (8000db0 <tcpecho_init+0x24>)
 8000da0:	f015 ffc0 	bl	8016d24 <sys_thread_new>
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	08000ccd 	.word	0x08000ccd
 8000db0:	080182c8 	.word	0x080182c8

08000db4 <telnet_thread>:
static void telnet_byte_available(uint8_t c, struct netconn *conn);

/*-----------------------------------------------------------------------------------*/

static void telnet_thread(void *arg)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b088      	sub	sp, #32
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  u16_t len;
      
  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	2010      	movs	r0, #16
 8000dc2:	f006 fc89 	bl	80076d8 <netconn_new_with_proto_and_callback>
 8000dc6:	61f8      	str	r0, [r7, #28]
  
  if (conn!=NULL)
 8000dc8:	69fb      	ldr	r3, [r7, #28]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d055      	beq.n	8000e7a <telnet_thread+0xc6>
  {  
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 23);
 8000dce:	2217      	movs	r2, #23
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f006 fd3a 	bl	800784c <netconn_bind>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	76fb      	strb	r3, [r7, #27]
    
    if (err == ERR_OK)
 8000ddc:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d146      	bne.n	8000e72 <telnet_thread+0xbe>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 8000de4:	21ff      	movs	r1, #255	; 0xff
 8000de6:	69f8      	ldr	r0, [r7, #28]
 8000de8:	f006 fd68 	bl	80078bc <netconn_listen_with_backlog>
    
      while (1) 
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	4619      	mov	r1, r3
 8000df2:	69f8      	ldr	r0, [r7, #28]
 8000df4:	f006 fd8e 	bl	8007914 <netconn_accept>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	76bb      	strb	r3, [r7, #26]
    
        /* Process the new connection. */
        if (accept_err == ERR_OK) 
 8000dfc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d1f3      	bne.n	8000dec <telnet_thread+0x38>
        {

          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e04:	e022      	b.n	8000e4c <telnet_thread+0x98>
          {
            do 
            {
              netbuf_data(buf, (void**)&data, &len);
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	f107 020a 	add.w	r2, r7, #10
 8000e0c:	f107 010c 	add.w	r1, r7, #12
 8000e10:	4618      	mov	r0, r3
 8000e12:	f008 fd1d 	bl	8009850 <netbuf_data>
              while (len--) telnet_byte_available(*data++, newconn);
 8000e16:	e008      	b.n	8000e2a <telnet_thread+0x76>
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	1c5a      	adds	r2, r3, #1
 8000e1c:	60fa      	str	r2, [r7, #12]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	697a      	ldr	r2, [r7, #20]
 8000e22:	4611      	mov	r1, r2
 8000e24:	4618      	mov	r0, r3
 8000e26:	f000 f82d 	bl	8000e84 <telnet_byte_available>
 8000e2a:	897b      	ldrh	r3, [r7, #10]
 8000e2c:	1e5a      	subs	r2, r3, #1
 8000e2e:	b292      	uxth	r2, r2
 8000e30:	817a      	strh	r2, [r7, #10]
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d1f0      	bne.n	8000e18 <telnet_thread+0x64>
          
            } 
            while (netbuf_next(buf) >= 0);
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f008 fd53 	bl	80098e4 <netbuf_next>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	dae0      	bge.n	8000e06 <telnet_thread+0x52>
          
            netbuf_delete(buf);
 8000e44:	693b      	ldr	r3, [r7, #16]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f008 fce2 	bl	8009810 <netbuf_delete>
          while (netconn_recv(newconn, &buf) == ERR_OK) 
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	f107 0210 	add.w	r2, r7, #16
 8000e52:	4611      	mov	r1, r2
 8000e54:	4618      	mov	r0, r3
 8000e56:	f006 ff65 	bl	8007d24 <netconn_recv>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d0d2      	beq.n	8000e06 <telnet_thread+0x52>
          }
        
          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f007 f8da 	bl	800801c <netconn_close>
          netconn_delete(newconn);
 8000e68:	697b      	ldr	r3, [r7, #20]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f006 fcd2 	bl	8007814 <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 8000e70:	e7bc      	b.n	8000dec <telnet_thread+0x38>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f006 fccd 	bl	8007814 <netconn_delete>
    }
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	3720      	adds	r7, #32
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <telnet_byte_available>:
static void telnet_byte_available(uint8_t c, struct netconn *conn)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	6039      	str	r1, [r7, #0]
 8000e8e:	71fb      	strb	r3, [r7, #7]
	static uint16_t cnt;
	static char data[CMD_BUFFER_LEN];
	if (cnt < CMD_BUFFER_LEN && c >= 32 && c <= 127) data[cnt++] = c;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <telnet_byte_available+0x64>)
 8000e92:	881b      	ldrh	r3, [r3, #0]
 8000e94:	2bff      	cmp	r3, #255	; 0xff
 8000e96:	d810      	bhi.n	8000eba <telnet_byte_available+0x36>
 8000e98:	79fb      	ldrb	r3, [r7, #7]
 8000e9a:	2b1f      	cmp	r3, #31
 8000e9c:	d90d      	bls.n	8000eba <telnet_byte_available+0x36>
 8000e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db09      	blt.n	8000eba <telnet_byte_available+0x36>
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <telnet_byte_available+0x64>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	b291      	uxth	r1, r2
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <telnet_byte_available+0x64>)
 8000eb0:	8011      	strh	r1, [r2, #0]
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <telnet_byte_available+0x68>)
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	5453      	strb	r3, [r2, r1]
	if (c == '\n' || c == '\r') {
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b0a      	cmp	r3, #10
 8000ebe:	d002      	beq.n	8000ec6 <telnet_byte_available+0x42>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b0d      	cmp	r3, #13
 8000ec4:	d10c      	bne.n	8000ee0 <telnet_byte_available+0x5c>
		data[cnt] = '\0';
 8000ec6:	4b08      	ldr	r3, [pc, #32]	; (8000ee8 <telnet_byte_available+0x64>)
 8000ec8:	881b      	ldrh	r3, [r3, #0]
 8000eca:	461a      	mov	r2, r3
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <telnet_byte_available+0x68>)
 8000ece:	2100      	movs	r1, #0
 8000ed0:	5499      	strb	r1, [r3, r2]
		telnet_process_command(data, conn);
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <telnet_byte_available+0x68>)
 8000ed6:	f000 f80b 	bl	8000ef0 <telnet_process_command>
		cnt = 0;
 8000eda:	4b03      	ldr	r3, [pc, #12]	; (8000ee8 <telnet_byte_available+0x64>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	801a      	strh	r2, [r3, #0]
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	200002f8 	.word	0x200002f8
 8000eec:	200002fc 	.word	0x200002fc

08000ef0 <telnet_process_command>:
static void telnet_process_command(char *cmd, struct netconn *conn){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b096      	sub	sp, #88	; 0x58
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	char s[50];
	char *token;
	char *saveptr1;
	token = strtok_r(cmd, " ", &saveptr1);
 8000efa:	f107 030c 	add.w	r3, r7, #12
 8000efe:	461a      	mov	r2, r3
 8000f00:	4968      	ldr	r1, [pc, #416]	; (80010a4 <telnet_process_command+0x1b4>)
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f016 f870 	bl	8016fe8 <strtok_r>
 8000f08:	64f8      	str	r0, [r7, #76]	; 0x4c
	if(strcasecmp(token, "HELLO") == 0){
 8000f0a:	4967      	ldr	r1, [pc, #412]	; (80010a8 <telnet_process_command+0x1b8>)
 8000f0c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f0e:	f016 f827 	bl	8016f60 <strcasecmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d114      	bne.n	8000f42 <telnet_process_command+0x52>
		sprintf(s, "Communication OK \n");
 8000f18:	f107 0310 	add.w	r3, r7, #16
 8000f1c:	4963      	ldr	r1, [pc, #396]	; (80010ac <telnet_process_command+0x1bc>)
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f015 fffe 	bl	8016f20 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f24:	f107 0310 	add.w	r3, r7, #16
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff f961 	bl	80001f0 <strlen>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f107 0110 	add.w	r1, r7, #16
 8000f34:	2300      	movs	r3, #0
 8000f36:	9300      	str	r3, [sp, #0]
 8000f38:	2301      	movs	r3, #1
 8000f3a:	6838      	ldr	r0, [r7, #0]
 8000f3c:	f006 ff6c 	bl	8007e18 <netconn_write_partly>
		char *led1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)? "ON" : "OFF";
		char *led2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)? "ON" : "OFF";
		sprintf(s,"Led 1 is %s, Led 2 is %s \n", led1, led2);
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
	}
}
 8000f40:	e0ab      	b.n	800109a <telnet_process_command+0x1aa>
	else if(strcasecmp(token, "LED1") == 0){
 8000f42:	495b      	ldr	r1, [pc, #364]	; (80010b0 <telnet_process_command+0x1c0>)
 8000f44:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f46:	f016 f80b 	bl	8016f60 <strcasecmp>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d135      	bne.n	8000fbc <telnet_process_command+0xcc>
		token = strtok_r(NULL, " ", &saveptr1);
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	461a      	mov	r2, r3
 8000f56:	4953      	ldr	r1, [pc, #332]	; (80010a4 <telnet_process_command+0x1b4>)
 8000f58:	2000      	movs	r0, #0
 8000f5a:	f016 f845 	bl	8016fe8 <strtok_r>
 8000f5e:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(strcasecmp(token, "ON") == 0){
 8000f60:	4954      	ldr	r1, [pc, #336]	; (80010b4 <telnet_process_command+0x1c4>)
 8000f62:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f64:	f015 fffc 	bl	8016f60 <strcasecmp>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d105      	bne.n	8000f7a <telnet_process_command+0x8a>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	2101      	movs	r1, #1
 8000f72:	4851      	ldr	r0, [pc, #324]	; (80010b8 <telnet_process_command+0x1c8>)
 8000f74:	f001 fd9c 	bl	8002ab0 <HAL_GPIO_WritePin>
 8000f78:	e00b      	b.n	8000f92 <telnet_process_command+0xa2>
		else if(strcasecmp(token, "OFF") == 0){
 8000f7a:	4950      	ldr	r1, [pc, #320]	; (80010bc <telnet_process_command+0x1cc>)
 8000f7c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000f7e:	f015 ffef 	bl	8016f60 <strcasecmp>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d104      	bne.n	8000f92 <telnet_process_command+0xa2>
			HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, 0);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	484a      	ldr	r0, [pc, #296]	; (80010b8 <telnet_process_command+0x1c8>)
 8000f8e:	f001 fd8f 	bl	8002ab0 <HAL_GPIO_WritePin>
		sprintf(s, "OK \n");
 8000f92:	f107 0310 	add.w	r3, r7, #16
 8000f96:	494a      	ldr	r1, [pc, #296]	; (80010c0 <telnet_process_command+0x1d0>)
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f015 ffc1 	bl	8016f20 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8000f9e:	f107 0310 	add.w	r3, r7, #16
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	f7ff f924 	bl	80001f0 <strlen>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f107 0110 	add.w	r1, r7, #16
 8000fae:	2300      	movs	r3, #0
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f006 ff2f 	bl	8007e18 <netconn_write_partly>
}
 8000fba:	e06e      	b.n	800109a <telnet_process_command+0x1aa>
	else if(strcasecmp(token, "LED2") == 0){
 8000fbc:	4941      	ldr	r1, [pc, #260]	; (80010c4 <telnet_process_command+0x1d4>)
 8000fbe:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fc0:	f015 ffce 	bl	8016f60 <strcasecmp>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d135      	bne.n	8001036 <telnet_process_command+0x146>
		token = strtok_r(NULL, " ", &saveptr1);
 8000fca:	f107 030c 	add.w	r3, r7, #12
 8000fce:	461a      	mov	r2, r3
 8000fd0:	4934      	ldr	r1, [pc, #208]	; (80010a4 <telnet_process_command+0x1b4>)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f016 f808 	bl	8016fe8 <strtok_r>
 8000fd8:	64f8      	str	r0, [r7, #76]	; 0x4c
		if(strcasecmp(token, "ON") == 0){
 8000fda:	4936      	ldr	r1, [pc, #216]	; (80010b4 <telnet_process_command+0x1c4>)
 8000fdc:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000fde:	f015 ffbf 	bl	8016f60 <strcasecmp>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d105      	bne.n	8000ff4 <telnet_process_command+0x104>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 1);
 8000fe8:	2201      	movs	r2, #1
 8000fea:	2180      	movs	r1, #128	; 0x80
 8000fec:	4832      	ldr	r0, [pc, #200]	; (80010b8 <telnet_process_command+0x1c8>)
 8000fee:	f001 fd5f 	bl	8002ab0 <HAL_GPIO_WritePin>
 8000ff2:	e00b      	b.n	800100c <telnet_process_command+0x11c>
		else if(strcasecmp(token, "OFF") == 0){
 8000ff4:	4931      	ldr	r1, [pc, #196]	; (80010bc <telnet_process_command+0x1cc>)
 8000ff6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8000ff8:	f015 ffb2 	bl	8016f60 <strcasecmp>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d104      	bne.n	800100c <telnet_process_command+0x11c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0);
 8001002:	2200      	movs	r2, #0
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	482c      	ldr	r0, [pc, #176]	; (80010b8 <telnet_process_command+0x1c8>)
 8001008:	f001 fd52 	bl	8002ab0 <HAL_GPIO_WritePin>
		sprintf(s, "OK \n");
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	492b      	ldr	r1, [pc, #172]	; (80010c0 <telnet_process_command+0x1d0>)
 8001012:	4618      	mov	r0, r3
 8001014:	f015 ff84 	bl	8016f20 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff f8e7 	bl	80001f0 <strlen>
 8001022:	4602      	mov	r2, r0
 8001024:	f107 0110 	add.w	r1, r7, #16
 8001028:	2300      	movs	r3, #0
 800102a:	9300      	str	r3, [sp, #0]
 800102c:	2301      	movs	r3, #1
 800102e:	6838      	ldr	r0, [r7, #0]
 8001030:	f006 fef2 	bl	8007e18 <netconn_write_partly>
}
 8001034:	e031      	b.n	800109a <telnet_process_command+0x1aa>
	else if(strcasecmp(token, "STATUS") == 0){
 8001036:	4924      	ldr	r1, [pc, #144]	; (80010c8 <telnet_process_command+0x1d8>)
 8001038:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800103a:	f015 ff91 	bl	8016f60 <strcasecmp>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d12a      	bne.n	800109a <telnet_process_command+0x1aa>
		char *led1 = HAL_GPIO_ReadPin(LD1_GPIO_Port, LD1_Pin)? "ON" : "OFF";
 8001044:	2101      	movs	r1, #1
 8001046:	481c      	ldr	r0, [pc, #112]	; (80010b8 <telnet_process_command+0x1c8>)
 8001048:	f001 fd1a 	bl	8002a80 <HAL_GPIO_ReadPin>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <telnet_process_command+0x166>
 8001052:	4b18      	ldr	r3, [pc, #96]	; (80010b4 <telnet_process_command+0x1c4>)
 8001054:	e000      	b.n	8001058 <telnet_process_command+0x168>
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <telnet_process_command+0x1cc>)
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
		char *led2 = HAL_GPIO_ReadPin(LD2_GPIO_Port, LD2_Pin)? "ON" : "OFF";
 800105a:	2180      	movs	r1, #128	; 0x80
 800105c:	4816      	ldr	r0, [pc, #88]	; (80010b8 <telnet_process_command+0x1c8>)
 800105e:	f001 fd0f 	bl	8002a80 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <telnet_process_command+0x17c>
 8001068:	4b12      	ldr	r3, [pc, #72]	; (80010b4 <telnet_process_command+0x1c4>)
 800106a:	e000      	b.n	800106e <telnet_process_command+0x17e>
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <telnet_process_command+0x1cc>)
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
		sprintf(s,"Led 1 is %s, Led 2 is %s \n", led1, led2);
 8001070:	f107 0010 	add.w	r0, r7, #16
 8001074:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001078:	4914      	ldr	r1, [pc, #80]	; (80010cc <telnet_process_command+0x1dc>)
 800107a:	f015 ff51 	bl	8016f20 <siprintf>
		netconn_write(conn, s, strlen(s), NETCONN_COPY);
 800107e:	f107 0310 	add.w	r3, r7, #16
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff f8b4 	bl	80001f0 <strlen>
 8001088:	4602      	mov	r2, r0
 800108a:	f107 0110 	add.w	r1, r7, #16
 800108e:	2300      	movs	r3, #0
 8001090:	9300      	str	r3, [sp, #0]
 8001092:	2301      	movs	r3, #1
 8001094:	6838      	ldr	r0, [r7, #0]
 8001096:	f006 febf 	bl	8007e18 <netconn_write_partly>
}
 800109a:	bf00      	nop
 800109c:	3750      	adds	r7, #80	; 0x50
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	080182d8 	.word	0x080182d8
 80010a8:	080182dc 	.word	0x080182dc
 80010ac:	080182e4 	.word	0x080182e4
 80010b0:	080182f8 	.word	0x080182f8
 80010b4:	08018300 	.word	0x08018300
 80010b8:	40020400 	.word	0x40020400
 80010bc:	08018304 	.word	0x08018304
 80010c0:	08018308 	.word	0x08018308
 80010c4:	08018310 	.word	0x08018310
 80010c8:	08018318 	.word	0x08018318
 80010cc:	08018320 	.word	0x08018320

080010d0 <telnet_init>:
/*-----------------------------------------------------------------------------------*/

void telnet_init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af02      	add	r7, sp, #8
  sys_thread_new("telnet_thread", telnet_thread, NULL, DEFAULT_THREAD_STACKSIZE, TELNET_THREAD_PRIO);
 80010d6:	2304      	movs	r3, #4
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	2200      	movs	r2, #0
 80010e0:	4903      	ldr	r1, [pc, #12]	; (80010f0 <telnet_init+0x20>)
 80010e2:	4804      	ldr	r0, [pc, #16]	; (80010f4 <telnet_init+0x24>)
 80010e4:	f015 fe1e 	bl	8016d24 <sys_thread_new>
}
 80010e8:	bf00      	nop
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08000db5 	.word	0x08000db5
 80010f4:	0801833c 	.word	0x0801833c

080010f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001130 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010fc:	480d      	ldr	r0, [pc, #52]	; (8001134 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fe:	490e      	ldr	r1, [pc, #56]	; (8001138 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001100:	4a0e      	ldr	r2, [pc, #56]	; (800113c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001102:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001104:	e002      	b.n	800110c <LoopCopyDataInit>

08001106 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001106:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001108:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800110a:	3304      	adds	r3, #4

0800110c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800110c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001110:	d3f9      	bcc.n	8001106 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001114:	4c0b      	ldr	r4, [pc, #44]	; (8001144 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001118:	e001      	b.n	800111e <LoopFillZerobss>

0800111a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800111a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800111c:	3204      	adds	r2, #4

0800111e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001120:	d3fb      	bcc.n	800111a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001122:	f7ff fdc1 	bl	8000ca8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001126:	f015 fe41 	bl	8016dac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800112a:	f7ff fa4f 	bl	80005cc <main>
  bx  lr    
 800112e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001130:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001134:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001138:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800113c:	0801c01c 	.word	0x0801c01c
  ldr r2, =_sbss
 8001140:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001144:	2000f094 	.word	0x2000f094

08001148 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001148:	e7fe      	b.n	8001148 <ADC_IRQHandler>
	...

0800114c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001150:	4b0e      	ldr	r3, [pc, #56]	; (800118c <HAL_Init+0x40>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a0d      	ldr	r2, [pc, #52]	; (800118c <HAL_Init+0x40>)
 8001156:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800115a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800115c:	4b0b      	ldr	r3, [pc, #44]	; (800118c <HAL_Init+0x40>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a0a      	ldr	r2, [pc, #40]	; (800118c <HAL_Init+0x40>)
 8001162:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001166:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <HAL_Init+0x40>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a07      	ldr	r2, [pc, #28]	; (800118c <HAL_Init+0x40>)
 800116e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001172:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001174:	2003      	movs	r0, #3
 8001176:	f000 f8fc 	bl	8001372 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800117a:	200f      	movs	r0, #15
 800117c:	f7ff fc46 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001180:	f7ff fbd0 	bl	8000924 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40023c00 	.word	0x40023c00

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	2000878c 	.word	0x2000878c

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000878c 	.word	0x2000878c

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f003 0307 	and.w	r3, r3, #7
 8001226:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800122e:	68ba      	ldr	r2, [r7, #8]
 8001230:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001234:	4013      	ands	r3, r2
 8001236:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001240:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001248:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800124a:	4a04      	ldr	r2, [pc, #16]	; (800125c <__NVIC_SetPriorityGrouping+0x44>)
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	60d3      	str	r3, [r2, #12]
}
 8001250:	bf00      	nop
 8001252:	3714      	adds	r7, #20
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__NVIC_GetPriorityGrouping+0x18>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	0a1b      	lsrs	r3, r3, #8
 800126a:	f003 0307 	and.w	r3, r3, #7
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	4603      	mov	r3, r0
 8001284:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128a:	2b00      	cmp	r3, #0
 800128c:	db0b      	blt.n	80012a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	f003 021f 	and.w	r2, r3, #31
 8001294:	4907      	ldr	r1, [pc, #28]	; (80012b4 <__NVIC_EnableIRQ+0x38>)
 8001296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129a:	095b      	lsrs	r3, r3, #5
 800129c:	2001      	movs	r0, #1
 800129e:	fa00 f202 	lsl.w	r2, r0, r2
 80012a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	e000e100 	.word	0xe000e100

080012b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	6039      	str	r1, [r7, #0]
 80012c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	db0a      	blt.n	80012e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	b2da      	uxtb	r2, r3
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <__NVIC_SetPriority+0x4c>)
 80012d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012d6:	0112      	lsls	r2, r2, #4
 80012d8:	b2d2      	uxtb	r2, r2
 80012da:	440b      	add	r3, r1
 80012dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012e0:	e00a      	b.n	80012f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	b2da      	uxtb	r2, r3
 80012e6:	4908      	ldr	r1, [pc, #32]	; (8001308 <__NVIC_SetPriority+0x50>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	f003 030f 	and.w	r3, r3, #15
 80012ee:	3b04      	subs	r3, #4
 80012f0:	0112      	lsls	r2, r2, #4
 80012f2:	b2d2      	uxtb	r2, r2
 80012f4:	440b      	add	r3, r1
 80012f6:	761a      	strb	r2, [r3, #24]
}
 80012f8:	bf00      	nop
 80012fa:	370c      	adds	r7, #12
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000e100 	.word	0xe000e100
 8001308:	e000ed00 	.word	0xe000ed00

0800130c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800130c:	b480      	push	{r7}
 800130e:	b089      	sub	sp, #36	; 0x24
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	f1c3 0307 	rsb	r3, r3, #7
 8001326:	2b04      	cmp	r3, #4
 8001328:	bf28      	it	cs
 800132a:	2304      	movcs	r3, #4
 800132c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3304      	adds	r3, #4
 8001332:	2b06      	cmp	r3, #6
 8001334:	d902      	bls.n	800133c <NVIC_EncodePriority+0x30>
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	3b03      	subs	r3, #3
 800133a:	e000      	b.n	800133e <NVIC_EncodePriority+0x32>
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001340:	f04f 32ff 	mov.w	r2, #4294967295
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43da      	mvns	r2, r3
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	401a      	ands	r2, r3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001354:	f04f 31ff 	mov.w	r1, #4294967295
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	fa01 f303 	lsl.w	r3, r1, r3
 800135e:	43d9      	mvns	r1, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	4313      	orrs	r3, r2
         );
}
 8001366:	4618      	mov	r0, r3
 8001368:	3724      	adds	r7, #36	; 0x24
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr

08001372 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b082      	sub	sp, #8
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff ff4c 	bl	8001218 <__NVIC_SetPriorityGrouping>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001388:	b580      	push	{r7, lr}
 800138a:	b086      	sub	sp, #24
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001396:	2300      	movs	r3, #0
 8001398:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800139a:	f7ff ff61 	bl	8001260 <__NVIC_GetPriorityGrouping>
 800139e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	6978      	ldr	r0, [r7, #20]
 80013a6:	f7ff ffb1 	bl	800130c <NVIC_EncodePriority>
 80013aa:	4602      	mov	r2, r0
 80013ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b0:	4611      	mov	r1, r2
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff ff80 	bl	80012b8 <__NVIC_SetPriority>
}
 80013b8:	bf00      	nop
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	4603      	mov	r3, r0
 80013c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	4618      	mov	r0, r3
 80013d0:	f7ff ff54 	bl	800127c <__NVIC_EnableIRQ>
}
 80013d4:	bf00      	nop
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	61fb      	str	r3, [r7, #28]
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 80013ec:	4baa      	ldr	r3, [pc, #680]	; (8001698 <HAL_ETH_Init+0x2bc>)
 80013ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 80013f0:	2300      	movs	r3, #0
 80013f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80013f4:	2300      	movs	r3, #0
 80013f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d101      	bne.n	8001402 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e183      	b.n	800170a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d106      	bne.n	800141c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2200      	movs	r2, #0
 8001412:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f002 fd3e 	bl	8003e98 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
 8001420:	4b9e      	ldr	r3, [pc, #632]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001424:	4a9d      	ldr	r2, [pc, #628]	; (800169c <HAL_ETH_Init+0x2c0>)
 8001426:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800142a:	6453      	str	r3, [r2, #68]	; 0x44
 800142c:	4b9b      	ldr	r3, [pc, #620]	; (800169c <HAL_ETH_Init+0x2c0>)
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001438:	4b99      	ldr	r3, [pc, #612]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	4a98      	ldr	r2, [pc, #608]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800143e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001442:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001444:	4b96      	ldr	r3, [pc, #600]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 8001446:	685a      	ldr	r2, [r3, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a1b      	ldr	r3, [r3, #32]
 800144c:	4994      	ldr	r1, [pc, #592]	; (80016a0 <HAL_ETH_Init+0x2c4>)
 800144e:	4313      	orrs	r3, r2
 8001450:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f042 0201 	orr.w	r2, r2, #1
 8001464:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001468:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800146a:	f7ff fea5 	bl	80011b8 <HAL_GetTick>
 800146e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001470:	e011      	b.n	8001496 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001472:	f7ff fea1 	bl	80011b8 <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001480:	d909      	bls.n	8001496 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2203      	movs	r2, #3
 8001486:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e139      	b.n	800170a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d1e4      	bne.n	8001472 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	691b      	ldr	r3, [r3, #16]
 80014ae:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	f023 031c 	bic.w	r3, r3, #28
 80014b6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014b8:	f001 ff54 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80014bc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <HAL_ETH_Init+0x2c8>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d908      	bls.n	80014d8 <HAL_ETH_Init+0xfc>
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d804      	bhi.n	80014d8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f043 0308 	orr.w	r3, r3, #8
 80014d4:	61fb      	str	r3, [r7, #28]
 80014d6:	e027      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	4a73      	ldr	r2, [pc, #460]	; (80016a8 <HAL_ETH_Init+0x2cc>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d908      	bls.n	80014f2 <HAL_ETH_Init+0x116>
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	4a6d      	ldr	r2, [pc, #436]	; (8001698 <HAL_ETH_Init+0x2bc>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d204      	bcs.n	80014f2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80014e8:	69fb      	ldr	r3, [r7, #28]
 80014ea:	f043 030c 	orr.w	r3, r3, #12
 80014ee:	61fb      	str	r3, [r7, #28]
 80014f0:	e01a      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	4a68      	ldr	r2, [pc, #416]	; (8001698 <HAL_ETH_Init+0x2bc>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d303      	bcc.n	8001502 <HAL_ETH_Init+0x126>
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	4a6b      	ldr	r2, [pc, #428]	; (80016ac <HAL_ETH_Init+0x2d0>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d911      	bls.n	8001526 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	4a69      	ldr	r2, [pc, #420]	; (80016ac <HAL_ETH_Init+0x2d0>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d908      	bls.n	800151c <HAL_ETH_Init+0x140>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	4a68      	ldr	r2, [pc, #416]	; (80016b0 <HAL_ETH_Init+0x2d4>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d804      	bhi.n	800151c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	61fb      	str	r3, [r7, #28]
 800151a:	e005      	b.n	8001528 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	f043 0310 	orr.w	r3, r3, #16
 8001522:	61fb      	str	r3, [r7, #28]
 8001524:	e000      	b.n	8001528 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001526:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	69fa      	ldr	r2, [r7, #28]
 800152e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001530:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001534:	2100      	movs	r1, #0
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	f000 fc17 	bl	8001d6a <HAL_ETH_WritePHYRegister>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d00b      	beq.n	800155a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001542:	2301      	movs	r3, #1
 8001544:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001546:	6939      	ldr	r1, [r7, #16]
 8001548:	6878      	ldr	r0, [r7, #4]
 800154a:	f000 fdcd 	bl	80020e8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e0d7      	b.n	800170a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800155a:	20ff      	movs	r0, #255	; 0xff
 800155c:	f7ff fe38 	bl	80011d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	f000 80a5 	beq.w	80016b4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800156a:	f7ff fe25 	bl	80011b8 <HAL_GetTick>
 800156e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	461a      	mov	r2, r3
 8001576:	2101      	movs	r1, #1
 8001578:	6878      	ldr	r0, [r7, #4]
 800157a:	f000 fb8e 	bl	8001c9a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800157e:	f7ff fe1b 	bl	80011b8 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d90f      	bls.n	80015b0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001590:	2301      	movs	r3, #1
 8001592:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001594:	6939      	ldr	r1, [r7, #16]
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f000 fda6 	bl	80020e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2201      	movs	r2, #1
 80015a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e0ac      	b.n	800170a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d0da      	beq.n	8001570 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80015ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015be:	2100      	movs	r1, #0
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f000 fbd2 	bl	8001d6a <HAL_ETH_WritePHYRegister>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00b      	beq.n	80015e4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015d0:	6939      	ldr	r1, [r7, #16]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 fd88 	bl	80020e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015e0:	2301      	movs	r3, #1
 80015e2:	e092      	b.n	800170a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80015e4:	f7ff fde8 	bl	80011b8 <HAL_GetTick>
 80015e8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80015ea:	f107 030c 	add.w	r3, r7, #12
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f000 fb51 	bl	8001c9a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80015f8:	f7ff fdde 	bl	80011b8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	f241 3288 	movw	r2, #5000	; 0x1388
 8001606:	4293      	cmp	r3, r2
 8001608:	d90f      	bls.n	800162a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	6878      	ldr	r0, [r7, #4]
 8001612:	f000 fd69 	bl	80020e8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e06f      	b.n	800170a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f003 0320 	and.w	r3, r3, #32
 8001630:	2b00      	cmp	r3, #0
 8001632:	d0da      	beq.n	80015ea <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	461a      	mov	r2, r3
 800163a:	2110      	movs	r1, #16
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fb2c 	bl	8001c9a <HAL_ETH_ReadPHYRegister>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fd4a 	bl	80020e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800165c:	2301      	movs	r3, #1
 800165e:	e054      	b.n	800170a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 0304 	and.w	r3, r3, #4
 8001666:	2b00      	cmp	r3, #0
 8001668:	d004      	beq.n	8001674 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001670:	60da      	str	r2, [r3, #12]
 8001672:	e002      	b.n	800167a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	e035      	b.n	80016f8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001692:	609a      	str	r2, [r3, #8]
 8001694:	e030      	b.n	80016f8 <HAL_ETH_Init+0x31c>
 8001696:	bf00      	nop
 8001698:	03938700 	.word	0x03938700
 800169c:	40023800 	.word	0x40023800
 80016a0:	40013800 	.word	0x40013800
 80016a4:	01312cff 	.word	0x01312cff
 80016a8:	02160ebf 	.word	0x02160ebf
 80016ac:	05f5e0ff 	.word	0x05f5e0ff
 80016b0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	085b      	lsrs	r3, r3, #1
 80016c2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80016c4:	4313      	orrs	r3, r2
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	461a      	mov	r2, r3
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f000 fb4c 	bl	8001d6a <HAL_ETH_WritePHYRegister>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d00b      	beq.n	80016f0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80016dc:	6939      	ldr	r1, [r7, #16]
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 fd02 	bl	80020e8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2201      	movs	r2, #1
 80016e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e00c      	b.n	800170a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80016f0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80016f4:	f7ff fd6c 	bl	80011d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80016f8:	6939      	ldr	r1, [r7, #16]
 80016fa:	6878      	ldr	r0, [r7, #4]
 80016fc:	f000 fcf4 	bl	80020e8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3720      	adds	r7, #32
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop

08001714 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001714:	b480      	push	{r7}
 8001716:	b087      	sub	sp, #28
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800172c:	2b01      	cmp	r3, #1
 800172e:	d101      	bne.n	8001734 <HAL_ETH_DMATxDescListInit+0x20>
 8001730:	2302      	movs	r3, #2
 8001732:	e052      	b.n	80017da <HAL_ETH_DMATxDescListInit+0xc6>
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2201      	movs	r2, #1
 8001738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2202      	movs	r2, #2
 8001740:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	68ba      	ldr	r2, [r7, #8]
 8001748:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
 800174e:	e030      	b.n	80017b2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	015b      	lsls	r3, r3, #5
 8001754:	68ba      	ldr	r2, [r7, #8]
 8001756:	4413      	add	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001760:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001768:	fb02 f303 	mul.w	r3, r2, r3
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	4413      	add	r3, r2
 8001770:	461a      	mov	r2, r3
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	69db      	ldr	r3, [r3, #28]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d105      	bne.n	800178a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	3b01      	subs	r3, #1
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	429a      	cmp	r2, r3
 8001792:	d208      	bcs.n	80017a6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	3301      	adds	r3, #1
 8001798:	015b      	lsls	r3, r3, #5
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	4413      	add	r3, r2
 800179e:	461a      	mov	r2, r3
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	60da      	str	r2, [r3, #12]
 80017a4:	e002      	b.n	80017ac <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d3ca      	bcc.n	8001750 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	68ba      	ldr	r2, [r7, #8]
 80017c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c4:	3310      	adds	r3, #16
 80017c6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	2201      	movs	r2, #1
 80017cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2200      	movs	r2, #0
 80017d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80017d8:	2300      	movs	r3, #0
}
 80017da:	4618      	mov	r0, r3
 80017dc:	371c      	adds	r7, #28
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr

080017e6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b087      	sub	sp, #28
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	60f8      	str	r0, [r7, #12]
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d101      	bne.n	8001806 <HAL_ETH_DMARxDescListInit+0x20>
 8001802:	2302      	movs	r3, #2
 8001804:	e056      	b.n	80018b4 <HAL_ETH_DMARxDescListInit+0xce>
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	2201      	movs	r2, #1
 800180a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	2202      	movs	r2, #2
 8001812:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	68ba      	ldr	r2, [r7, #8]
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800181c:	2300      	movs	r3, #0
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e034      	b.n	800188c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	015b      	lsls	r3, r3, #5
 8001826:	68ba      	ldr	r2, [r7, #8]
 8001828:	4413      	add	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001832:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001834:	693b      	ldr	r3, [r7, #16]
 8001836:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800183a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001842:	fb02 f303 	mul.w	r3, r2, r3
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	4413      	add	r3, r2
 800184a:	461a      	mov	r2, r3
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	2b01      	cmp	r3, #1
 8001856:	d105      	bne.n	8001864 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	3b01      	subs	r3, #1
 8001868:	697a      	ldr	r2, [r7, #20]
 800186a:	429a      	cmp	r2, r3
 800186c:	d208      	bcs.n	8001880 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	3301      	adds	r3, #1
 8001872:	015b      	lsls	r3, r3, #5
 8001874:	68ba      	ldr	r2, [r7, #8]
 8001876:	4413      	add	r3, r2
 8001878:	461a      	mov	r2, r3
 800187a:	693b      	ldr	r3, [r7, #16]
 800187c:	60da      	str	r2, [r3, #12]
 800187e:	e002      	b.n	8001886 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	3301      	adds	r3, #1
 800188a:	617b      	str	r3, [r7, #20]
 800188c:	697a      	ldr	r2, [r7, #20]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	429a      	cmp	r2, r3
 8001892:	d3c6      	bcc.n	8001822 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800189e:	330c      	adds	r3, #12
 80018a0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	371c      	adds	r7, #28
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b087      	sub	sp, #28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	2300      	movs	r3, #0
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d101      	bne.n	80018e4 <HAL_ETH_TransmitFrame+0x24>
 80018e0:	2302      	movs	r3, #2
 80018e2:	e0cd      	b.n	8001a80 <HAL_ETH_TransmitFrame+0x1c0>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	2201      	movs	r2, #1
 80018e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2202      	movs	r2, #2
 80018f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d109      	bne.n	800190e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800190a:	2301      	movs	r3, #1
 800190c:	e0b8      	b.n	8001a80 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	da09      	bge.n	800192c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2212      	movs	r2, #18
 800191c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e0a9      	b.n	8001a80 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001932:	4293      	cmp	r3, r2
 8001934:	d915      	bls.n	8001962 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	4a54      	ldr	r2, [pc, #336]	; (8001a8c <HAL_ETH_TransmitFrame+0x1cc>)
 800193a:	fba2 2303 	umull	r2, r3, r2, r3
 800193e:	0a9b      	lsrs	r3, r3, #10
 8001940:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	4b51      	ldr	r3, [pc, #324]	; (8001a8c <HAL_ETH_TransmitFrame+0x1cc>)
 8001946:	fba3 1302 	umull	r1, r3, r3, r2
 800194a:	0a9b      	lsrs	r3, r3, #10
 800194c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001950:	fb01 f303 	mul.w	r3, r1, r3
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	2b00      	cmp	r3, #0
 8001958:	d005      	beq.n	8001966 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	3301      	adds	r3, #1
 800195e:	617b      	str	r3, [r7, #20]
 8001960:	e001      	b.n	8001966 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8001962:	2301      	movs	r3, #1
 8001964:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d11c      	bne.n	80019a6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001976:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800197a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001980:	683a      	ldr	r2, [r7, #0]
 8001982:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001986:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001996:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	461a      	mov	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80019a4:	e04b      	b.n	8001a3e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	e044      	b.n	8001a36 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019b6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019ba:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d107      	bne.n	80019d2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80019d0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80019da:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	3b01      	subs	r3, #1
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d116      	bne.n	8001a14 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80019f4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <HAL_ETH_TransmitFrame+0x1d0>)
 80019fa:	fb02 f203 	mul.w	r2, r2, r3
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	4413      	add	r3, r2
 8001a02:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001a06:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001a12:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001a22:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	3301      	adds	r3, #1
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d3b6      	bcc.n	80019ac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a46:	3314      	adds	r3, #20
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00d      	beq.n	8001a6e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a5a:	3314      	adds	r3, #20
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a68:	3304      	adds	r3, #4
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2201      	movs	r2, #1
 8001a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001a7e:	2300      	movs	r3, #0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	371c      	adds	r7, #28
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	ac02b00b 	.word	0xac02b00b
 8001a90:	fffffa0c 	.word	0xfffffa0c

08001a94 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d101      	bne.n	8001aae <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001aaa:	2302      	movs	r3, #2
 8001aac:	e074      	b.n	8001b98 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2202      	movs	r2, #2
 8001aba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001abe:	e05a      	b.n	8001b76 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad4:	d10d      	bne.n	8001af2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	629a      	str	r2, [r3, #40]	; 0x28
 8001af0:	e041      	b.n	8001b76 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d10b      	bne.n	8001b18 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b04:	1c5a      	adds	r2, r3, #1
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	; 0x28
 8001b16:	e02e      	b.n	8001b76 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b24:	1c5a      	adds	r2, r3, #1
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d103      	bne.n	8001b3a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	0c1b      	lsrs	r3, r3, #16
 8001b42:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001b46:	1f1a      	subs	r2, r3, #4
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5a:	68db      	ldr	r3, [r3, #12]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2201      	movs	r2, #1
 8001b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001b72:	2300      	movs	r3, #0
 8001b74:	e010      	b.n	8001b98 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	db02      	blt.n	8001b86 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d99c      	bls.n	8001ac0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2201      	movs	r2, #1
 8001b8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb4:	3314      	adds	r3, #20
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bbc:	2b40      	cmp	r3, #64	; 0x40
 8001bbe:	d112      	bne.n	8001be6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f002 fa37 	bl	8004034 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	3314      	adds	r3, #20
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001be4:	e01b      	b.n	8001c1e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bee:	3314      	adds	r3, #20
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0301 	and.w	r3, r3, #1
 8001bf6:	2b01      	cmp	r3, #1
 8001bf8:	d111      	bne.n	8001c1e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f839 	bl	8001c72 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c08:	3314      	adds	r3, #20
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c26:	3314      	adds	r3, #20
 8001c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c2c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c36:	3314      	adds	r3, #20
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c42:	d112      	bne.n	8001c6a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f000 f81e 	bl	8001c86 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c52:	3314      	adds	r3, #20
 8001c54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c58:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001c6a:	bf00      	nop
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}

08001c72 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001c72:	b480      	push	{r7}
 8001c74:	b083      	sub	sp, #12
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001ca8:	2300      	movs	r3, #0
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b82      	cmp	r3, #130	; 0x82
 8001cba:	d101      	bne.n	8001cc0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e050      	b.n	8001d62 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2282      	movs	r2, #130	; 0x82
 8001cc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	691b      	ldr	r3, [r3, #16]
 8001cce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f003 031c 	and.w	r3, r3, #28
 8001cd6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	8a1b      	ldrh	r3, [r3, #16]
 8001cdc:	02db      	lsls	r3, r3, #11
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	697a      	ldr	r2, [r7, #20]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ce6:	897b      	ldrh	r3, [r7, #10]
 8001ce8:	019b      	lsls	r3, r3, #6
 8001cea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	f023 0302 	bic.w	r3, r3, #2
 8001cfa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	697a      	ldr	r2, [r7, #20]
 8001d0a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff fa54 	bl	80011b8 <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d12:	e015      	b.n	8001d40 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001d14:	f7ff fa50 	bl	80011b8 <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d22:	d309      	bcc.n	8001d38 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e014      	b.n	8001d62 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1e4      	bne.n	8001d14 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	461a      	mov	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	460b      	mov	r3, r1
 8001d74:	607a      	str	r2, [r7, #4]
 8001d76:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b42      	cmp	r3, #66	; 0x42
 8001d8a:	d101      	bne.n	8001d90 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	e04e      	b.n	8001e2e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2242      	movs	r2, #66	; 0x42
 8001d94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	f003 031c 	and.w	r3, r3, #28
 8001da6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	8a1b      	ldrh	r3, [r3, #16]
 8001dac:	02db      	lsls	r3, r3, #11
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001db6:	897b      	ldrh	r3, [r7, #10]
 8001db8:	019b      	lsls	r3, r3, #6
 8001dba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	f043 0302 	orr.w	r3, r3, #2
 8001dca:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	697a      	ldr	r2, [r7, #20]
 8001de4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001de6:	f7ff f9e7 	bl	80011b8 <HAL_GetTick>
 8001dea:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001dec:	e015      	b.n	8001e1a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001dee:	f7ff f9e3 	bl	80011b8 <HAL_GetTick>
 8001df2:	4602      	mov	r2, r0
 8001df4:	693b      	ldr	r3, [r7, #16]
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dfc:	d309      	bcc.n	8001e12 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2201      	movs	r2, #1
 8001e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e00d      	b.n	8001e2e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691b      	ldr	r3, [r3, #16]
 8001e18:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1e4      	bne.n	8001dee <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2201      	movs	r2, #1
 8001e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b082      	sub	sp, #8
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d101      	bne.n	8001e4c <HAL_ETH_Start+0x16>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e01f      	b.n	8001e8c <HAL_ETH_Start+0x56>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f000 fb45 	bl	80024ec <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 fb7c 	bl	8002560 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 fc13 	bl	8002694 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f000 fbb0 	bl	80025d4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f000 fbdd 	bl	8002634 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001e8a:	2300      	movs	r3, #0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d101      	bne.n	8001eaa <HAL_ETH_Stop+0x16>
 8001ea6:	2302      	movs	r3, #2
 8001ea8:	e01f      	b.n	8001eea <HAL_ETH_Stop+0x56>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2202      	movs	r2, #2
 8001eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f000 fba2 	bl	8002604 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 fbcf 	bl	8002664 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 fb67 	bl	800259a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fbe1 	bl	8002694 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 fb27 	bl	8002526 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3708      	adds	r7, #8
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8001efe:	2300      	movs	r3, #0
 8001f00:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_ETH_ConfigMAC+0x1c>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e0e4      	b.n	80020da <HAL_ETH_ConfigMAC+0x1e6>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2202      	movs	r2, #2
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	f000 80b1 	beq.w	800208a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4b6c      	ldr	r3, [pc, #432]	; (80020e4 <HAL_ETH_ConfigMAC+0x1f0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f40:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8001f46:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8001f4c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8001f52:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8001f58:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8001f5e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8001f64:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8001f6a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8001f70:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8001f76:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8001f7c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8001f82:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8001f84:	68fa      	ldr	r2, [r7, #12]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	68fa      	ldr	r2, [r7, #12]
 8001f90:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f9a:	2001      	movs	r0, #1
 8001f9c:	f7ff f918 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fb0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8001fb6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8001fbc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8001fc2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8001fc8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8001fce:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8001fda:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8001fdc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe6:	2001      	movs	r0, #1
 8001fe8:	f7ff f8f2 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001ffc:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002006:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002016:	4013      	ands	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8002024:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800202a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8002030:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8002036:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800203c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800203e:	68fa      	ldr	r2, [r7, #12]
 8002040:	4313      	orrs	r3, r2
 8002042:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002054:	2001      	movs	r0, #1
 8002056:	f7ff f8bb 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68fa      	ldr	r2, [r7, #12]
 8002060:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 800207a:	2001      	movs	r0, #1
 800207c:	f7ff f8a8 	bl	80011d0 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	61da      	str	r2, [r3, #28]
 8002088:	e01e      	b.n	80020c8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002098:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	68fa      	ldr	r2, [r7, #12]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68fa      	ldr	r2, [r7, #12]
 80020b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ba:	2001      	movs	r0, #1
 80020bc:	f7ff f888 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68fa      	ldr	r2, [r7, #12]
 80020c6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	ff20810f 	.word	0xff20810f

080020e8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b0b0      	sub	sp, #192	; 0xc0
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002104:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800210c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800210e:	2300      	movs	r3, #0
 8002110:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002112:	2300      	movs	r3, #0
 8002114:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002116:	2300      	movs	r3, #0
 8002118:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800211a:	2300      	movs	r3, #0
 800211c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002122:	2300      	movs	r3, #0
 8002124:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d103      	bne.n	8002136 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800212e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002132:	663b      	str	r3, [r7, #96]	; 0x60
 8002134:	e001      	b.n	800213a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002136:	2300      	movs	r3, #0
 8002138:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800213a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800213e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002140:	2300      	movs	r3, #0
 8002142:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002144:	2300      	movs	r3, #0
 8002146:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002148:	2300      	movs	r3, #0
 800214a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800214c:	2300      	movs	r3, #0
 800214e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002150:	2300      	movs	r3, #0
 8002152:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002154:	2340      	movs	r3, #64	; 0x40
 8002156:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002158:	2300      	movs	r3, #0
 800215a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800215e:	2300      	movs	r3, #0
 8002160:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002164:	2300      	movs	r3, #0
 8002166:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800216a:	2300      	movs	r3, #0
 800216c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8002170:	2300      	movs	r3, #0
 8002172:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8002176:	2300      	movs	r3, #0
 8002178:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800217c:	2300      	movs	r3, #0
 800217e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8002182:	2300      	movs	r3, #0
 8002184:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002188:	2380      	movs	r3, #128	; 0x80
 800218a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800218e:	2300      	movs	r3, #0
 8002190:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002194:	2300      	movs	r3, #0
 8002196:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80021a6:	2300      	movs	r3, #0
 80021a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80021bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80021c0:	4bac      	ldr	r3, [pc, #688]	; (8002474 <ETH_MACDMAConfig+0x38c>)
 80021c2:	4013      	ands	r3, r2
 80021c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80021ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021cc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80021ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80021d0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80021d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80021d4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80021da:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80021dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80021de:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80021e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80021e2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80021e8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80021ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80021ec:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80021ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80021f0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80021f2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80021f4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80021f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80021f8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80021fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80021fc:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80021fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002210:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800221c:	2001      	movs	r0, #1
 800221e:	f7fe ffd7 	bl	80011d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800222a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800222c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800222e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002230:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002232:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002234:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002236:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800223a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800223c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002240:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002242:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002246:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002248:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800224c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002250:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002258:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800225a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f7fe ffb2 	bl	80011d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002274:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800227e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002288:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002294:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002298:	f64f 7341 	movw	r3, #65345	; 0xff41
 800229c:	4013      	ands	r3, r2
 800229e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80022a6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80022a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022ac:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80022ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80022b2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80022b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80022b8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80022ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80022be:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80022c0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80022c4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80022c6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022ca:	4313      	orrs	r3, r2
 80022cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022d8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80022e4:	2001      	movs	r0, #1
 80022e6:	f7fe ff73 	bl	80011d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80022f2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022f4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80022f8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800230e:	2001      	movs	r0, #1
 8002310:	f7fe ff5e 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800231c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002326:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800232c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002330:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002332:	2300      	movs	r3, #0
 8002334:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800233a:	2300      	movs	r3, #0
 800233c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800233e:	2300      	movs	r3, #0
 8002340:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002342:	2304      	movs	r3, #4
 8002344:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002346:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800234a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800234c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002350:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002352:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002356:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002358:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800235c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800235e:	2380      	movs	r3, #128	; 0x80
 8002360:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002362:	2300      	movs	r3, #0
 8002364:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002366:	2300      	movs	r3, #0
 8002368:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002372:	3318      	adds	r3, #24
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800237a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800237e:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <ETH_MACDMAConfig+0x390>)
 8002380:	4013      	ands	r3, r2
 8002382:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002386:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002388:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800238a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800238c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800238e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002390:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002392:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002394:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002396:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002398:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800239a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800239c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800239e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80023a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80023a2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80023a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80023a6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80023a8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ba:	3318      	adds	r3, #24
 80023bc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023ca:	3318      	adds	r3, #24
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f7fe fefc 	bl	80011d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80023e0:	3318      	adds	r3, #24
 80023e2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80023e6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80023ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80023ec:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80023f0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80023f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80023f4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80023f8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80023fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023fc:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80023fe:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002402:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800240c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002410:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002420:	2001      	movs	r0, #1
 8002422:	f7fe fed5 	bl	80011d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800242e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002432:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d10f      	bne.n	800245c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002444:	331c      	adds	r3, #28
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002458:	331c      	adds	r3, #28
 800245a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	695b      	ldr	r3, [r3, #20]
 8002460:	461a      	mov	r2, r3
 8002462:	2100      	movs	r1, #0
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f809 	bl	800247c <ETH_MACAddressConfig>
}
 800246a:	bf00      	nop
 800246c:	37c0      	adds	r7, #192	; 0xc0
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	ff20810f 	.word	0xff20810f
 8002478:	f8de3f23 	.word	0xf8de3f23

0800247c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800247c:	b480      	push	{r7}
 800247e:	b087      	sub	sp, #28
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3305      	adds	r3, #5
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	021b      	lsls	r3, r3, #8
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	3204      	adds	r2, #4
 8002494:	7812      	ldrb	r2, [r2, #0]
 8002496:	4313      	orrs	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4b11      	ldr	r3, [pc, #68]	; (80024e4 <ETH_MACAddressConfig+0x68>)
 800249e:	4413      	add	r3, r2
 80024a0:	461a      	mov	r2, r3
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	3303      	adds	r3, #3
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	061a      	lsls	r2, r3, #24
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3302      	adds	r3, #2
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	041b      	lsls	r3, r3, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3301      	adds	r3, #1
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	021b      	lsls	r3, r3, #8
 80024c0:	4313      	orrs	r3, r2
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	7812      	ldrb	r2, [r2, #0]
 80024c6:	4313      	orrs	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80024ca:	68ba      	ldr	r2, [r7, #8]
 80024cc:	4b06      	ldr	r3, [pc, #24]	; (80024e8 <ETH_MACAddressConfig+0x6c>)
 80024ce:	4413      	add	r3, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	6013      	str	r3, [r2, #0]
}
 80024d6:	bf00      	nop
 80024d8:	371c      	adds	r7, #28
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40028040 	.word	0x40028040
 80024e8:	40028044 	.word	0x40028044

080024ec <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0208 	orr.w	r2, r2, #8
 8002506:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002510:	2001      	movs	r0, #1
 8002512:	f000 f8e9 	bl	80026e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68fa      	ldr	r2, [r7, #12]
 800251c:	601a      	str	r2, [r3, #0]
}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0208 	bic.w	r2, r2, #8
 8002540:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800254a:	2001      	movs	r0, #1
 800254c:	f000 f8cc 	bl	80026e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	68fa      	ldr	r2, [r7, #12]
 8002556:	601a      	str	r2, [r3, #0]
}
 8002558:	bf00      	nop
 800255a:	3710      	adds	r7, #16
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}

08002560 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0204 	orr.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002584:	2001      	movs	r0, #1
 8002586:	f000 f8af 	bl	80026e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3710      	adds	r7, #16
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 800259a:	b580      	push	{r7, lr}
 800259c:	b084      	sub	sp, #16
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0204 	bic.w	r2, r2, #4
 80025b4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80025be:	2001      	movs	r0, #1
 80025c0:	f000 f892 	bl	80026e8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	601a      	str	r2, [r3, #0]
}
 80025cc:	bf00      	nop
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e4:	3318      	adds	r3, #24
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025f4:	3318      	adds	r3, #24
 80025f6:	601a      	str	r2, [r3, #0]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002614:	3318      	adds	r3, #24
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002624:	3318      	adds	r3, #24
 8002626:	601a      	str	r2, [r3, #0]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002644:	3318      	adds	r3, #24
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0202 	orr.w	r2, r2, #2
 8002650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002654:	3318      	adds	r3, #24
 8002656:	601a      	str	r2, [r3, #0]
}
 8002658:	bf00      	nop
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	3318      	adds	r3, #24
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 0202 	bic.w	r2, r2, #2
 8002680:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002684:	3318      	adds	r3, #24
 8002686:	601a      	str	r2, [r3, #0]
}
 8002688:	bf00      	nop
 800268a:	370c      	adds	r7, #12
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800269c:	2300      	movs	r3, #0
 800269e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026a8:	3318      	adds	r3, #24
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80026b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026b8:	3318      	adds	r3, #24
 80026ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026c4:	3318      	adds	r3, #24
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80026ca:	2001      	movs	r0, #1
 80026cc:	f000 f80c 	bl	80026e8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68fa      	ldr	r2, [r7, #12]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026da:	3318      	adds	r3, #24
 80026dc:	601a      	str	r2, [r3, #0]
}
 80026de:	bf00      	nop
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b085      	sub	sp, #20
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80026f0:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <ETH_Delay+0x38>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a0b      	ldr	r2, [pc, #44]	; (8002724 <ETH_Delay+0x3c>)
 80026f6:	fba2 2303 	umull	r2, r3, r2, r3
 80026fa:	0a5b      	lsrs	r3, r3, #9
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	fb02 f303 	mul.w	r3, r2, r3
 8002702:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002704:	bf00      	nop
  } 
  while (Delay --);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	1e5a      	subs	r2, r3, #1
 800270a:	60fa      	str	r2, [r7, #12]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f9      	bne.n	8002704 <ETH_Delay+0x1c>
}
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	3714      	adds	r7, #20
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000000 	.word	0x20000000
 8002724:	10624dd3 	.word	0x10624dd3

08002728 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800273a:	2300      	movs	r3, #0
 800273c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800273e:	2300      	movs	r3, #0
 8002740:	61fb      	str	r3, [r7, #28]
 8002742:	e177      	b.n	8002a34 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002744:	2201      	movs	r2, #1
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4013      	ands	r3, r2
 8002756:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002758:	693a      	ldr	r2, [r7, #16]
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	429a      	cmp	r2, r3
 800275e:	f040 8166 	bne.w	8002a2e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	2b01      	cmp	r3, #1
 800276c:	d005      	beq.n	800277a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002776:	2b02      	cmp	r3, #2
 8002778:	d130      	bne.n	80027dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	2203      	movs	r2, #3
 8002786:	fa02 f303 	lsl.w	r3, r2, r3
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68da      	ldr	r2, [r3, #12]
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	fa02 f303 	lsl.w	r3, r2, r3
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	43db      	mvns	r3, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4013      	ands	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	091b      	lsrs	r3, r3, #4
 80027c6:	f003 0201 	and.w	r2, r3, #1
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	d017      	beq.n	8002818 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f003 0303 	and.w	r3, r3, #3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d123      	bne.n	800286c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	08da      	lsrs	r2, r3, #3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3208      	adds	r2, #8
 800282c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002830:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	220f      	movs	r2, #15
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43db      	mvns	r3, r3
 8002842:	69ba      	ldr	r2, [r7, #24]
 8002844:	4013      	ands	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691a      	ldr	r2, [r3, #16]
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	fa02 f303 	lsl.w	r3, r2, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	08da      	lsrs	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	3208      	adds	r2, #8
 8002866:	69b9      	ldr	r1, [r7, #24]
 8002868:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	2203      	movs	r2, #3
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	43db      	mvns	r3, r3
 800287e:	69ba      	ldr	r2, [r7, #24]
 8002880:	4013      	ands	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	69ba      	ldr	r2, [r7, #24]
 800289e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	f000 80c0 	beq.w	8002a2e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
 80028b2:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b6:	4a65      	ldr	r2, [pc, #404]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028bc:	6453      	str	r3, [r2, #68]	; 0x44
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_GPIO_Init+0x324>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028ca:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_GPIO_Init+0x328>)
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	089b      	lsrs	r3, r3, #2
 80028d0:	3302      	adds	r3, #2
 80028d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	220f      	movs	r2, #15
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	43db      	mvns	r3, r3
 80028e8:	69ba      	ldr	r2, [r7, #24]
 80028ea:	4013      	ands	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a58      	ldr	r2, [pc, #352]	; (8002a54 <HAL_GPIO_Init+0x32c>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d037      	beq.n	8002966 <HAL_GPIO_Init+0x23e>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a57      	ldr	r2, [pc, #348]	; (8002a58 <HAL_GPIO_Init+0x330>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d031      	beq.n	8002962 <HAL_GPIO_Init+0x23a>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a56      	ldr	r2, [pc, #344]	; (8002a5c <HAL_GPIO_Init+0x334>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x236>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a55      	ldr	r2, [pc, #340]	; (8002a60 <HAL_GPIO_Init+0x338>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x232>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a54      	ldr	r2, [pc, #336]	; (8002a64 <HAL_GPIO_Init+0x33c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x22e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a53      	ldr	r2, [pc, #332]	; (8002a68 <HAL_GPIO_Init+0x340>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x22a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a52      	ldr	r2, [pc, #328]	; (8002a6c <HAL_GPIO_Init+0x344>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x226>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a51      	ldr	r2, [pc, #324]	; (8002a70 <HAL_GPIO_Init+0x348>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x222>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a50      	ldr	r2, [pc, #320]	; (8002a74 <HAL_GPIO_Init+0x34c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x21e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4f      	ldr	r2, [pc, #316]	; (8002a78 <HAL_GPIO_Init+0x350>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x21a>
 800293e:	2309      	movs	r3, #9
 8002940:	e012      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002942:	230a      	movs	r3, #10
 8002944:	e010      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002946:	2308      	movs	r3, #8
 8002948:	e00e      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294a:	2307      	movs	r3, #7
 800294c:	e00c      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800294e:	2306      	movs	r3, #6
 8002950:	e00a      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002952:	2305      	movs	r3, #5
 8002954:	e008      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002956:	2304      	movs	r3, #4
 8002958:	e006      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295a:	2303      	movs	r3, #3
 800295c:	e004      	b.n	8002968 <HAL_GPIO_Init+0x240>
 800295e:	2302      	movs	r3, #2
 8002960:	e002      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002962:	2301      	movs	r3, #1
 8002964:	e000      	b.n	8002968 <HAL_GPIO_Init+0x240>
 8002966:	2300      	movs	r3, #0
 8002968:	69fa      	ldr	r2, [r7, #28]
 800296a:	f002 0203 	and.w	r2, r2, #3
 800296e:	0092      	lsls	r2, r2, #2
 8002970:	4093      	lsls	r3, r2
 8002972:	69ba      	ldr	r2, [r7, #24]
 8002974:	4313      	orrs	r3, r2
 8002976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002978:	4935      	ldr	r1, [pc, #212]	; (8002a50 <HAL_GPIO_Init+0x328>)
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	089b      	lsrs	r3, r3, #2
 800297e:	3302      	adds	r3, #2
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002986:	4b3d      	ldr	r3, [pc, #244]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	43db      	mvns	r3, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4013      	ands	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029a2:	69ba      	ldr	r2, [r7, #24]
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029aa:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029b0:	4b32      	ldr	r3, [pc, #200]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	43db      	mvns	r3, r3
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	4013      	ands	r3, r2
 80029be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d003      	beq.n	80029d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029d4:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_GPIO_Init+0x354>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a1f      	ldr	r2, [pc, #124]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a14      	ldr	r2, [pc, #80]	; (8002a7c <HAL_GPIO_Init+0x354>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	3301      	adds	r3, #1
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b0f      	cmp	r3, #15
 8002a38:	f67f ae84 	bls.w	8002744 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	bf00      	nop
 8002a40:	3724      	adds	r7, #36	; 0x24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40013800 	.word	0x40013800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40020400 	.word	0x40020400
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	40020c00 	.word	0x40020c00
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40021400 	.word	0x40021400
 8002a6c:	40021800 	.word	0x40021800
 8002a70:	40021c00 	.word	0x40021c00
 8002a74:	40022000 	.word	0x40022000
 8002a78:	40022400 	.word	0x40022400
 8002a7c:	40013c00 	.word	0x40013c00

08002a80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	460b      	mov	r3, r1
 8002a8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	691a      	ldr	r2, [r3, #16]
 8002a90:	887b      	ldrh	r3, [r7, #2]
 8002a92:	4013      	ands	r3, r2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d002      	beq.n	8002a9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	73fb      	strb	r3, [r7, #15]
 8002a9c:	e001      	b.n	8002aa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	460b      	mov	r3, r1
 8002aba:	807b      	strh	r3, [r7, #2]
 8002abc:	4613      	mov	r3, r2
 8002abe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ac0:	787b      	ldrb	r3, [r7, #1]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ac6:	887a      	ldrh	r2, [r7, #2]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002acc:	e003      	b.n	8002ad6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ace:	887b      	ldrh	r3, [r7, #2]
 8002ad0:	041a      	lsls	r2, r3, #16
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	619a      	str	r2, [r3, #24]
}
 8002ad6:	bf00      	nop
 8002ad8:	370c      	adds	r7, #12
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
	...

08002ae4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e264      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d075      	beq.n	8002bee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b02:	4ba3      	ldr	r3, [pc, #652]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b04      	cmp	r3, #4
 8002b0c:	d00c      	beq.n	8002b28 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0e:	4ba0      	ldr	r3, [pc, #640]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d112      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1a:	4b9d      	ldr	r3, [pc, #628]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b26:	d10b      	bne.n	8002b40 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b28:	4b99      	ldr	r3, [pc, #612]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d05b      	beq.n	8002bec <HAL_RCC_OscConfig+0x108>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d157      	bne.n	8002bec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e23f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	685b      	ldr	r3, [r3, #4]
 8002b44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b48:	d106      	bne.n	8002b58 <HAL_RCC_OscConfig+0x74>
 8002b4a:	4b91      	ldr	r3, [pc, #580]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a90      	ldr	r2, [pc, #576]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b54:	6013      	str	r3, [r2, #0]
 8002b56:	e01d      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b60:	d10c      	bne.n	8002b7c <HAL_RCC_OscConfig+0x98>
 8002b62:	4b8b      	ldr	r3, [pc, #556]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a8a      	ldr	r2, [pc, #552]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b6c:	6013      	str	r3, [r2, #0]
 8002b6e:	4b88      	ldr	r3, [pc, #544]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a87      	ldr	r2, [pc, #540]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	6013      	str	r3, [r2, #0]
 8002b7a:	e00b      	b.n	8002b94 <HAL_RCC_OscConfig+0xb0>
 8002b7c:	4b84      	ldr	r3, [pc, #528]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a83      	ldr	r2, [pc, #524]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b86:	6013      	str	r3, [r2, #0]
 8002b88:	4b81      	ldr	r3, [pc, #516]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a80      	ldr	r2, [pc, #512]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d013      	beq.n	8002bc4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fe fb0c 	bl	80011b8 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ba4:	f7fe fb08 	bl	80011b8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b64      	cmp	r3, #100	; 0x64
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e204      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	4b76      	ldr	r3, [pc, #472]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xc0>
 8002bc2:	e014      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc4:	f7fe faf8 	bl	80011b8 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bcc:	f7fe faf4 	bl	80011b8 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b64      	cmp	r3, #100	; 0x64
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e1f0      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0xe8>
 8002bea:	e000      	b.n	8002bee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0302 	and.w	r3, r3, #2
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d063      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002bfa:	4b65      	ldr	r3, [pc, #404]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00b      	beq.n	8002c1e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c06:	4b62      	ldr	r3, [pc, #392]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c0e:	2b08      	cmp	r3, #8
 8002c10:	d11c      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c12:	4b5f      	ldr	r3, [pc, #380]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d116      	bne.n	8002c4c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c1e:	4b5c      	ldr	r3, [pc, #368]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d001      	beq.n	8002c36 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e1c4      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c36:	4b56      	ldr	r3, [pc, #344]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	00db      	lsls	r3, r3, #3
 8002c44:	4952      	ldr	r1, [pc, #328]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4a:	e03a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d020      	beq.n	8002c96 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c54:	4b4f      	ldr	r3, [pc, #316]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c56:	2201      	movs	r2, #1
 8002c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5a:	f7fe faad 	bl	80011b8 <HAL_GetTick>
 8002c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c60:	e008      	b.n	8002c74 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002c62:	f7fe faa9 	bl	80011b8 <HAL_GetTick>
 8002c66:	4602      	mov	r2, r0
 8002c68:	693b      	ldr	r3, [r7, #16]
 8002c6a:	1ad3      	subs	r3, r2, r3
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d901      	bls.n	8002c74 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e1a5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	4b46      	ldr	r3, [pc, #280]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0302 	and.w	r3, r3, #2
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d0f0      	beq.n	8002c62 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c80:	4b43      	ldr	r3, [pc, #268]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	00db      	lsls	r3, r3, #3
 8002c8e:	4940      	ldr	r1, [pc, #256]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	4313      	orrs	r3, r2
 8002c92:	600b      	str	r3, [r1, #0]
 8002c94:	e015      	b.n	8002cc2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c96:	4b3f      	ldr	r3, [pc, #252]	; (8002d94 <HAL_RCC_OscConfig+0x2b0>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fa8c 	bl	80011b8 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca2:	e008      	b.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca4:	f7fe fa88 	bl	80011b8 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b02      	cmp	r3, #2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e184      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	4b36      	ldr	r3, [pc, #216]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1f0      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d030      	beq.n	8002d30 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d016      	beq.n	8002d04 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cd6:	4b30      	ldr	r3, [pc, #192]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002cd8:	2201      	movs	r2, #1
 8002cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cdc:	f7fe fa6c 	bl	80011b8 <HAL_GetTick>
 8002ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce2:	e008      	b.n	8002cf6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ce4:	f7fe fa68 	bl	80011b8 <HAL_GetTick>
 8002ce8:	4602      	mov	r2, r0
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d901      	bls.n	8002cf6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	e164      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d0f0      	beq.n	8002ce4 <HAL_RCC_OscConfig+0x200>
 8002d02:	e015      	b.n	8002d30 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d04:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_OscConfig+0x2b4>)
 8002d06:	2200      	movs	r2, #0
 8002d08:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fa55 	bl	80011b8 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe fa51 	bl	80011b8 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e14d      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d24:	4b1a      	ldr	r3, [pc, #104]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d1f0      	bne.n	8002d12 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0304 	and.w	r3, r3, #4
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	f000 80a0 	beq.w	8002e7e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d42:	4b13      	ldr	r3, [pc, #76]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d10f      	bne.n	8002d6e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4e:	2300      	movs	r3, #0
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	4b0f      	ldr	r3, [pc, #60]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d5e:	4b0c      	ldr	r3, [pc, #48]	; (8002d90 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d66:	60bb      	str	r3, [r7, #8]
 8002d68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6e:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a07      	ldr	r2, [pc, #28]	; (8002d9c <HAL_RCC_OscConfig+0x2b8>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d86:	f7fe fa17 	bl	80011b8 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d8c:	e011      	b.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	42470000 	.word	0x42470000
 8002d98:	42470e80 	.word	0x42470e80
 8002d9c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002da0:	f7fe fa0a 	bl	80011b8 <HAL_GetTick>
 8002da4:	4602      	mov	r2, r0
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1ad3      	subs	r3, r2, r3
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d901      	bls.n	8002db2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002dae:	2303      	movs	r3, #3
 8002db0:	e106      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db2:	4b85      	ldr	r3, [pc, #532]	; (8002fc8 <HAL_RCC_OscConfig+0x4e4>)
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f0      	beq.n	8002da0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d106      	bne.n	8002dd4 <HAL_RCC_OscConfig+0x2f0>
 8002dc6:	4b81      	ldr	r3, [pc, #516]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dca:	4a80      	ldr	r2, [pc, #512]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dcc:	f043 0301 	orr.w	r3, r3, #1
 8002dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002dd2:	e01c      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	2b05      	cmp	r3, #5
 8002dda:	d10c      	bne.n	8002df6 <HAL_RCC_OscConfig+0x312>
 8002ddc:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de0:	4a7a      	ldr	r2, [pc, #488]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002de2:	f043 0304 	orr.w	r3, r3, #4
 8002de6:	6713      	str	r3, [r2, #112]	; 0x70
 8002de8:	4b78      	ldr	r3, [pc, #480]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dec:	4a77      	ldr	r2, [pc, #476]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6713      	str	r3, [r2, #112]	; 0x70
 8002df4:	e00b      	b.n	8002e0e <HAL_RCC_OscConfig+0x32a>
 8002df6:	4b75      	ldr	r3, [pc, #468]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfa:	4a74      	ldr	r2, [pc, #464]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002dfc:	f023 0301 	bic.w	r3, r3, #1
 8002e00:	6713      	str	r3, [r2, #112]	; 0x70
 8002e02:	4b72      	ldr	r3, [pc, #456]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e06:	4a71      	ldr	r2, [pc, #452]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d015      	beq.n	8002e42 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e16:	f7fe f9cf 	bl	80011b8 <HAL_GetTick>
 8002e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1c:	e00a      	b.n	8002e34 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e1e:	f7fe f9cb 	bl	80011b8 <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e0c5      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e34:	4b65      	ldr	r3, [pc, #404]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0ee      	beq.n	8002e1e <HAL_RCC_OscConfig+0x33a>
 8002e40:	e014      	b.n	8002e6c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e42:	f7fe f9b9 	bl	80011b8 <HAL_GetTick>
 8002e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e4a:	f7fe f9b5 	bl	80011b8 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0af      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e60:	4b5a      	ldr	r3, [pc, #360]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e64:	f003 0302 	and.w	r3, r3, #2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1ee      	bne.n	8002e4a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e72:	4b56      	ldr	r3, [pc, #344]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e76:	4a55      	ldr	r2, [pc, #340]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e78:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	f000 809b 	beq.w	8002fbe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e88:	4b50      	ldr	r3, [pc, #320]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 030c 	and.w	r3, r3, #12
 8002e90:	2b08      	cmp	r3, #8
 8002e92:	d05c      	beq.n	8002f4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d141      	bne.n	8002f20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9c:	4b4c      	ldr	r3, [pc, #304]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea2:	f7fe f989 	bl	80011b8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002eaa:	f7fe f985 	bl	80011b8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e081      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ebc:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1f0      	bne.n	8002eaa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69da      	ldr	r2, [r3, #28]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	019b      	lsls	r3, r3, #6
 8002ed8:	431a      	orrs	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ede:	085b      	lsrs	r3, r3, #1
 8002ee0:	3b01      	subs	r3, #1
 8002ee2:	041b      	lsls	r3, r3, #16
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
 8002eec:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef2:	4b37      	ldr	r3, [pc, #220]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe f95e 	bl	80011b8 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f00:	f7fe f95a 	bl	80011b8 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e056      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f12:	4b2e      	ldr	r3, [pc, #184]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0f0      	beq.n	8002f00 <HAL_RCC_OscConfig+0x41c>
 8002f1e:	e04e      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f20:	4b2b      	ldr	r3, [pc, #172]	; (8002fd0 <HAL_RCC_OscConfig+0x4ec>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe f947 	bl	80011b8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f2e:	f7fe f943 	bl	80011b8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e03f      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f40:	4b22      	ldr	r3, [pc, #136]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1f0      	bne.n	8002f2e <HAL_RCC_OscConfig+0x44a>
 8002f4c:	e037      	b.n	8002fbe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e032      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f5a:	4b1c      	ldr	r3, [pc, #112]	; (8002fcc <HAL_RCC_OscConfig+0x4e8>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d028      	beq.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d121      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d11a      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002f90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d111      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa0:	085b      	lsrs	r3, r3, #1
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fb4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d001      	beq.n	8002fbe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e000      	b.n	8002fc0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	40007000 	.word	0x40007000
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	42470060 	.word	0x42470060

08002fd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0cc      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fe8:	4b68      	ldr	r3, [pc, #416]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 030f 	and.w	r3, r3, #15
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d90c      	bls.n	8003010 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ff6:	4b65      	ldr	r3, [pc, #404]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	b2d2      	uxtb	r2, r2
 8002ffc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffe:	4b63      	ldr	r3, [pc, #396]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e0b8      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d020      	beq.n	800305e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003028:	4b59      	ldr	r3, [pc, #356]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	4a58      	ldr	r2, [pc, #352]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003032:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003040:	4b53      	ldr	r3, [pc, #332]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800304a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800304c:	4b50      	ldr	r3, [pc, #320]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689b      	ldr	r3, [r3, #8]
 8003058:	494d      	ldr	r1, [pc, #308]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800305a:	4313      	orrs	r3, r2
 800305c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d044      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d107      	bne.n	8003082 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003072:	4b47      	ldr	r3, [pc, #284]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d119      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e07f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	2b02      	cmp	r3, #2
 8003088:	d003      	beq.n	8003092 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800308e:	2b03      	cmp	r3, #3
 8003090:	d107      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003092:	4b3f      	ldr	r3, [pc, #252]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d109      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e06f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a2:	4b3b      	ldr	r3, [pc, #236]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e067      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b2:	4b37      	ldr	r3, [pc, #220]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	f023 0203 	bic.w	r2, r3, #3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	4934      	ldr	r1, [pc, #208]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030c0:	4313      	orrs	r3, r2
 80030c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c4:	f7fe f878 	bl	80011b8 <HAL_GetTick>
 80030c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ca:	e00a      	b.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030cc:	f7fe f874 	bl	80011b8 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030da:	4293      	cmp	r3, r2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e04f      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 020c 	and.w	r2, r3, #12
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d1eb      	bne.n	80030cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030f4:	4b25      	ldr	r3, [pc, #148]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d20c      	bcs.n	800311c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003102:	4b22      	ldr	r3, [pc, #136]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 8003104:	683a      	ldr	r2, [r7, #0]
 8003106:	b2d2      	uxtb	r2, r2
 8003108:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800310a:	4b20      	ldr	r3, [pc, #128]	; (800318c <HAL_RCC_ClockConfig+0x1b8>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	683a      	ldr	r2, [r7, #0]
 8003114:	429a      	cmp	r2, r3
 8003116:	d001      	beq.n	800311c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e032      	b.n	8003182 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d008      	beq.n	800313a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003128:	4b19      	ldr	r3, [pc, #100]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4916      	ldr	r1, [pc, #88]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003136:	4313      	orrs	r3, r2
 8003138:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d009      	beq.n	800315a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003146:	4b12      	ldr	r3, [pc, #72]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	490e      	ldr	r1, [pc, #56]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	4313      	orrs	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800315a:	f000 f821 	bl	80031a0 <HAL_RCC_GetSysClockFreq>
 800315e:	4602      	mov	r2, r0
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x1bc>)
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	091b      	lsrs	r3, r3, #4
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	490a      	ldr	r1, [pc, #40]	; (8003194 <HAL_RCC_ClockConfig+0x1c0>)
 800316c:	5ccb      	ldrb	r3, [r1, r3]
 800316e:	fa22 f303 	lsr.w	r3, r2, r3
 8003172:	4a09      	ldr	r2, [pc, #36]	; (8003198 <HAL_RCC_ClockConfig+0x1c4>)
 8003174:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003176:	4b09      	ldr	r3, [pc, #36]	; (800319c <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4618      	mov	r0, r3
 800317c:	f7fd fc46 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 8003180:	2300      	movs	r3, #0
}
 8003182:	4618      	mov	r0, r3
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40023c00 	.word	0x40023c00
 8003190:	40023800 	.word	0x40023800
 8003194:	0801bc60 	.word	0x0801bc60
 8003198:	20000000 	.word	0x20000000
 800319c:	20000004 	.word	0x20000004

080031a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80031a4:	b084      	sub	sp, #16
 80031a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80031a8:	2300      	movs	r3, #0
 80031aa:	607b      	str	r3, [r7, #4]
 80031ac:	2300      	movs	r3, #0
 80031ae:	60fb      	str	r3, [r7, #12]
 80031b0:	2300      	movs	r3, #0
 80031b2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031b8:	4b67      	ldr	r3, [pc, #412]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 030c 	and.w	r3, r3, #12
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d00d      	beq.n	80031e0 <HAL_RCC_GetSysClockFreq+0x40>
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	f200 80bd 	bhi.w	8003344 <HAL_RCC_GetSysClockFreq+0x1a4>
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_RCC_GetSysClockFreq+0x34>
 80031ce:	2b04      	cmp	r3, #4
 80031d0:	d003      	beq.n	80031da <HAL_RCC_GetSysClockFreq+0x3a>
 80031d2:	e0b7      	b.n	8003344 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d4:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80031d6:	60bb      	str	r3, [r7, #8]
       break;
 80031d8:	e0b7      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031da:	4b61      	ldr	r3, [pc, #388]	; (8003360 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80031dc:	60bb      	str	r3, [r7, #8]
      break;
 80031de:	e0b4      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e0:	4b5d      	ldr	r3, [pc, #372]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031e8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04d      	beq.n	8003292 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031f6:	4b58      	ldr	r3, [pc, #352]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	461a      	mov	r2, r3
 80031fe:	f04f 0300 	mov.w	r3, #0
 8003202:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003206:	f04f 0100 	mov.w	r1, #0
 800320a:	ea02 0800 	and.w	r8, r2, r0
 800320e:	ea03 0901 	and.w	r9, r3, r1
 8003212:	4640      	mov	r0, r8
 8003214:	4649      	mov	r1, r9
 8003216:	f04f 0200 	mov.w	r2, #0
 800321a:	f04f 0300 	mov.w	r3, #0
 800321e:	014b      	lsls	r3, r1, #5
 8003220:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003224:	0142      	lsls	r2, r0, #5
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	ebb0 0008 	subs.w	r0, r0, r8
 800322e:	eb61 0109 	sbc.w	r1, r1, r9
 8003232:	f04f 0200 	mov.w	r2, #0
 8003236:	f04f 0300 	mov.w	r3, #0
 800323a:	018b      	lsls	r3, r1, #6
 800323c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003240:	0182      	lsls	r2, r0, #6
 8003242:	1a12      	subs	r2, r2, r0
 8003244:	eb63 0301 	sbc.w	r3, r3, r1
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	f04f 0100 	mov.w	r1, #0
 8003250:	00d9      	lsls	r1, r3, #3
 8003252:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003256:	00d0      	lsls	r0, r2, #3
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	eb12 0208 	adds.w	r2, r2, r8
 8003260:	eb43 0309 	adc.w	r3, r3, r9
 8003264:	f04f 0000 	mov.w	r0, #0
 8003268:	f04f 0100 	mov.w	r1, #0
 800326c:	0259      	lsls	r1, r3, #9
 800326e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003272:	0250      	lsls	r0, r2, #9
 8003274:	4602      	mov	r2, r0
 8003276:	460b      	mov	r3, r1
 8003278:	4610      	mov	r0, r2
 800327a:	4619      	mov	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	461a      	mov	r2, r3
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	f7fd f80c 	bl	80002a0 <__aeabi_uldivmod>
 8003288:	4602      	mov	r2, r0
 800328a:	460b      	mov	r3, r1
 800328c:	4613      	mov	r3, r2
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	e04a      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003292:	4b31      	ldr	r3, [pc, #196]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	099b      	lsrs	r3, r3, #6
 8003298:	461a      	mov	r2, r3
 800329a:	f04f 0300 	mov.w	r3, #0
 800329e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032a2:	f04f 0100 	mov.w	r1, #0
 80032a6:	ea02 0400 	and.w	r4, r2, r0
 80032aa:	ea03 0501 	and.w	r5, r3, r1
 80032ae:	4620      	mov	r0, r4
 80032b0:	4629      	mov	r1, r5
 80032b2:	f04f 0200 	mov.w	r2, #0
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	014b      	lsls	r3, r1, #5
 80032bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032c0:	0142      	lsls	r2, r0, #5
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	1b00      	subs	r0, r0, r4
 80032c8:	eb61 0105 	sbc.w	r1, r1, r5
 80032cc:	f04f 0200 	mov.w	r2, #0
 80032d0:	f04f 0300 	mov.w	r3, #0
 80032d4:	018b      	lsls	r3, r1, #6
 80032d6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80032da:	0182      	lsls	r2, r0, #6
 80032dc:	1a12      	subs	r2, r2, r0
 80032de:	eb63 0301 	sbc.w	r3, r3, r1
 80032e2:	f04f 0000 	mov.w	r0, #0
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	00d9      	lsls	r1, r3, #3
 80032ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80032f0:	00d0      	lsls	r0, r2, #3
 80032f2:	4602      	mov	r2, r0
 80032f4:	460b      	mov	r3, r1
 80032f6:	1912      	adds	r2, r2, r4
 80032f8:	eb45 0303 	adc.w	r3, r5, r3
 80032fc:	f04f 0000 	mov.w	r0, #0
 8003300:	f04f 0100 	mov.w	r1, #0
 8003304:	0299      	lsls	r1, r3, #10
 8003306:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800330a:	0290      	lsls	r0, r2, #10
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4610      	mov	r0, r2
 8003312:	4619      	mov	r1, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	461a      	mov	r2, r3
 8003318:	f04f 0300 	mov.w	r3, #0
 800331c:	f7fc ffc0 	bl	80002a0 <__aeabi_uldivmod>
 8003320:	4602      	mov	r2, r0
 8003322:	460b      	mov	r3, r1
 8003324:	4613      	mov	r3, r2
 8003326:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003328:	4b0b      	ldr	r3, [pc, #44]	; (8003358 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003338:	68fa      	ldr	r2, [r7, #12]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003340:	60bb      	str	r3, [r7, #8]
      break;
 8003342:	e002      	b.n	800334a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003344:	4b05      	ldr	r3, [pc, #20]	; (800335c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003346:	60bb      	str	r3, [r7, #8]
      break;
 8003348:	bf00      	nop
    }
  }
  return sysclockfreq;
 800334a:	68bb      	ldr	r3, [r7, #8]
}
 800334c:	4618      	mov	r0, r3
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <HAL_RCC_GetHCLKFreq+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000000 	.word	0x20000000

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003380:	f7ff fff0 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b05      	ldr	r3, [pc, #20]	; (800339c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0a9b      	lsrs	r3, r3, #10
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4903      	ldr	r1, [pc, #12]	; (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003398:	4618      	mov	r0, r3
 800339a:	bd80      	pop	{r7, pc}
 800339c:	40023800 	.word	0x40023800
 80033a0:	0801bc70 	.word	0x0801bc70

080033a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80033a8:	f7ff ffdc 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	4b05      	ldr	r3, [pc, #20]	; (80033c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	0b5b      	lsrs	r3, r3, #13
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	4903      	ldr	r1, [pc, #12]	; (80033c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80033ba:	5ccb      	ldrb	r3, [r1, r3]
 80033bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40023800 	.word	0x40023800
 80033c8:	0801bc70 	.word	0x0801bc70

080033cc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	220f      	movs	r2, #15
 80033da:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80033dc:	4b12      	ldr	r3, [pc, #72]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 0203 	and.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <HAL_RCC_GetClockConfig+0x5c>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	08db      	lsrs	r3, r3, #3
 8003406:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800340e:	4b07      	ldr	r3, [pc, #28]	; (800342c <HAL_RCC_GetClockConfig+0x60>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 020f 	and.w	r2, r3, #15
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	601a      	str	r2, [r3, #0]
}
 800341a:	bf00      	nop
 800341c:	370c      	adds	r7, #12
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	40023800 	.word	0x40023800
 800342c:	40023c00 	.word	0x40023c00

08003430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e041      	b.n	80034c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 f839 	bl	80034ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	4619      	mov	r1, r3
 800346e:	4610      	mov	r0, r2
 8003470:	f000 f9d8 	bl	8003824 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80034ce:	b480      	push	{r7}
 80034d0:	b083      	sub	sp, #12
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80034d6:	bf00      	nop
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
	...

080034e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b085      	sub	sp, #20
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d001      	beq.n	80034fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e04e      	b.n	800359a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2202      	movs	r2, #2
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f042 0201 	orr.w	r2, r2, #1
 8003512:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a23      	ldr	r2, [pc, #140]	; (80035a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d022      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003526:	d01d      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a1f      	ldr	r2, [pc, #124]	; (80035ac <HAL_TIM_Base_Start_IT+0xc8>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d018      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a1e      	ldr	r2, [pc, #120]	; (80035b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d013      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a1c      	ldr	r2, [pc, #112]	; (80035b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00e      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a1b      	ldr	r2, [pc, #108]	; (80035b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d009      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a19      	ldr	r2, [pc, #100]	; (80035bc <HAL_TIM_Base_Start_IT+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d004      	beq.n	8003564 <HAL_TIM_Base_Start_IT+0x80>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a18      	ldr	r2, [pc, #96]	; (80035c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d111      	bne.n	8003588 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 0307 	and.w	r3, r3, #7
 800356e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2b06      	cmp	r3, #6
 8003574:	d010      	beq.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003586:	e007      	b.n	8003598 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3714      	adds	r7, #20
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr
 80035a6:	bf00      	nop
 80035a8:	40010000 	.word	0x40010000
 80035ac:	40000400 	.word	0x40000400
 80035b0:	40000800 	.word	0x40000800
 80035b4:	40000c00 	.word	0x40000c00
 80035b8:	40010400 	.word	0x40010400
 80035bc:	40014000 	.word	0x40014000
 80035c0:	40001800 	.word	0x40001800

080035c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b082      	sub	sp, #8
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	691b      	ldr	r3, [r3, #16]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d122      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68db      	ldr	r3, [r3, #12]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f06f 0202 	mvn.w	r2, #2
 80035f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	699b      	ldr	r3, [r3, #24]
 80035fe:	f003 0303 	and.w	r3, r3, #3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d003      	beq.n	800360e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f000 f8ee 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 800360c:	e005      	b.n	800361a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f000 f8e0 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f000 f8f1 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d122      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	f003 0304 	and.w	r3, r3, #4
 8003638:	2b04      	cmp	r3, #4
 800363a:	d11b      	bne.n	8003674 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f06f 0204 	mvn.w	r2, #4
 8003644:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2202      	movs	r2, #2
 800364a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 f8c4 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 8003660:	e005      	b.n	800366e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 f8b6 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003668:	6878      	ldr	r0, [r7, #4]
 800366a:	f000 f8c7 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f003 0308 	and.w	r3, r3, #8
 800367e:	2b08      	cmp	r3, #8
 8003680:	d122      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f003 0308 	and.w	r3, r3, #8
 800368c:	2b08      	cmp	r3, #8
 800368e:	d11b      	bne.n	80036c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f06f 0208 	mvn.w	r2, #8
 8003698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2204      	movs	r2, #4
 800369e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f003 0303 	and.w	r3, r3, #3
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	f000 f89a 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 80036b4:	e005      	b.n	80036c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f88c 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 f89d 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	f003 0310 	and.w	r3, r3, #16
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d122      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68db      	ldr	r3, [r3, #12]
 80036dc:	f003 0310 	and.w	r3, r3, #16
 80036e0:	2b10      	cmp	r3, #16
 80036e2:	d11b      	bne.n	800371c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0210 	mvn.w	r2, #16
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2208      	movs	r2, #8
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f870 	bl	80037e8 <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f862 	bl	80037d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f873 	bl	80037fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b01      	cmp	r3, #1
 8003728:	d10e      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d107      	bne.n	8003748 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0201 	mvn.w	r2, #1
 8003740:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7fd f8d6 	bl	80008f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003752:	2b80      	cmp	r3, #128	; 0x80
 8003754:	d10e      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b80      	cmp	r3, #128	; 0x80
 8003762:	d107      	bne.n	8003774 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800376c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f902 	bl	8003978 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800377e:	2b40      	cmp	r3, #64	; 0x40
 8003780:	d10e      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68db      	ldr	r3, [r3, #12]
 8003788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800378c:	2b40      	cmp	r3, #64	; 0x40
 800378e:	d107      	bne.n	80037a0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f838 	bl	8003810 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	f003 0320 	and.w	r3, r3, #32
 80037b8:	2b20      	cmp	r3, #32
 80037ba:	d107      	bne.n	80037cc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f06f 0220 	mvn.w	r2, #32
 80037c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 f8cc 	bl	8003964 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80037cc:	bf00      	nop
 80037ce:	3708      	adds	r7, #8
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr

080037e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80037f0:	bf00      	nop
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr

080037fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr

08003810 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003824:	b480      	push	{r7}
 8003826:	b085      	sub	sp, #20
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	4a40      	ldr	r2, [pc, #256]	; (8003938 <TIM_Base_SetConfig+0x114>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d013      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003842:	d00f      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a3d      	ldr	r2, [pc, #244]	; (800393c <TIM_Base_SetConfig+0x118>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d00b      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a3c      	ldr	r2, [pc, #240]	; (8003940 <TIM_Base_SetConfig+0x11c>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d007      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a3b      	ldr	r2, [pc, #236]	; (8003944 <TIM_Base_SetConfig+0x120>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <TIM_Base_SetConfig+0x40>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a3a      	ldr	r2, [pc, #232]	; (8003948 <TIM_Base_SetConfig+0x124>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d108      	bne.n	8003876 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800386a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	68fa      	ldr	r2, [r7, #12]
 8003872:	4313      	orrs	r3, r2
 8003874:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a2f      	ldr	r2, [pc, #188]	; (8003938 <TIM_Base_SetConfig+0x114>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d02b      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003884:	d027      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a2c      	ldr	r2, [pc, #176]	; (800393c <TIM_Base_SetConfig+0x118>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d023      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <TIM_Base_SetConfig+0x11c>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d01f      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a2a      	ldr	r2, [pc, #168]	; (8003944 <TIM_Base_SetConfig+0x120>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01b      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a29      	ldr	r2, [pc, #164]	; (8003948 <TIM_Base_SetConfig+0x124>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d017      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a28      	ldr	r2, [pc, #160]	; (800394c <TIM_Base_SetConfig+0x128>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d013      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a27      	ldr	r2, [pc, #156]	; (8003950 <TIM_Base_SetConfig+0x12c>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d00f      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <TIM_Base_SetConfig+0x130>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d00b      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a25      	ldr	r2, [pc, #148]	; (8003958 <TIM_Base_SetConfig+0x134>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d007      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a24      	ldr	r2, [pc, #144]	; (800395c <TIM_Base_SetConfig+0x138>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d003      	beq.n	80038d6 <TIM_Base_SetConfig+0xb2>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a23      	ldr	r2, [pc, #140]	; (8003960 <TIM_Base_SetConfig+0x13c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689a      	ldr	r2, [r3, #8]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <TIM_Base_SetConfig+0x114>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d003      	beq.n	800391c <TIM_Base_SetConfig+0xf8>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	4a0c      	ldr	r2, [pc, #48]	; (8003948 <TIM_Base_SetConfig+0x124>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d103      	bne.n	8003924 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	691a      	ldr	r2, [r3, #16]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	615a      	str	r2, [r3, #20]
}
 800392a:	bf00      	nop
 800392c:	3714      	adds	r7, #20
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40010400 	.word	0x40010400
 800394c:	40014000 	.word	0x40014000
 8003950:	40014400 	.word	0x40014400
 8003954:	40014800 	.word	0x40014800
 8003958:	40001800 	.word	0x40001800
 800395c:	40001c00 	.word	0x40001c00
 8003960:	40002000 	.word	0x40002000

08003964 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e03f      	b.n	8003a1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d106      	bne.n	80039b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2200      	movs	r2, #0
 80039ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f7fc ffe2 	bl	800097c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2224      	movs	r2, #36	; 0x24
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 f829 	bl	8003a28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	695a      	ldr	r2, [r3, #20]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80039f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a2c:	b09f      	sub	sp, #124	; 0x7c
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	691b      	ldr	r3, [r3, #16]
 8003a38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a3e:	68d9      	ldr	r1, [r3, #12]
 8003a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	ea40 0301 	orr.w	r3, r0, r1
 8003a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	431a      	orrs	r2, r3
 8003a54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a56:	695b      	ldr	r3, [r3, #20]
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a5c:	69db      	ldr	r3, [r3, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a6c:	f021 010c 	bic.w	r1, r1, #12
 8003a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a76:	430b      	orrs	r3, r1
 8003a78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003a84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a86:	6999      	ldr	r1, [r3, #24]
 8003a88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	ea40 0301 	orr.w	r3, r0, r1
 8003a90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4bc5      	ldr	r3, [pc, #788]	; (8003dac <UART_SetConfig+0x384>)
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d004      	beq.n	8003aa6 <UART_SetConfig+0x7e>
 8003a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	4bc3      	ldr	r3, [pc, #780]	; (8003db0 <UART_SetConfig+0x388>)
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d103      	bne.n	8003aae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003aa6:	f7ff fc7d 	bl	80033a4 <HAL_RCC_GetPCLK2Freq>
 8003aaa:	6778      	str	r0, [r7, #116]	; 0x74
 8003aac:	e002      	b.n	8003ab4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aae:	f7ff fc65 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 8003ab2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab6:	69db      	ldr	r3, [r3, #28]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abc:	f040 80b6 	bne.w	8003c2c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac2:	461c      	mov	r4, r3
 8003ac4:	f04f 0500 	mov.w	r5, #0
 8003ac8:	4622      	mov	r2, r4
 8003aca:	462b      	mov	r3, r5
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	6439      	str	r1, [r7, #64]	; 0x40
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ad4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ad8:	1912      	adds	r2, r2, r4
 8003ada:	eb45 0303 	adc.w	r3, r5, r3
 8003ade:	f04f 0000 	mov.w	r0, #0
 8003ae2:	f04f 0100 	mov.w	r1, #0
 8003ae6:	00d9      	lsls	r1, r3, #3
 8003ae8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003aec:	00d0      	lsls	r0, r2, #3
 8003aee:	4602      	mov	r2, r0
 8003af0:	460b      	mov	r3, r1
 8003af2:	1911      	adds	r1, r2, r4
 8003af4:	6639      	str	r1, [r7, #96]	; 0x60
 8003af6:	416b      	adcs	r3, r5
 8003af8:	667b      	str	r3, [r7, #100]	; 0x64
 8003afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	461a      	mov	r2, r3
 8003b00:	f04f 0300 	mov.w	r3, #0
 8003b04:	1891      	adds	r1, r2, r2
 8003b06:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b08:	415b      	adcs	r3, r3
 8003b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b0c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b10:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003b14:	f7fc fbc4 	bl	80002a0 <__aeabi_uldivmod>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4ba5      	ldr	r3, [pc, #660]	; (8003db4 <UART_SetConfig+0x38c>)
 8003b1e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b22:	095b      	lsrs	r3, r3, #5
 8003b24:	011e      	lsls	r6, r3, #4
 8003b26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b28:	461c      	mov	r4, r3
 8003b2a:	f04f 0500 	mov.w	r5, #0
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	1891      	adds	r1, r2, r2
 8003b34:	6339      	str	r1, [r7, #48]	; 0x30
 8003b36:	415b      	adcs	r3, r3
 8003b38:	637b      	str	r3, [r7, #52]	; 0x34
 8003b3a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003b3e:	1912      	adds	r2, r2, r4
 8003b40:	eb45 0303 	adc.w	r3, r5, r3
 8003b44:	f04f 0000 	mov.w	r0, #0
 8003b48:	f04f 0100 	mov.w	r1, #0
 8003b4c:	00d9      	lsls	r1, r3, #3
 8003b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b52:	00d0      	lsls	r0, r2, #3
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	1911      	adds	r1, r2, r4
 8003b5a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b5c:	416b      	adcs	r3, r5
 8003b5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b62:	685b      	ldr	r3, [r3, #4]
 8003b64:	461a      	mov	r2, r3
 8003b66:	f04f 0300 	mov.w	r3, #0
 8003b6a:	1891      	adds	r1, r2, r2
 8003b6c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b6e:	415b      	adcs	r3, r3
 8003b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b72:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b76:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003b7a:	f7fc fb91 	bl	80002a0 <__aeabi_uldivmod>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	460b      	mov	r3, r1
 8003b82:	4b8c      	ldr	r3, [pc, #560]	; (8003db4 <UART_SetConfig+0x38c>)
 8003b84:	fba3 1302 	umull	r1, r3, r3, r2
 8003b88:	095b      	lsrs	r3, r3, #5
 8003b8a:	2164      	movs	r1, #100	; 0x64
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	3332      	adds	r3, #50	; 0x32
 8003b96:	4a87      	ldr	r2, [pc, #540]	; (8003db4 <UART_SetConfig+0x38c>)
 8003b98:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ba4:	441e      	add	r6, r3
 8003ba6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f04f 0100 	mov.w	r1, #0
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	1894      	adds	r4, r2, r2
 8003bb4:	623c      	str	r4, [r7, #32]
 8003bb6:	415b      	adcs	r3, r3
 8003bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003bbe:	1812      	adds	r2, r2, r0
 8003bc0:	eb41 0303 	adc.w	r3, r1, r3
 8003bc4:	f04f 0400 	mov.w	r4, #0
 8003bc8:	f04f 0500 	mov.w	r5, #0
 8003bcc:	00dd      	lsls	r5, r3, #3
 8003bce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003bd2:	00d4      	lsls	r4, r2, #3
 8003bd4:	4622      	mov	r2, r4
 8003bd6:	462b      	mov	r3, r5
 8003bd8:	1814      	adds	r4, r2, r0
 8003bda:	653c      	str	r4, [r7, #80]	; 0x50
 8003bdc:	414b      	adcs	r3, r1
 8003bde:	657b      	str	r3, [r7, #84]	; 0x54
 8003be0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	461a      	mov	r2, r3
 8003be6:	f04f 0300 	mov.w	r3, #0
 8003bea:	1891      	adds	r1, r2, r2
 8003bec:	61b9      	str	r1, [r7, #24]
 8003bee:	415b      	adcs	r3, r3
 8003bf0:	61fb      	str	r3, [r7, #28]
 8003bf2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003bf6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003bfa:	f7fc fb51 	bl	80002a0 <__aeabi_uldivmod>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4b6c      	ldr	r3, [pc, #432]	; (8003db4 <UART_SetConfig+0x38c>)
 8003c04:	fba3 1302 	umull	r1, r3, r3, r2
 8003c08:	095b      	lsrs	r3, r3, #5
 8003c0a:	2164      	movs	r1, #100	; 0x64
 8003c0c:	fb01 f303 	mul.w	r3, r1, r3
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	3332      	adds	r3, #50	; 0x32
 8003c16:	4a67      	ldr	r2, [pc, #412]	; (8003db4 <UART_SetConfig+0x38c>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	095b      	lsrs	r3, r3, #5
 8003c1e:	f003 0207 	and.w	r2, r3, #7
 8003c22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4432      	add	r2, r6
 8003c28:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c2a:	e0b9      	b.n	8003da0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c2e:	461c      	mov	r4, r3
 8003c30:	f04f 0500 	mov.w	r5, #0
 8003c34:	4622      	mov	r2, r4
 8003c36:	462b      	mov	r3, r5
 8003c38:	1891      	adds	r1, r2, r2
 8003c3a:	6139      	str	r1, [r7, #16]
 8003c3c:	415b      	adcs	r3, r3
 8003c3e:	617b      	str	r3, [r7, #20]
 8003c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003c44:	1912      	adds	r2, r2, r4
 8003c46:	eb45 0303 	adc.w	r3, r5, r3
 8003c4a:	f04f 0000 	mov.w	r0, #0
 8003c4e:	f04f 0100 	mov.w	r1, #0
 8003c52:	00d9      	lsls	r1, r3, #3
 8003c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c58:	00d0      	lsls	r0, r2, #3
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	eb12 0804 	adds.w	r8, r2, r4
 8003c62:	eb43 0905 	adc.w	r9, r3, r5
 8003c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	008b      	lsls	r3, r1, #2
 8003c7a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003c7e:	0082      	lsls	r2, r0, #2
 8003c80:	4640      	mov	r0, r8
 8003c82:	4649      	mov	r1, r9
 8003c84:	f7fc fb0c 	bl	80002a0 <__aeabi_uldivmod>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4b49      	ldr	r3, [pc, #292]	; (8003db4 <UART_SetConfig+0x38c>)
 8003c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003c92:	095b      	lsrs	r3, r3, #5
 8003c94:	011e      	lsls	r6, r3, #4
 8003c96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	1894      	adds	r4, r2, r2
 8003ca4:	60bc      	str	r4, [r7, #8]
 8003ca6:	415b      	adcs	r3, r3
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cae:	1812      	adds	r2, r2, r0
 8003cb0:	eb41 0303 	adc.w	r3, r1, r3
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	f04f 0500 	mov.w	r5, #0
 8003cbc:	00dd      	lsls	r5, r3, #3
 8003cbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003cc2:	00d4      	lsls	r4, r2, #3
 8003cc4:	4622      	mov	r2, r4
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	1814      	adds	r4, r2, r0
 8003cca:	64bc      	str	r4, [r7, #72]	; 0x48
 8003ccc:	414b      	adcs	r3, r1
 8003cce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	f04f 0200 	mov.w	r2, #0
 8003cde:	f04f 0300 	mov.w	r3, #0
 8003ce2:	008b      	lsls	r3, r1, #2
 8003ce4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ce8:	0082      	lsls	r2, r0, #2
 8003cea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003cee:	f7fc fad7 	bl	80002a0 <__aeabi_uldivmod>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <UART_SetConfig+0x38c>)
 8003cf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cfc:	095b      	lsrs	r3, r3, #5
 8003cfe:	2164      	movs	r1, #100	; 0x64
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	3332      	adds	r3, #50	; 0x32
 8003d0a:	4a2a      	ldr	r2, [pc, #168]	; (8003db4 <UART_SetConfig+0x38c>)
 8003d0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d10:	095b      	lsrs	r3, r3, #5
 8003d12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d16:	441e      	add	r6, r3
 8003d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	4602      	mov	r2, r0
 8003d22:	460b      	mov	r3, r1
 8003d24:	1894      	adds	r4, r2, r2
 8003d26:	603c      	str	r4, [r7, #0]
 8003d28:	415b      	adcs	r3, r3
 8003d2a:	607b      	str	r3, [r7, #4]
 8003d2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d30:	1812      	adds	r2, r2, r0
 8003d32:	eb41 0303 	adc.w	r3, r1, r3
 8003d36:	f04f 0400 	mov.w	r4, #0
 8003d3a:	f04f 0500 	mov.w	r5, #0
 8003d3e:	00dd      	lsls	r5, r3, #3
 8003d40:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d44:	00d4      	lsls	r4, r2, #3
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	eb12 0a00 	adds.w	sl, r2, r0
 8003d4e:	eb43 0b01 	adc.w	fp, r3, r1
 8003d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	f04f 0200 	mov.w	r2, #0
 8003d60:	f04f 0300 	mov.w	r3, #0
 8003d64:	008b      	lsls	r3, r1, #2
 8003d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003d6a:	0082      	lsls	r2, r0, #2
 8003d6c:	4650      	mov	r0, sl
 8003d6e:	4659      	mov	r1, fp
 8003d70:	f7fc fa96 	bl	80002a0 <__aeabi_uldivmod>
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <UART_SetConfig+0x38c>)
 8003d7a:	fba3 1302 	umull	r1, r3, r3, r2
 8003d7e:	095b      	lsrs	r3, r3, #5
 8003d80:	2164      	movs	r1, #100	; 0x64
 8003d82:	fb01 f303 	mul.w	r3, r1, r3
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	3332      	adds	r3, #50	; 0x32
 8003d8c:	4a09      	ldr	r2, [pc, #36]	; (8003db4 <UART_SetConfig+0x38c>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	095b      	lsrs	r3, r3, #5
 8003d94:	f003 020f 	and.w	r2, r3, #15
 8003d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4432      	add	r2, r6
 8003d9e:	609a      	str	r2, [r3, #8]
}
 8003da0:	bf00      	nop
 8003da2:	377c      	adds	r7, #124	; 0x7c
 8003da4:	46bd      	mov	sp, r7
 8003da6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003daa:	bf00      	nop
 8003dac:	40011000 	.word	0x40011000
 8003db0:	40011400 	.word	0x40011400
 8003db4:	51eb851f 	.word	0x51eb851f

08003db8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8003db8:	b5b0      	push	{r4, r5, r7, lr}
 8003dba:	b08e      	sub	sp, #56	; 0x38
 8003dbc:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8003dbe:	2100      	movs	r1, #0
 8003dc0:	2000      	movs	r0, #0
 8003dc2:	f005 ff2d 	bl	8009c20 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8003dc6:	4b2a      	ldr	r3, [pc, #168]	; (8003e70 <MX_LWIP_Init+0xb8>)
 8003dc8:	2200      	movs	r2, #0
 8003dca:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8003dcc:	4b29      	ldr	r3, [pc, #164]	; (8003e74 <MX_LWIP_Init+0xbc>)
 8003dce:	2200      	movs	r2, #0
 8003dd0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8003dd2:	4b29      	ldr	r3, [pc, #164]	; (8003e78 <MX_LWIP_Init+0xc0>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8003dd8:	4b28      	ldr	r3, [pc, #160]	; (8003e7c <MX_LWIP_Init+0xc4>)
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	4b28      	ldr	r3, [pc, #160]	; (8003e80 <MX_LWIP_Init+0xc8>)
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2300      	movs	r3, #0
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4b24      	ldr	r3, [pc, #144]	; (8003e78 <MX_LWIP_Init+0xc0>)
 8003de6:	4a23      	ldr	r2, [pc, #140]	; (8003e74 <MX_LWIP_Init+0xbc>)
 8003de8:	4921      	ldr	r1, [pc, #132]	; (8003e70 <MX_LWIP_Init+0xb8>)
 8003dea:	4826      	ldr	r0, [pc, #152]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003dec:	f006 fc9c 	bl	800a728 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8003df0:	4824      	ldr	r0, [pc, #144]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003df2:	f006 fe53 	bl	800aa9c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8003df6:	4b23      	ldr	r3, [pc, #140]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003df8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003dfc:	089b      	lsrs	r3, r3, #2
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8003e08:	481e      	ldr	r0, [pc, #120]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003e0a:	f006 fe57 	bl	800aabc <netif_set_up>
 8003e0e:	e002      	b.n	8003e16 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8003e10:	481c      	ldr	r0, [pc, #112]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003e12:	f006 febf 	bl	800ab94 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8003e16:	491c      	ldr	r1, [pc, #112]	; (8003e88 <MX_LWIP_Init+0xd0>)
 8003e18:	481a      	ldr	r0, [pc, #104]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003e1a:	f006 ff55 	bl	800acc8 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	623b      	str	r3, [r7, #32]
 8003e22:	2300      	movs	r3, #0
 8003e24:	627b      	str	r3, [r7, #36]	; 0x24
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8003e26:	f107 0320 	add.w	r3, r7, #32
 8003e2a:	2101      	movs	r1, #1
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f000 fda1 	bl	8004974 <osSemaphoreCreate>
 8003e32:	4603      	mov	r3, r0
 8003e34:	4a15      	ldr	r2, [pc, #84]	; (8003e8c <MX_LWIP_Init+0xd4>)
 8003e36:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8003e38:	4b15      	ldr	r3, [pc, #84]	; (8003e90 <MX_LWIP_Init+0xd8>)
 8003e3a:	4a12      	ldr	r2, [pc, #72]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003e3c:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 8003e3e:	4b13      	ldr	r3, [pc, #76]	; (8003e8c <MX_LWIP_Init+0xd4>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <MX_LWIP_Init+0xd8>)
 8003e44:	6053      	str	r3, [r2, #4]
  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(LinkThr, ethernetif_set_link, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8003e46:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <MX_LWIP_Init+0xdc>)
 8003e48:	1d3c      	adds	r4, r7, #4
 8003e4a:	461d      	mov	r5, r3
 8003e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003e50:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003e54:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(LinkThr), &link_arg);
 8003e58:	1d3b      	adds	r3, r7, #4
 8003e5a:	490d      	ldr	r1, [pc, #52]	; (8003e90 <MX_LWIP_Init+0xd8>)
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 fc8c 	bl	800477a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8003e62:	4808      	ldr	r0, [pc, #32]	; (8003e84 <MX_LWIP_Init+0xcc>)
 8003e64:	f00e ffc8 	bl	8012df8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8003e68:	bf00      	nop
 8003e6a:	3728      	adds	r7, #40	; 0x28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8003e70:	200087d0 	.word	0x200087d0
 8003e74:	200087d4 	.word	0x200087d4
 8003e78:	200087d8 	.word	0x200087d8
 8003e7c:	08009b31 	.word	0x08009b31
 8003e80:	08004509 	.word	0x08004509
 8003e84:	20008798 	.word	0x20008798
 8003e88:	080045ed 	.word	0x080045ed
 8003e8c:	200003fc 	.word	0x200003fc
 8003e90:	20008790 	.word	0x20008790
 8003e94:	08018354 	.word	0x08018354

08003e98 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08e      	sub	sp, #56	; 0x38
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	601a      	str	r2, [r3, #0]
 8003ea8:	605a      	str	r2, [r3, #4]
 8003eaa:	609a      	str	r2, [r3, #8]
 8003eac:	60da      	str	r2, [r3, #12]
 8003eae:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a59      	ldr	r2, [pc, #356]	; (800401c <HAL_ETH_MspInit+0x184>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	f040 80ac 	bne.w	8004014 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	4b57      	ldr	r3, [pc, #348]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec4:	4a56      	ldr	r2, [pc, #344]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003ec6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eca:	6313      	str	r3, [r2, #48]	; 0x30
 8003ecc:	4b54      	ldr	r3, [pc, #336]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed4:	623b      	str	r3, [r7, #32]
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	2300      	movs	r3, #0
 8003eda:	61fb      	str	r3, [r7, #28]
 8003edc:	4b50      	ldr	r3, [pc, #320]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee0:	4a4f      	ldr	r2, [pc, #316]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ee8:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ef0:	61fb      	str	r3, [r7, #28]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
 8003ef8:	4b49      	ldr	r3, [pc, #292]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	4a48      	ldr	r2, [pc, #288]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003efe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f02:	6313      	str	r3, [r2, #48]	; 0x30
 8003f04:	4b46      	ldr	r3, [pc, #280]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f0c:	61bb      	str	r3, [r7, #24]
 8003f0e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]
 8003f14:	4b42      	ldr	r3, [pc, #264]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f18:	4a41      	ldr	r2, [pc, #260]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f1a:	f043 0304 	orr.w	r3, r3, #4
 8003f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8003f20:	4b3f      	ldr	r3, [pc, #252]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f24:	f003 0304 	and.w	r3, r3, #4
 8003f28:	617b      	str	r3, [r7, #20]
 8003f2a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]
 8003f30:	4b3b      	ldr	r3, [pc, #236]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f34:	4a3a      	ldr	r2, [pc, #232]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3c:	4b38      	ldr	r3, [pc, #224]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	4b34      	ldr	r3, [pc, #208]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f50:	4a33      	ldr	r2, [pc, #204]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f52:	f043 0302 	orr.w	r3, r3, #2
 8003f56:	6313      	str	r3, [r2, #48]	; 0x30
 8003f58:	4b31      	ldr	r3, [pc, #196]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
 8003f68:	4b2d      	ldr	r3, [pc, #180]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f6c:	4a2c      	ldr	r2, [pc, #176]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f72:	6313      	str	r3, [r2, #48]	; 0x30
 8003f74:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <HAL_ETH_MspInit+0x188>)
 8003f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	60bb      	str	r3, [r7, #8]
 8003f7e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8003f80:	2332      	movs	r3, #50	; 0x32
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f84:	2302      	movs	r3, #2
 8003f86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003f90:	230b      	movs	r3, #11
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4822      	ldr	r0, [pc, #136]	; (8004024 <HAL_ETH_MspInit+0x18c>)
 8003f9c:	f7fe fbc4 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8003fa0:	2386      	movs	r3, #134	; 0x86
 8003fa2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fac:	2303      	movs	r3, #3
 8003fae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fb0:	230b      	movs	r3, #11
 8003fb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fb8:	4619      	mov	r1, r3
 8003fba:	481b      	ldr	r0, [pc, #108]	; (8004028 <HAL_ETH_MspInit+0x190>)
 8003fbc:	f7fe fbb4 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8003fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003fd2:	230b      	movs	r3, #11
 8003fd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8003fd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003fda:	4619      	mov	r1, r3
 8003fdc:	4813      	ldr	r0, [pc, #76]	; (800402c <HAL_ETH_MspInit+0x194>)
 8003fde:	f7fe fba3 	bl	8002728 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8003fe2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003fe6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fec:	2300      	movs	r3, #0
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003ff4:	230b      	movs	r3, #11
 8003ff6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003ff8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	480c      	ldr	r0, [pc, #48]	; (8004030 <HAL_ETH_MspInit+0x198>)
 8004000:	f7fe fb92 	bl	8002728 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8004004:	2200      	movs	r2, #0
 8004006:	2105      	movs	r1, #5
 8004008:	203d      	movs	r0, #61	; 0x3d
 800400a:	f7fd f9bd 	bl	8001388 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800400e:	203d      	movs	r0, #61	; 0x3d
 8004010:	f7fd f9d6 	bl	80013c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8004014:	bf00      	nop
 8004016:	3738      	adds	r7, #56	; 0x38
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40028000 	.word	0x40028000
 8004020:	40023800 	.word	0x40023800
 8004024:	40020800 	.word	0x40020800
 8004028:	40020000 	.word	0x40020000
 800402c:	40020400 	.word	0x40020400
 8004030:	40021800 	.word	0x40021800

08004034 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_ETH_RxCpltCallback+0x1c>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f000 fd17 	bl	8004a74 <osSemaphoreRelease>
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000400 	.word	0x20000400

08004054 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004054:	b5b0      	push	{r4, r5, r7, lr}
 8004056:	b090      	sub	sp, #64	; 0x40
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800405c:	2300      	movs	r3, #0
 800405e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004060:	4b60      	ldr	r3, [pc, #384]	; (80041e4 <low_level_init+0x190>)
 8004062:	4a61      	ldr	r2, [pc, #388]	; (80041e8 <low_level_init+0x194>)
 8004064:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8004066:	4b5f      	ldr	r3, [pc, #380]	; (80041e4 <low_level_init+0x190>)
 8004068:	2201      	movs	r2, #1
 800406a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800406c:	4b5d      	ldr	r3, [pc, #372]	; (80041e4 <low_level_init+0x190>)
 800406e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004072:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8004074:	4b5b      	ldr	r3, [pc, #364]	; (80041e4 <low_level_init+0x190>)
 8004076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800407a:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <low_level_init+0x190>)
 800407e:	2200      	movs	r2, #0
 8004080:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8004082:	2300      	movs	r3, #0
 8004084:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8004088:	2380      	movs	r3, #128	; 0x80
 800408a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800408e:	23e1      	movs	r3, #225	; 0xe1
 8004090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0xFE;
 8004094:	23fe      	movs	r3, #254	; 0xfe
 8004096:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0xEC;
 800409a:	23ec      	movs	r3, #236	; 0xec
 800409c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x77;
 80040a0:	2377      	movs	r3, #119	; 0x77
 80040a2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 80040a6:	4a4f      	ldr	r2, [pc, #316]	; (80041e4 <low_level_init+0x190>)
 80040a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80040ac:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 80040ae:	4b4d      	ldr	r3, [pc, #308]	; (80041e4 <low_level_init+0x190>)
 80040b0:	2201      	movs	r2, #1
 80040b2:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80040b4:	4b4b      	ldr	r3, [pc, #300]	; (80041e4 <low_level_init+0x190>)
 80040b6:	2200      	movs	r2, #0
 80040b8:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80040ba:	4b4a      	ldr	r3, [pc, #296]	; (80041e4 <low_level_init+0x190>)
 80040bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80040c0:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80040c2:	4848      	ldr	r0, [pc, #288]	; (80041e4 <low_level_init+0x190>)
 80040c4:	f7fd f98a 	bl	80013dc <HAL_ETH_Init>
 80040c8:	4603      	mov	r3, r0
 80040ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 80040ce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80040dc:	f043 0304 	orr.w	r3, r3, #4
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80040e8:	2304      	movs	r3, #4
 80040ea:	4a40      	ldr	r2, [pc, #256]	; (80041ec <low_level_init+0x198>)
 80040ec:	4940      	ldr	r1, [pc, #256]	; (80041f0 <low_level_init+0x19c>)
 80040ee:	483d      	ldr	r0, [pc, #244]	; (80041e4 <low_level_init+0x190>)
 80040f0:	f7fd fb10 	bl	8001714 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80040f4:	2304      	movs	r3, #4
 80040f6:	4a3f      	ldr	r2, [pc, #252]	; (80041f4 <low_level_init+0x1a0>)
 80040f8:	493f      	ldr	r1, [pc, #252]	; (80041f8 <low_level_init+0x1a4>)
 80040fa:	483a      	ldr	r0, [pc, #232]	; (80041e4 <low_level_init+0x190>)
 80040fc:	f7fd fb73 	bl	80017e6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2206      	movs	r2, #6
 8004104:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004108:	4b36      	ldr	r3, [pc, #216]	; (80041e4 <low_level_init+0x190>)
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	781a      	ldrb	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004114:	4b33      	ldr	r3, [pc, #204]	; (80041e4 <low_level_init+0x190>)
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	785a      	ldrb	r2, [r3, #1]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004120:	4b30      	ldr	r3, [pc, #192]	; (80041e4 <low_level_init+0x190>)
 8004122:	695b      	ldr	r3, [r3, #20]
 8004124:	789a      	ldrb	r2, [r3, #2]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800412c:	4b2d      	ldr	r3, [pc, #180]	; (80041e4 <low_level_init+0x190>)
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	78da      	ldrb	r2, [r3, #3]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004138:	4b2a      	ldr	r3, [pc, #168]	; (80041e4 <low_level_init+0x190>)
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	791a      	ldrb	r2, [r3, #4]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004144:	4b27      	ldr	r3, [pc, #156]	; (80041e4 <low_level_init+0x190>)
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	795a      	ldrb	r2, [r3, #5]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = 1500;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8004156:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800415e:	f043 030a 	orr.w	r3, r3, #10
 8004162:	b2da      	uxtb	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800416a:	2300      	movs	r3, #0
 800416c:	62bb      	str	r3, [r7, #40]	; 0x28
 800416e:	2300      	movs	r3, #0
 8004170:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8004172:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004176:	2101      	movs	r1, #1
 8004178:	4618      	mov	r0, r3
 800417a:	f000 fbfb 	bl	8004974 <osSemaphoreCreate>
 800417e:	4603      	mov	r3, r0
 8004180:	4a1e      	ldr	r2, [pc, #120]	; (80041fc <low_level_init+0x1a8>)
 8004182:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8004184:	4b1e      	ldr	r3, [pc, #120]	; (8004200 <low_level_init+0x1ac>)
 8004186:	f107 040c 	add.w	r4, r7, #12
 800418a:	461d      	mov	r5, r3
 800418c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800418e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004190:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004194:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8004198:	f107 030c 	add.w	r3, r7, #12
 800419c:	6879      	ldr	r1, [r7, #4]
 800419e:	4618      	mov	r0, r3
 80041a0:	f000 faeb 	bl	800477a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 80041a4:	480f      	ldr	r0, [pc, #60]	; (80041e4 <low_level_init+0x190>)
 80041a6:	f7fd fe46 	bl	8001e36 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 80041aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041ae:	461a      	mov	r2, r3
 80041b0:	211d      	movs	r1, #29
 80041b2:	480c      	ldr	r0, [pc, #48]	; (80041e4 <low_level_init+0x190>)
 80041b4:	f7fd fd71 	bl	8001c9a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 80041b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ba:	f043 030b 	orr.w	r3, r3, #11
 80041be:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	461a      	mov	r2, r3
 80041c4:	211d      	movs	r1, #29
 80041c6:	4807      	ldr	r0, [pc, #28]	; (80041e4 <low_level_init+0x190>)
 80041c8:	f7fd fdcf 	bl	8001d6a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80041cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041d0:	461a      	mov	r2, r3
 80041d2:	211d      	movs	r1, #29
 80041d4:	4803      	ldr	r0, [pc, #12]	; (80041e4 <low_level_init+0x190>)
 80041d6:	f7fd fd60 	bl	8001c9a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80041da:	bf00      	nop
 80041dc:	3740      	adds	r7, #64	; 0x40
 80041de:	46bd      	mov	sp, r7
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}
 80041e2:	bf00      	nop
 80041e4:	2000a0ac 	.word	0x2000a0ac
 80041e8:	40028000 	.word	0x40028000
 80041ec:	2000a0f4 	.word	0x2000a0f4
 80041f0:	200087dc 	.word	0x200087dc
 80041f4:	2000885c 	.word	0x2000885c
 80041f8:	2000a02c 	.word	0x2000a02c
 80041fc:	20000400 	.word	0x20000400
 8004200:	08018378 	.word	0x08018378

08004204 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
 800420c:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800420e:	4b4b      	ldr	r3, [pc, #300]	; (800433c <low_level_output+0x138>)
 8004210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8004216:	2300      	movs	r3, #0
 8004218:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8004222:	2300      	movs	r3, #0
 8004224:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8004226:	4b45      	ldr	r3, [pc, #276]	; (800433c <low_level_output+0x138>)
 8004228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800422a:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	623b      	str	r3, [r7, #32]
 8004234:	e05a      	b.n	80042ec <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	da03      	bge.n	8004246 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800423e:	23f8      	movs	r3, #248	; 0xf8
 8004240:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8004244:	e05c      	b.n	8004300 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	895b      	ldrh	r3, [r3, #10]
 800424a:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800424c:	2300      	movs	r3, #0
 800424e:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8004250:	e02f      	b.n	80042b2 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8004252:	69fa      	ldr	r2, [r7, #28]
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	18d0      	adds	r0, r2, r3
 8004258:	6a3b      	ldr	r3, [r7, #32]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	18d1      	adds	r1, r2, r3
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8004266:	3304      	adds	r3, #4
 8004268:	461a      	mov	r2, r3
 800426a:	f012 fdd1 	bl	8016e10 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	da03      	bge.n	8004284 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800427c:	23f8      	movs	r3, #248	; 0xf8
 800427e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8004282:	e03d      	b.n	8004300 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4413      	add	r3, r2
 8004290:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8004294:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8004296:	68ba      	ldr	r2, [r7, #8]
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042a0:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80042ac:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80042bc:	4293      	cmp	r3, r2
 80042be:	d8c8      	bhi.n	8004252 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	18d0      	adds	r0, r2, r3
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4413      	add	r3, r2
 80042ce:	68fa      	ldr	r2, [r7, #12]
 80042d0:	4619      	mov	r1, r3
 80042d2:	f012 fd9d 	bl	8016e10 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80042d6:	693a      	ldr	r2, [r7, #16]
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4413      	add	r3, r2
 80042e4:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80042e6:	6a3b      	ldr	r3, [r7, #32]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	623b      	str	r3, [r7, #32]
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1a1      	bne.n	8004236 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	4811      	ldr	r0, [pc, #68]	; (800433c <low_level_output+0x138>)
 80042f6:	f7fd fae3 	bl	80018c0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8004300:	4b0e      	ldr	r3, [pc, #56]	; (800433c <low_level_output+0x138>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004308:	3314      	adds	r3, #20
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00d      	beq.n	8004330 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8004314:	4b09      	ldr	r3, [pc, #36]	; (800433c <low_level_output+0x138>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800431c:	3314      	adds	r3, #20
 800431e:	2220      	movs	r2, #32
 8004320:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8004322:	4b06      	ldr	r3, [pc, #24]	; (800433c <low_level_output+0x138>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800432a:	3304      	adds	r3, #4
 800432c:	2200      	movs	r2, #0
 800432e:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8004330:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8004334:	4618      	mov	r0, r3
 8004336:	3728      	adds	r7, #40	; 0x28
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	2000a0ac 	.word	0x2000a0ac

08004340 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b08c      	sub	sp, #48	; 0x30
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8004348:	2300      	movs	r3, #0
 800434a:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800434c:	2300      	movs	r3, #0
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8004350:	2300      	movs	r3, #0
 8004352:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8004358:	2300      	movs	r3, #0
 800435a:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800435c:	2300      	movs	r3, #0
 800435e:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8004360:	2300      	movs	r3, #0
 8004362:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8004364:	484f      	ldr	r0, [pc, #316]	; (80044a4 <low_level_input+0x164>)
 8004366:	f7fd fb95 	bl	8001a94 <HAL_ETH_GetReceivedFrame_IT>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <low_level_input+0x34>

    return NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	e092      	b.n	800449a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8004374:	4b4b      	ldr	r3, [pc, #300]	; (80044a4 <low_level_input+0x164>)
 8004376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004378:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800437a:	4b4a      	ldr	r3, [pc, #296]	; (80044a4 <low_level_input+0x164>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d007      	beq.n	8004396 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8004386:	89fb      	ldrh	r3, [r7, #14]
 8004388:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800438c:	4619      	mov	r1, r3
 800438e:	2000      	movs	r0, #0
 8004390:	f006 fd64 	bl	800ae5c <pbuf_alloc>
 8004394:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d04b      	beq.n	8004434 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <low_level_input+0x164>)
 800439e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a0:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80043a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043aa:	e040      	b.n	800442e <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 80043ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ae:	895b      	ldrh	r3, [r3, #10]
 80043b0:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80043b6:	e021      	b.n	80043fc <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 80043b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ba:	685a      	ldr	r2, [r3, #4]
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	18d0      	adds	r0, r2, r3
 80043c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c2:	69fb      	ldr	r3, [r7, #28]
 80043c4:	18d1      	adds	r1, r2, r3
 80043c6:	69fb      	ldr	r3, [r7, #28]
 80043c8:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80043cc:	3304      	adds	r3, #4
 80043ce:	461a      	mov	r2, r3
 80043d0:	f012 fd1e 	bl	8016e10 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	68db      	ldr	r3, [r3, #12]
 80043d8:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80043da:	6a3b      	ldr	r3, [r7, #32]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80043e0:	69fa      	ldr	r2, [r7, #28]
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	4413      	add	r3, r2
 80043e6:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80043ea:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80043f6:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80043f8:	2300      	movs	r3, #0
 80043fa:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80043fc:	697a      	ldr	r2, [r7, #20]
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	4413      	add	r3, r2
 8004402:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004406:	4293      	cmp	r3, r2
 8004408:	d8d6      	bhi.n	80043b8 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	18d0      	adds	r0, r2, r3
 8004412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	4619      	mov	r1, r3
 800441c:	f012 fcf8 	bl	8016e10 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4413      	add	r3, r2
 8004426:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	62bb      	str	r3, [r7, #40]	; 0x28
 800442e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1bb      	bne.n	80043ac <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <low_level_input+0x164>)
 8004436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004438:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800443a:	2300      	movs	r3, #0
 800443c:	613b      	str	r3, [r7, #16]
 800443e:	e00b      	b.n	8004458 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	3301      	adds	r3, #1
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	4b12      	ldr	r3, [pc, #72]	; (80044a4 <low_level_input+0x164>)
 800445a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	429a      	cmp	r2, r3
 8004460:	d3ee      	bcc.n	8004440 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <low_level_input+0x164>)
 8004464:	2200      	movs	r2, #0
 8004466:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8004468:	4b0e      	ldr	r3, [pc, #56]	; (80044a4 <low_level_input+0x164>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004470:	3314      	adds	r3, #20
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004478:	2b00      	cmp	r3, #0
 800447a:	d00d      	beq.n	8004498 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800447c:	4b09      	ldr	r3, [pc, #36]	; (80044a4 <low_level_input+0x164>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004484:	3314      	adds	r3, #20
 8004486:	2280      	movs	r2, #128	; 0x80
 8004488:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <low_level_input+0x164>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004492:	3308      	adds	r3, #8
 8004494:	2200      	movs	r2, #0
 8004496:	601a      	str	r2, [r3, #0]
  }
  return p;
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800449a:	4618      	mov	r0, r3
 800449c:	3730      	adds	r7, #48	; 0x30
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
 80044a2:	bf00      	nop
 80044a4:	2000a0ac 	.word	0x2000a0ac

080044a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80044b4:	4b12      	ldr	r3, [pc, #72]	; (8004500 <ethernetif_input+0x58>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f04f 31ff 	mov.w	r1, #4294967295
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fa8b 	bl	80049d8 <osSemaphoreWait>
 80044c2:	4603      	mov	r3, r0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1f5      	bne.n	80044b4 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 80044c8:	480e      	ldr	r0, [pc, #56]	; (8004504 <ethernetif_input+0x5c>)
 80044ca:	f012 fc0f 	bl	8016cec <sys_mutex_lock>
        p = low_level_input( netif );
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff ff36 	bl	8004340 <low_level_input>
 80044d4:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00a      	beq.n	80044f2 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	68b8      	ldr	r0, [r7, #8]
 80044e4:	4798      	blx	r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 80044ec:	68b8      	ldr	r0, [r7, #8]
 80044ee:	f006 ff99 	bl	800b424 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 80044f2:	4804      	ldr	r0, [pc, #16]	; (8004504 <ethernetif_input+0x5c>)
 80044f4:	f012 fc09 	bl	8016d0a <sys_mutex_unlock>
      } while(p!=NULL);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1e4      	bne.n	80044c8 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80044fe:	e7d9      	b.n	80044b4 <ethernetif_input+0xc>
 8004500:	20000400 	.word	0x20000400
 8004504:	2000b904 	.word	0x2000b904

08004508 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <ethernetif_init+0x1c>
 8004516:	4b0e      	ldr	r3, [pc, #56]	; (8004550 <ethernetif_init+0x48>)
 8004518:	f240 2236 	movw	r2, #566	; 0x236
 800451c:	490d      	ldr	r1, [pc, #52]	; (8004554 <ethernetif_init+0x4c>)
 800451e:	480e      	ldr	r0, [pc, #56]	; (8004558 <ethernetif_init+0x50>)
 8004520:	f012 fca6 	bl	8016e70 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2273      	movs	r2, #115	; 0x73
 8004528:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2274      	movs	r2, #116	; 0x74
 8004530:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <ethernetif_init+0x54>)
 8004538:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a08      	ldr	r2, [pc, #32]	; (8004560 <ethernetif_init+0x58>)
 800453e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f7ff fd87 	bl	8004054 <low_level_init>

  return ERR_OK;
 8004546:	2300      	movs	r3, #0
}
 8004548:	4618      	mov	r0, r3
 800454a:	3708      	adds	r7, #8
 800454c:	46bd      	mov	sp, r7
 800454e:	bd80      	pop	{r7, pc}
 8004550:	08018394 	.word	0x08018394
 8004554:	080183b0 	.word	0x080183b0
 8004558:	080183c0 	.word	0x080183c0
 800455c:	08014cc5 	.word	0x08014cc5
 8004560:	08004205 	.word	0x08004205

08004564 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8004568:	f7fc fe26 	bl	80011b8 <HAL_GetTick>
 800456c:	4603      	mov	r3, r0
}
 800456e:	4618      	mov	r0, r3
 8004570:	bd80      	pop	{r7, pc}
	...

08004574 <ethernetif_set_link>:
  * @param  netif: the network interface
  * @retval None
  */
void ethernetif_set_link(void const *argument)

{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	60bb      	str	r3, [r7, #8]
  struct link_str *link_arg = (struct link_str *)argument;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60fb      	str	r3, [r7, #12]

  for(;;)
  {
    /* Read PHY_BSR*/
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	461a      	mov	r2, r3
 800458a:	2101      	movs	r1, #1
 800458c:	4816      	ldr	r0, [pc, #88]	; (80045e8 <ethernetif_set_link+0x74>)
 800458e:	f7fd fb84 	bl	8001c9a <HAL_ETH_ReadPHYRegister>

    regvalue &= PHY_LINKED_STATUS;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	60bb      	str	r3, [r7, #8]

    /* Check whether the netif link down and the PHY link is up */
    if(!netif_is_link_up(link_arg->netif) && (regvalue))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d108      	bne.n	80045bc <ethernetif_set_link+0x48>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <ethernetif_set_link+0x48>
    {
      /* network cable is connected */
      netif_set_link_up(link_arg->netif);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f006 fb1f 	bl	800abf8 <netif_set_link_up>
 80045ba:	e011      	b.n	80045e0 <ethernetif_set_link+0x6c>
    }
    else if(netif_is_link_up(link_arg->netif) && (!regvalue))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80045c4:	089b      	lsrs	r3, r3, #2
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d007      	beq.n	80045e0 <ethernetif_set_link+0x6c>
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <ethernetif_set_link+0x6c>
    {
      /* network cable is dis-connected */
      netif_set_link_down(link_arg->netif);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4618      	mov	r0, r3
 80045dc:	f006 fb44 	bl	800ac68 <netif_set_link_down>
    }

    /* Suspend thread for 200 ms */
    osDelay(200);
 80045e0:	20c8      	movs	r0, #200	; 0xc8
 80045e2:	f000 f916 	bl	8004812 <osDelay>
    HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 80045e6:	e7cd      	b.n	8004584 <ethernetif_set_link+0x10>
 80045e8:	2000a0ac 	.word	0x2000a0ac

080045ec <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d05d      	beq.n	80046ca <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800460e:	4b34      	ldr	r3, [pc, #208]	; (80046e0 <ethernetif_update_config+0xf4>)
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d03f      	beq.n	8004696 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8004616:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800461a:	2100      	movs	r1, #0
 800461c:	4830      	ldr	r0, [pc, #192]	; (80046e0 <ethernetif_update_config+0xf4>)
 800461e:	f7fd fba4 	bl	8001d6a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8004622:	f7fc fdc9 	bl	80011b8 <HAL_GetTick>
 8004626:	4603      	mov	r3, r0
 8004628:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800462a:	f107 0308 	add.w	r3, r7, #8
 800462e:	461a      	mov	r2, r3
 8004630:	2101      	movs	r1, #1
 8004632:	482b      	ldr	r0, [pc, #172]	; (80046e0 <ethernetif_update_config+0xf4>)
 8004634:	f7fd fb31 	bl	8001c9a <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8004638:	f7fc fdbe 	bl	80011b8 <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004646:	d828      	bhi.n	800469a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f003 0320 	and.w	r3, r3, #32
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0eb      	beq.n	800462a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8004652:	f107 0308 	add.w	r3, r7, #8
 8004656:	461a      	mov	r2, r3
 8004658:	2110      	movs	r1, #16
 800465a:	4821      	ldr	r0, [pc, #132]	; (80046e0 <ethernetif_update_config+0xf4>)
 800465c:	f7fd fb1d 	bl	8001c9a <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d004      	beq.n	8004674 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800466a:	4b1d      	ldr	r3, [pc, #116]	; (80046e0 <ethernetif_update_config+0xf4>)
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	60da      	str	r2, [r3, #12]
 8004672:	e002      	b.n	800467a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8004674:	4b1a      	ldr	r3, [pc, #104]	; (80046e0 <ethernetif_update_config+0xf4>)
 8004676:	2200      	movs	r2, #0
 8004678:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8004684:	4b16      	ldr	r3, [pc, #88]	; (80046e0 <ethernetif_update_config+0xf4>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]
 800468a:	e016      	b.n	80046ba <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800468c:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <ethernetif_update_config+0xf4>)
 800468e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	e011      	b.n	80046ba <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8004696:	bf00      	nop
 8004698:	e000      	b.n	800469c <ethernetif_update_config+0xb0>
          goto error;
 800469a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800469c:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <ethernetif_update_config+0xf4>)
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	08db      	lsrs	r3, r3, #3
 80046a2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 80046a4:	4b0e      	ldr	r3, [pc, #56]	; (80046e0 <ethernetif_update_config+0xf4>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	085b      	lsrs	r3, r3, #1
 80046aa:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 80046ac:	4313      	orrs	r3, r2
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	461a      	mov	r2, r3
 80046b2:	2100      	movs	r1, #0
 80046b4:	480a      	ldr	r0, [pc, #40]	; (80046e0 <ethernetif_update_config+0xf4>)
 80046b6:	f7fd fb58 	bl	8001d6a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 80046ba:	2100      	movs	r1, #0
 80046bc:	4808      	ldr	r0, [pc, #32]	; (80046e0 <ethernetif_update_config+0xf4>)
 80046be:	f7fd fc19 	bl	8001ef4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 80046c2:	4807      	ldr	r0, [pc, #28]	; (80046e0 <ethernetif_update_config+0xf4>)
 80046c4:	f7fd fbb7 	bl	8001e36 <HAL_ETH_Start>
 80046c8:	e002      	b.n	80046d0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 80046ca:	4805      	ldr	r0, [pc, #20]	; (80046e0 <ethernetif_update_config+0xf4>)
 80046cc:	f7fd fbe2 	bl	8001e94 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f000 f807 	bl	80046e4 <ethernetif_notify_conn_changed>
}
 80046d6:	bf00      	nop
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	2000a0ac 	.word	0x2000a0ac

080046e4 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	4603      	mov	r3, r0
 8004700:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004702:	2300      	movs	r3, #0
 8004704:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004706:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800470a:	2b84      	cmp	r3, #132	; 0x84
 800470c:	d005      	beq.n	800471a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800470e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	4413      	add	r3, r2
 8004716:	3303      	adds	r3, #3
 8004718:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3714      	adds	r7, #20
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004728:	b480      	push	{r7}
 800472a:	b083      	sub	sp, #12
 800472c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800472e:	f3ef 8305 	mrs	r3, IPSR
 8004732:	607b      	str	r3, [r7, #4]
  return(result);
 8004734:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf14      	ite	ne
 800473a:	2301      	movne	r3, #1
 800473c:	2300      	moveq	r3, #0
 800473e:	b2db      	uxtb	r3, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004750:	f001 fd26 	bl	80061a0 <vTaskStartScheduler>
  
  return osOK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	bd80      	pop	{r7, pc}

0800475a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800475a:	b580      	push	{r7, lr}
 800475c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800475e:	f7ff ffe3 	bl	8004728 <inHandlerMode>
 8004762:	4603      	mov	r3, r0
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8004768:	f001 fe34 	bl	80063d4 <xTaskGetTickCountFromISR>
 800476c:	4603      	mov	r3, r0
 800476e:	e002      	b.n	8004776 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8004770:	f001 fe20 	bl	80063b4 <xTaskGetTickCount>
 8004774:	4603      	mov	r3, r0
  }
}
 8004776:	4618      	mov	r0, r3
 8004778:	bd80      	pop	{r7, pc}

0800477a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800477a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800477c:	b089      	sub	sp, #36	; 0x24
 800477e:	af04      	add	r7, sp, #16
 8004780:	6078      	str	r0, [r7, #4]
 8004782:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d020      	beq.n	80047ce <osThreadCreate+0x54>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d01c      	beq.n	80047ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685c      	ldr	r4, [r3, #4]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681d      	ldr	r5, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	691e      	ldr	r6, [r3, #16]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047a6:	4618      	mov	r0, r3
 80047a8:	f7ff ffa6 	bl	80046f8 <makeFreeRtosPriority>
 80047ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047b6:	9202      	str	r2, [sp, #8]
 80047b8:	9301      	str	r3, [sp, #4]
 80047ba:	9100      	str	r1, [sp, #0]
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	4632      	mov	r2, r6
 80047c0:	4629      	mov	r1, r5
 80047c2:	4620      	mov	r0, r4
 80047c4:	f001 fb24 	bl	8005e10 <xTaskCreateStatic>
 80047c8:	4603      	mov	r3, r0
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e01c      	b.n	8004808 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685c      	ldr	r4, [r3, #4]
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80047da:	b29e      	uxth	r6, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7ff ff88 	bl	80046f8 <makeFreeRtosPriority>
 80047e8:	4602      	mov	r2, r0
 80047ea:	f107 030c 	add.w	r3, r7, #12
 80047ee:	9301      	str	r3, [sp, #4]
 80047f0:	9200      	str	r2, [sp, #0]
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	4632      	mov	r2, r6
 80047f6:	4629      	mov	r1, r5
 80047f8:	4620      	mov	r0, r4
 80047fa:	f001 fb66 	bl	8005eca <xTaskCreate>
 80047fe:	4603      	mov	r3, r0
 8004800:	2b01      	cmp	r3, #1
 8004802:	d001      	beq.n	8004808 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004808:	68fb      	ldr	r3, [r7, #12]
}
 800480a:	4618      	mov	r0, r3
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004812 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b084      	sub	sp, #16
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d001      	beq.n	8004828 <osDelay+0x16>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	e000      	b.n	800482a <osDelay+0x18>
 8004828:	2301      	movs	r3, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f001 fc84 	bl	8006138 <vTaskDelay>
  
  return osOK;
 8004830:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004832:	4618      	mov	r0, r3
 8004834:	3710      	adds	r7, #16
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800483a:	b580      	push	{r7, lr}
 800483c:	b082      	sub	sp, #8
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d007      	beq.n	800485a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4619      	mov	r1, r3
 8004850:	2001      	movs	r0, #1
 8004852:	f000 fc7e 	bl	8005152 <xQueueCreateMutexStatic>
 8004856:	4603      	mov	r3, r0
 8004858:	e003      	b.n	8004862 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800485a:	2001      	movs	r0, #1
 800485c:	f000 fc61 	bl	8005122 <xQueueCreateMutex>
 8004860:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8004862:	4618      	mov	r0, r3
 8004864:	3708      	adds	r7, #8
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
	...

0800486c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <osMutexWait+0x18>
    return osErrorParameter;
 8004880:	2380      	movs	r3, #128	; 0x80
 8004882:	e03a      	b.n	80048fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8004884:	2300      	movs	r3, #0
 8004886:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488e:	d103      	bne.n	8004898 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8004890:	f04f 33ff 	mov.w	r3, #4294967295
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	e009      	b.n	80048ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <osMutexWait+0x40>
      ticks = 1;
 80048a8:	2301      	movs	r3, #1
 80048aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80048ac:	f7ff ff3c 	bl	8004728 <inHandlerMode>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80048b6:	f107 0308 	add.w	r3, r7, #8
 80048ba:	461a      	mov	r2, r3
 80048bc:	2100      	movs	r1, #0
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f001 f874 	bl	80059ac <xQueueReceiveFromISR>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d001      	beq.n	80048ce <osMutexWait+0x62>
      return osErrorOS;
 80048ca:	23ff      	movs	r3, #255	; 0xff
 80048cc:	e015      	b.n	80048fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d011      	beq.n	80048f8 <osMutexWait+0x8c>
 80048d4:	4b0b      	ldr	r3, [pc, #44]	; (8004904 <osMutexWait+0x98>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	f3bf 8f4f 	dsb	sy
 80048e0:	f3bf 8f6f 	isb	sy
 80048e4:	e008      	b.n	80048f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80048e6:	68f9      	ldr	r1, [r7, #12]
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 ff53 	bl	8005794 <xQueueSemaphoreTake>
 80048ee:	4603      	mov	r3, r0
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <osMutexWait+0x8c>
    return osErrorOS;
 80048f4:	23ff      	movs	r3, #255	; 0xff
 80048f6:	e000      	b.n	80048fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004910:	2300      	movs	r3, #0
 8004912:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004918:	f7ff ff06 	bl	8004728 <inHandlerMode>
 800491c:	4603      	mov	r3, r0
 800491e:	2b00      	cmp	r3, #0
 8004920:	d016      	beq.n	8004950 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004922:	f107 0308 	add.w	r3, r7, #8
 8004926:	4619      	mov	r1, r3
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fdc6 	bl	80054ba <xQueueGiveFromISR>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d001      	beq.n	8004938 <osMutexRelease+0x30>
      return osErrorOS;
 8004934:	23ff      	movs	r3, #255	; 0xff
 8004936:	e017      	b.n	8004968 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d013      	beq.n	8004966 <osMutexRelease+0x5e>
 800493e:	4b0c      	ldr	r3, [pc, #48]	; (8004970 <osMutexRelease+0x68>)
 8004940:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004944:	601a      	str	r2, [r3, #0]
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	e00a      	b.n	8004966 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004950:	2300      	movs	r3, #0
 8004952:	2200      	movs	r2, #0
 8004954:	2100      	movs	r1, #0
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fc16 	bl	8005188 <xQueueGenericSend>
 800495c:	4603      	mov	r3, r0
 800495e:	2b01      	cmp	r3, #1
 8004960:	d001      	beq.n	8004966 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004962:	23ff      	movs	r3, #255	; 0xff
 8004964:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004966:	68fb      	ldr	r3, [r7, #12]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	e000ed04 	.word	0xe000ed04

08004974 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af02      	add	r7, sp, #8
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00f      	beq.n	80049a6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d10a      	bne.n	80049a2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2203      	movs	r2, #3
 8004992:	9200      	str	r2, [sp, #0]
 8004994:	2200      	movs	r2, #0
 8004996:	2100      	movs	r1, #0
 8004998:	2001      	movs	r0, #1
 800499a:	f000 fad7 	bl	8004f4c <xQueueGenericCreateStatic>
 800499e:	4603      	mov	r3, r0
 80049a0:	e016      	b.n	80049d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	e014      	b.n	80049d0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b01      	cmp	r3, #1
 80049aa:	d110      	bne.n	80049ce <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80049ac:	2203      	movs	r2, #3
 80049ae:	2100      	movs	r1, #0
 80049b0:	2001      	movs	r0, #1
 80049b2:	f000 fb43 	bl	800503c <xQueueGenericCreate>
 80049b6:	60f8      	str	r0, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <osSemaphoreCreate+0x56>
 80049be:	2300      	movs	r3, #0
 80049c0:	2200      	movs	r2, #0
 80049c2:	2100      	movs	r1, #0
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fbdf 	bl	8005188 <xQueueGenericSend>
      return sema;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	e000      	b.n	80049d0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80049ce:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d101      	bne.n	80049f0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80049ec:	2380      	movs	r3, #128	; 0x80
 80049ee:	e03a      	b.n	8004a66 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80049f0:	2300      	movs	r3, #0
 80049f2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fa:	d103      	bne.n	8004a04 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e009      	b.n	8004a18 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d101      	bne.n	8004a18 <osSemaphoreWait+0x40>
      ticks = 1;
 8004a14:	2301      	movs	r3, #1
 8004a16:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004a18:	f7ff fe86 	bl	8004728 <inHandlerMode>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d017      	beq.n	8004a52 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004a22:	f107 0308 	add.w	r3, r7, #8
 8004a26:	461a      	mov	r2, r3
 8004a28:	2100      	movs	r1, #0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 ffbe 	bl	80059ac <xQueueReceiveFromISR>
 8004a30:	4603      	mov	r3, r0
 8004a32:	2b01      	cmp	r3, #1
 8004a34:	d001      	beq.n	8004a3a <osSemaphoreWait+0x62>
      return osErrorOS;
 8004a36:	23ff      	movs	r3, #255	; 0xff
 8004a38:	e015      	b.n	8004a66 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d011      	beq.n	8004a64 <osSemaphoreWait+0x8c>
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <osSemaphoreWait+0x98>)
 8004a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	e008      	b.n	8004a64 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8004a52:	68f9      	ldr	r1, [r7, #12]
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 fe9d 	bl	8005794 <xQueueSemaphoreTake>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d001      	beq.n	8004a64 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8004a60:	23ff      	movs	r3, #255	; 0xff
 8004a62:	e000      	b.n	8004a66 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3710      	adds	r7, #16
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	e000ed04 	.word	0xe000ed04

08004a74 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004a84:	f7ff fe50 	bl	8004728 <inHandlerMode>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d016      	beq.n	8004abc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8004a8e:	f107 0308 	add.w	r3, r7, #8
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fd10 	bl	80054ba <xQueueGiveFromISR>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8004aa0:	23ff      	movs	r3, #255	; 0xff
 8004aa2:	e017      	b.n	8004ad4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d013      	beq.n	8004ad2 <osSemaphoreRelease+0x5e>
 8004aaa:	4b0c      	ldr	r3, [pc, #48]	; (8004adc <osSemaphoreRelease+0x68>)
 8004aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab0:	601a      	str	r2, [r3, #0]
 8004ab2:	f3bf 8f4f 	dsb	sy
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	e00a      	b.n	8004ad2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8004abc:	2300      	movs	r3, #0
 8004abe:	2200      	movs	r2, #0
 8004ac0:	2100      	movs	r1, #0
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fb60 	bl	8005188 <xQueueGenericSend>
 8004ac8:	4603      	mov	r3, r0
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d001      	beq.n	8004ad2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8004ace:	23ff      	movs	r3, #255	; 0xff
 8004ad0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3710      	adds	r7, #16
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	e000ed04 	.word	0xe000ed04

08004ae0 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004ae8:	f7ff fe1e 	bl	8004728 <inHandlerMode>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <osSemaphoreDelete+0x16>
    return osErrorISR;
 8004af2:	2382      	movs	r3, #130	; 0x82
 8004af4:	e003      	b.n	8004afe <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 f814 	bl	8005b24 <vQueueDelete>

  return osOK; 
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004b06:	b590      	push	{r4, r7, lr}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af02      	add	r7, sp, #8
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d011      	beq.n	8004b3c <osMessageCreate+0x36>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00d      	beq.n	8004b3c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6859      	ldr	r1, [r3, #4]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689a      	ldr	r2, [r3, #8]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	2400      	movs	r4, #0
 8004b32:	9400      	str	r4, [sp, #0]
 8004b34:	f000 fa0a 	bl	8004f4c <xQueueGenericCreateStatic>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	e008      	b.n	8004b4e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6818      	ldr	r0, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	4619      	mov	r1, r3
 8004b48:	f000 fa78 	bl	800503c <xQueueGenericCreate>
 8004b4c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd90      	pop	{r4, r7, pc}
	...

08004b58 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004b64:	2300      	movs	r3, #0
 8004b66:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d101      	bne.n	8004b76 <osMessagePut+0x1e>
    ticks = 1;
 8004b72:	2301      	movs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004b76:	f7ff fdd7 	bl	8004728 <inHandlerMode>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d018      	beq.n	8004bb2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004b80:	f107 0210 	add.w	r2, r7, #16
 8004b84:	f107 0108 	add.w	r1, r7, #8
 8004b88:	2300      	movs	r3, #0
 8004b8a:	68f8      	ldr	r0, [r7, #12]
 8004b8c:	f000 fbfa 	bl	8005384 <xQueueGenericSendFromISR>
 8004b90:	4603      	mov	r3, r0
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d001      	beq.n	8004b9a <osMessagePut+0x42>
      return osErrorOS;
 8004b96:	23ff      	movs	r3, #255	; 0xff
 8004b98:	e018      	b.n	8004bcc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d014      	beq.n	8004bca <osMessagePut+0x72>
 8004ba0:	4b0c      	ldr	r3, [pc, #48]	; (8004bd4 <osMessagePut+0x7c>)
 8004ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ba6:	601a      	str	r2, [r3, #0]
 8004ba8:	f3bf 8f4f 	dsb	sy
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	e00b      	b.n	8004bca <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004bb2:	f107 0108 	add.w	r1, r7, #8
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	68f8      	ldr	r0, [r7, #12]
 8004bbc:	f000 fae4 	bl	8005188 <xQueueGenericSend>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <osMessagePut+0x72>
      return osErrorOS;
 8004bc6:	23ff      	movs	r3, #255	; 0xff
 8004bc8:	e000      	b.n	8004bcc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3718      	adds	r7, #24
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	e000ed04 	.word	0xe000ed04

08004bd8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b08b      	sub	sp, #44	; 0x2c
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8004bf2:	2380      	movs	r3, #128	; 0x80
 8004bf4:	617b      	str	r3, [r7, #20]
    return event;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	461c      	mov	r4, r3
 8004bfa:	f107 0314 	add.w	r3, r7, #20
 8004bfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004c06:	e054      	b.n	8004cb2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c16:	d103      	bne.n	8004c20 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004c18:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c1e:	e009      	b.n	8004c34 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d006      	beq.n	8004c34 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <osMessageGet+0x5c>
      ticks = 1;
 8004c30:	2301      	movs	r3, #1
 8004c32:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004c34:	f7ff fd78 	bl	8004728 <inHandlerMode>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d01c      	beq.n	8004c78 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004c3e:	f107 0220 	add.w	r2, r7, #32
 8004c42:	f107 0314 	add.w	r3, r7, #20
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	68b8      	ldr	r0, [r7, #8]
 8004c4c:	f000 feae 	bl	80059ac <xQueueReceiveFromISR>
 8004c50:	4603      	mov	r3, r0
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d102      	bne.n	8004c5c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004c56:	2310      	movs	r3, #16
 8004c58:	617b      	str	r3, [r7, #20]
 8004c5a:	e001      	b.n	8004c60 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d01d      	beq.n	8004ca2 <osMessageGet+0xca>
 8004c66:	4b15      	ldr	r3, [pc, #84]	; (8004cbc <osMessageGet+0xe4>)
 8004c68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	f3bf 8f4f 	dsb	sy
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	e014      	b.n	8004ca2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004c78:	f107 0314 	add.w	r3, r7, #20
 8004c7c:	3304      	adds	r3, #4
 8004c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c80:	4619      	mov	r1, r3
 8004c82:	68b8      	ldr	r0, [r7, #8]
 8004c84:	f000 fca6 	bl	80055d4 <xQueueReceive>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	2b01      	cmp	r3, #1
 8004c8c:	d102      	bne.n	8004c94 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8004c8e:	2310      	movs	r3, #16
 8004c90:	617b      	str	r3, [r7, #20]
 8004c92:	e006      	b.n	8004ca2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <osMessageGet+0xc6>
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <osMessageGet+0xc8>
 8004c9e:	2340      	movs	r3, #64	; 0x40
 8004ca0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	461c      	mov	r4, r3
 8004ca6:	f107 0314 	add.w	r3, r7, #20
 8004caa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004cae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	372c      	adds	r7, #44	; 0x2c
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd90      	pop	{r4, r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	e000ed04 	.word	0xe000ed04

08004cc0 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004cc8:	f7ff fd2e 	bl	8004728 <inHandlerMode>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 ff08 	bl	8005ae8 <uxQueueMessagesWaitingFromISR>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	e003      	b.n	8004ce4 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 fee5 	bl	8005aac <uxQueueMessagesWaiting>
 8004ce2:	4603      	mov	r3, r0
  }
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3708      	adds	r7, #8
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8004cf4:	f7ff fd18 	bl	8004728 <inHandlerMode>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d001      	beq.n	8004d02 <osMessageDelete+0x16>
    return osErrorISR;
 8004cfe:	2382      	movs	r3, #130	; 0x82
 8004d00:	e003      	b.n	8004d0a <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 ff0e 	bl	8005b24 <vQueueDelete>

  return osOK; 
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3708      	adds	r7, #8
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004d12:	b480      	push	{r7}
 8004d14:	b083      	sub	sp, #12
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f103 0208 	add.w	r2, r3, #8
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f04f 32ff 	mov.w	r2, #4294967295
 8004d2a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f103 0208 	add.w	r2, r3, #8
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0208 	add.w	r2, r3, #8
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr

08004d52 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d52:	b480      	push	{r7}
 8004d54:	b083      	sub	sp, #12
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b085      	sub	sp, #20
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	689b      	ldr	r3, [r3, #8]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	1c5a      	adds	r2, r3, #1
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]
}
 8004da8:	bf00      	nop
 8004daa:	3714      	adds	r7, #20
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004db4:	b480      	push	{r7}
 8004db6:	b085      	sub	sp, #20
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d103      	bne.n	8004dd4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	60fb      	str	r3, [r7, #12]
 8004dd2:	e00c      	b.n	8004dee <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3308      	adds	r3, #8
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e002      	b.n	8004de2 <vListInsert+0x2e>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	685b      	ldr	r3, [r3, #4]
 8004de0:	60fb      	str	r3, [r7, #12]
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d2f6      	bcs.n	8004ddc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	601a      	str	r2, [r3, #0]
}
 8004e1a:	bf00      	nop
 8004e1c:	3714      	adds	r7, #20
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004e26:	b480      	push	{r7}
 8004e28:	b085      	sub	sp, #20
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6892      	ldr	r2, [r2, #8]
 8004e3c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	689b      	ldr	r3, [r3, #8]
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	6852      	ldr	r2, [r2, #4]
 8004e46:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d103      	bne.n	8004e5a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	689a      	ldr	r2, [r3, #8]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	1e5a      	subs	r2, r3, #1
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3714      	adds	r7, #20
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr
	...

08004e7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b084      	sub	sp, #16
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10a      	bne.n	8004ea6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ea2:	bf00      	nop
 8004ea4:	e7fe      	b.n	8004ea4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ea6:	f002 f8ed 	bl	8007084 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb2:	68f9      	ldr	r1, [r7, #12]
 8004eb4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004eb6:	fb01 f303 	mul.w	r3, r1, r3
 8004eba:	441a      	add	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	68f9      	ldr	r1, [r7, #12]
 8004eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004edc:	fb01 f303 	mul.w	r3, r1, r3
 8004ee0:	441a      	add	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	22ff      	movs	r2, #255	; 0xff
 8004eea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d114      	bne.n	8004f26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01a      	beq.n	8004f3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	3310      	adds	r3, #16
 8004f08:	4618      	mov	r0, r3
 8004f0a:	f001 fbad 	bl	8006668 <xTaskRemoveFromEventList>
 8004f0e:	4603      	mov	r3, r0
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d012      	beq.n	8004f3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004f14:	4b0c      	ldr	r3, [pc, #48]	; (8004f48 <xQueueGenericReset+0xcc>)
 8004f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f1a:	601a      	str	r2, [r3, #0]
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	f3bf 8f6f 	isb	sy
 8004f24:	e009      	b.n	8004f3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	3310      	adds	r3, #16
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	f7ff fef1 	bl	8004d12 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	3324      	adds	r3, #36	; 0x24
 8004f34:	4618      	mov	r0, r3
 8004f36:	f7ff feec 	bl	8004d12 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004f3a:	f002 f8d3 	bl	80070e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004f3e:	2301      	movs	r3, #1
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3710      	adds	r7, #16
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	e000ed04 	.word	0xe000ed04

08004f4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b08e      	sub	sp, #56	; 0x38
 8004f50:	af02      	add	r7, sp, #8
 8004f52:	60f8      	str	r0, [r7, #12]
 8004f54:	60b9      	str	r1, [r7, #8]
 8004f56:	607a      	str	r2, [r7, #4]
 8004f58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d10a      	bne.n	8004f92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f80:	f383 8811 	msr	BASEPRI, r3
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	f3bf 8f4f 	dsb	sy
 8004f8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f8e:	bf00      	nop
 8004f90:	e7fe      	b.n	8004f90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d002      	beq.n	8004f9e <xQueueGenericCreateStatic+0x52>
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d001      	beq.n	8004fa2 <xQueueGenericCreateStatic+0x56>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGenericCreateStatic+0x58>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	623b      	str	r3, [r7, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d102      	bne.n	8004fca <xQueueGenericCreateStatic+0x7e>
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d101      	bne.n	8004fce <xQueueGenericCreateStatic+0x82>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	e000      	b.n	8004fd0 <xQueueGenericCreateStatic+0x84>
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d10a      	bne.n	8004fea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	61fb      	str	r3, [r7, #28]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004fea:	2348      	movs	r3, #72	; 0x48
 8004fec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	2b48      	cmp	r3, #72	; 0x48
 8004ff2:	d00a      	beq.n	800500a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff8:	f383 8811 	msr	BASEPRI, r3
 8004ffc:	f3bf 8f6f 	isb	sy
 8005000:	f3bf 8f4f 	dsb	sy
 8005004:	61bb      	str	r3, [r7, #24]
}
 8005006:	bf00      	nop
 8005008:	e7fe      	b.n	8005008 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800500a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d00d      	beq.n	8005032 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005018:	2201      	movs	r2, #1
 800501a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800501e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005024:	9300      	str	r3, [sp, #0]
 8005026:	4613      	mov	r3, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f83f 	bl	80050b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005034:	4618      	mov	r0, r3
 8005036:	3730      	adds	r7, #48	; 0x30
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800503c:	b580      	push	{r7, lr}
 800503e:	b08a      	sub	sp, #40	; 0x28
 8005040:	af02      	add	r7, sp, #8
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	4613      	mov	r3, r2
 8005048:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d10a      	bne.n	8005066 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
 8005064:	e7fe      	b.n	8005064 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	68ba      	ldr	r2, [r7, #8]
 800506a:	fb02 f303 	mul.w	r3, r2, r3
 800506e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	3348      	adds	r3, #72	; 0x48
 8005074:	4618      	mov	r0, r3
 8005076:	f002 f927 	bl	80072c8 <pvPortMalloc>
 800507a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d011      	beq.n	80050a6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005082:	69bb      	ldr	r3, [r7, #24]
 8005084:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	3348      	adds	r3, #72	; 0x48
 800508a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	2200      	movs	r2, #0
 8005090:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005094:	79fa      	ldrb	r2, [r7, #7]
 8005096:	69bb      	ldr	r3, [r7, #24]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	4613      	mov	r3, r2
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	68b9      	ldr	r1, [r7, #8]
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 f805 	bl	80050b0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80050a6:	69bb      	ldr	r3, [r7, #24]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3720      	adds	r7, #32
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b084      	sub	sp, #16
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d103      	bne.n	80050cc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	e002      	b.n	80050d2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	68ba      	ldr	r2, [r7, #8]
 80050dc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80050de:	2101      	movs	r1, #1
 80050e0:	69b8      	ldr	r0, [r7, #24]
 80050e2:	f7ff fecb 	bl	8004e7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80050e6:	bf00      	nop
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}

080050ee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80050ee:	b580      	push	{r7, lr}
 80050f0:	b082      	sub	sp, #8
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00e      	beq.n	800511a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800510e:	2300      	movs	r3, #0
 8005110:	2200      	movs	r2, #0
 8005112:	2100      	movs	r1, #0
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f837 	bl	8005188 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800511a:	bf00      	nop
 800511c:	3708      	adds	r7, #8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005122:	b580      	push	{r7, lr}
 8005124:	b086      	sub	sp, #24
 8005126:	af00      	add	r7, sp, #0
 8005128:	4603      	mov	r3, r0
 800512a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800512c:	2301      	movs	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	2300      	movs	r3, #0
 8005132:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	461a      	mov	r2, r3
 8005138:	6939      	ldr	r1, [r7, #16]
 800513a:	6978      	ldr	r0, [r7, #20]
 800513c:	f7ff ff7e 	bl	800503c <xQueueGenericCreate>
 8005140:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005142:	68f8      	ldr	r0, [r7, #12]
 8005144:	f7ff ffd3 	bl	80050ee <prvInitialiseMutex>

		return xNewQueue;
 8005148:	68fb      	ldr	r3, [r7, #12]
	}
 800514a:	4618      	mov	r0, r3
 800514c:	3718      	adds	r7, #24
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}

08005152 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005152:	b580      	push	{r7, lr}
 8005154:	b088      	sub	sp, #32
 8005156:	af02      	add	r7, sp, #8
 8005158:	4603      	mov	r3, r0
 800515a:	6039      	str	r1, [r7, #0]
 800515c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800515e:	2301      	movs	r3, #1
 8005160:	617b      	str	r3, [r7, #20]
 8005162:	2300      	movs	r3, #0
 8005164:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005166:	79fb      	ldrb	r3, [r7, #7]
 8005168:	9300      	str	r3, [sp, #0]
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2200      	movs	r2, #0
 800516e:	6939      	ldr	r1, [r7, #16]
 8005170:	6978      	ldr	r0, [r7, #20]
 8005172:	f7ff feeb 	bl	8004f4c <xQueueGenericCreateStatic>
 8005176:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005178:	68f8      	ldr	r0, [r7, #12]
 800517a:	f7ff ffb8 	bl	80050ee <prvInitialiseMutex>

		return xNewQueue;
 800517e:	68fb      	ldr	r3, [r7, #12]
	}
 8005180:	4618      	mov	r0, r3
 8005182:	3718      	adds	r7, #24
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}

08005188 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b08e      	sub	sp, #56	; 0x38
 800518c:	af00      	add	r7, sp, #0
 800518e:	60f8      	str	r0, [r7, #12]
 8005190:	60b9      	str	r1, [r7, #8]
 8005192:	607a      	str	r2, [r7, #4]
 8005194:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005196:	2300      	movs	r3, #0
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d10a      	bne.n	80051ba <xQueueGenericSend+0x32>
	__asm volatile
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80051b6:	bf00      	nop
 80051b8:	e7fe      	b.n	80051b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d103      	bne.n	80051c8 <xQueueGenericSend+0x40>
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d101      	bne.n	80051cc <xQueueGenericSend+0x44>
 80051c8:	2301      	movs	r3, #1
 80051ca:	e000      	b.n	80051ce <xQueueGenericSend+0x46>
 80051cc:	2300      	movs	r3, #0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <xQueueGenericSend+0x60>
	__asm volatile
 80051d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d6:	f383 8811 	msr	BASEPRI, r3
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	f3bf 8f4f 	dsb	sy
 80051e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80051e4:	bf00      	nop
 80051e6:	e7fe      	b.n	80051e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d103      	bne.n	80051f6 <xQueueGenericSend+0x6e>
 80051ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f2:	2b01      	cmp	r3, #1
 80051f4:	d101      	bne.n	80051fa <xQueueGenericSend+0x72>
 80051f6:	2301      	movs	r3, #1
 80051f8:	e000      	b.n	80051fc <xQueueGenericSend+0x74>
 80051fa:	2300      	movs	r3, #0
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <xQueueGenericSend+0x8e>
	__asm volatile
 8005200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005204:	f383 8811 	msr	BASEPRI, r3
 8005208:	f3bf 8f6f 	isb	sy
 800520c:	f3bf 8f4f 	dsb	sy
 8005210:	623b      	str	r3, [r7, #32]
}
 8005212:	bf00      	nop
 8005214:	e7fe      	b.n	8005214 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005216:	f001 fbe3 	bl	80069e0 <xTaskGetSchedulerState>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <xQueueGenericSend+0x9e>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d101      	bne.n	800522a <xQueueGenericSend+0xa2>
 8005226:	2301      	movs	r3, #1
 8005228:	e000      	b.n	800522c <xQueueGenericSend+0xa4>
 800522a:	2300      	movs	r3, #0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d10a      	bne.n	8005246 <xQueueGenericSend+0xbe>
	__asm volatile
 8005230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005234:	f383 8811 	msr	BASEPRI, r3
 8005238:	f3bf 8f6f 	isb	sy
 800523c:	f3bf 8f4f 	dsb	sy
 8005240:	61fb      	str	r3, [r7, #28]
}
 8005242:	bf00      	nop
 8005244:	e7fe      	b.n	8005244 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005246:	f001 ff1d 	bl	8007084 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800524e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005250:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005252:	429a      	cmp	r2, r3
 8005254:	d302      	bcc.n	800525c <xQueueGenericSend+0xd4>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d129      	bne.n	80052b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	68b9      	ldr	r1, [r7, #8]
 8005260:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005262:	f000 fc9a 	bl	8005b9a <prvCopyDataToQueue>
 8005266:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	2b00      	cmp	r3, #0
 800526e:	d010      	beq.n	8005292 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005272:	3324      	adds	r3, #36	; 0x24
 8005274:	4618      	mov	r0, r3
 8005276:	f001 f9f7 	bl	8006668 <xTaskRemoveFromEventList>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d013      	beq.n	80052a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005280:	4b3f      	ldr	r3, [pc, #252]	; (8005380 <xQueueGenericSend+0x1f8>)
 8005282:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005286:	601a      	str	r2, [r3, #0]
 8005288:	f3bf 8f4f 	dsb	sy
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	e00a      	b.n	80052a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005294:	2b00      	cmp	r3, #0
 8005296:	d007      	beq.n	80052a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005298:	4b39      	ldr	r3, [pc, #228]	; (8005380 <xQueueGenericSend+0x1f8>)
 800529a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80052a8:	f001 ff1c 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e063      	b.n	8005378 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d103      	bne.n	80052be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052b6:	f001 ff15 	bl	80070e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80052ba:	2300      	movs	r3, #0
 80052bc:	e05c      	b.n	8005378 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d106      	bne.n	80052d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052c4:	f107 0314 	add.w	r3, r7, #20
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 fa2f 	bl	800672c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052ce:	2301      	movs	r3, #1
 80052d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052d2:	f001 ff07 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052d6:	f000 ffc3 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80052da:	f001 fed3 	bl	8007084 <vPortEnterCritical>
 80052de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052e4:	b25b      	sxtb	r3, r3
 80052e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ea:	d103      	bne.n	80052f4 <xQueueGenericSend+0x16c>
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	2200      	movs	r2, #0
 80052f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052fa:	b25b      	sxtb	r3, r3
 80052fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005300:	d103      	bne.n	800530a <xQueueGenericSend+0x182>
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	2200      	movs	r2, #0
 8005306:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800530a:	f001 feeb 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800530e:	1d3a      	adds	r2, r7, #4
 8005310:	f107 0314 	add.w	r3, r7, #20
 8005314:	4611      	mov	r1, r2
 8005316:	4618      	mov	r0, r3
 8005318:	f001 fa1e 	bl	8006758 <xTaskCheckForTimeOut>
 800531c:	4603      	mov	r3, r0
 800531e:	2b00      	cmp	r3, #0
 8005320:	d124      	bne.n	800536c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005322:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005324:	f000 fd31 	bl	8005d8a <prvIsQueueFull>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d018      	beq.n	8005360 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	3310      	adds	r3, #16
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	4611      	mov	r1, r2
 8005336:	4618      	mov	r0, r3
 8005338:	f001 f972 	bl	8006620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800533c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800533e:	f000 fcbc 	bl	8005cba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005342:	f000 ff9b 	bl	800627c <xTaskResumeAll>
 8005346:	4603      	mov	r3, r0
 8005348:	2b00      	cmp	r3, #0
 800534a:	f47f af7c 	bne.w	8005246 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800534e:	4b0c      	ldr	r3, [pc, #48]	; (8005380 <xQueueGenericSend+0x1f8>)
 8005350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005354:	601a      	str	r2, [r3, #0]
 8005356:	f3bf 8f4f 	dsb	sy
 800535a:	f3bf 8f6f 	isb	sy
 800535e:	e772      	b.n	8005246 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005360:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005362:	f000 fcaa 	bl	8005cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005366:	f000 ff89 	bl	800627c <xTaskResumeAll>
 800536a:	e76c      	b.n	8005246 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800536c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800536e:	f000 fca4 	bl	8005cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005372:	f000 ff83 	bl	800627c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005376:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005378:	4618      	mov	r0, r3
 800537a:	3738      	adds	r7, #56	; 0x38
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	e000ed04 	.word	0xe000ed04

08005384 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b090      	sub	sp, #64	; 0x40
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]
 8005390:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10a      	bne.n	80053b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800539c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a0:	f383 8811 	msr	BASEPRI, r3
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80053ae:	bf00      	nop
 80053b0:	e7fe      	b.n	80053b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d103      	bne.n	80053c0 <xQueueGenericSendFromISR+0x3c>
 80053b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d101      	bne.n	80053c4 <xQueueGenericSendFromISR+0x40>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e000      	b.n	80053c6 <xQueueGenericSendFromISR+0x42>
 80053c4:	2300      	movs	r3, #0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10a      	bne.n	80053e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80053ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ce:	f383 8811 	msr	BASEPRI, r3
 80053d2:	f3bf 8f6f 	isb	sy
 80053d6:	f3bf 8f4f 	dsb	sy
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80053dc:	bf00      	nop
 80053de:	e7fe      	b.n	80053de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d103      	bne.n	80053ee <xQueueGenericSendFromISR+0x6a>
 80053e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ea:	2b01      	cmp	r3, #1
 80053ec:	d101      	bne.n	80053f2 <xQueueGenericSendFromISR+0x6e>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueGenericSendFromISR+0x70>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10a      	bne.n	800540e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	623b      	str	r3, [r7, #32]
}
 800540a:	bf00      	nop
 800540c:	e7fe      	b.n	800540c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800540e:	f001 ff1b 	bl	8007248 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005412:	f3ef 8211 	mrs	r2, BASEPRI
 8005416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	61fa      	str	r2, [r7, #28]
 8005428:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800542a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800542c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005434:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005436:	429a      	cmp	r2, r3
 8005438:	d302      	bcc.n	8005440 <xQueueGenericSendFromISR+0xbc>
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	2b02      	cmp	r3, #2
 800543e:	d12f      	bne.n	80054a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005442:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800544c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800544e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005450:	683a      	ldr	r2, [r7, #0]
 8005452:	68b9      	ldr	r1, [r7, #8]
 8005454:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005456:	f000 fba0 	bl	8005b9a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800545a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800545e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005462:	d112      	bne.n	800548a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005468:	2b00      	cmp	r3, #0
 800546a:	d016      	beq.n	800549a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800546c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546e:	3324      	adds	r3, #36	; 0x24
 8005470:	4618      	mov	r0, r3
 8005472:	f001 f8f9 	bl	8006668 <xTaskRemoveFromEventList>
 8005476:	4603      	mov	r3, r0
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00e      	beq.n	800549a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d00b      	beq.n	800549a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	e007      	b.n	800549a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800548a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800548e:	3301      	adds	r3, #1
 8005490:	b2db      	uxtb	r3, r3
 8005492:	b25a      	sxtb	r2, r3
 8005494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005496:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800549a:	2301      	movs	r3, #1
 800549c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800549e:	e001      	b.n	80054a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80054ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3740      	adds	r7, #64	; 0x40
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b08e      	sub	sp, #56	; 0x38
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d10a      	bne.n	80054e4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	623b      	str	r3, [r7, #32]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00a      	beq.n	8005502 <xQueueGiveFromISR+0x48>
	__asm volatile
 80054ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f0:	f383 8811 	msr	BASEPRI, r3
 80054f4:	f3bf 8f6f 	isb	sy
 80054f8:	f3bf 8f4f 	dsb	sy
 80054fc:	61fb      	str	r3, [r7, #28]
}
 80054fe:	bf00      	nop
 8005500:	e7fe      	b.n	8005500 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d103      	bne.n	8005512 <xQueueGiveFromISR+0x58>
 800550a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <xQueueGiveFromISR+0x5c>
 8005512:	2301      	movs	r3, #1
 8005514:	e000      	b.n	8005518 <xQueueGiveFromISR+0x5e>
 8005516:	2300      	movs	r3, #0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d10a      	bne.n	8005532 <xQueueGiveFromISR+0x78>
	__asm volatile
 800551c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005520:	f383 8811 	msr	BASEPRI, r3
 8005524:	f3bf 8f6f 	isb	sy
 8005528:	f3bf 8f4f 	dsb	sy
 800552c:	61bb      	str	r3, [r7, #24]
}
 800552e:	bf00      	nop
 8005530:	e7fe      	b.n	8005530 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005532:	f001 fe89 	bl	8007248 <vPortValidateInterruptPriority>
	__asm volatile
 8005536:	f3ef 8211 	mrs	r2, BASEPRI
 800553a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	617a      	str	r2, [r7, #20]
 800554c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800554e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005556:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800555e:	429a      	cmp	r2, r3
 8005560:	d22b      	bcs.n	80055ba <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005564:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005568:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800556c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556e:	1c5a      	adds	r2, r3, #1
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005574:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800557c:	d112      	bne.n	80055a4 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800557e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	3324      	adds	r3, #36	; 0x24
 800558a:	4618      	mov	r0, r3
 800558c:	f001 f86c 	bl	8006668 <xTaskRemoveFromEventList>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2201      	movs	r2, #1
 80055a0:	601a      	str	r2, [r3, #0]
 80055a2:	e007      	b.n	80055b4 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80055a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80055a8:	3301      	adds	r3, #1
 80055aa:	b2db      	uxtb	r3, r3
 80055ac:	b25a      	sxtb	r2, r3
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80055b4:	2301      	movs	r3, #1
 80055b6:	637b      	str	r3, [r7, #52]	; 0x34
 80055b8:	e001      	b.n	80055be <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80055ba:	2300      	movs	r3, #0
 80055bc:	637b      	str	r3, [r7, #52]	; 0x34
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f383 8811 	msr	BASEPRI, r3
}
 80055c8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80055ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3738      	adds	r7, #56	; 0x38
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af00      	add	r7, sp, #0
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	60b9      	str	r1, [r7, #8]
 80055de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10a      	bne.n	8005604 <xQueueReceive+0x30>
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	623b      	str	r3, [r7, #32]
}
 8005600:	bf00      	nop
 8005602:	e7fe      	b.n	8005602 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d103      	bne.n	8005612 <xQueueReceive+0x3e>
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <xQueueReceive+0x42>
 8005612:	2301      	movs	r3, #1
 8005614:	e000      	b.n	8005618 <xQueueReceive+0x44>
 8005616:	2300      	movs	r3, #0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <xQueueReceive+0x5e>
	__asm volatile
 800561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005620:	f383 8811 	msr	BASEPRI, r3
 8005624:	f3bf 8f6f 	isb	sy
 8005628:	f3bf 8f4f 	dsb	sy
 800562c:	61fb      	str	r3, [r7, #28]
}
 800562e:	bf00      	nop
 8005630:	e7fe      	b.n	8005630 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005632:	f001 f9d5 	bl	80069e0 <xTaskGetSchedulerState>
 8005636:	4603      	mov	r3, r0
 8005638:	2b00      	cmp	r3, #0
 800563a:	d102      	bne.n	8005642 <xQueueReceive+0x6e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <xQueueReceive+0x72>
 8005642:	2301      	movs	r3, #1
 8005644:	e000      	b.n	8005648 <xQueueReceive+0x74>
 8005646:	2300      	movs	r3, #0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueReceive+0x8e>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	61bb      	str	r3, [r7, #24]
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005662:	f001 fd0f 	bl	8007084 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800566c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566e:	2b00      	cmp	r3, #0
 8005670:	d01f      	beq.n	80056b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005676:	f000 fafa 	bl	8005c6e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800567a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567c:	1e5a      	subs	r2, r3, #1
 800567e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005680:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00f      	beq.n	80056aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568c:	3310      	adds	r3, #16
 800568e:	4618      	mov	r0, r3
 8005690:	f000 ffea 	bl	8006668 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800569a:	4b3d      	ldr	r3, [pc, #244]	; (8005790 <xQueueReceive+0x1bc>)
 800569c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	f3bf 8f4f 	dsb	sy
 80056a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80056aa:	f001 fd1b 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e069      	b.n	8005786 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80056b8:	f001 fd14 	bl	80070e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80056bc:	2300      	movs	r3, #0
 80056be:	e062      	b.n	8005786 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80056c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d106      	bne.n	80056d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80056c6:	f107 0310 	add.w	r3, r7, #16
 80056ca:	4618      	mov	r0, r3
 80056cc:	f001 f82e 	bl	800672c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80056d0:	2301      	movs	r3, #1
 80056d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80056d4:	f001 fd06 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80056d8:	f000 fdc2 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80056dc:	f001 fcd2 	bl	8007084 <vPortEnterCritical>
 80056e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056e6:	b25b      	sxtb	r3, r3
 80056e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ec:	d103      	bne.n	80056f6 <xQueueReceive+0x122>
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056fc:	b25b      	sxtb	r3, r3
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d103      	bne.n	800570c <xQueueReceive+0x138>
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	2200      	movs	r2, #0
 8005708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800570c:	f001 fcea 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005710:	1d3a      	adds	r2, r7, #4
 8005712:	f107 0310 	add.w	r3, r7, #16
 8005716:	4611      	mov	r1, r2
 8005718:	4618      	mov	r0, r3
 800571a:	f001 f81d 	bl	8006758 <xTaskCheckForTimeOut>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d123      	bne.n	800576c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005724:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005726:	f000 fb1a 	bl	8005d5e <prvIsQueueEmpty>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d017      	beq.n	8005760 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	3324      	adds	r3, #36	; 0x24
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4611      	mov	r1, r2
 8005738:	4618      	mov	r0, r3
 800573a:	f000 ff71 	bl	8006620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800573e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005740:	f000 fabb 	bl	8005cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005744:	f000 fd9a 	bl	800627c <xTaskResumeAll>
 8005748:	4603      	mov	r3, r0
 800574a:	2b00      	cmp	r3, #0
 800574c:	d189      	bne.n	8005662 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800574e:	4b10      	ldr	r3, [pc, #64]	; (8005790 <xQueueReceive+0x1bc>)
 8005750:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005754:	601a      	str	r2, [r3, #0]
 8005756:	f3bf 8f4f 	dsb	sy
 800575a:	f3bf 8f6f 	isb	sy
 800575e:	e780      	b.n	8005662 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005760:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005762:	f000 faaa 	bl	8005cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005766:	f000 fd89 	bl	800627c <xTaskResumeAll>
 800576a:	e77a      	b.n	8005662 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800576c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800576e:	f000 faa4 	bl	8005cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005772:	f000 fd83 	bl	800627c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005776:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005778:	f000 faf1 	bl	8005d5e <prvIsQueueEmpty>
 800577c:	4603      	mov	r3, r0
 800577e:	2b00      	cmp	r3, #0
 8005780:	f43f af6f 	beq.w	8005662 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005784:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005786:	4618      	mov	r0, r3
 8005788:	3730      	adds	r7, #48	; 0x30
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	e000ed04 	.word	0xe000ed04

08005794 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b08e      	sub	sp, #56	; 0x38
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800579e:	2300      	movs	r3, #0
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80057a6:	2300      	movs	r3, #0
 80057a8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80057aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10a      	bne.n	80057c6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 80057b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b4:	f383 8811 	msr	BASEPRI, r3
 80057b8:	f3bf 8f6f 	isb	sy
 80057bc:	f3bf 8f4f 	dsb	sy
 80057c0:	623b      	str	r3, [r7, #32]
}
 80057c2:	bf00      	nop
 80057c4:	e7fe      	b.n	80057c4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80057c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	61fb      	str	r3, [r7, #28]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057e4:	f001 f8fc 	bl	80069e0 <xTaskGetSchedulerState>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d102      	bne.n	80057f4 <xQueueSemaphoreTake+0x60>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <xQueueSemaphoreTake+0x64>
 80057f4:	2301      	movs	r3, #1
 80057f6:	e000      	b.n	80057fa <xQueueSemaphoreTake+0x66>
 80057f8:	2300      	movs	r3, #0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d10a      	bne.n	8005814 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80057fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005802:	f383 8811 	msr	BASEPRI, r3
 8005806:	f3bf 8f6f 	isb	sy
 800580a:	f3bf 8f4f 	dsb	sy
 800580e:	61bb      	str	r3, [r7, #24]
}
 8005810:	bf00      	nop
 8005812:	e7fe      	b.n	8005812 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005814:	f001 fc36 	bl	8007084 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800581c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800581e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005820:	2b00      	cmp	r3, #0
 8005822:	d024      	beq.n	800586e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005826:	1e5a      	subs	r2, r3, #1
 8005828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d104      	bne.n	800583e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005834:	f001 fa7c 	bl	8006d30 <pvTaskIncrementMutexHeldCount>
 8005838:	4602      	mov	r2, r0
 800583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800583c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800583e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d00f      	beq.n	8005866 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	3310      	adds	r3, #16
 800584a:	4618      	mov	r0, r3
 800584c:	f000 ff0c 	bl	8006668 <xTaskRemoveFromEventList>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005856:	4b54      	ldr	r3, [pc, #336]	; (80059a8 <xQueueSemaphoreTake+0x214>)
 8005858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585c:	601a      	str	r2, [r3, #0]
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005866:	f001 fc3d 	bl	80070e4 <vPortExitCritical>
				return pdPASS;
 800586a:	2301      	movs	r3, #1
 800586c:	e097      	b.n	800599e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d111      	bne.n	8005898 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800587a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587e:	f383 8811 	msr	BASEPRI, r3
 8005882:	f3bf 8f6f 	isb	sy
 8005886:	f3bf 8f4f 	dsb	sy
 800588a:	617b      	str	r3, [r7, #20]
}
 800588c:	bf00      	nop
 800588e:	e7fe      	b.n	800588e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005890:	f001 fc28 	bl	80070e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005894:	2300      	movs	r3, #0
 8005896:	e082      	b.n	800599e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800589a:	2b00      	cmp	r3, #0
 800589c:	d106      	bne.n	80058ac <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800589e:	f107 030c 	add.w	r3, r7, #12
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 ff42 	bl	800672c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80058a8:	2301      	movs	r3, #1
 80058aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80058ac:	f001 fc1a 	bl	80070e4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80058b0:	f000 fcd6 	bl	8006260 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80058b4:	f001 fbe6 	bl	8007084 <vPortEnterCritical>
 80058b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058be:	b25b      	sxtb	r3, r3
 80058c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058c4:	d103      	bne.n	80058ce <xQueueSemaphoreTake+0x13a>
 80058c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058c8:	2200      	movs	r2, #0
 80058ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058d4:	b25b      	sxtb	r3, r3
 80058d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058da:	d103      	bne.n	80058e4 <xQueueSemaphoreTake+0x150>
 80058dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e4:	f001 fbfe 	bl	80070e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058e8:	463a      	mov	r2, r7
 80058ea:	f107 030c 	add.w	r3, r7, #12
 80058ee:	4611      	mov	r1, r2
 80058f0:	4618      	mov	r0, r3
 80058f2:	f000 ff31 	bl	8006758 <xTaskCheckForTimeOut>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d132      	bne.n	8005962 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fe:	f000 fa2e 	bl	8005d5e <prvIsQueueEmpty>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d026      	beq.n	8005956 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d109      	bne.n	8005924 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005910:	f001 fbb8 	bl	8007084 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4618      	mov	r0, r3
 800591a:	f001 f87f 	bl	8006a1c <xTaskPriorityInherit>
 800591e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005920:	f001 fbe0 	bl	80070e4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005926:	3324      	adds	r3, #36	; 0x24
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	4611      	mov	r1, r2
 800592c:	4618      	mov	r0, r3
 800592e:	f000 fe77 	bl	8006620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005932:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005934:	f000 f9c1 	bl	8005cba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005938:	f000 fca0 	bl	800627c <xTaskResumeAll>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	f47f af68 	bne.w	8005814 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005944:	4b18      	ldr	r3, [pc, #96]	; (80059a8 <xQueueSemaphoreTake+0x214>)
 8005946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]
 800594c:	f3bf 8f4f 	dsb	sy
 8005950:	f3bf 8f6f 	isb	sy
 8005954:	e75e      	b.n	8005814 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005956:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005958:	f000 f9af 	bl	8005cba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800595c:	f000 fc8e 	bl	800627c <xTaskResumeAll>
 8005960:	e758      	b.n	8005814 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005962:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005964:	f000 f9a9 	bl	8005cba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005968:	f000 fc88 	bl	800627c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800596c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800596e:	f000 f9f6 	bl	8005d5e <prvIsQueueEmpty>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	f43f af4d 	beq.w	8005814 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00d      	beq.n	800599c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005980:	f001 fb80 	bl	8007084 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005984:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005986:	f000 f8f0 	bl	8005b6a <prvGetDisinheritPriorityAfterTimeout>
 800598a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005992:	4618      	mov	r0, r3
 8005994:	f001 f93e 	bl	8006c14 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005998:	f001 fba4 	bl	80070e4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800599c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800599e:	4618      	mov	r0, r3
 80059a0:	3738      	adds	r7, #56	; 0x38
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}
 80059a6:	bf00      	nop
 80059a8:	e000ed04 	.word	0xe000ed04

080059ac <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b08e      	sub	sp, #56	; 0x38
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80059bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d10a      	bne.n	80059d8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	623b      	str	r3, [r7, #32]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d103      	bne.n	80059e6 <xQueueReceiveFromISR+0x3a>
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueReceiveFromISR+0x3e>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueReceiveFromISR+0x40>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61fb      	str	r3, [r7, #28]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a06:	f001 fc1f 	bl	8007248 <vPortValidateInterruptPriority>
	__asm volatile
 8005a0a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a12:	f383 8811 	msr	BASEPRI, r3
 8005a16:	f3bf 8f6f 	isb	sy
 8005a1a:	f3bf 8f4f 	dsb	sy
 8005a1e:	61ba      	str	r2, [r7, #24]
 8005a20:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a22:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a24:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d02f      	beq.n	8005a92 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005a3c:	68b9      	ldr	r1, [r7, #8]
 8005a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005a40:	f000 f915 	bl	8005c6e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	1e5a      	subs	r2, r3, #1
 8005a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a54:	d112      	bne.n	8005a7c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d016      	beq.n	8005a8c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	3310      	adds	r3, #16
 8005a62:	4618      	mov	r0, r3
 8005a64:	f000 fe00 	bl	8006668 <xTaskRemoveFromEventList>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00e      	beq.n	8005a8c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e007      	b.n	8005a8c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005a80:	3301      	adds	r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	b25a      	sxtb	r2, r3
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a90:	e001      	b.n	8005a96 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	637b      	str	r3, [r7, #52]	; 0x34
 8005a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a98:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	f383 8811 	msr	BASEPRI, r3
}
 8005aa0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3738      	adds	r7, #56	; 0x38
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	60bb      	str	r3, [r7, #8]
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005ad0:	f001 fad8 	bl	8007084 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005ada:	f001 fb03 	bl	80070e4 <vPortExitCritical>

	return uxReturn;
 8005ade:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b087      	sub	sp, #28
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d10a      	bne.n	8005b10 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8005afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afe:	f383 8811 	msr	BASEPRI, r3
 8005b02:	f3bf 8f6f 	isb	sy
 8005b06:	f3bf 8f4f 	dsb	sy
 8005b0a:	60fb      	str	r3, [r7, #12]
}
 8005b0c:	bf00      	nop
 8005b0e:	e7fe      	b.n	8005b0e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b14:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8005b16:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005b18:	4618      	mov	r0, r3
 8005b1a:	371c      	adds	r7, #28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr

08005b24 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10a      	bne.n	8005b4c <vQueueDelete+0x28>
	__asm volatile
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	60bb      	str	r3, [r7, #8]
}
 8005b48:	bf00      	nop
 8005b4a:	e7fe      	b.n	8005b4a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f000 f935 	bl	8005dbc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f001 fc7f 	bl	8007460 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b62:	bf00      	nop
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b6a:	b480      	push	{r7}
 8005b6c:	b085      	sub	sp, #20
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d006      	beq.n	8005b88 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f1c3 0307 	rsb	r3, r3, #7
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	e001      	b.n	8005b8c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b086      	sub	sp, #24
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	60f8      	str	r0, [r7, #12]
 8005ba2:	60b9      	str	r1, [r7, #8]
 8005ba4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d14d      	bne.n	8005c5c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f000 ff9f 	bl	8006b08 <xTaskPriorityDisinherit>
 8005bca:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	609a      	str	r2, [r3, #8]
 8005bd2:	e043      	b.n	8005c5c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d119      	bne.n	8005c0e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6858      	ldr	r0, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	461a      	mov	r2, r3
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	f011 f913 	bl	8016e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	441a      	add	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	685a      	ldr	r2, [r3, #4]
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d32b      	bcc.n	8005c5c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	605a      	str	r2, [r3, #4]
 8005c0c:	e026      	b.n	8005c5c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68d8      	ldr	r0, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	461a      	mov	r2, r3
 8005c18:	68b9      	ldr	r1, [r7, #8]
 8005c1a:	f011 f8f9 	bl	8016e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c26:	425b      	negs	r3, r3
 8005c28:	441a      	add	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d207      	bcs.n	8005c4a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689a      	ldr	r2, [r3, #8]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	425b      	negs	r3, r3
 8005c44:	441a      	add	r2, r3
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b02      	cmp	r3, #2
 8005c4e:	d105      	bne.n	8005c5c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d002      	beq.n	8005c5c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	1c5a      	adds	r2, r3, #1
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c64:	697b      	ldr	r3, [r7, #20]
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3718      	adds	r7, #24
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c6e:	b580      	push	{r7, lr}
 8005c70:	b082      	sub	sp, #8
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
 8005c76:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d018      	beq.n	8005cb2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	68da      	ldr	r2, [r3, #12]
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	441a      	add	r2, r3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d303      	bcc.n	8005ca2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68d9      	ldr	r1, [r3, #12]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	461a      	mov	r2, r3
 8005cac:	6838      	ldr	r0, [r7, #0]
 8005cae:	f011 f8af 	bl	8016e10 <memcpy>
	}
}
 8005cb2:	bf00      	nop
 8005cb4:	3708      	adds	r7, #8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}

08005cba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cba:	b580      	push	{r7, lr}
 8005cbc:	b084      	sub	sp, #16
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cc2:	f001 f9df 	bl	8007084 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ccc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cce:	e011      	b.n	8005cf4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d012      	beq.n	8005cfe <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	3324      	adds	r3, #36	; 0x24
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f000 fcc3 	bl	8006668 <xTaskRemoveFromEventList>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce8:	f000 fd98 	bl	800681c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
 8005cee:	3b01      	subs	r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dce9      	bgt.n	8005cd0 <prvUnlockQueue+0x16>
 8005cfc:	e000      	b.n	8005d00 <prvUnlockQueue+0x46>
					break;
 8005cfe:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	22ff      	movs	r2, #255	; 0xff
 8005d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d08:	f001 f9ec 	bl	80070e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d0c:	f001 f9ba 	bl	8007084 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d16:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d18:	e011      	b.n	8005d3e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d012      	beq.n	8005d48 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	3310      	adds	r3, #16
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fc9e 	bl	8006668 <xTaskRemoveFromEventList>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d32:	f000 fd73 	bl	800681c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d36:	7bbb      	ldrb	r3, [r7, #14]
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dce9      	bgt.n	8005d1a <prvUnlockQueue+0x60>
 8005d46:	e000      	b.n	8005d4a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d48:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	22ff      	movs	r2, #255	; 0xff
 8005d4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d52:	f001 f9c7 	bl	80070e4 <vPortExitCritical>
}
 8005d56:	bf00      	nop
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d5e:	b580      	push	{r7, lr}
 8005d60:	b084      	sub	sp, #16
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d66:	f001 f98d 	bl	8007084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d102      	bne.n	8005d78 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d72:	2301      	movs	r3, #1
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	e001      	b.n	8005d7c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d7c:	f001 f9b2 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 8005d80:	68fb      	ldr	r3, [r7, #12]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d92:	f001 f977 	bl	8007084 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d102      	bne.n	8005da8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
 8005da6:	e001      	b.n	8005dac <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005da8:	2300      	movs	r3, #0
 8005daa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dac:	f001 f99a 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 8005db0:	68fb      	ldr	r3, [r7, #12]
}
 8005db2:	4618      	mov	r0, r3
 8005db4:	3710      	adds	r7, #16
 8005db6:	46bd      	mov	sp, r7
 8005db8:	bd80      	pop	{r7, pc}
	...

08005dbc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e016      	b.n	8005df8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005dca:	4a10      	ldr	r2, [pc, #64]	; (8005e0c <vQueueUnregisterQueue+0x50>)
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4413      	add	r3, r2
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d10b      	bne.n	8005df2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005dda:	4a0c      	ldr	r2, [pc, #48]	; (8005e0c <vQueueUnregisterQueue+0x50>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2100      	movs	r1, #0
 8005de0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005de4:	4a09      	ldr	r2, [pc, #36]	; (8005e0c <vQueueUnregisterQueue+0x50>)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	00db      	lsls	r3, r3, #3
 8005dea:	4413      	add	r3, r2
 8005dec:	2200      	movs	r2, #0
 8005dee:	605a      	str	r2, [r3, #4]
				break;
 8005df0:	e006      	b.n	8005e00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3301      	adds	r3, #1
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2b07      	cmp	r3, #7
 8005dfc:	d9e5      	bls.n	8005dca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005dfe:	bf00      	nop
 8005e00:	bf00      	nop
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr
 8005e0c:	2000b8c4 	.word	0x2000b8c4

08005e10 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08e      	sub	sp, #56	; 0x38
 8005e14:	af04      	add	r7, sp, #16
 8005e16:	60f8      	str	r0, [r7, #12]
 8005e18:	60b9      	str	r1, [r7, #8]
 8005e1a:	607a      	str	r2, [r7, #4]
 8005e1c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d10a      	bne.n	8005e3a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e28:	f383 8811 	msr	BASEPRI, r3
 8005e2c:	f3bf 8f6f 	isb	sy
 8005e30:	f3bf 8f4f 	dsb	sy
 8005e34:	623b      	str	r3, [r7, #32]
}
 8005e36:	bf00      	nop
 8005e38:	e7fe      	b.n	8005e38 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d10a      	bne.n	8005e56 <xTaskCreateStatic+0x46>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	61fb      	str	r3, [r7, #28]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005e56:	2354      	movs	r3, #84	; 0x54
 8005e58:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	2b54      	cmp	r3, #84	; 0x54
 8005e5e:	d00a      	beq.n	8005e76 <xTaskCreateStatic+0x66>
	__asm volatile
 8005e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e64:	f383 8811 	msr	BASEPRI, r3
 8005e68:	f3bf 8f6f 	isb	sy
 8005e6c:	f3bf 8f4f 	dsb	sy
 8005e70:	61bb      	str	r3, [r7, #24]
}
 8005e72:	bf00      	nop
 8005e74:	e7fe      	b.n	8005e74 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005e76:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d01e      	beq.n	8005ebc <xTaskCreateStatic+0xac>
 8005e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d01b      	beq.n	8005ebc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005e84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e86:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005e96:	2300      	movs	r3, #0
 8005e98:	9303      	str	r3, [sp, #12]
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	9302      	str	r3, [sp, #8]
 8005e9e:	f107 0314 	add.w	r3, r7, #20
 8005ea2:	9301      	str	r3, [sp, #4]
 8005ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea6:	9300      	str	r3, [sp, #0]
 8005ea8:	683b      	ldr	r3, [r7, #0]
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	68b9      	ldr	r1, [r7, #8]
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f850 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005eb4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005eb6:	f000 f8d5 	bl	8006064 <prvAddNewTaskToReadyList>
 8005eba:	e001      	b.n	8005ec0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ec0:	697b      	ldr	r3, [r7, #20]
	}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3728      	adds	r7, #40	; 0x28
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b08c      	sub	sp, #48	; 0x30
 8005ece:	af04      	add	r7, sp, #16
 8005ed0:	60f8      	str	r0, [r7, #12]
 8005ed2:	60b9      	str	r1, [r7, #8]
 8005ed4:	603b      	str	r3, [r7, #0]
 8005ed6:	4613      	mov	r3, r2
 8005ed8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005eda:	88fb      	ldrh	r3, [r7, #6]
 8005edc:	009b      	lsls	r3, r3, #2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f001 f9f2 	bl	80072c8 <pvPortMalloc>
 8005ee4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d00e      	beq.n	8005f0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005eec:	2054      	movs	r0, #84	; 0x54
 8005eee:	f001 f9eb 	bl	80072c8 <pvPortMalloc>
 8005ef2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ef4:	69fb      	ldr	r3, [r7, #28]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	697a      	ldr	r2, [r7, #20]
 8005efe:	631a      	str	r2, [r3, #48]	; 0x30
 8005f00:	e005      	b.n	8005f0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005f02:	6978      	ldr	r0, [r7, #20]
 8005f04:	f001 faac 	bl	8007460 <vPortFree>
 8005f08:	e001      	b.n	8005f0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005f0e:	69fb      	ldr	r3, [r7, #28]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d017      	beq.n	8005f44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005f1c:	88fa      	ldrh	r2, [r7, #6]
 8005f1e:	2300      	movs	r3, #0
 8005f20:	9303      	str	r3, [sp, #12]
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	9302      	str	r3, [sp, #8]
 8005f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f28:	9301      	str	r3, [sp, #4]
 8005f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f2c:	9300      	str	r3, [sp, #0]
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	68b9      	ldr	r1, [r7, #8]
 8005f32:	68f8      	ldr	r0, [r7, #12]
 8005f34:	f000 f80e 	bl	8005f54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f38:	69f8      	ldr	r0, [r7, #28]
 8005f3a:	f000 f893 	bl	8006064 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	61bb      	str	r3, [r7, #24]
 8005f42:	e002      	b.n	8005f4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295
 8005f48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
	}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3720      	adds	r7, #32
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}

08005f54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b088      	sub	sp, #32
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	60f8      	str	r0, [r7, #12]
 8005f5c:	60b9      	str	r1, [r7, #8]
 8005f5e:	607a      	str	r2, [r7, #4]
 8005f60:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005f6c:	3b01      	subs	r3, #1
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	4413      	add	r3, r2
 8005f72:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	f023 0307 	bic.w	r3, r3, #7
 8005f7a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	f003 0307 	and.w	r3, r3, #7
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <prvInitialiseNewTask+0x48>
	__asm volatile
 8005f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8a:	f383 8811 	msr	BASEPRI, r3
 8005f8e:	f3bf 8f6f 	isb	sy
 8005f92:	f3bf 8f4f 	dsb	sy
 8005f96:	617b      	str	r3, [r7, #20]
}
 8005f98:	bf00      	nop
 8005f9a:	e7fe      	b.n	8005f9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d01f      	beq.n	8005fe2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	61fb      	str	r3, [r7, #28]
 8005fa6:	e012      	b.n	8005fce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005fa8:	68ba      	ldr	r2, [r7, #8]
 8005faa:	69fb      	ldr	r3, [r7, #28]
 8005fac:	4413      	add	r3, r2
 8005fae:	7819      	ldrb	r1, [r3, #0]
 8005fb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	3334      	adds	r3, #52	; 0x34
 8005fb8:	460a      	mov	r2, r1
 8005fba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005fbc:	68ba      	ldr	r2, [r7, #8]
 8005fbe:	69fb      	ldr	r3, [r7, #28]
 8005fc0:	4413      	add	r3, r2
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d006      	beq.n	8005fd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61fb      	str	r3, [r7, #28]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	2b0f      	cmp	r3, #15
 8005fd2:	d9e9      	bls.n	8005fa8 <prvInitialiseNewTask+0x54>
 8005fd4:	e000      	b.n	8005fd8 <prvInitialiseNewTask+0x84>
			{
				break;
 8005fd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005fe0:	e003      	b.n	8005fea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005fea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fec:	2b06      	cmp	r3, #6
 8005fee:	d901      	bls.n	8005ff4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005ff0:	2306      	movs	r3, #6
 8005ff2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ff8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ffc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ffe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	2200      	movs	r2, #0
 8006004:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	3304      	adds	r3, #4
 800600a:	4618      	mov	r0, r3
 800600c:	f7fe fea1 	bl	8004d52 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006012:	3318      	adds	r3, #24
 8006014:	4618      	mov	r0, r3
 8006016:	f7fe fe9c 	bl	8004d52 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800601a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800601e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006022:	f1c3 0207 	rsb	r2, r3, #7
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800602a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800602c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800602e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	2200      	movs	r2, #0
 8006034:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006038:	2200      	movs	r2, #0
 800603a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800603e:	683a      	ldr	r2, [r7, #0]
 8006040:	68f9      	ldr	r1, [r7, #12]
 8006042:	69b8      	ldr	r0, [r7, #24]
 8006044:	f000 feee 	bl	8006e24 <pxPortInitialiseStack>
 8006048:	4602      	mov	r2, r0
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006058:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800605a:	bf00      	nop
 800605c:	3720      	adds	r7, #32
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
	...

08006064 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800606c:	f001 f80a 	bl	8007084 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006070:	4b2a      	ldr	r3, [pc, #168]	; (800611c <prvAddNewTaskToReadyList+0xb8>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3301      	adds	r3, #1
 8006076:	4a29      	ldr	r2, [pc, #164]	; (800611c <prvAddNewTaskToReadyList+0xb8>)
 8006078:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800607a:	4b29      	ldr	r3, [pc, #164]	; (8006120 <prvAddNewTaskToReadyList+0xbc>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006082:	4a27      	ldr	r2, [pc, #156]	; (8006120 <prvAddNewTaskToReadyList+0xbc>)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006088:	4b24      	ldr	r3, [pc, #144]	; (800611c <prvAddNewTaskToReadyList+0xb8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b01      	cmp	r3, #1
 800608e:	d110      	bne.n	80060b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006090:	f000 fbe8 	bl	8006864 <prvInitialiseTaskLists>
 8006094:	e00d      	b.n	80060b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006096:	4b23      	ldr	r3, [pc, #140]	; (8006124 <prvAddNewTaskToReadyList+0xc0>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800609e:	4b20      	ldr	r3, [pc, #128]	; (8006120 <prvAddNewTaskToReadyList+0xbc>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d802      	bhi.n	80060b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80060ac:	4a1c      	ldr	r2, [pc, #112]	; (8006120 <prvAddNewTaskToReadyList+0xbc>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80060b2:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <prvAddNewTaskToReadyList+0xc4>)
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	3301      	adds	r3, #1
 80060b8:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <prvAddNewTaskToReadyList+0xc4>)
 80060ba:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	2201      	movs	r2, #1
 80060c2:	409a      	lsls	r2, r3
 80060c4:	4b19      	ldr	r3, [pc, #100]	; (800612c <prvAddNewTaskToReadyList+0xc8>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <prvAddNewTaskToReadyList+0xc8>)
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060d2:	4613      	mov	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	4a15      	ldr	r2, [pc, #84]	; (8006130 <prvAddNewTaskToReadyList+0xcc>)
 80060dc:	441a      	add	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	3304      	adds	r3, #4
 80060e2:	4619      	mov	r1, r3
 80060e4:	4610      	mov	r0, r2
 80060e6:	f7fe fe41 	bl	8004d6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80060ea:	f000 fffb 	bl	80070e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80060ee:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <prvAddNewTaskToReadyList+0xc0>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80060f6:	4b0a      	ldr	r3, [pc, #40]	; (8006120 <prvAddNewTaskToReadyList+0xbc>)
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006100:	429a      	cmp	r2, r3
 8006102:	d207      	bcs.n	8006114 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006104:	4b0b      	ldr	r3, [pc, #44]	; (8006134 <prvAddNewTaskToReadyList+0xd0>)
 8006106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800610a:	601a      	str	r2, [r3, #0]
 800610c:	f3bf 8f4f 	dsb	sy
 8006110:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006114:	bf00      	nop
 8006116:	3708      	adds	r7, #8
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000504 	.word	0x20000504
 8006120:	20000404 	.word	0x20000404
 8006124:	20000510 	.word	0x20000510
 8006128:	20000520 	.word	0x20000520
 800612c:	2000050c 	.word	0x2000050c
 8006130:	20000408 	.word	0x20000408
 8006134:	e000ed04 	.word	0xe000ed04

08006138 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006138:	b580      	push	{r7, lr}
 800613a:	b084      	sub	sp, #16
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d017      	beq.n	800617a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800614a:	4b13      	ldr	r3, [pc, #76]	; (8006198 <vTaskDelay+0x60>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <vTaskDelay+0x30>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006168:	f000 f87a 	bl	8006260 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800616c:	2100      	movs	r1, #0
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fdf2 	bl	8006d58 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006174:	f000 f882 	bl	800627c <xTaskResumeAll>
 8006178:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d107      	bne.n	8006190 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006180:	4b06      	ldr	r3, [pc, #24]	; (800619c <vTaskDelay+0x64>)
 8006182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006186:	601a      	str	r2, [r3, #0]
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006190:	bf00      	nop
 8006192:	3710      	adds	r7, #16
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	2000052c 	.word	0x2000052c
 800619c:	e000ed04 	.word	0xe000ed04

080061a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b08a      	sub	sp, #40	; 0x28
 80061a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80061a6:	2300      	movs	r3, #0
 80061a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80061aa:	2300      	movs	r3, #0
 80061ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80061ae:	463a      	mov	r2, r7
 80061b0:	1d39      	adds	r1, r7, #4
 80061b2:	f107 0308 	add.w	r3, r7, #8
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fa f9ee 	bl	8000598 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	68ba      	ldr	r2, [r7, #8]
 80061c2:	9202      	str	r2, [sp, #8]
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	2300      	movs	r3, #0
 80061c8:	9300      	str	r3, [sp, #0]
 80061ca:	2300      	movs	r3, #0
 80061cc:	460a      	mov	r2, r1
 80061ce:	491e      	ldr	r1, [pc, #120]	; (8006248 <vTaskStartScheduler+0xa8>)
 80061d0:	481e      	ldr	r0, [pc, #120]	; (800624c <vTaskStartScheduler+0xac>)
 80061d2:	f7ff fe1d 	bl	8005e10 <xTaskCreateStatic>
 80061d6:	4603      	mov	r3, r0
 80061d8:	4a1d      	ldr	r2, [pc, #116]	; (8006250 <vTaskStartScheduler+0xb0>)
 80061da:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80061dc:	4b1c      	ldr	r3, [pc, #112]	; (8006250 <vTaskStartScheduler+0xb0>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d002      	beq.n	80061ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80061e4:	2301      	movs	r3, #1
 80061e6:	617b      	str	r3, [r7, #20]
 80061e8:	e001      	b.n	80061ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	d116      	bne.n	8006222 <vTaskStartScheduler+0x82>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	613b      	str	r3, [r7, #16]
}
 8006206:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006208:	4b12      	ldr	r3, [pc, #72]	; (8006254 <vTaskStartScheduler+0xb4>)
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <vTaskStartScheduler+0xb8>)
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006216:	4b11      	ldr	r3, [pc, #68]	; (800625c <vTaskStartScheduler+0xbc>)
 8006218:	2200      	movs	r2, #0
 800621a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800621c:	f000 fe90 	bl	8006f40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006220:	e00e      	b.n	8006240 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d10a      	bne.n	8006240 <vTaskStartScheduler+0xa0>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	60fb      	str	r3, [r7, #12]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vTaskStartScheduler+0x9e>
}
 8006240:	bf00      	nop
 8006242:	3718      	adds	r7, #24
 8006244:	46bd      	mov	sp, r7
 8006246:	bd80      	pop	{r7, pc}
 8006248:	080183e8 	.word	0x080183e8
 800624c:	08006835 	.word	0x08006835
 8006250:	20000528 	.word	0x20000528
 8006254:	20000524 	.word	0x20000524
 8006258:	20000510 	.word	0x20000510
 800625c:	20000508 	.word	0x20000508

08006260 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006260:	b480      	push	{r7}
 8006262:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006264:	4b04      	ldr	r3, [pc, #16]	; (8006278 <vTaskSuspendAll+0x18>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3301      	adds	r3, #1
 800626a:	4a03      	ldr	r2, [pc, #12]	; (8006278 <vTaskSuspendAll+0x18>)
 800626c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800626e:	bf00      	nop
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr
 8006278:	2000052c 	.word	0x2000052c

0800627c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b084      	sub	sp, #16
 8006280:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006286:	2300      	movs	r3, #0
 8006288:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800628a:	4b41      	ldr	r3, [pc, #260]	; (8006390 <xTaskResumeAll+0x114>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <xTaskResumeAll+0x2c>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	603b      	str	r3, [r7, #0]
}
 80062a4:	bf00      	nop
 80062a6:	e7fe      	b.n	80062a6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80062a8:	f000 feec 	bl	8007084 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80062ac:	4b38      	ldr	r3, [pc, #224]	; (8006390 <xTaskResumeAll+0x114>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a37      	ldr	r2, [pc, #220]	; (8006390 <xTaskResumeAll+0x114>)
 80062b4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b6:	4b36      	ldr	r3, [pc, #216]	; (8006390 <xTaskResumeAll+0x114>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d161      	bne.n	8006382 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80062be:	4b35      	ldr	r3, [pc, #212]	; (8006394 <xTaskResumeAll+0x118>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d05d      	beq.n	8006382 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80062c6:	e02e      	b.n	8006326 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c8:	4b33      	ldr	r3, [pc, #204]	; (8006398 <xTaskResumeAll+0x11c>)
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	3318      	adds	r3, #24
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7fe fda6 	bl	8004e26 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3304      	adds	r3, #4
 80062de:	4618      	mov	r0, r3
 80062e0:	f7fe fda1 	bl	8004e26 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	4b2b      	ldr	r3, [pc, #172]	; (800639c <xTaskResumeAll+0x120>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	4a2a      	ldr	r2, [pc, #168]	; (800639c <xTaskResumeAll+0x120>)
 80062f4:	6013      	str	r3, [r2, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062fa:	4613      	mov	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4413      	add	r3, r2
 8006300:	009b      	lsls	r3, r3, #2
 8006302:	4a27      	ldr	r2, [pc, #156]	; (80063a0 <xTaskResumeAll+0x124>)
 8006304:	441a      	add	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7fe fd2d 	bl	8004d6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	4b23      	ldr	r3, [pc, #140]	; (80063a4 <xTaskResumeAll+0x128>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800631c:	429a      	cmp	r2, r3
 800631e:	d302      	bcc.n	8006326 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8006320:	4b21      	ldr	r3, [pc, #132]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006322:	2201      	movs	r2, #1
 8006324:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006326:	4b1c      	ldr	r3, [pc, #112]	; (8006398 <xTaskResumeAll+0x11c>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1cc      	bne.n	80062c8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006334:	f000 fb34 	bl	80069a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006338:	4b1c      	ldr	r3, [pc, #112]	; (80063ac <xTaskResumeAll+0x130>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d010      	beq.n	8006366 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006344:	f000 f858 	bl	80063f8 <xTaskIncrementTick>
 8006348:	4603      	mov	r3, r0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800634e:	4b16      	ldr	r3, [pc, #88]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006350:	2201      	movs	r2, #1
 8006352:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	3b01      	subs	r3, #1
 8006358:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d1f1      	bne.n	8006344 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8006360:	4b12      	ldr	r3, [pc, #72]	; (80063ac <xTaskResumeAll+0x130>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006366:	4b10      	ldr	r3, [pc, #64]	; (80063a8 <xTaskResumeAll+0x12c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d009      	beq.n	8006382 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800636e:	2301      	movs	r3, #1
 8006370:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006372:	4b0f      	ldr	r3, [pc, #60]	; (80063b0 <xTaskResumeAll+0x134>)
 8006374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006382:	f000 feaf 	bl	80070e4 <vPortExitCritical>

	return xAlreadyYielded;
 8006386:	68bb      	ldr	r3, [r7, #8]
}
 8006388:	4618      	mov	r0, r3
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	2000052c 	.word	0x2000052c
 8006394:	20000504 	.word	0x20000504
 8006398:	200004c4 	.word	0x200004c4
 800639c:	2000050c 	.word	0x2000050c
 80063a0:	20000408 	.word	0x20000408
 80063a4:	20000404 	.word	0x20000404
 80063a8:	20000518 	.word	0x20000518
 80063ac:	20000514 	.word	0x20000514
 80063b0:	e000ed04 	.word	0xe000ed04

080063b4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <xTaskGetTickCount+0x1c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80063c0:	687b      	ldr	r3, [r7, #4]
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	370c      	adds	r7, #12
 80063c6:	46bd      	mov	sp, r7
 80063c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop
 80063d0:	20000508 	.word	0x20000508

080063d4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b082      	sub	sp, #8
 80063d8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80063da:	f000 ff35 	bl	8007248 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80063de:	2300      	movs	r3, #0
 80063e0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80063e2:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <xTaskGetTickCountFromISR+0x20>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80063e8:	683b      	ldr	r3, [r7, #0]
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	3708      	adds	r7, #8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop
 80063f4:	20000508 	.word	0x20000508

080063f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80063fe:	2300      	movs	r3, #0
 8006400:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006402:	4b4e      	ldr	r3, [pc, #312]	; (800653c <xTaskIncrementTick+0x144>)
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	2b00      	cmp	r3, #0
 8006408:	f040 808e 	bne.w	8006528 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800640c:	4b4c      	ldr	r3, [pc, #304]	; (8006540 <xTaskIncrementTick+0x148>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006414:	4a4a      	ldr	r2, [pc, #296]	; (8006540 <xTaskIncrementTick+0x148>)
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800641a:	693b      	ldr	r3, [r7, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d120      	bne.n	8006462 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006420:	4b48      	ldr	r3, [pc, #288]	; (8006544 <xTaskIncrementTick+0x14c>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00a      	beq.n	8006440 <xTaskIncrementTick+0x48>
	__asm volatile
 800642a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	603b      	str	r3, [r7, #0]
}
 800643c:	bf00      	nop
 800643e:	e7fe      	b.n	800643e <xTaskIncrementTick+0x46>
 8006440:	4b40      	ldr	r3, [pc, #256]	; (8006544 <xTaskIncrementTick+0x14c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	4b40      	ldr	r3, [pc, #256]	; (8006548 <xTaskIncrementTick+0x150>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a3e      	ldr	r2, [pc, #248]	; (8006544 <xTaskIncrementTick+0x14c>)
 800644c:	6013      	str	r3, [r2, #0]
 800644e:	4a3e      	ldr	r2, [pc, #248]	; (8006548 <xTaskIncrementTick+0x150>)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4b3d      	ldr	r3, [pc, #244]	; (800654c <xTaskIncrementTick+0x154>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3301      	adds	r3, #1
 800645a:	4a3c      	ldr	r2, [pc, #240]	; (800654c <xTaskIncrementTick+0x154>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	f000 fa9f 	bl	80069a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006462:	4b3b      	ldr	r3, [pc, #236]	; (8006550 <xTaskIncrementTick+0x158>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	693a      	ldr	r2, [r7, #16]
 8006468:	429a      	cmp	r2, r3
 800646a:	d348      	bcc.n	80064fe <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800646c:	4b35      	ldr	r3, [pc, #212]	; (8006544 <xTaskIncrementTick+0x14c>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d104      	bne.n	8006480 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006476:	4b36      	ldr	r3, [pc, #216]	; (8006550 <xTaskIncrementTick+0x158>)
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
 800647c:	601a      	str	r2, [r3, #0]
					break;
 800647e:	e03e      	b.n	80064fe <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006480:	4b30      	ldr	r3, [pc, #192]	; (8006544 <xTaskIncrementTick+0x14c>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	429a      	cmp	r2, r3
 8006496:	d203      	bcs.n	80064a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006498:	4a2d      	ldr	r2, [pc, #180]	; (8006550 <xTaskIncrementTick+0x158>)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800649e:	e02e      	b.n	80064fe <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	3304      	adds	r3, #4
 80064a4:	4618      	mov	r0, r3
 80064a6:	f7fe fcbe 	bl	8004e26 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d004      	beq.n	80064bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80064b2:	68bb      	ldr	r3, [r7, #8]
 80064b4:	3318      	adds	r3, #24
 80064b6:	4618      	mov	r0, r3
 80064b8:	f7fe fcb5 	bl	8004e26 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	2201      	movs	r2, #1
 80064c2:	409a      	lsls	r2, r3
 80064c4:	4b23      	ldr	r3, [pc, #140]	; (8006554 <xTaskIncrementTick+0x15c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	4a22      	ldr	r2, [pc, #136]	; (8006554 <xTaskIncrementTick+0x15c>)
 80064cc:	6013      	str	r3, [r2, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064d2:	4613      	mov	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4a1f      	ldr	r2, [pc, #124]	; (8006558 <xTaskIncrementTick+0x160>)
 80064dc:	441a      	add	r2, r3
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4619      	mov	r1, r3
 80064e4:	4610      	mov	r0, r2
 80064e6:	f7fe fc41 	bl	8004d6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	4b1b      	ldr	r3, [pc, #108]	; (800655c <xTaskIncrementTick+0x164>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d3b9      	bcc.n	800646c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80064f8:	2301      	movs	r3, #1
 80064fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80064fc:	e7b6      	b.n	800646c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80064fe:	4b17      	ldr	r3, [pc, #92]	; (800655c <xTaskIncrementTick+0x164>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006504:	4914      	ldr	r1, [pc, #80]	; (8006558 <xTaskIncrementTick+0x160>)
 8006506:	4613      	mov	r3, r2
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	440b      	add	r3, r1
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b01      	cmp	r3, #1
 8006514:	d901      	bls.n	800651a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8006516:	2301      	movs	r3, #1
 8006518:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800651a:	4b11      	ldr	r3, [pc, #68]	; (8006560 <xTaskIncrementTick+0x168>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d007      	beq.n	8006532 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e004      	b.n	8006532 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006528:	4b0e      	ldr	r3, [pc, #56]	; (8006564 <xTaskIncrementTick+0x16c>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3301      	adds	r3, #1
 800652e:	4a0d      	ldr	r2, [pc, #52]	; (8006564 <xTaskIncrementTick+0x16c>)
 8006530:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006532:	697b      	ldr	r3, [r7, #20]
}
 8006534:	4618      	mov	r0, r3
 8006536:	3718      	adds	r7, #24
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	2000052c 	.word	0x2000052c
 8006540:	20000508 	.word	0x20000508
 8006544:	200004bc 	.word	0x200004bc
 8006548:	200004c0 	.word	0x200004c0
 800654c:	2000051c 	.word	0x2000051c
 8006550:	20000524 	.word	0x20000524
 8006554:	2000050c 	.word	0x2000050c
 8006558:	20000408 	.word	0x20000408
 800655c:	20000404 	.word	0x20000404
 8006560:	20000518 	.word	0x20000518
 8006564:	20000514 	.word	0x20000514

08006568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800656e:	4b27      	ldr	r3, [pc, #156]	; (800660c <vTaskSwitchContext+0xa4>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006576:	4b26      	ldr	r3, [pc, #152]	; (8006610 <vTaskSwitchContext+0xa8>)
 8006578:	2201      	movs	r2, #1
 800657a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800657c:	e03f      	b.n	80065fe <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800657e:	4b24      	ldr	r3, [pc, #144]	; (8006610 <vTaskSwitchContext+0xa8>)
 8006580:	2200      	movs	r2, #0
 8006582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006584:	4b23      	ldr	r3, [pc, #140]	; (8006614 <vTaskSwitchContext+0xac>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	fab3 f383 	clz	r3, r3
 8006590:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006592:	7afb      	ldrb	r3, [r7, #11]
 8006594:	f1c3 031f 	rsb	r3, r3, #31
 8006598:	617b      	str	r3, [r7, #20]
 800659a:	491f      	ldr	r1, [pc, #124]	; (8006618 <vTaskSwitchContext+0xb0>)
 800659c:	697a      	ldr	r2, [r7, #20]
 800659e:	4613      	mov	r3, r2
 80065a0:	009b      	lsls	r3, r3, #2
 80065a2:	4413      	add	r3, r2
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	440b      	add	r3, r1
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <vTaskSwitchContext+0x5c>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	607b      	str	r3, [r7, #4]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <vTaskSwitchContext+0x5a>
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	4613      	mov	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4a12      	ldr	r2, [pc, #72]	; (8006618 <vTaskSwitchContext+0xb0>)
 80065d0:	4413      	add	r3, r2
 80065d2:	613b      	str	r3, [r7, #16]
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	685a      	ldr	r2, [r3, #4]
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]
 80065de:	693b      	ldr	r3, [r7, #16]
 80065e0:	685a      	ldr	r2, [r3, #4]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3308      	adds	r3, #8
 80065e6:	429a      	cmp	r2, r3
 80065e8:	d104      	bne.n	80065f4 <vTaskSwitchContext+0x8c>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	4a08      	ldr	r2, [pc, #32]	; (800661c <vTaskSwitchContext+0xb4>)
 80065fc:	6013      	str	r3, [r2, #0]
}
 80065fe:	bf00      	nop
 8006600:	371c      	adds	r7, #28
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	2000052c 	.word	0x2000052c
 8006610:	20000518 	.word	0x20000518
 8006614:	2000050c 	.word	0x2000050c
 8006618:	20000408 	.word	0x20000408
 800661c:	20000404 	.word	0x20000404

08006620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b084      	sub	sp, #16
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10a      	bne.n	8006646 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006646:	4b07      	ldr	r3, [pc, #28]	; (8006664 <vTaskPlaceOnEventList+0x44>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	3318      	adds	r3, #24
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7fe fbb0 	bl	8004db4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006654:	2101      	movs	r1, #1
 8006656:	6838      	ldr	r0, [r7, #0]
 8006658:	f000 fb7e 	bl	8006d58 <prvAddCurrentTaskToDelayedList>
}
 800665c:	bf00      	nop
 800665e:	3710      	adds	r7, #16
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000404 	.word	0x20000404

08006668 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10a      	bne.n	8006694 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800667e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006682:	f383 8811 	msr	BASEPRI, r3
 8006686:	f3bf 8f6f 	isb	sy
 800668a:	f3bf 8f4f 	dsb	sy
 800668e:	60fb      	str	r3, [r7, #12]
}
 8006690:	bf00      	nop
 8006692:	e7fe      	b.n	8006692 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	3318      	adds	r3, #24
 8006698:	4618      	mov	r0, r3
 800669a:	f7fe fbc4 	bl	8004e26 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <xTaskRemoveFromEventList+0xac>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d11c      	bne.n	80066e0 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	3304      	adds	r3, #4
 80066aa:	4618      	mov	r0, r3
 80066ac:	f7fe fbbb 	bl	8004e26 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b4:	2201      	movs	r2, #1
 80066b6:	409a      	lsls	r2, r3
 80066b8:	4b17      	ldr	r3, [pc, #92]	; (8006718 <xTaskRemoveFromEventList+0xb0>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4313      	orrs	r3, r2
 80066be:	4a16      	ldr	r2, [pc, #88]	; (8006718 <xTaskRemoveFromEventList+0xb0>)
 80066c0:	6013      	str	r3, [r2, #0]
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066c6:	4613      	mov	r3, r2
 80066c8:	009b      	lsls	r3, r3, #2
 80066ca:	4413      	add	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4a13      	ldr	r2, [pc, #76]	; (800671c <xTaskRemoveFromEventList+0xb4>)
 80066d0:	441a      	add	r2, r3
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	3304      	adds	r3, #4
 80066d6:	4619      	mov	r1, r3
 80066d8:	4610      	mov	r0, r2
 80066da:	f7fe fb47 	bl	8004d6c <vListInsertEnd>
 80066de:	e005      	b.n	80066ec <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	3318      	adds	r3, #24
 80066e4:	4619      	mov	r1, r3
 80066e6:	480e      	ldr	r0, [pc, #56]	; (8006720 <xTaskRemoveFromEventList+0xb8>)
 80066e8:	f7fe fb40 	bl	8004d6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066f0:	4b0c      	ldr	r3, [pc, #48]	; (8006724 <xTaskRemoveFromEventList+0xbc>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d905      	bls.n	8006706 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80066fa:	2301      	movs	r3, #1
 80066fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80066fe:	4b0a      	ldr	r3, [pc, #40]	; (8006728 <xTaskRemoveFromEventList+0xc0>)
 8006700:	2201      	movs	r2, #1
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	e001      	b.n	800670a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8006706:	2300      	movs	r3, #0
 8006708:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800670a:	697b      	ldr	r3, [r7, #20]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	2000052c 	.word	0x2000052c
 8006718:	2000050c 	.word	0x2000050c
 800671c:	20000408 	.word	0x20000408
 8006720:	200004c4 	.word	0x200004c4
 8006724:	20000404 	.word	0x20000404
 8006728:	20000518 	.word	0x20000518

0800672c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006734:	4b06      	ldr	r3, [pc, #24]	; (8006750 <vTaskInternalSetTimeOutState+0x24>)
 8006736:	681a      	ldr	r2, [r3, #0]
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <vTaskInternalSetTimeOutState+0x28>)
 800673e:	681a      	ldr	r2, [r3, #0]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	605a      	str	r2, [r3, #4]
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	2000051c 	.word	0x2000051c
 8006754:	20000508 	.word	0x20000508

08006758 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	613b      	str	r3, [r7, #16]
}
 800677a:	bf00      	nop
 800677c:	e7fe      	b.n	800677c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d10a      	bne.n	800679a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800679a:	f000 fc73 	bl	8007084 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800679e:	4b1d      	ldr	r3, [pc, #116]	; (8006814 <xTaskCheckForTimeOut+0xbc>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	69ba      	ldr	r2, [r7, #24]
 80067aa:	1ad3      	subs	r3, r2, r3
 80067ac:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	d102      	bne.n	80067be <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	61fb      	str	r3, [r7, #28]
 80067bc:	e023      	b.n	8006806 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	4b15      	ldr	r3, [pc, #84]	; (8006818 <xTaskCheckForTimeOut+0xc0>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d007      	beq.n	80067da <xTaskCheckForTimeOut+0x82>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	d302      	bcc.n	80067da <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80067d4:	2301      	movs	r3, #1
 80067d6:	61fb      	str	r3, [r7, #28]
 80067d8:	e015      	b.n	8006806 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	429a      	cmp	r2, r3
 80067e2:	d20b      	bcs.n	80067fc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f7ff ff9b 	bl	800672c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80067f6:	2300      	movs	r3, #0
 80067f8:	61fb      	str	r3, [r7, #28]
 80067fa:	e004      	b.n	8006806 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	2200      	movs	r2, #0
 8006800:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006802:	2301      	movs	r3, #1
 8006804:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006806:	f000 fc6d 	bl	80070e4 <vPortExitCritical>

	return xReturn;
 800680a:	69fb      	ldr	r3, [r7, #28]
}
 800680c:	4618      	mov	r0, r3
 800680e:	3720      	adds	r7, #32
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	20000508 	.word	0x20000508
 8006818:	2000051c 	.word	0x2000051c

0800681c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <vTaskMissedYield+0x14>)
 8006822:	2201      	movs	r2, #1
 8006824:	601a      	str	r2, [r3, #0]
}
 8006826:	bf00      	nop
 8006828:	46bd      	mov	sp, r7
 800682a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682e:	4770      	bx	lr
 8006830:	20000518 	.word	0x20000518

08006834 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800683c:	f000 f852 	bl	80068e4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <prvIdleTask+0x28>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b01      	cmp	r3, #1
 8006846:	d9f9      	bls.n	800683c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006848:	4b05      	ldr	r3, [pc, #20]	; (8006860 <prvIdleTask+0x2c>)
 800684a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800684e:	601a      	str	r2, [r3, #0]
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006858:	e7f0      	b.n	800683c <prvIdleTask+0x8>
 800685a:	bf00      	nop
 800685c:	20000408 	.word	0x20000408
 8006860:	e000ed04 	.word	0xe000ed04

08006864 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
 800686e:	e00c      	b.n	800688a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006870:	687a      	ldr	r2, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	4a12      	ldr	r2, [pc, #72]	; (80068c4 <prvInitialiseTaskLists+0x60>)
 800687c:	4413      	add	r3, r2
 800687e:	4618      	mov	r0, r3
 8006880:	f7fe fa47 	bl	8004d12 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3301      	adds	r3, #1
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b06      	cmp	r3, #6
 800688e:	d9ef      	bls.n	8006870 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006890:	480d      	ldr	r0, [pc, #52]	; (80068c8 <prvInitialiseTaskLists+0x64>)
 8006892:	f7fe fa3e 	bl	8004d12 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006896:	480d      	ldr	r0, [pc, #52]	; (80068cc <prvInitialiseTaskLists+0x68>)
 8006898:	f7fe fa3b 	bl	8004d12 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800689c:	480c      	ldr	r0, [pc, #48]	; (80068d0 <prvInitialiseTaskLists+0x6c>)
 800689e:	f7fe fa38 	bl	8004d12 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80068a2:	480c      	ldr	r0, [pc, #48]	; (80068d4 <prvInitialiseTaskLists+0x70>)
 80068a4:	f7fe fa35 	bl	8004d12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80068a8:	480b      	ldr	r0, [pc, #44]	; (80068d8 <prvInitialiseTaskLists+0x74>)
 80068aa:	f7fe fa32 	bl	8004d12 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <prvInitialiseTaskLists+0x78>)
 80068b0:	4a05      	ldr	r2, [pc, #20]	; (80068c8 <prvInitialiseTaskLists+0x64>)
 80068b2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <prvInitialiseTaskLists+0x7c>)
 80068b6:	4a05      	ldr	r2, [pc, #20]	; (80068cc <prvInitialiseTaskLists+0x68>)
 80068b8:	601a      	str	r2, [r3, #0]
}
 80068ba:	bf00      	nop
 80068bc:	3708      	adds	r7, #8
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop
 80068c4:	20000408 	.word	0x20000408
 80068c8:	20000494 	.word	0x20000494
 80068cc:	200004a8 	.word	0x200004a8
 80068d0:	200004c4 	.word	0x200004c4
 80068d4:	200004d8 	.word	0x200004d8
 80068d8:	200004f0 	.word	0x200004f0
 80068dc:	200004bc 	.word	0x200004bc
 80068e0:	200004c0 	.word	0x200004c0

080068e4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b082      	sub	sp, #8
 80068e8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80068ea:	e019      	b.n	8006920 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80068ec:	f000 fbca 	bl	8007084 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068f0:	4b10      	ldr	r3, [pc, #64]	; (8006934 <prvCheckTasksWaitingTermination+0x50>)
 80068f2:	68db      	ldr	r3, [r3, #12]
 80068f4:	68db      	ldr	r3, [r3, #12]
 80068f6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fa92 	bl	8004e26 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <prvCheckTasksWaitingTermination+0x54>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3b01      	subs	r3, #1
 8006908:	4a0b      	ldr	r2, [pc, #44]	; (8006938 <prvCheckTasksWaitingTermination+0x54>)
 800690a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800690c:	4b0b      	ldr	r3, [pc, #44]	; (800693c <prvCheckTasksWaitingTermination+0x58>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3b01      	subs	r3, #1
 8006912:	4a0a      	ldr	r2, [pc, #40]	; (800693c <prvCheckTasksWaitingTermination+0x58>)
 8006914:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006916:	f000 fbe5 	bl	80070e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f810 	bl	8006940 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006920:	4b06      	ldr	r3, [pc, #24]	; (800693c <prvCheckTasksWaitingTermination+0x58>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e1      	bne.n	80068ec <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006928:	bf00      	nop
 800692a:	bf00      	nop
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200004d8 	.word	0x200004d8
 8006938:	20000504 	.word	0x20000504
 800693c:	200004ec 	.word	0x200004ec

08006940 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800694e:	2b00      	cmp	r3, #0
 8006950:	d108      	bne.n	8006964 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006956:	4618      	mov	r0, r3
 8006958:	f000 fd82 	bl	8007460 <vPortFree>
				vPortFree( pxTCB );
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f000 fd7f 	bl	8007460 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006962:	e018      	b.n	8006996 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800696a:	2b01      	cmp	r3, #1
 800696c:	d103      	bne.n	8006976 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fd76 	bl	8007460 <vPortFree>
	}
 8006974:	e00f      	b.n	8006996 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800697c:	2b02      	cmp	r3, #2
 800697e:	d00a      	beq.n	8006996 <prvDeleteTCB+0x56>
	__asm volatile
 8006980:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006984:	f383 8811 	msr	BASEPRI, r3
 8006988:	f3bf 8f6f 	isb	sy
 800698c:	f3bf 8f4f 	dsb	sy
 8006990:	60fb      	str	r3, [r7, #12]
}
 8006992:	bf00      	nop
 8006994:	e7fe      	b.n	8006994 <prvDeleteTCB+0x54>
	}
 8006996:	bf00      	nop
 8006998:	3710      	adds	r7, #16
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
	...

080069a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069a6:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <prvResetNextTaskUnblockTime+0x38>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d104      	bne.n	80069ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80069b0:	4b0a      	ldr	r3, [pc, #40]	; (80069dc <prvResetNextTaskUnblockTime+0x3c>)
 80069b2:	f04f 32ff 	mov.w	r2, #4294967295
 80069b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80069b8:	e008      	b.n	80069cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ba:	4b07      	ldr	r3, [pc, #28]	; (80069d8 <prvResetNextTaskUnblockTime+0x38>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68db      	ldr	r3, [r3, #12]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	4a04      	ldr	r2, [pc, #16]	; (80069dc <prvResetNextTaskUnblockTime+0x3c>)
 80069ca:	6013      	str	r3, [r2, #0]
}
 80069cc:	bf00      	nop
 80069ce:	370c      	adds	r7, #12
 80069d0:	46bd      	mov	sp, r7
 80069d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d6:	4770      	bx	lr
 80069d8:	200004bc 	.word	0x200004bc
 80069dc:	20000524 	.word	0x20000524

080069e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <xTaskGetSchedulerState+0x34>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d102      	bne.n	80069f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80069ee:	2301      	movs	r3, #1
 80069f0:	607b      	str	r3, [r7, #4]
 80069f2:	e008      	b.n	8006a06 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80069f4:	4b08      	ldr	r3, [pc, #32]	; (8006a18 <xTaskGetSchedulerState+0x38>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d102      	bne.n	8006a02 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80069fc:	2302      	movs	r3, #2
 80069fe:	607b      	str	r3, [r7, #4]
 8006a00:	e001      	b.n	8006a06 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006a02:	2300      	movs	r3, #0
 8006a04:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006a06:	687b      	ldr	r3, [r7, #4]
	}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	370c      	adds	r7, #12
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	20000510 	.word	0x20000510
 8006a18:	2000052c 	.word	0x2000052c

08006a1c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b084      	sub	sp, #16
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d05e      	beq.n	8006af0 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a36:	4b31      	ldr	r3, [pc, #196]	; (8006afc <xTaskPriorityInherit+0xe0>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d24e      	bcs.n	8006ade <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	db06      	blt.n	8006a56 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a48:	4b2c      	ldr	r3, [pc, #176]	; (8006afc <xTaskPriorityInherit+0xe0>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4e:	f1c3 0207 	rsb	r2, r3, #7
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	6959      	ldr	r1, [r3, #20]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a5e:	4613      	mov	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	4413      	add	r3, r2
 8006a64:	009b      	lsls	r3, r3, #2
 8006a66:	4a26      	ldr	r2, [pc, #152]	; (8006b00 <xTaskPriorityInherit+0xe4>)
 8006a68:	4413      	add	r3, r2
 8006a6a:	4299      	cmp	r1, r3
 8006a6c:	d12f      	bne.n	8006ace <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe f9d7 	bl	8004e26 <uxListRemove>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10a      	bne.n	8006a94 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a82:	2201      	movs	r2, #1
 8006a84:	fa02 f303 	lsl.w	r3, r2, r3
 8006a88:	43da      	mvns	r2, r3
 8006a8a:	4b1e      	ldr	r3, [pc, #120]	; (8006b04 <xTaskPriorityInherit+0xe8>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4013      	ands	r3, r2
 8006a90:	4a1c      	ldr	r2, [pc, #112]	; (8006b04 <xTaskPriorityInherit+0xe8>)
 8006a92:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006a94:	4b19      	ldr	r3, [pc, #100]	; (8006afc <xTaskPriorityInherit+0xe0>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	409a      	lsls	r2, r3
 8006aa6:	4b17      	ldr	r3, [pc, #92]	; (8006b04 <xTaskPriorityInherit+0xe8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	4a15      	ldr	r2, [pc, #84]	; (8006b04 <xTaskPriorityInherit+0xe8>)
 8006aae:	6013      	str	r3, [r2, #0]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4413      	add	r3, r2
 8006aba:	009b      	lsls	r3, r3, #2
 8006abc:	4a10      	ldr	r2, [pc, #64]	; (8006b00 <xTaskPriorityInherit+0xe4>)
 8006abe:	441a      	add	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	3304      	adds	r3, #4
 8006ac4:	4619      	mov	r1, r3
 8006ac6:	4610      	mov	r0, r2
 8006ac8:	f7fe f950 	bl	8004d6c <vListInsertEnd>
 8006acc:	e004      	b.n	8006ad8 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006ace:	4b0b      	ldr	r3, [pc, #44]	; (8006afc <xTaskPriorityInherit+0xe0>)
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	60fb      	str	r3, [r7, #12]
 8006adc:	e008      	b.n	8006af0 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ae2:	4b06      	ldr	r3, [pc, #24]	; (8006afc <xTaskPriorityInherit+0xe0>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	429a      	cmp	r2, r3
 8006aea:	d201      	bcs.n	8006af0 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006aec:	2301      	movs	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af0:	68fb      	ldr	r3, [r7, #12]
	}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000404 	.word	0x20000404
 8006b00:	20000408 	.word	0x20000408
 8006b04:	2000050c 	.word	0x2000050c

08006b08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b086      	sub	sp, #24
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d06e      	beq.n	8006bfc <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b1e:	4b3a      	ldr	r3, [pc, #232]	; (8006c08 <xTaskPriorityDisinherit+0x100>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d00a      	beq.n	8006b3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2c:	f383 8811 	msr	BASEPRI, r3
 8006b30:	f3bf 8f6f 	isb	sy
 8006b34:	f3bf 8f4f 	dsb	sy
 8006b38:	60fb      	str	r3, [r7, #12]
}
 8006b3a:	bf00      	nop
 8006b3c:	e7fe      	b.n	8006b3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d10a      	bne.n	8006b5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	60bb      	str	r3, [r7, #8]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b60:	1e5a      	subs	r2, r3, #1
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b6a:	693b      	ldr	r3, [r7, #16]
 8006b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b6e:	429a      	cmp	r2, r3
 8006b70:	d044      	beq.n	8006bfc <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d140      	bne.n	8006bfc <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	3304      	adds	r3, #4
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f7fe f951 	bl	8004e26 <uxListRemove>
 8006b84:	4603      	mov	r3, r0
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d115      	bne.n	8006bb6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b8e:	491f      	ldr	r1, [pc, #124]	; (8006c0c <xTaskPriorityDisinherit+0x104>)
 8006b90:	4613      	mov	r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	009b      	lsls	r3, r3, #2
 8006b98:	440b      	add	r3, r1
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d10a      	bne.n	8006bb6 <xTaskPriorityDisinherit+0xae>
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	43da      	mvns	r2, r3
 8006bac:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <xTaskPriorityDisinherit+0x108>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4013      	ands	r3, r2
 8006bb2:	4a17      	ldr	r2, [pc, #92]	; (8006c10 <xTaskPriorityDisinherit+0x108>)
 8006bb4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	f1c3 0207 	rsb	r2, r3, #7
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bce:	2201      	movs	r2, #1
 8006bd0:	409a      	lsls	r2, r3
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <xTaskPriorityDisinherit+0x108>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <xTaskPriorityDisinherit+0x108>)
 8006bda:	6013      	str	r3, [r2, #0]
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be0:	4613      	mov	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	4413      	add	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4a08      	ldr	r2, [pc, #32]	; (8006c0c <xTaskPriorityDisinherit+0x104>)
 8006bea:	441a      	add	r2, r3
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f7fe f8ba 	bl	8004d6c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006bfc:	697b      	ldr	r3, [r7, #20]
	}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3718      	adds	r7, #24
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000404 	.word	0x20000404
 8006c0c:	20000408 	.word	0x20000408
 8006c10:	2000050c 	.word	0x2000050c

08006c14 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b088      	sub	sp, #32
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006c22:	2301      	movs	r3, #1
 8006c24:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d077      	beq.n	8006d1c <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d10a      	bne.n	8006c4a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c38:	f383 8811 	msr	BASEPRI, r3
 8006c3c:	f3bf 8f6f 	isb	sy
 8006c40:	f3bf 8f4f 	dsb	sy
 8006c44:	60fb      	str	r3, [r7, #12]
}
 8006c46:	bf00      	nop
 8006c48:	e7fe      	b.n	8006c48 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d902      	bls.n	8006c5a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	61fb      	str	r3, [r7, #28]
 8006c58:	e002      	b.n	8006c60 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c5e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006c60:	69bb      	ldr	r3, [r7, #24]
 8006c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c64:	69fa      	ldr	r2, [r7, #28]
 8006c66:	429a      	cmp	r2, r3
 8006c68:	d058      	beq.n	8006d1c <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006c6a:	69bb      	ldr	r3, [r7, #24]
 8006c6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d153      	bne.n	8006d1c <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006c74:	4b2b      	ldr	r3, [pc, #172]	; (8006d24 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d10a      	bne.n	8006c94 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	60bb      	str	r3, [r7, #8]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c98:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006c9a:	69bb      	ldr	r3, [r7, #24]
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	db04      	blt.n	8006cb2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f1c3 0207 	rsb	r2, r3, #7
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	6959      	ldr	r1, [r3, #20]
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	009b      	lsls	r3, r3, #2
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	4a19      	ldr	r2, [pc, #100]	; (8006d28 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006cc2:	4413      	add	r3, r2
 8006cc4:	4299      	cmp	r1, r3
 8006cc6:	d129      	bne.n	8006d1c <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe f8aa 	bl	8004e26 <uxListRemove>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10a      	bne.n	8006cee <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cdc:	2201      	movs	r2, #1
 8006cde:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce2:	43da      	mvns	r2, r3
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4013      	ands	r3, r2
 8006cea:	4a10      	ldr	r2, [pc, #64]	; (8006d2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cec:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	409a      	lsls	r2, r3
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	4a0b      	ldr	r2, [pc, #44]	; (8006d2c <vTaskPriorityDisinheritAfterTimeout+0x118>)
 8006cfe:	6013      	str	r3, [r2, #0]
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d04:	4613      	mov	r3, r2
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4413      	add	r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	4a06      	ldr	r2, [pc, #24]	; (8006d28 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8006d0e:	441a      	add	r2, r3
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	3304      	adds	r3, #4
 8006d14:	4619      	mov	r1, r3
 8006d16:	4610      	mov	r0, r2
 8006d18:	f7fe f828 	bl	8004d6c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	20000404 	.word	0x20000404
 8006d28:	20000408 	.word	0x20000408
 8006d2c:	2000050c 	.word	0x2000050c

08006d30 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006d34:	4b07      	ldr	r3, [pc, #28]	; (8006d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d004      	beq.n	8006d46 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d42:	3201      	adds	r2, #1
 8006d44:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006d46:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <pvTaskIncrementMutexHeldCount+0x24>)
 8006d48:	681b      	ldr	r3, [r3, #0]
	}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	20000404 	.word	0x20000404

08006d58 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b084      	sub	sp, #16
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
 8006d60:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006d62:	4b29      	ldr	r3, [pc, #164]	; (8006e08 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d68:	4b28      	ldr	r3, [pc, #160]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	3304      	adds	r3, #4
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fe f859 	bl	8004e26 <uxListRemove>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10b      	bne.n	8006d92 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8006d7a:	4b24      	ldr	r3, [pc, #144]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	2201      	movs	r2, #1
 8006d82:	fa02 f303 	lsl.w	r3, r2, r3
 8006d86:	43da      	mvns	r2, r3
 8006d88:	4b21      	ldr	r3, [pc, #132]	; (8006e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	4a20      	ldr	r2, [pc, #128]	; (8006e10 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006d90:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d98:	d10a      	bne.n	8006db0 <prvAddCurrentTaskToDelayedList+0x58>
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d007      	beq.n	8006db0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006da0:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	481a      	ldr	r0, [pc, #104]	; (8006e14 <prvAddCurrentTaskToDelayedList+0xbc>)
 8006daa:	f7fd ffdf 	bl	8004d6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006dae:	e026      	b.n	8006dfe <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006db0:	68fa      	ldr	r2, [r7, #12]
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4413      	add	r3, r2
 8006db6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006db8:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68ba      	ldr	r2, [r7, #8]
 8006dbe:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d209      	bcs.n	8006ddc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006dc8:	4b13      	ldr	r3, [pc, #76]	; (8006e18 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b0f      	ldr	r3, [pc, #60]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	3304      	adds	r3, #4
 8006dd2:	4619      	mov	r1, r3
 8006dd4:	4610      	mov	r0, r2
 8006dd6:	f7fd ffed 	bl	8004db4 <vListInsert>
}
 8006dda:	e010      	b.n	8006dfe <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ddc:	4b0f      	ldr	r3, [pc, #60]	; (8006e1c <prvAddCurrentTaskToDelayedList+0xc4>)
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	4b0a      	ldr	r3, [pc, #40]	; (8006e0c <prvAddCurrentTaskToDelayedList+0xb4>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fd ffe3 	bl	8004db4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006dee:	4b0c      	ldr	r3, [pc, #48]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	d202      	bcs.n	8006dfe <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006df8:	4a09      	ldr	r2, [pc, #36]	; (8006e20 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	6013      	str	r3, [r2, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	3710      	adds	r7, #16
 8006e02:	46bd      	mov	sp, r7
 8006e04:	bd80      	pop	{r7, pc}
 8006e06:	bf00      	nop
 8006e08:	20000508 	.word	0x20000508
 8006e0c:	20000404 	.word	0x20000404
 8006e10:	2000050c 	.word	0x2000050c
 8006e14:	200004f0 	.word	0x200004f0
 8006e18:	200004c0 	.word	0x200004c0
 8006e1c:	200004bc 	.word	0x200004bc
 8006e20:	20000524 	.word	0x20000524

08006e24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	3b04      	subs	r3, #4
 8006e34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006e3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3b04      	subs	r3, #4
 8006e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	f023 0201 	bic.w	r2, r3, #1
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	3b04      	subs	r3, #4
 8006e52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006e54:	4a0c      	ldr	r2, [pc, #48]	; (8006e88 <pxPortInitialiseStack+0x64>)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3b14      	subs	r3, #20
 8006e5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3b04      	subs	r3, #4
 8006e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f06f 0202 	mvn.w	r2, #2
 8006e72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	3b20      	subs	r3, #32
 8006e78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3714      	adds	r7, #20
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	08006e8d 	.word	0x08006e8d

08006e8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b085      	sub	sp, #20
 8006e90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <prvTaskExitError+0x54>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e9e:	d00a      	beq.n	8006eb6 <prvTaskExitError+0x2a>
	__asm volatile
 8006ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea4:	f383 8811 	msr	BASEPRI, r3
 8006ea8:	f3bf 8f6f 	isb	sy
 8006eac:	f3bf 8f4f 	dsb	sy
 8006eb0:	60fb      	str	r3, [r7, #12]
}
 8006eb2:	bf00      	nop
 8006eb4:	e7fe      	b.n	8006eb4 <prvTaskExitError+0x28>
	__asm volatile
 8006eb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eba:	f383 8811 	msr	BASEPRI, r3
 8006ebe:	f3bf 8f6f 	isb	sy
 8006ec2:	f3bf 8f4f 	dsb	sy
 8006ec6:	60bb      	str	r3, [r7, #8]
}
 8006ec8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006eca:	bf00      	nop
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d0fc      	beq.n	8006ecc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006ed2:	bf00      	nop
 8006ed4:	bf00      	nop
 8006ed6:	3714      	adds	r7, #20
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	2000000c 	.word	0x2000000c
	...

08006ef0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006ef0:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <pxCurrentTCBConst2>)
 8006ef2:	6819      	ldr	r1, [r3, #0]
 8006ef4:	6808      	ldr	r0, [r1, #0]
 8006ef6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006efa:	f380 8809 	msr	PSP, r0
 8006efe:	f3bf 8f6f 	isb	sy
 8006f02:	f04f 0000 	mov.w	r0, #0
 8006f06:	f380 8811 	msr	BASEPRI, r0
 8006f0a:	4770      	bx	lr
 8006f0c:	f3af 8000 	nop.w

08006f10 <pxCurrentTCBConst2>:
 8006f10:	20000404 	.word	0x20000404
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop

08006f18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f18:	4808      	ldr	r0, [pc, #32]	; (8006f3c <prvPortStartFirstTask+0x24>)
 8006f1a:	6800      	ldr	r0, [r0, #0]
 8006f1c:	6800      	ldr	r0, [r0, #0]
 8006f1e:	f380 8808 	msr	MSP, r0
 8006f22:	f04f 0000 	mov.w	r0, #0
 8006f26:	f380 8814 	msr	CONTROL, r0
 8006f2a:	b662      	cpsie	i
 8006f2c:	b661      	cpsie	f
 8006f2e:	f3bf 8f4f 	dsb	sy
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	df00      	svc	0
 8006f38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f3a:	bf00      	nop
 8006f3c:	e000ed08 	.word	0xe000ed08

08006f40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b086      	sub	sp, #24
 8006f44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006f46:	4b46      	ldr	r3, [pc, #280]	; (8007060 <xPortStartScheduler+0x120>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a46      	ldr	r2, [pc, #280]	; (8007064 <xPortStartScheduler+0x124>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d10a      	bne.n	8006f66 <xPortStartScheduler+0x26>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006f66:	4b3e      	ldr	r3, [pc, #248]	; (8007060 <xPortStartScheduler+0x120>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a3f      	ldr	r2, [pc, #252]	; (8007068 <xPortStartScheduler+0x128>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d10a      	bne.n	8006f86 <xPortStartScheduler+0x46>
	__asm volatile
 8006f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f74:	f383 8811 	msr	BASEPRI, r3
 8006f78:	f3bf 8f6f 	isb	sy
 8006f7c:	f3bf 8f4f 	dsb	sy
 8006f80:	60fb      	str	r3, [r7, #12]
}
 8006f82:	bf00      	nop
 8006f84:	e7fe      	b.n	8006f84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f86:	4b39      	ldr	r3, [pc, #228]	; (800706c <xPortStartScheduler+0x12c>)
 8006f88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	22ff      	movs	r2, #255	; 0xff
 8006f96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006fa8:	b2da      	uxtb	r2, r3
 8006faa:	4b31      	ldr	r3, [pc, #196]	; (8007070 <xPortStartScheduler+0x130>)
 8006fac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fae:	4b31      	ldr	r3, [pc, #196]	; (8007074 <xPortStartScheduler+0x134>)
 8006fb0:	2207      	movs	r2, #7
 8006fb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fb4:	e009      	b.n	8006fca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006fb6:	4b2f      	ldr	r3, [pc, #188]	; (8007074 <xPortStartScheduler+0x134>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	4a2d      	ldr	r2, [pc, #180]	; (8007074 <xPortStartScheduler+0x134>)
 8006fbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006fc0:	78fb      	ldrb	r3, [r7, #3]
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d0ef      	beq.n	8006fb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006fd6:	4b27      	ldr	r3, [pc, #156]	; (8007074 <xPortStartScheduler+0x134>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f1c3 0307 	rsb	r3, r3, #7
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d00a      	beq.n	8006ff8 <xPortStartScheduler+0xb8>
	__asm volatile
 8006fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe6:	f383 8811 	msr	BASEPRI, r3
 8006fea:	f3bf 8f6f 	isb	sy
 8006fee:	f3bf 8f4f 	dsb	sy
 8006ff2:	60bb      	str	r3, [r7, #8]
}
 8006ff4:	bf00      	nop
 8006ff6:	e7fe      	b.n	8006ff6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006ff8:	4b1e      	ldr	r3, [pc, #120]	; (8007074 <xPortStartScheduler+0x134>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	4a1d      	ldr	r2, [pc, #116]	; (8007074 <xPortStartScheduler+0x134>)
 8007000:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007002:	4b1c      	ldr	r3, [pc, #112]	; (8007074 <xPortStartScheduler+0x134>)
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800700a:	4a1a      	ldr	r2, [pc, #104]	; (8007074 <xPortStartScheduler+0x134>)
 800700c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	b2da      	uxtb	r2, r3
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <xPortStartScheduler+0x138>)
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	4a17      	ldr	r2, [pc, #92]	; (8007078 <xPortStartScheduler+0x138>)
 800701c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007020:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007022:	4b15      	ldr	r3, [pc, #84]	; (8007078 <xPortStartScheduler+0x138>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a14      	ldr	r2, [pc, #80]	; (8007078 <xPortStartScheduler+0x138>)
 8007028:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800702c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800702e:	f000 f8dd 	bl	80071ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007032:	4b12      	ldr	r3, [pc, #72]	; (800707c <xPortStartScheduler+0x13c>)
 8007034:	2200      	movs	r2, #0
 8007036:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007038:	f000 f8fc 	bl	8007234 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800703c:	4b10      	ldr	r3, [pc, #64]	; (8007080 <xPortStartScheduler+0x140>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	4a0f      	ldr	r2, [pc, #60]	; (8007080 <xPortStartScheduler+0x140>)
 8007042:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007046:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007048:	f7ff ff66 	bl	8006f18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800704c:	f7ff fa8c 	bl	8006568 <vTaskSwitchContext>
	prvTaskExitError();
 8007050:	f7ff ff1c 	bl	8006e8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3718      	adds	r7, #24
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	e000ed00 	.word	0xe000ed00
 8007064:	410fc271 	.word	0x410fc271
 8007068:	410fc270 	.word	0x410fc270
 800706c:	e000e400 	.word	0xe000e400
 8007070:	20000530 	.word	0x20000530
 8007074:	20000534 	.word	0x20000534
 8007078:	e000ed20 	.word	0xe000ed20
 800707c:	2000000c 	.word	0x2000000c
 8007080:	e000ef34 	.word	0xe000ef34

08007084 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	607b      	str	r3, [r7, #4]
}
 800709c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800709e:	4b0f      	ldr	r3, [pc, #60]	; (80070dc <vPortEnterCritical+0x58>)
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	3301      	adds	r3, #1
 80070a4:	4a0d      	ldr	r2, [pc, #52]	; (80070dc <vPortEnterCritical+0x58>)
 80070a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070a8:	4b0c      	ldr	r3, [pc, #48]	; (80070dc <vPortEnterCritical+0x58>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d10f      	bne.n	80070d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <vPortEnterCritical+0x5c>)
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00a      	beq.n	80070d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80070ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070be:	f383 8811 	msr	BASEPRI, r3
 80070c2:	f3bf 8f6f 	isb	sy
 80070c6:	f3bf 8f4f 	dsb	sy
 80070ca:	603b      	str	r3, [r7, #0]
}
 80070cc:	bf00      	nop
 80070ce:	e7fe      	b.n	80070ce <vPortEnterCritical+0x4a>
	}
}
 80070d0:	bf00      	nop
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	2000000c 	.word	0x2000000c
 80070e0:	e000ed04 	.word	0xe000ed04

080070e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070e4:	b480      	push	{r7}
 80070e6:	b083      	sub	sp, #12
 80070e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80070ea:	4b12      	ldr	r3, [pc, #72]	; (8007134 <vPortExitCritical+0x50>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d10a      	bne.n	8007108 <vPortExitCritical+0x24>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	607b      	str	r3, [r7, #4]
}
 8007104:	bf00      	nop
 8007106:	e7fe      	b.n	8007106 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007108:	4b0a      	ldr	r3, [pc, #40]	; (8007134 <vPortExitCritical+0x50>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	3b01      	subs	r3, #1
 800710e:	4a09      	ldr	r2, [pc, #36]	; (8007134 <vPortExitCritical+0x50>)
 8007110:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007112:	4b08      	ldr	r3, [pc, #32]	; (8007134 <vPortExitCritical+0x50>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	2b00      	cmp	r3, #0
 8007118:	d105      	bne.n	8007126 <vPortExitCritical+0x42>
 800711a:	2300      	movs	r3, #0
 800711c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	f383 8811 	msr	BASEPRI, r3
}
 8007124:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007126:	bf00      	nop
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	2000000c 	.word	0x2000000c
	...

08007140 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007140:	f3ef 8009 	mrs	r0, PSP
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	4b15      	ldr	r3, [pc, #84]	; (80071a0 <pxCurrentTCBConst>)
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	f01e 0f10 	tst.w	lr, #16
 8007150:	bf08      	it	eq
 8007152:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007156:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800715a:	6010      	str	r0, [r2, #0]
 800715c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007160:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007164:	f380 8811 	msr	BASEPRI, r0
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	f3bf 8f6f 	isb	sy
 8007170:	f7ff f9fa 	bl	8006568 <vTaskSwitchContext>
 8007174:	f04f 0000 	mov.w	r0, #0
 8007178:	f380 8811 	msr	BASEPRI, r0
 800717c:	bc09      	pop	{r0, r3}
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	6808      	ldr	r0, [r1, #0]
 8007182:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007186:	f01e 0f10 	tst.w	lr, #16
 800718a:	bf08      	it	eq
 800718c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007190:	f380 8809 	msr	PSP, r0
 8007194:	f3bf 8f6f 	isb	sy
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	f3af 8000 	nop.w

080071a0 <pxCurrentTCBConst>:
 80071a0:	20000404 	.word	0x20000404
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80071a4:	bf00      	nop
 80071a6:	bf00      	nop

080071a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
	__asm volatile
 80071ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071b2:	f383 8811 	msr	BASEPRI, r3
 80071b6:	f3bf 8f6f 	isb	sy
 80071ba:	f3bf 8f4f 	dsb	sy
 80071be:	607b      	str	r3, [r7, #4]
}
 80071c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071c2:	f7ff f919 	bl	80063f8 <xTaskIncrementTick>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071cc:	4b06      	ldr	r3, [pc, #24]	; (80071e8 <SysTick_Handler+0x40>)
 80071ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80071d2:	601a      	str	r2, [r3, #0]
 80071d4:	2300      	movs	r3, #0
 80071d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	f383 8811 	msr	BASEPRI, r3
}
 80071de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}
 80071e8:	e000ed04 	.word	0xe000ed04

080071ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071ec:	b480      	push	{r7}
 80071ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071f0:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <vPortSetupTimerInterrupt+0x34>)
 80071f2:	2200      	movs	r2, #0
 80071f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <vPortSetupTimerInterrupt+0x38>)
 80071f8:	2200      	movs	r2, #0
 80071fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071fc:	4b0a      	ldr	r3, [pc, #40]	; (8007228 <vPortSetupTimerInterrupt+0x3c>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	4a0a      	ldr	r2, [pc, #40]	; (800722c <vPortSetupTimerInterrupt+0x40>)
 8007202:	fba2 2303 	umull	r2, r3, r2, r3
 8007206:	099b      	lsrs	r3, r3, #6
 8007208:	4a09      	ldr	r2, [pc, #36]	; (8007230 <vPortSetupTimerInterrupt+0x44>)
 800720a:	3b01      	subs	r3, #1
 800720c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800720e:	4b04      	ldr	r3, [pc, #16]	; (8007220 <vPortSetupTimerInterrupt+0x34>)
 8007210:	2207      	movs	r2, #7
 8007212:	601a      	str	r2, [r3, #0]
}
 8007214:	bf00      	nop
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr
 800721e:	bf00      	nop
 8007220:	e000e010 	.word	0xe000e010
 8007224:	e000e018 	.word	0xe000e018
 8007228:	20000000 	.word	0x20000000
 800722c:	10624dd3 	.word	0x10624dd3
 8007230:	e000e014 	.word	0xe000e014

08007234 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007234:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007244 <vPortEnableVFP+0x10>
 8007238:	6801      	ldr	r1, [r0, #0]
 800723a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800723e:	6001      	str	r1, [r0, #0]
 8007240:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007242:	bf00      	nop
 8007244:	e000ed88 	.word	0xe000ed88

08007248 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800724e:	f3ef 8305 	mrs	r3, IPSR
 8007252:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b0f      	cmp	r3, #15
 8007258:	d914      	bls.n	8007284 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800725a:	4a17      	ldr	r2, [pc, #92]	; (80072b8 <vPortValidateInterruptPriority+0x70>)
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	4413      	add	r3, r2
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007264:	4b15      	ldr	r3, [pc, #84]	; (80072bc <vPortValidateInterruptPriority+0x74>)
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	7afa      	ldrb	r2, [r7, #11]
 800726a:	429a      	cmp	r2, r3
 800726c:	d20a      	bcs.n	8007284 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	607b      	str	r3, [r7, #4]
}
 8007280:	bf00      	nop
 8007282:	e7fe      	b.n	8007282 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007284:	4b0e      	ldr	r3, [pc, #56]	; (80072c0 <vPortValidateInterruptPriority+0x78>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800728c:	4b0d      	ldr	r3, [pc, #52]	; (80072c4 <vPortValidateInterruptPriority+0x7c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	429a      	cmp	r2, r3
 8007292:	d90a      	bls.n	80072aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	603b      	str	r3, [r7, #0]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <vPortValidateInterruptPriority+0x60>
	}
 80072aa:	bf00      	nop
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	e000e3f0 	.word	0xe000e3f0
 80072bc:	20000530 	.word	0x20000530
 80072c0:	e000ed0c 	.word	0xe000ed0c
 80072c4:	20000534 	.word	0x20000534

080072c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072c8:	b580      	push	{r7, lr}
 80072ca:	b08a      	sub	sp, #40	; 0x28
 80072cc:	af00      	add	r7, sp, #0
 80072ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072d0:	2300      	movs	r3, #0
 80072d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072d4:	f7fe ffc4 	bl	8006260 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072d8:	4b5b      	ldr	r3, [pc, #364]	; (8007448 <pvPortMalloc+0x180>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d101      	bne.n	80072e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072e0:	f000 f920 	bl	8007524 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <pvPortMalloc+0x184>)
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	4013      	ands	r3, r2
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	f040 8093 	bne.w	8007418 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d01d      	beq.n	8007334 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80072f8:	2208      	movs	r2, #8
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4413      	add	r3, r2
 80072fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f003 0307 	and.w	r3, r3, #7
 8007306:	2b00      	cmp	r3, #0
 8007308:	d014      	beq.n	8007334 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f023 0307 	bic.w	r3, r3, #7
 8007310:	3308      	adds	r3, #8
 8007312:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	2b00      	cmp	r3, #0
 800731c:	d00a      	beq.n	8007334 <pvPortMalloc+0x6c>
	__asm volatile
 800731e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007322:	f383 8811 	msr	BASEPRI, r3
 8007326:	f3bf 8f6f 	isb	sy
 800732a:	f3bf 8f4f 	dsb	sy
 800732e:	617b      	str	r3, [r7, #20]
}
 8007330:	bf00      	nop
 8007332:	e7fe      	b.n	8007332 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d06e      	beq.n	8007418 <pvPortMalloc+0x150>
 800733a:	4b45      	ldr	r3, [pc, #276]	; (8007450 <pvPortMalloc+0x188>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	429a      	cmp	r2, r3
 8007342:	d869      	bhi.n	8007418 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007344:	4b43      	ldr	r3, [pc, #268]	; (8007454 <pvPortMalloc+0x18c>)
 8007346:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007348:	4b42      	ldr	r3, [pc, #264]	; (8007454 <pvPortMalloc+0x18c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800734e:	e004      	b.n	800735a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007352:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800735a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	687a      	ldr	r2, [r7, #4]
 8007360:	429a      	cmp	r2, r3
 8007362:	d903      	bls.n	800736c <pvPortMalloc+0xa4>
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d1f1      	bne.n	8007350 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800736c:	4b36      	ldr	r3, [pc, #216]	; (8007448 <pvPortMalloc+0x180>)
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007372:	429a      	cmp	r2, r3
 8007374:	d050      	beq.n	8007418 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007376:	6a3b      	ldr	r3, [r7, #32]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	2208      	movs	r2, #8
 800737c:	4413      	add	r3, r2
 800737e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	1ad2      	subs	r2, r2, r3
 8007390:	2308      	movs	r3, #8
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	429a      	cmp	r2, r3
 8007396:	d91f      	bls.n	80073d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007398:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	4413      	add	r3, r2
 800739e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	f003 0307 	and.w	r3, r3, #7
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d00a      	beq.n	80073c0 <pvPortMalloc+0xf8>
	__asm volatile
 80073aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ae:	f383 8811 	msr	BASEPRI, r3
 80073b2:	f3bf 8f6f 	isb	sy
 80073b6:	f3bf 8f4f 	dsb	sy
 80073ba:	613b      	str	r3, [r7, #16]
}
 80073bc:	bf00      	nop
 80073be:	e7fe      	b.n	80073be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80073c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	1ad2      	subs	r2, r2, r3
 80073c8:	69bb      	ldr	r3, [r7, #24]
 80073ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073d2:	69b8      	ldr	r0, [r7, #24]
 80073d4:	f000 f908 	bl	80075e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073d8:	4b1d      	ldr	r3, [pc, #116]	; (8007450 <pvPortMalloc+0x188>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	1ad3      	subs	r3, r2, r3
 80073e2:	4a1b      	ldr	r2, [pc, #108]	; (8007450 <pvPortMalloc+0x188>)
 80073e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073e6:	4b1a      	ldr	r3, [pc, #104]	; (8007450 <pvPortMalloc+0x188>)
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	4b1b      	ldr	r3, [pc, #108]	; (8007458 <pvPortMalloc+0x190>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	429a      	cmp	r2, r3
 80073f0:	d203      	bcs.n	80073fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073f2:	4b17      	ldr	r3, [pc, #92]	; (8007450 <pvPortMalloc+0x188>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	4a18      	ldr	r2, [pc, #96]	; (8007458 <pvPortMalloc+0x190>)
 80073f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fc:	685a      	ldr	r2, [r3, #4]
 80073fe:	4b13      	ldr	r3, [pc, #76]	; (800744c <pvPortMalloc+0x184>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	431a      	orrs	r2, r3
 8007404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007406:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	2200      	movs	r2, #0
 800740c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800740e:	4b13      	ldr	r3, [pc, #76]	; (800745c <pvPortMalloc+0x194>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	3301      	adds	r3, #1
 8007414:	4a11      	ldr	r2, [pc, #68]	; (800745c <pvPortMalloc+0x194>)
 8007416:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007418:	f7fe ff30 	bl	800627c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f003 0307 	and.w	r3, r3, #7
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <pvPortMalloc+0x174>
	__asm volatile
 8007426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742a:	f383 8811 	msr	BASEPRI, r3
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f3bf 8f4f 	dsb	sy
 8007436:	60fb      	str	r3, [r7, #12]
}
 8007438:	bf00      	nop
 800743a:	e7fe      	b.n	800743a <pvPortMalloc+0x172>
	return pvReturn;
 800743c:	69fb      	ldr	r3, [r7, #28]
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20008540 	.word	0x20008540
 800744c:	20008554 	.word	0x20008554
 8007450:	20008544 	.word	0x20008544
 8007454:	20008538 	.word	0x20008538
 8007458:	20008548 	.word	0x20008548
 800745c:	2000854c 	.word	0x2000854c

08007460 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b086      	sub	sp, #24
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d04d      	beq.n	800750e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007472:	2308      	movs	r3, #8
 8007474:	425b      	negs	r3, r3
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	4413      	add	r3, r2
 800747a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	685a      	ldr	r2, [r3, #4]
 8007484:	4b24      	ldr	r3, [pc, #144]	; (8007518 <vPortFree+0xb8>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4013      	ands	r3, r2
 800748a:	2b00      	cmp	r3, #0
 800748c:	d10a      	bne.n	80074a4 <vPortFree+0x44>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	e7fe      	b.n	80074a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00a      	beq.n	80074c2 <vPortFree+0x62>
	__asm volatile
 80074ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	60bb      	str	r3, [r7, #8]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	685a      	ldr	r2, [r3, #4]
 80074c6:	4b14      	ldr	r3, [pc, #80]	; (8007518 <vPortFree+0xb8>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4013      	ands	r3, r2
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01e      	beq.n	800750e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d11a      	bne.n	800750e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074d8:	693b      	ldr	r3, [r7, #16]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	4b0e      	ldr	r3, [pc, #56]	; (8007518 <vPortFree+0xb8>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	43db      	mvns	r3, r3
 80074e2:	401a      	ands	r2, r3
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074e8:	f7fe feba 	bl	8006260 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	4b0a      	ldr	r3, [pc, #40]	; (800751c <vPortFree+0xbc>)
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	4413      	add	r3, r2
 80074f6:	4a09      	ldr	r2, [pc, #36]	; (800751c <vPortFree+0xbc>)
 80074f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074fa:	6938      	ldr	r0, [r7, #16]
 80074fc:	f000 f874 	bl	80075e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007500:	4b07      	ldr	r3, [pc, #28]	; (8007520 <vPortFree+0xc0>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a06      	ldr	r2, [pc, #24]	; (8007520 <vPortFree+0xc0>)
 8007508:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800750a:	f7fe feb7 	bl	800627c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800750e:	bf00      	nop
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	20008554 	.word	0x20008554
 800751c:	20008544 	.word	0x20008544
 8007520:	20008550 	.word	0x20008550

08007524 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b085      	sub	sp, #20
 8007528:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800752a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800752e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007530:	4b27      	ldr	r3, [pc, #156]	; (80075d0 <prvHeapInit+0xac>)
 8007532:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	f003 0307 	and.w	r3, r3, #7
 800753a:	2b00      	cmp	r3, #0
 800753c:	d00c      	beq.n	8007558 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	3307      	adds	r3, #7
 8007542:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f023 0307 	bic.w	r3, r3, #7
 800754a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	1ad3      	subs	r3, r2, r3
 8007552:	4a1f      	ldr	r2, [pc, #124]	; (80075d0 <prvHeapInit+0xac>)
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800755c:	4a1d      	ldr	r2, [pc, #116]	; (80075d4 <prvHeapInit+0xb0>)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007562:	4b1c      	ldr	r3, [pc, #112]	; (80075d4 <prvHeapInit+0xb0>)
 8007564:	2200      	movs	r2, #0
 8007566:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	4413      	add	r3, r2
 800756e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007570:	2208      	movs	r2, #8
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0307 	bic.w	r3, r3, #7
 800757e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	4a15      	ldr	r2, [pc, #84]	; (80075d8 <prvHeapInit+0xb4>)
 8007584:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007586:	4b14      	ldr	r3, [pc, #80]	; (80075d8 <prvHeapInit+0xb4>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2200      	movs	r2, #0
 800758c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800758e:	4b12      	ldr	r3, [pc, #72]	; (80075d8 <prvHeapInit+0xb4>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	68fa      	ldr	r2, [r7, #12]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	683b      	ldr	r3, [r7, #0]
 80075a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80075a4:	4b0c      	ldr	r3, [pc, #48]	; (80075d8 <prvHeapInit+0xb4>)
 80075a6:	681a      	ldr	r2, [r3, #0]
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	685b      	ldr	r3, [r3, #4]
 80075b0:	4a0a      	ldr	r2, [pc, #40]	; (80075dc <prvHeapInit+0xb8>)
 80075b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	4a09      	ldr	r2, [pc, #36]	; (80075e0 <prvHeapInit+0xbc>)
 80075ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80075bc:	4b09      	ldr	r3, [pc, #36]	; (80075e4 <prvHeapInit+0xc0>)
 80075be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80075c2:	601a      	str	r2, [r3, #0]
}
 80075c4:	bf00      	nop
 80075c6:	3714      	adds	r7, #20
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr
 80075d0:	20000538 	.word	0x20000538
 80075d4:	20008538 	.word	0x20008538
 80075d8:	20008540 	.word	0x20008540
 80075dc:	20008548 	.word	0x20008548
 80075e0:	20008544 	.word	0x20008544
 80075e4:	20008554 	.word	0x20008554

080075e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075e8:	b480      	push	{r7}
 80075ea:	b085      	sub	sp, #20
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075f0:	4b28      	ldr	r3, [pc, #160]	; (8007694 <prvInsertBlockIntoFreeList+0xac>)
 80075f2:	60fb      	str	r3, [r7, #12]
 80075f4:	e002      	b.n	80075fc <prvInsertBlockIntoFreeList+0x14>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	60fb      	str	r3, [r7, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	429a      	cmp	r2, r3
 8007604:	d8f7      	bhi.n	80075f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68ba      	ldr	r2, [r7, #8]
 8007610:	4413      	add	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	429a      	cmp	r2, r3
 8007616:	d108      	bne.n	800762a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	685a      	ldr	r2, [r3, #4]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	441a      	add	r2, r3
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	68ba      	ldr	r2, [r7, #8]
 8007634:	441a      	add	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d118      	bne.n	8007670 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	4b15      	ldr	r3, [pc, #84]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	429a      	cmp	r2, r3
 8007648:	d00d      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	685a      	ldr	r2, [r3, #4]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	441a      	add	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	681a      	ldr	r2, [r3, #0]
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	e008      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007666:	4b0c      	ldr	r3, [pc, #48]	; (8007698 <prvInsertBlockIntoFreeList+0xb0>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	601a      	str	r2, [r3, #0]
 800766e:	e003      	b.n	8007678 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681a      	ldr	r2, [r3, #0]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007678:	68fa      	ldr	r2, [r7, #12]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	429a      	cmp	r2, r3
 800767e:	d002      	beq.n	8007686 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007686:	bf00      	nop
 8007688:	3714      	adds	r7, #20
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
 8007692:	bf00      	nop
 8007694:	20008538 	.word	0x20008538
 8007698:	20008540 	.word	0x20008540

0800769c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	330c      	adds	r3, #12
 80076ac:	461a      	mov	r2, r3
 80076ae:	6839      	ldr	r1, [r7, #0]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f002 fa9f 	bl	8009bf4 <tcpip_send_msg_wait_sem>
 80076b6:	4603      	mov	r3, r0
 80076b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80076ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d103      	bne.n	80076ca <netconn_apimsg+0x2e>
    return apimsg->err;
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80076c8:	e001      	b.n	80076ce <netconn_apimsg+0x32>
  }
  return err;
 80076ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3710      	adds	r7, #16
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
	...

080076d8 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08c      	sub	sp, #48	; 0x30
 80076dc:	af00      	add	r7, sp, #0
 80076de:	4603      	mov	r3, r0
 80076e0:	603a      	str	r2, [r7, #0]
 80076e2:	71fb      	strb	r3, [r7, #7]
 80076e4:	460b      	mov	r3, r1
 80076e6:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	6839      	ldr	r1, [r7, #0]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f001 f923 	bl	8008938 <netconn_alloc>
 80076f2:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 80076f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d054      	beq.n	80077a4 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 80076fa:	79bb      	ldrb	r3, [r7, #6]
 80076fc:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 80076fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007700:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8007702:	f107 0308 	add.w	r3, r7, #8
 8007706:	4619      	mov	r1, r3
 8007708:	4829      	ldr	r0, [pc, #164]	; (80077b0 <netconn_new_with_proto_and_callback+0xd8>)
 800770a:	f7ff ffc7 	bl	800769c <netconn_apimsg>
 800770e:	4603      	mov	r3, r0
 8007710:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8007714:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8007718:	2b00      	cmp	r3, #0
 800771a:	d043      	beq.n	80077a4 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800771c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d005      	beq.n	8007730 <netconn_new_with_proto_and_callback+0x58>
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <netconn_new_with_proto_and_callback+0xdc>)
 8007726:	22a3      	movs	r2, #163	; 0xa3
 8007728:	4923      	ldr	r1, [pc, #140]	; (80077b8 <netconn_new_with_proto_and_callback+0xe0>)
 800772a:	4824      	ldr	r0, [pc, #144]	; (80077bc <netconn_new_with_proto_and_callback+0xe4>)
 800772c:	f00f fba0 	bl	8016e70 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8007730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007732:	3310      	adds	r3, #16
 8007734:	4618      	mov	r0, r3
 8007736:	f00f fa00 	bl	8016b3a <sys_mbox_valid>
 800773a:	4603      	mov	r3, r0
 800773c:	2b00      	cmp	r3, #0
 800773e:	d105      	bne.n	800774c <netconn_new_with_proto_and_callback+0x74>
 8007740:	4b1c      	ldr	r3, [pc, #112]	; (80077b4 <netconn_new_with_proto_and_callback+0xdc>)
 8007742:	22a4      	movs	r2, #164	; 0xa4
 8007744:	491e      	ldr	r1, [pc, #120]	; (80077c0 <netconn_new_with_proto_and_callback+0xe8>)
 8007746:	481d      	ldr	r0, [pc, #116]	; (80077bc <netconn_new_with_proto_and_callback+0xe4>)
 8007748:	f00f fb92 	bl	8016e70 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800774c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800774e:	3314      	adds	r3, #20
 8007750:	4618      	mov	r0, r3
 8007752:	f00f f9f2 	bl	8016b3a <sys_mbox_valid>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d005      	beq.n	8007768 <netconn_new_with_proto_and_callback+0x90>
 800775c:	4b15      	ldr	r3, [pc, #84]	; (80077b4 <netconn_new_with_proto_and_callback+0xdc>)
 800775e:	22a6      	movs	r2, #166	; 0xa6
 8007760:	4918      	ldr	r1, [pc, #96]	; (80077c4 <netconn_new_with_proto_and_callback+0xec>)
 8007762:	4816      	ldr	r0, [pc, #88]	; (80077bc <netconn_new_with_proto_and_callback+0xe4>)
 8007764:	f00f fb84 	bl	8016e70 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8007768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776a:	330c      	adds	r3, #12
 800776c:	4618      	mov	r0, r3
 800776e:	f00f fa75 	bl	8016c5c <sys_sem_valid>
 8007772:	4603      	mov	r3, r0
 8007774:	2b00      	cmp	r3, #0
 8007776:	d105      	bne.n	8007784 <netconn_new_with_proto_and_callback+0xac>
 8007778:	4b0e      	ldr	r3, [pc, #56]	; (80077b4 <netconn_new_with_proto_and_callback+0xdc>)
 800777a:	22a9      	movs	r2, #169	; 0xa9
 800777c:	4912      	ldr	r1, [pc, #72]	; (80077c8 <netconn_new_with_proto_and_callback+0xf0>)
 800777e:	480f      	ldr	r0, [pc, #60]	; (80077bc <netconn_new_with_proto_and_callback+0xe4>)
 8007780:	f00f fb76 	bl	8016e70 <iprintf>
      sys_sem_free(&conn->op_completed);
 8007784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007786:	330c      	adds	r3, #12
 8007788:	4618      	mov	r0, r3
 800778a:	f00f fa5a 	bl	8016c42 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800778e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007790:	3310      	adds	r3, #16
 8007792:	4618      	mov	r0, r3
 8007794:	f00f f94a 	bl	8016a2c <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8007798:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800779a:	2007      	movs	r0, #7
 800779c:	f002 ff92 	bl	800a6c4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 80077a0:	2300      	movs	r3, #0
 80077a2:	e000      	b.n	80077a6 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 80077a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3730      	adds	r7, #48	; 0x30
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	0800890d 	.word	0x0800890d
 80077b4:	080183f0 	.word	0x080183f0
 80077b8:	08018424 	.word	0x08018424
 80077bc:	08018448 	.word	0x08018448
 80077c0:	08018470 	.word	0x08018470
 80077c4:	08018488 	.word	0x08018488
 80077c8:	080184ac 	.word	0x080184ac

080077cc <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b08c      	sub	sp, #48	; 0x30
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <netconn_prepare_delete+0x12>
    return ERR_OK;
 80077da:	2300      	movs	r3, #0
 80077dc:	e014      	b.n	8007808 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80077e2:	2329      	movs	r3, #41	; 0x29
 80077e4:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 80077e6:	f107 030c 	add.w	r3, r7, #12
 80077ea:	4619      	mov	r1, r3
 80077ec:	4808      	ldr	r0, [pc, #32]	; (8007810 <netconn_prepare_delete+0x44>)
 80077ee:	f7ff ff55 	bl	800769c <netconn_apimsg>
 80077f2:	4603      	mov	r3, r0
 80077f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 80077f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d002      	beq.n	8007806 <netconn_prepare_delete+0x3a>
    return err;
 8007800:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8007804:	e000      	b.n	8007808 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8007806:	2300      	movs	r3, #0
}
 8007808:	4618      	mov	r0, r3
 800780a:	3730      	adds	r7, #48	; 0x30
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	08008e71 	.word	0x08008e71

08007814 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b084      	sub	sp, #16
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d101      	bne.n	8007826 <netconn_delete+0x12>
    return ERR_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	e00d      	b.n	8007842 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7ff ffd0 	bl	80077cc <netconn_prepare_delete>
 800782c:	4603      	mov	r3, r0
 800782e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8007830:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d102      	bne.n	800783e <netconn_delete+0x2a>
    netconn_free(conn);
 8007838:	6878      	ldr	r0, [r7, #4]
 800783a:	f001 f8eb 	bl	8008a14 <netconn_free>
  }
  return err;
 800783e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08e      	sub	sp, #56	; 0x38
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	4613      	mov	r3, r2
 8007858:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d109      	bne.n	8007874 <netconn_bind+0x28>
 8007860:	4b11      	ldr	r3, [pc, #68]	; (80078a8 <netconn_bind+0x5c>)
 8007862:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007866:	4911      	ldr	r1, [pc, #68]	; (80078ac <netconn_bind+0x60>)
 8007868:	4811      	ldr	r0, [pc, #68]	; (80078b0 <netconn_bind+0x64>)
 800786a:	f00f fb01 	bl	8016e70 <iprintf>
 800786e:	f06f 030f 	mvn.w	r3, #15
 8007872:	e015      	b.n	80078a0 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d101      	bne.n	800787e <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800787a:	4b0e      	ldr	r3, [pc, #56]	; (80078b4 <netconn_bind+0x68>)
 800787c:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800788a:	f107 0314 	add.w	r3, r7, #20
 800788e:	4619      	mov	r1, r3
 8007890:	4809      	ldr	r0, [pc, #36]	; (80078b8 <netconn_bind+0x6c>)
 8007892:	f7ff ff03 	bl	800769c <netconn_apimsg>
 8007896:	4603      	mov	r3, r0
 8007898:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800789c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3738      	adds	r7, #56	; 0x38
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}
 80078a8:	080183f0 	.word	0x080183f0
 80078ac:	08018528 	.word	0x08018528
 80078b0:	08018448 	.word	0x08018448
 80078b4:	0801bd9c 	.word	0x0801bd9c
 80078b8:	08009039 	.word	0x08009039

080078bc <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b08c      	sub	sp, #48	; 0x30
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
 80078c4:	460b      	mov	r3, r1
 80078c6:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d109      	bne.n	80078e2 <netconn_listen_with_backlog+0x26>
 80078ce:	4b0d      	ldr	r3, [pc, #52]	; (8007904 <netconn_listen_with_backlog+0x48>)
 80078d0:	f240 12bb 	movw	r2, #443	; 0x1bb
 80078d4:	490c      	ldr	r1, [pc, #48]	; (8007908 <netconn_listen_with_backlog+0x4c>)
 80078d6:	480d      	ldr	r0, [pc, #52]	; (800790c <netconn_listen_with_backlog+0x50>)
 80078d8:	f00f faca 	bl	8016e70 <iprintf>
 80078dc:	f06f 030f 	mvn.w	r3, #15
 80078e0:	e00c      	b.n	80078fc <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 80078e6:	f107 030c 	add.w	r3, r7, #12
 80078ea:	4619      	mov	r1, r3
 80078ec:	4808      	ldr	r0, [pc, #32]	; (8007910 <netconn_listen_with_backlog+0x54>)
 80078ee:	f7ff fed5 	bl	800769c <netconn_apimsg>
 80078f2:	4603      	mov	r3, r0
 80078f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80078f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3730      	adds	r7, #48	; 0x30
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	080183f0 	.word	0x080183f0
 8007908:	080185a8 	.word	0x080185a8
 800790c:	08018448 	.word	0x08018448
 8007910:	080090ad 	.word	0x080090ad

08007914 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
 800791c:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d109      	bne.n	8007938 <netconn_accept+0x24>
 8007924:	4b3d      	ldr	r3, [pc, #244]	; (8007a1c <netconn_accept+0x108>)
 8007926:	f240 12e1 	movw	r2, #481	; 0x1e1
 800792a:	493d      	ldr	r1, [pc, #244]	; (8007a20 <netconn_accept+0x10c>)
 800792c:	483d      	ldr	r0, [pc, #244]	; (8007a24 <netconn_accept+0x110>)
 800792e:	f00f fa9f 	bl	8016e70 <iprintf>
 8007932:	f06f 030f 	mvn.w	r3, #15
 8007936:	e06c      	b.n	8007a12 <netconn_accept+0xfe>
  *new_conn = NULL;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <netconn_accept+0x44>
 8007944:	4b35      	ldr	r3, [pc, #212]	; (8007a1c <netconn_accept+0x108>)
 8007946:	f240 12e3 	movw	r2, #483	; 0x1e3
 800794a:	4937      	ldr	r1, [pc, #220]	; (8007a28 <netconn_accept+0x114>)
 800794c:	4835      	ldr	r0, [pc, #212]	; (8007a24 <netconn_accept+0x110>)
 800794e:	f00f fa8f 	bl	8016e70 <iprintf>
 8007952:	f06f 030f 	mvn.w	r3, #15
 8007956:	e05c      	b.n	8007a12 <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 fb6c 	bl	8008036 <netconn_err>
 800795e:	4603      	mov	r3, r0
 8007960:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8007962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d002      	beq.n	8007970 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 800796a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800796e:	e050      	b.n	8007a12 <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	3314      	adds	r3, #20
 8007974:	4618      	mov	r0, r3
 8007976:	f00f f8e0 	bl	8016b3a <sys_mbox_valid>
 800797a:	4603      	mov	r3, r0
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <netconn_accept+0x78>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	7f1b      	ldrb	r3, [r3, #28]
 8007984:	f003 0301 	and.w	r3, r3, #1
 8007988:	2b00      	cmp	r3, #0
 800798a:	d002      	beq.n	8007992 <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 800798c:	f06f 030e 	mvn.w	r3, #14
 8007990:	e03f      	b.n	8007a12 <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	7f1b      	ldrb	r3, [r3, #28]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d00e      	beq.n	80079bc <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	3314      	adds	r3, #20
 80079a2:	f107 020c 	add.w	r2, r7, #12
 80079a6:	4611      	mov	r1, r2
 80079a8:	4618      	mov	r0, r3
 80079aa:	f00f f8aa 	bl	8016b02 <sys_arch_mbox_tryfetch>
 80079ae:	4603      	mov	r3, r0
 80079b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b4:	d10a      	bne.n	80079cc <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 80079b6:	f06f 0306 	mvn.w	r3, #6
 80079ba:	e02a      	b.n	8007a12 <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3314      	adds	r3, #20
 80079c0:	f107 010c 	add.w	r1, r7, #12
 80079c4:	2200      	movs	r2, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f00f f85c 	bl	8016a84 <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <netconn_accept+0xcc>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d8:	2200      	movs	r2, #0
 80079da:	2101      	movs	r1, #1
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f107 0213 	add.w	r2, r7, #19
 80079e6:	4611      	mov	r1, r2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f000 fb75 	bl	80080d8 <lwip_netconn_is_err_msg>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d002      	beq.n	80079fa <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 80079f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80079f8:	e00b      	b.n	8007a12 <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8007a00:	f06f 030e 	mvn.w	r3, #14
 8007a04:	e005      	b.n	8007a12 <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007a10:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3718      	adds	r7, #24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	bf00      	nop
 8007a1c:	080183f0 	.word	0x080183f0
 8007a20:	080185c8 	.word	0x080185c8
 8007a24:	08018448 	.word	0x08018448
 8007a28:	080185e8 	.word	0x080185e8

08007a2c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b088      	sub	sp, #32
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	60f8      	str	r0, [r7, #12]
 8007a34:	60b9      	str	r1, [r7, #8]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d109      	bne.n	8007a58 <netconn_recv_data+0x2c>
 8007a44:	4b58      	ldr	r3, [pc, #352]	; (8007ba8 <netconn_recv_data+0x17c>)
 8007a46:	f44f 7212 	mov.w	r2, #584	; 0x248
 8007a4a:	4958      	ldr	r1, [pc, #352]	; (8007bac <netconn_recv_data+0x180>)
 8007a4c:	4858      	ldr	r0, [pc, #352]	; (8007bb0 <netconn_recv_data+0x184>)
 8007a4e:	f00f fa0f 	bl	8016e70 <iprintf>
 8007a52:	f06f 030f 	mvn.w	r3, #15
 8007a56:	e0a2      	b.n	8007b9e <netconn_recv_data+0x172>
  *new_buf = NULL;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d109      	bne.n	8007a78 <netconn_recv_data+0x4c>
 8007a64:	4b50      	ldr	r3, [pc, #320]	; (8007ba8 <netconn_recv_data+0x17c>)
 8007a66:	f240 224a 	movw	r2, #586	; 0x24a
 8007a6a:	4952      	ldr	r1, [pc, #328]	; (8007bb4 <netconn_recv_data+0x188>)
 8007a6c:	4850      	ldr	r0, [pc, #320]	; (8007bb0 <netconn_recv_data+0x184>)
 8007a6e:	f00f f9ff 	bl	8016e70 <iprintf>
 8007a72:	f06f 030f 	mvn.w	r3, #15
 8007a76:	e092      	b.n	8007b9e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	3310      	adds	r3, #16
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f00f f85c 	bl	8016b3a <sys_mbox_valid>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d10e      	bne.n	8007aa6 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fad4 	bl	8008036 <netconn_err>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8007a92:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8007a9a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8007a9e:	e07e      	b.n	8007b9e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8007aa0:	f06f 030a 	mvn.w	r3, #10
 8007aa4:	e07b      	b.n	8007b9e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	7f1b      	ldrb	r3, [r3, #28]
 8007aaa:	f003 0302 	and.w	r3, r3, #2
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10f      	bne.n	8007ad2 <netconn_recv_data+0xa6>
 8007ab2:	79fb      	ldrb	r3, [r7, #7]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d10a      	bne.n	8007ad2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	7f1b      	ldrb	r3, [r3, #28]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d104      	bne.n	8007ad2 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d023      	beq.n	8007b1a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	3310      	adds	r3, #16
 8007ad6:	f107 0218 	add.w	r2, r7, #24
 8007ada:	4611      	mov	r1, r2
 8007adc:	4618      	mov	r0, r3
 8007ade:	f00f f810 	bl	8016b02 <sys_arch_mbox_tryfetch>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d11f      	bne.n	8007b2a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 faa3 	bl	8008036 <netconn_err>
 8007af0:	4603      	mov	r3, r0
 8007af2:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8007af4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d002      	beq.n	8007b02 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8007afc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8007b00:	e04d      	b.n	8007b9e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	7f1b      	ldrb	r3, [r3, #28]
 8007b06:	f003 0301 	and.w	r3, r3, #1
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d002      	beq.n	8007b14 <netconn_recv_data+0xe8>
        return ERR_CONN;
 8007b0e:	f06f 030a 	mvn.w	r3, #10
 8007b12:	e044      	b.n	8007b9e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8007b14:	f06f 0306 	mvn.w	r3, #6
 8007b18:	e041      	b.n	8007b9e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	3310      	adds	r3, #16
 8007b1e:	f107 0118 	add.w	r1, r7, #24
 8007b22:	2200      	movs	r2, #0
 8007b24:	4618      	mov	r0, r3
 8007b26:	f00e ffad 	bl	8016a84 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	781b      	ldrb	r3, [r3, #0]
 8007b2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d117      	bne.n	8007b66 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	f107 0217 	add.w	r2, r7, #23
 8007b3c:	4611      	mov	r1, r2
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f000 faca 	bl	80080d8 <lwip_netconn_is_err_msg>
 8007b44:	4603      	mov	r3, r0
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d009      	beq.n	8007b5e <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8007b4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b4e:	f113 0f0f 	cmn.w	r3, #15
 8007b52:	d101      	bne.n	8007b58 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	e022      	b.n	8007b9e <netconn_recv_data+0x172>
      }
      return err;
 8007b58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007b5c:	e01f      	b.n	8007b9e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8007b5e:	69bb      	ldr	r3, [r7, #24]
 8007b60:	891b      	ldrh	r3, [r3, #8]
 8007b62:	83fb      	strh	r3, [r7, #30]
 8007b64:	e00d      	b.n	8007b82 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d106      	bne.n	8007b7a <netconn_recv_data+0x14e>
 8007b6c:	4b0e      	ldr	r3, [pc, #56]	; (8007ba8 <netconn_recv_data+0x17c>)
 8007b6e:	f240 2291 	movw	r2, #657	; 0x291
 8007b72:	4911      	ldr	r1, [pc, #68]	; (8007bb8 <netconn_recv_data+0x18c>)
 8007b74:	480e      	ldr	r0, [pc, #56]	; (8007bb0 <netconn_recv_data+0x184>)
 8007b76:	f00f f97b 	bl	8016e70 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8007b7a:	69bb      	ldr	r3, [r7, #24]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	891b      	ldrh	r3, [r3, #8]
 8007b80:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d005      	beq.n	8007b96 <netconn_recv_data+0x16a>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b8e:	8bfa      	ldrh	r2, [r7, #30]
 8007b90:	2101      	movs	r1, #1
 8007b92:	68f8      	ldr	r0, [r7, #12]
 8007b94:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8007b96:	69ba      	ldr	r2, [r7, #24]
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8007b9c:	2300      	movs	r3, #0
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3720      	adds	r7, #32
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bd80      	pop	{r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	080183f0 	.word	0x080183f0
 8007bac:	08018608 	.word	0x08018608
 8007bb0:	08018448 	.word	0x08018448
 8007bb4:	08018628 	.word	0x08018628
 8007bb8:	08018644 	.word	0x08018644

08007bbc <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	60f8      	str	r0, [r7, #12]
 8007bc4:	60b9      	str	r1, [r7, #8]
 8007bc6:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d005      	beq.n	8007bda <netconn_tcp_recvd_msg+0x1e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d009      	beq.n	8007bee <netconn_tcp_recvd_msg+0x32>
 8007bda:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <netconn_tcp_recvd_msg+0x50>)
 8007bdc:	f240 22a7 	movw	r2, #679	; 0x2a7
 8007be0:	490b      	ldr	r1, [pc, #44]	; (8007c10 <netconn_tcp_recvd_msg+0x54>)
 8007be2:	480c      	ldr	r0, [pc, #48]	; (8007c14 <netconn_tcp_recvd_msg+0x58>)
 8007be4:	f00f f944 	bl	8016e70 <iprintf>
 8007be8:	f06f 030f 	mvn.w	r3, #15
 8007bec:	e00a      	b.n	8007c04 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68ba      	ldr	r2, [r7, #8]
 8007bf8:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4806      	ldr	r0, [pc, #24]	; (8007c18 <netconn_tcp_recvd_msg+0x5c>)
 8007bfe:	f7ff fd4d 	bl	800769c <netconn_apimsg>
 8007c02:	4603      	mov	r3, r0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	080183f0 	.word	0x080183f0
 8007c10:	08018650 	.word	0x08018650
 8007c14:	08018448 	.word	0x08018448
 8007c18:	080091dd 	.word	0x080091dd

08007c1c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b090      	sub	sp, #64	; 0x40
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	3310      	adds	r3, #16
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f00e ff83 	bl	8016b3a <sys_mbox_valid>
 8007c34:	4603      	mov	r3, r0
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d102      	bne.n	8007c40 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8007c3a:	f06f 030a 	mvn.w	r3, #10
 8007c3e:	e06d      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	7f1b      	ldrb	r3, [r3, #28]
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	da07      	bge.n	8007c5a <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	7f1b      	ldrb	r3, [r3, #28]
 8007c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c52:	b2da      	uxtb	r2, r3
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8007c58:	e039      	b.n	8007cce <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8007c5a:	79fb      	ldrb	r3, [r7, #7]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	68b9      	ldr	r1, [r7, #8]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f7ff fee3 	bl	8007a2c <netconn_recv_data>
 8007c66:	4603      	mov	r3, r0
 8007c68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8007c6c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d002      	beq.n	8007c7a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8007c74:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007c78:	e050      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8007c80:	79fb      	ldrb	r3, [r7, #7]
 8007c82:	f003 0308 	and.w	r3, r3, #8
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d10e      	bne.n	8007ca8 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d002      	beq.n	8007c96 <netconn_recv_data_tcp+0x7a>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	891b      	ldrh	r3, [r3, #8]
 8007c94:	e000      	b.n	8007c98 <netconn_recv_data_tcp+0x7c>
 8007c96:	2301      	movs	r3, #1
 8007c98:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8007c9a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007c9c:	f107 0214 	add.w	r2, r7, #20
 8007ca0:	4619      	mov	r1, r3
 8007ca2:	68f8      	ldr	r0, [r7, #12]
 8007ca4:	f7ff ff8a 	bl	8007bbc <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8007ca8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d134      	bne.n	8007d18 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8007cae:	79fb      	ldrb	r3, [r7, #7]
 8007cb0:	f003 0310 	and.w	r3, r3, #16
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d009      	beq.n	8007ccc <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	7f1b      	ldrb	r3, [r3, #28]
 8007cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007cc0:	b2da      	uxtb	r2, r3
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8007cc6:	f06f 0306 	mvn.w	r3, #6
 8007cca:	e027      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8007ccc:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <netconn_recv_data_tcp+0xc6>
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2200      	movs	r2, #0
 8007cdc:	2101      	movs	r1, #1
 8007cde:	68f8      	ldr	r0, [r7, #12]
 8007ce0:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10f      	bne.n	8007d0a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	f000 f9a3 	bl	8008036 <netconn_err>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8007cf6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d002      	beq.n	8007d04 <netconn_recv_data_tcp+0xe8>
          return err;
 8007cfe:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8007d02:	e00b      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8007d04:	f06f 030d 	mvn.w	r3, #13
 8007d08:	e008      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8007d0a:	2101      	movs	r1, #1
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f955 	bl	8007fbc <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8007d12:	f06f 030e 	mvn.w	r3, #14
 8007d16:	e001      	b.n	8007d1c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8007d18:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3740      	adds	r7, #64	; 0x40
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b086      	sub	sp, #24
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
 8007d2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d109      	bne.n	8007d4c <netconn_recv+0x28>
 8007d38:	4b32      	ldr	r3, [pc, #200]	; (8007e04 <netconn_recv+0xe0>)
 8007d3a:	f240 3263 	movw	r2, #867	; 0x363
 8007d3e:	4932      	ldr	r1, [pc, #200]	; (8007e08 <netconn_recv+0xe4>)
 8007d40:	4832      	ldr	r0, [pc, #200]	; (8007e0c <netconn_recv+0xe8>)
 8007d42:	f00f f895 	bl	8016e70 <iprintf>
 8007d46:	f06f 030f 	mvn.w	r3, #15
 8007d4a:	e056      	b.n	8007dfa <netconn_recv+0xd6>
  *new_buf = NULL;
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d109      	bne.n	8007d6c <netconn_recv+0x48>
 8007d58:	4b2a      	ldr	r3, [pc, #168]	; (8007e04 <netconn_recv+0xe0>)
 8007d5a:	f240 3265 	movw	r2, #869	; 0x365
 8007d5e:	492c      	ldr	r1, [pc, #176]	; (8007e10 <netconn_recv+0xec>)
 8007d60:	482a      	ldr	r0, [pc, #168]	; (8007e0c <netconn_recv+0xe8>)
 8007d62:	f00f f885 	bl	8016e70 <iprintf>
 8007d66:	f06f 030f 	mvn.w	r3, #15
 8007d6a:	e046      	b.n	8007dfa <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d74:	2b10      	cmp	r3, #16
 8007d76:	d13a      	bne.n	8007dee <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8007d7c:	2006      	movs	r0, #6
 8007d7e:	f002 fc4f 	bl	800a620 <memp_malloc>
 8007d82:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d102      	bne.n	8007d90 <netconn_recv+0x6c>
      return ERR_MEM;
 8007d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d8e:	e034      	b.n	8007dfa <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8007d90:	f107 030c 	add.w	r3, r7, #12
 8007d94:	2200      	movs	r2, #0
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7ff ff3f 	bl	8007c1c <netconn_recv_data_tcp>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007da2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d006      	beq.n	8007db8 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8007daa:	6979      	ldr	r1, [r7, #20]
 8007dac:	2006      	movs	r0, #6
 8007dae:	f002 fc89 	bl	800a6c4 <memp_free>
      return err;
 8007db2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007db6:	e020      	b.n	8007dfa <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d106      	bne.n	8007dcc <netconn_recv+0xa8>
 8007dbe:	4b11      	ldr	r3, [pc, #68]	; (8007e04 <netconn_recv+0xe0>)
 8007dc0:	f240 3279 	movw	r2, #889	; 0x379
 8007dc4:	4913      	ldr	r1, [pc, #76]	; (8007e14 <netconn_recv+0xf0>)
 8007dc6:	4811      	ldr	r0, [pc, #68]	; (8007e0c <netconn_recv+0xe8>)
 8007dc8:	f00f f852 	bl	8016e70 <iprintf>

    buf->p = p;
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8007dd2:	68fa      	ldr	r2, [r7, #12]
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	2200      	movs	r2, #0
 8007de2:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8007dea:	2300      	movs	r3, #0
 8007dec:	e005      	b.n	8007dfa <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8007dee:	2200      	movs	r2, #0
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff fe1a 	bl	8007a2c <netconn_recv_data>
 8007df8:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8007dfa:	4618      	mov	r0, r3
 8007dfc:	3718      	adds	r7, #24
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	080183f0 	.word	0x080183f0
 8007e08:	08018608 	.word	0x08018608
 8007e0c:	08018448 	.word	0x08018448
 8007e10:	08018628 	.word	0x08018628
 8007e14:	080186a0 	.word	0x080186a0

08007e18 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	b088      	sub	sp, #32
 8007e1c:	af02      	add	r7, sp, #8
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	607a      	str	r2, [r7, #4]
 8007e24:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8007e2e:	78fa      	ldrb	r2, [r7, #3]
 8007e30:	f107 0110 	add.w	r1, r7, #16
 8007e34:	6a3b      	ldr	r3, [r7, #32]
 8007e36:	9300      	str	r3, [sp, #0]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 f805 	bl	8007e4c <netconn_write_vectors_partly>
 8007e42:	4603      	mov	r3, r0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3718      	adds	r7, #24
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b092      	sub	sp, #72	; 0x48
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4611      	mov	r1, r2
 8007e58:	461a      	mov	r2, r3
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	80fb      	strh	r3, [r7, #6]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <netconn_write_vectors_partly+0x30>
 8007e68:	4b4e      	ldr	r3, [pc, #312]	; (8007fa4 <netconn_write_vectors_partly+0x158>)
 8007e6a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8007e6e:	494e      	ldr	r1, [pc, #312]	; (8007fa8 <netconn_write_vectors_partly+0x15c>)
 8007e70:	484e      	ldr	r0, [pc, #312]	; (8007fac <netconn_write_vectors_partly+0x160>)
 8007e72:	f00e fffd 	bl	8016e70 <iprintf>
 8007e76:	f06f 030f 	mvn.w	r3, #15
 8007e7a:	e08e      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e84:	2b10      	cmp	r3, #16
 8007e86:	d009      	beq.n	8007e9c <netconn_write_vectors_partly+0x50>
 8007e88:	4b46      	ldr	r3, [pc, #280]	; (8007fa4 <netconn_write_vectors_partly+0x158>)
 8007e8a:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8007e8e:	4948      	ldr	r1, [pc, #288]	; (8007fb0 <netconn_write_vectors_partly+0x164>)
 8007e90:	4846      	ldr	r0, [pc, #280]	; (8007fac <netconn_write_vectors_partly+0x160>)
 8007e92:	f00e ffed 	bl	8016e70 <iprintf>
 8007e96:	f06f 0305 	mvn.w	r3, #5
 8007e9a:	e07e      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	7f1b      	ldrb	r3, [r3, #28]
 8007ea0:	f003 0302 	and.w	r3, r3, #2
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d104      	bne.n	8007eb2 <netconn_write_vectors_partly+0x66>
 8007ea8:	797b      	ldrb	r3, [r7, #5]
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <netconn_write_vectors_partly+0x6a>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e000      	b.n	8007eb8 <netconn_write_vectors_partly+0x6c>
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007ebc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d005      	beq.n	8007ed0 <netconn_write_vectors_partly+0x84>
 8007ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d102      	bne.n	8007ed0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007eca:	f06f 0305 	mvn.w	r3, #5
 8007ece:	e064      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8007ed0:	2300      	movs	r3, #0
 8007ed2:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	643b      	str	r3, [r7, #64]	; 0x40
 8007ed8:	e015      	b.n	8007f06 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8007eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007edc:	00db      	lsls	r3, r3, #3
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	4413      	add	r3, r2
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ee6:	4413      	add	r3, r2
 8007ee8:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8007eea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eec:	00db      	lsls	r3, r3, #3
 8007eee:	68ba      	ldr	r2, [r7, #8]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d202      	bcs.n	8007f00 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8007efa:	f06f 0305 	mvn.w	r3, #5
 8007efe:	e04c      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8007f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f02:	3301      	adds	r3, #1
 8007f04:	643b      	str	r3, [r7, #64]	; 0x40
 8007f06:	88fb      	ldrh	r3, [r7, #6]
 8007f08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f0a:	429a      	cmp	r2, r3
 8007f0c:	dbe5      	blt.n	8007eda <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8007f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d101      	bne.n	8007f18 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8007f14:	2300      	movs	r3, #0
 8007f16:	e040      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8007f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da0a      	bge.n	8007f34 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8007f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d102      	bne.n	8007f2a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8007f24:	f06f 0305 	mvn.w	r3, #5
 8007f28:	e037      	b.n	8007f9a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8007f2a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007f2e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8007f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f32:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8007f3c:	88fb      	ldrh	r3, [r7, #6]
 8007f3e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8007f40:	2300      	movs	r3, #0
 8007f42:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007f44:	797b      	ldrb	r3, [r7, #5]
 8007f46:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8007f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8007f52:	f107 0314 	add.w	r3, r7, #20
 8007f56:	4619      	mov	r1, r3
 8007f58:	4816      	ldr	r0, [pc, #88]	; (8007fb4 <netconn_write_vectors_partly+0x168>)
 8007f5a:	f7ff fb9f 	bl	800769c <netconn_apimsg>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8007f64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d114      	bne.n	8007f96 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8007f6c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8007f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f76:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8007f78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10a      	bne.n	8007f96 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8007f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d006      	beq.n	8007f96 <netconn_write_vectors_partly+0x14a>
 8007f88:	4b06      	ldr	r3, [pc, #24]	; (8007fa4 <netconn_write_vectors_partly+0x158>)
 8007f8a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8007f8e:	490a      	ldr	r1, [pc, #40]	; (8007fb8 <netconn_write_vectors_partly+0x16c>)
 8007f90:	4806      	ldr	r0, [pc, #24]	; (8007fac <netconn_write_vectors_partly+0x160>)
 8007f92:	f00e ff6d 	bl	8016e70 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8007f96:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	3748      	adds	r7, #72	; 0x48
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
 8007fa2:	bf00      	nop
 8007fa4:	080183f0 	.word	0x080183f0
 8007fa8:	080186c8 	.word	0x080186c8
 8007fac:	08018448 	.word	0x08018448
 8007fb0:	080186e4 	.word	0x080186e4
 8007fb4:	080095e1 	.word	0x080095e1
 8007fb8:	08018708 	.word	0x08018708

08007fbc <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b08c      	sub	sp, #48	; 0x30
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d109      	bne.n	8007fe2 <netconn_close_shutdown+0x26>
 8007fce:	4b0f      	ldr	r3, [pc, #60]	; (800800c <netconn_close_shutdown+0x50>)
 8007fd0:	f240 4247 	movw	r2, #1095	; 0x447
 8007fd4:	490e      	ldr	r1, [pc, #56]	; (8008010 <netconn_close_shutdown+0x54>)
 8007fd6:	480f      	ldr	r0, [pc, #60]	; (8008014 <netconn_close_shutdown+0x58>)
 8007fd8:	f00e ff4a 	bl	8016e70 <iprintf>
 8007fdc:	f06f 030f 	mvn.w	r3, #15
 8007fe0:	e010      	b.n	8008004 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8007fe6:	78fb      	ldrb	r3, [r7, #3]
 8007fe8:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007fea:	2329      	movs	r3, #41	; 0x29
 8007fec:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007fee:	f107 030c 	add.w	r3, r7, #12
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4808      	ldr	r0, [pc, #32]	; (8008018 <netconn_close_shutdown+0x5c>)
 8007ff6:	f7ff fb51 	bl	800769c <netconn_apimsg>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8008000:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8008004:	4618      	mov	r0, r3
 8008006:	3730      	adds	r7, #48	; 0x30
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	080183f0 	.word	0x080183f0
 8008010:	0801872c 	.word	0x0801872c
 8008014:	08018448 	.word	0x08018448
 8008018:	080096f9 	.word	0x080096f9

0800801c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b082      	sub	sp, #8
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8008024:	2103      	movs	r1, #3
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f7ff ffc8 	bl	8007fbc <netconn_close_shutdown>
 800802c:	4603      	mov	r3, r0
}
 800802e:	4618      	mov	r0, r3
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b084      	sub	sp, #16
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d101      	bne.n	8008048 <netconn_err+0x12>
    return ERR_OK;
 8008044:	2300      	movs	r3, #0
 8008046:	e00d      	b.n	8008064 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8008048:	f00e fe92 	bl	8016d70 <sys_arch_protect>
 800804c:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	7a1b      	ldrb	r3, [r3, #8]
 8008052:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2200      	movs	r2, #0
 8008058:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800805a:	68f8      	ldr	r0, [r7, #12]
 800805c:	f00e fe96 	bl	8016d8c <sys_arch_unprotect>
  return err;
 8008060:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8008064:	4618      	mov	r0, r3
 8008066:	3710      	adds	r7, #16
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}

0800806c <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
 8008072:	4603      	mov	r3, r0
 8008074:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8008076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800807a:	f113 0f0d 	cmn.w	r3, #13
 800807e:	d009      	beq.n	8008094 <lwip_netconn_err_to_msg+0x28>
 8008080:	f113 0f0d 	cmn.w	r3, #13
 8008084:	dc0c      	bgt.n	80080a0 <lwip_netconn_err_to_msg+0x34>
 8008086:	f113 0f0f 	cmn.w	r3, #15
 800808a:	d007      	beq.n	800809c <lwip_netconn_err_to_msg+0x30>
 800808c:	f113 0f0e 	cmn.w	r3, #14
 8008090:	d002      	beq.n	8008098 <lwip_netconn_err_to_msg+0x2c>
 8008092:	e005      	b.n	80080a0 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <lwip_netconn_err_to_msg+0x54>)
 8008096:	e00e      	b.n	80080b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8008098:	4b0a      	ldr	r3, [pc, #40]	; (80080c4 <lwip_netconn_err_to_msg+0x58>)
 800809a:	e00c      	b.n	80080b6 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800809c:	4b0a      	ldr	r3, [pc, #40]	; (80080c8 <lwip_netconn_err_to_msg+0x5c>)
 800809e:	e00a      	b.n	80080b6 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80080a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d005      	beq.n	80080b4 <lwip_netconn_err_to_msg+0x48>
 80080a8:	4b08      	ldr	r3, [pc, #32]	; (80080cc <lwip_netconn_err_to_msg+0x60>)
 80080aa:	227d      	movs	r2, #125	; 0x7d
 80080ac:	4908      	ldr	r1, [pc, #32]	; (80080d0 <lwip_netconn_err_to_msg+0x64>)
 80080ae:	4809      	ldr	r0, [pc, #36]	; (80080d4 <lwip_netconn_err_to_msg+0x68>)
 80080b0:	f00e fede 	bl	8016e70 <iprintf>
      return NULL;
 80080b4:	2300      	movs	r3, #0
  }
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	0801bc78 	.word	0x0801bc78
 80080c4:	0801bc79 	.word	0x0801bc79
 80080c8:	0801bc7a 	.word	0x0801bc7a
 80080cc:	08018748 	.word	0x08018748
 80080d0:	0801877c 	.word	0x0801877c
 80080d4:	0801878c 	.word	0x0801878c

080080d8 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d105      	bne.n	80080f4 <lwip_netconn_is_err_msg+0x1c>
 80080e8:	4b12      	ldr	r3, [pc, #72]	; (8008134 <lwip_netconn_is_err_msg+0x5c>)
 80080ea:	2285      	movs	r2, #133	; 0x85
 80080ec:	4912      	ldr	r1, [pc, #72]	; (8008138 <lwip_netconn_is_err_msg+0x60>)
 80080ee:	4813      	ldr	r0, [pc, #76]	; (800813c <lwip_netconn_is_err_msg+0x64>)
 80080f0:	f00e febe 	bl	8016e70 <iprintf>

  if (msg == &netconn_aborted) {
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a12      	ldr	r2, [pc, #72]	; (8008140 <lwip_netconn_is_err_msg+0x68>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d104      	bne.n	8008106 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	22f3      	movs	r2, #243	; 0xf3
 8008100:	701a      	strb	r2, [r3, #0]
    return 1;
 8008102:	2301      	movs	r3, #1
 8008104:	e012      	b.n	800812c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a0e      	ldr	r2, [pc, #56]	; (8008144 <lwip_netconn_is_err_msg+0x6c>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d104      	bne.n	8008118 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	22f2      	movs	r2, #242	; 0xf2
 8008112:	701a      	strb	r2, [r3, #0]
    return 1;
 8008114:	2301      	movs	r3, #1
 8008116:	e009      	b.n	800812c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a0b      	ldr	r2, [pc, #44]	; (8008148 <lwip_netconn_is_err_msg+0x70>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d104      	bne.n	800812a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	22f1      	movs	r2, #241	; 0xf1
 8008124:	701a      	strb	r2, [r3, #0]
    return 1;
 8008126:	2301      	movs	r3, #1
 8008128:	e000      	b.n	800812c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800812a:	2300      	movs	r3, #0
}
 800812c:	4618      	mov	r0, r3
 800812e:	3708      	adds	r7, #8
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}
 8008134:	08018748 	.word	0x08018748
 8008138:	080187b4 	.word	0x080187b4
 800813c:	0801878c 	.word	0x0801878c
 8008140:	0801bc78 	.word	0x0801bc78
 8008144:	0801bc79 	.word	0x0801bc79
 8008148:	0801bc7a 	.word	0x0801bc7a

0800814c <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b088      	sub	sp, #32
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	607a      	str	r2, [r7, #4]
 8008158:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d105      	bne.n	800816c <recv_udp+0x20>
 8008160:	4b34      	ldr	r3, [pc, #208]	; (8008234 <recv_udp+0xe8>)
 8008162:	22e5      	movs	r2, #229	; 0xe5
 8008164:	4934      	ldr	r1, [pc, #208]	; (8008238 <recv_udp+0xec>)
 8008166:	4835      	ldr	r0, [pc, #212]	; (800823c <recv_udp+0xf0>)
 8008168:	f00e fe82 	bl	8016e70 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d105      	bne.n	800817e <recv_udp+0x32>
 8008172:	4b30      	ldr	r3, [pc, #192]	; (8008234 <recv_udp+0xe8>)
 8008174:	22e6      	movs	r2, #230	; 0xe6
 8008176:	4932      	ldr	r1, [pc, #200]	; (8008240 <recv_udp+0xf4>)
 8008178:	4830      	ldr	r0, [pc, #192]	; (800823c <recv_udp+0xf0>)
 800817a:	f00e fe79 	bl	8016e70 <iprintf>
  conn = (struct netconn *)arg;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	2b00      	cmp	r3, #0
 8008186:	d103      	bne.n	8008190 <recv_udp+0x44>
    pbuf_free(p);
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f003 f94b 	bl	800b424 <pbuf_free>
    return;
 800818e:	e04d      	b.n	800822c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	685b      	ldr	r3, [r3, #4]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	429a      	cmp	r2, r3
 8008198:	d005      	beq.n	80081a6 <recv_udp+0x5a>
 800819a:	4b26      	ldr	r3, [pc, #152]	; (8008234 <recv_udp+0xe8>)
 800819c:	22ee      	movs	r2, #238	; 0xee
 800819e:	4929      	ldr	r1, [pc, #164]	; (8008244 <recv_udp+0xf8>)
 80081a0:	4826      	ldr	r0, [pc, #152]	; (800823c <recv_udp+0xf0>)
 80081a2:	f00e fe65 	bl	8016e70 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	3310      	adds	r3, #16
 80081aa:	4618      	mov	r0, r3
 80081ac:	f00e fcc5 	bl	8016b3a <sys_mbox_valid>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d103      	bne.n	80081be <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f003 f934 	bl	800b424 <pbuf_free>
    return;
 80081bc:	e036      	b.n	800822c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80081be:	2006      	movs	r0, #6
 80081c0:	f002 fa2e 	bl	800a620 <memp_malloc>
 80081c4:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80081c6:	69bb      	ldr	r3, [r7, #24]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d103      	bne.n	80081d4 <recv_udp+0x88>
    pbuf_free(p);
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f003 f929 	bl	800b424 <pbuf_free>
    return;
 80081d2:	e02b      	b.n	800822c <recv_udp+0xe0>
  } else {
    buf->p = p;
 80081d4:	69bb      	ldr	r3, [r7, #24]
 80081d6:	687a      	ldr	r2, [r7, #4]
 80081d8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d002      	beq.n	80081ec <recv_udp+0xa0>
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	e000      	b.n	80081ee <recv_udp+0xa2>
 80081ec:	2300      	movs	r3, #0
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80081f6:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	891b      	ldrh	r3, [r3, #8]
 80081fc:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	3310      	adds	r3, #16
 8008202:	69b9      	ldr	r1, [r7, #24]
 8008204:	4618      	mov	r0, r3
 8008206:	f00e fc23 	bl	8016a50 <sys_mbox_trypost>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d003      	beq.n	8008218 <recv_udp+0xcc>
    netbuf_delete(buf);
 8008210:	69b8      	ldr	r0, [r7, #24]
 8008212:	f001 fafd 	bl	8009810 <netbuf_delete>
    return;
 8008216:	e009      	b.n	800822c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800821c:	2b00      	cmp	r3, #0
 800821e:	d005      	beq.n	800822c <recv_udp+0xe0>
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008224:	8afa      	ldrh	r2, [r7, #22]
 8008226:	2100      	movs	r1, #0
 8008228:	69f8      	ldr	r0, [r7, #28]
 800822a:	4798      	blx	r3
  }
}
 800822c:	3720      	adds	r7, #32
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	08018748 	.word	0x08018748
 8008238:	080187c0 	.word	0x080187c0
 800823c:	0801878c 	.word	0x0801878c
 8008240:	080187e4 	.word	0x080187e4
 8008244:	08018804 	.word	0x08018804

08008248 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b088      	sub	sp, #32
 800824c:	af00      	add	r7, sp, #0
 800824e:	60f8      	str	r0, [r7, #12]
 8008250:	60b9      	str	r1, [r7, #8]
 8008252:	607a      	str	r2, [r7, #4]
 8008254:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d106      	bne.n	800826a <recv_tcp+0x22>
 800825c:	4b36      	ldr	r3, [pc, #216]	; (8008338 <recv_tcp+0xf0>)
 800825e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008262:	4936      	ldr	r1, [pc, #216]	; (800833c <recv_tcp+0xf4>)
 8008264:	4836      	ldr	r0, [pc, #216]	; (8008340 <recv_tcp+0xf8>)
 8008266:	f00e fe03 	bl	8016e70 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d106      	bne.n	800827e <recv_tcp+0x36>
 8008270:	4b31      	ldr	r3, [pc, #196]	; (8008338 <recv_tcp+0xf0>)
 8008272:	f240 122d 	movw	r2, #301	; 0x12d
 8008276:	4933      	ldr	r1, [pc, #204]	; (8008344 <recv_tcp+0xfc>)
 8008278:	4831      	ldr	r0, [pc, #196]	; (8008340 <recv_tcp+0xf8>)
 800827a:	f00e fdf9 	bl	8016e70 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800827e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d006      	beq.n	8008294 <recv_tcp+0x4c>
 8008286:	4b2c      	ldr	r3, [pc, #176]	; (8008338 <recv_tcp+0xf0>)
 8008288:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800828c:	492e      	ldr	r1, [pc, #184]	; (8008348 <recv_tcp+0x100>)
 800828e:	482c      	ldr	r0, [pc, #176]	; (8008340 <recv_tcp+0xf8>)
 8008290:	f00e fdee 	bl	8016e70 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8008298:	697b      	ldr	r3, [r7, #20]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d102      	bne.n	80082a4 <recv_tcp+0x5c>
    return ERR_VAL;
 800829e:	f06f 0305 	mvn.w	r3, #5
 80082a2:	e045      	b.n	8008330 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d006      	beq.n	80082bc <recv_tcp+0x74>
 80082ae:	4b22      	ldr	r3, [pc, #136]	; (8008338 <recv_tcp+0xf0>)
 80082b0:	f240 1235 	movw	r2, #309	; 0x135
 80082b4:	4925      	ldr	r1, [pc, #148]	; (800834c <recv_tcp+0x104>)
 80082b6:	4822      	ldr	r0, [pc, #136]	; (8008340 <recv_tcp+0xf8>)
 80082b8:	f00e fdda 	bl	8016e70 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	3310      	adds	r3, #16
 80082c0:	4618      	mov	r0, r3
 80082c2:	f00e fc3a 	bl	8016b3a <sys_mbox_valid>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10d      	bne.n	80082e8 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d008      	beq.n	80082e4 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	891b      	ldrh	r3, [r3, #8]
 80082d6:	4619      	mov	r1, r3
 80082d8:	68b8      	ldr	r0, [r7, #8]
 80082da:	f004 f86b 	bl	800c3b4 <tcp_recved>
      pbuf_free(p);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f003 f8a0 	bl	800b424 <pbuf_free>
    }
    return ERR_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	e023      	b.n	8008330 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <recv_tcp+0xb2>
    msg = p;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	891b      	ldrh	r3, [r3, #8]
 80082f6:	83fb      	strh	r3, [r7, #30]
 80082f8:	e003      	b.n	8008302 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80082fa:	4b15      	ldr	r3, [pc, #84]	; (8008350 <recv_tcp+0x108>)
 80082fc:	61bb      	str	r3, [r7, #24]
    len = 0;
 80082fe:	2300      	movs	r3, #0
 8008300:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	3310      	adds	r3, #16
 8008306:	69b9      	ldr	r1, [r7, #24]
 8008308:	4618      	mov	r0, r3
 800830a:	f00e fba1 	bl	8016a50 <sys_mbox_trypost>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d002      	beq.n	800831a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8008314:	f04f 33ff 	mov.w	r3, #4294967295
 8008318:	e00a      	b.n	8008330 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800831a:	697b      	ldr	r3, [r7, #20]
 800831c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800831e:	2b00      	cmp	r3, #0
 8008320:	d005      	beq.n	800832e <recv_tcp+0xe6>
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008326:	8bfa      	ldrh	r2, [r7, #30]
 8008328:	2100      	movs	r1, #0
 800832a:	6978      	ldr	r0, [r7, #20]
 800832c:	4798      	blx	r3
  }

  return ERR_OK;
 800832e:	2300      	movs	r3, #0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3720      	adds	r7, #32
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}
 8008338:	08018748 	.word	0x08018748
 800833c:	08018824 	.word	0x08018824
 8008340:	0801878c 	.word	0x0801878c
 8008344:	08018848 	.word	0x08018848
 8008348:	08018868 	.word	0x08018868
 800834c:	08018880 	.word	0x08018880
 8008350:	0801bc7a 	.word	0x0801bc7a

08008354 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d106      	bne.n	8008376 <poll_tcp+0x22>
 8008368:	4b29      	ldr	r3, [pc, #164]	; (8008410 <poll_tcp+0xbc>)
 800836a:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800836e:	4929      	ldr	r1, [pc, #164]	; (8008414 <poll_tcp+0xc0>)
 8008370:	4829      	ldr	r0, [pc, #164]	; (8008418 <poll_tcp+0xc4>)
 8008372:	f00e fd7d 	bl	8016e70 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	785b      	ldrb	r3, [r3, #1]
 800837a:	2b01      	cmp	r3, #1
 800837c:	d104      	bne.n	8008388 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800837e:	2101      	movs	r1, #1
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f000 ff61 	bl	8009248 <lwip_netconn_do_writemore>
 8008386:	e016      	b.n	80083b6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	785b      	ldrb	r3, [r3, #1]
 800838c:	2b04      	cmp	r3, #4
 800838e:	d112      	bne.n	80083b6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	6a1b      	ldr	r3, [r3, #32]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <poll_tcp+0x5a>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	6a1b      	ldr	r3, [r3, #32]
 800839c:	7a5b      	ldrb	r3, [r3, #9]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d005      	beq.n	80083ae <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6a1b      	ldr	r3, [r3, #32]
 80083a6:	7a5a      	ldrb	r2, [r3, #9]
 80083a8:	3a01      	subs	r2, #1
 80083aa:	b2d2      	uxtb	r2, r2
 80083ac:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80083ae:	2101      	movs	r1, #1
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	f000 fbf7 	bl	8008ba4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	7f1b      	ldrb	r3, [r3, #28]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d021      	beq.n	8008406 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d01d      	beq.n	8008406 <poll_tcp+0xb2>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	685b      	ldr	r3, [r3, #4]
 80083ce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80083d2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80083d6:	d316      	bcc.n	8008406 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80083e0:	2b04      	cmp	r3, #4
 80083e2:	d810      	bhi.n	8008406 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	7f1b      	ldrb	r3, [r3, #28]
 80083e8:	f023 0310 	bic.w	r3, r3, #16
 80083ec:	b2da      	uxtb	r2, r3
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d005      	beq.n	8008406 <poll_tcp+0xb2>
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083fe:	2200      	movs	r2, #0
 8008400:	2102      	movs	r1, #2
 8008402:	68f8      	ldr	r0, [r7, #12]
 8008404:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	08018748 	.word	0x08018748
 8008414:	080188a0 	.word	0x080188a0
 8008418:	0801878c 	.word	0x0801878c

0800841c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	60f8      	str	r0, [r7, #12]
 8008424:	60b9      	str	r1, [r7, #8]
 8008426:	4613      	mov	r3, r2
 8008428:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d106      	bne.n	8008442 <sent_tcp+0x26>
 8008434:	4b20      	ldr	r3, [pc, #128]	; (80084b8 <sent_tcp+0x9c>)
 8008436:	f240 1293 	movw	r2, #403	; 0x193
 800843a:	4920      	ldr	r1, [pc, #128]	; (80084bc <sent_tcp+0xa0>)
 800843c:	4820      	ldr	r0, [pc, #128]	; (80084c0 <sent_tcp+0xa4>)
 800843e:	f00e fd17 	bl	8016e70 <iprintf>

  if (conn) {
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d032      	beq.n	80084ae <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	785b      	ldrb	r3, [r3, #1]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d104      	bne.n	800845a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8008450:	2101      	movs	r1, #1
 8008452:	6978      	ldr	r0, [r7, #20]
 8008454:	f000 fef8 	bl	8009248 <lwip_netconn_do_writemore>
 8008458:	e007      	b.n	800846a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	785b      	ldrb	r3, [r3, #1]
 800845e:	2b04      	cmp	r3, #4
 8008460:	d103      	bne.n	800846a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8008462:	2101      	movs	r1, #1
 8008464:	6978      	ldr	r0, [r7, #20]
 8008466:	f000 fb9d 	bl	8008ba4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d01d      	beq.n	80084ae <sent_tcp+0x92>
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800847a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800847e:	d316      	bcc.n	80084ae <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8008480:	697b      	ldr	r3, [r7, #20]
 8008482:	685b      	ldr	r3, [r3, #4]
 8008484:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8008488:	2b04      	cmp	r3, #4
 800848a:	d810      	bhi.n	80084ae <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	7f1b      	ldrb	r3, [r3, #28]
 8008490:	f023 0310 	bic.w	r3, r3, #16
 8008494:	b2da      	uxtb	r2, r3
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800849a:	697b      	ldr	r3, [r7, #20]
 800849c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d005      	beq.n	80084ae <sent_tcp+0x92>
 80084a2:	697b      	ldr	r3, [r7, #20]
 80084a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a6:	88fa      	ldrh	r2, [r7, #6]
 80084a8:	2102      	movs	r1, #2
 80084aa:	6978      	ldr	r0, [r7, #20]
 80084ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3718      	adds	r7, #24
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	08018748 	.word	0x08018748
 80084bc:	080188a0 	.word	0x080188a0
 80084c0:	0801878c 	.word	0x0801878c

080084c4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b088      	sub	sp, #32
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
 80084cc:	460b      	mov	r3, r1
 80084ce:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d106      	bne.n	80084e8 <err_tcp+0x24>
 80084da:	4b5f      	ldr	r3, [pc, #380]	; (8008658 <err_tcp+0x194>)
 80084dc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80084e0:	495e      	ldr	r1, [pc, #376]	; (800865c <err_tcp+0x198>)
 80084e2:	485f      	ldr	r0, [pc, #380]	; (8008660 <err_tcp+0x19c>)
 80084e4:	f00e fcc4 	bl	8016e70 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80084e8:	f00e fc42 	bl	8016d70 <sys_arch_protect>
 80084ec:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2200      	movs	r2, #0
 80084f2:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80084f4:	69fb      	ldr	r3, [r7, #28]
 80084f6:	78fa      	ldrb	r2, [r7, #3]
 80084f8:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	7f1b      	ldrb	r3, [r3, #28]
 80084fe:	f043 0301 	orr.w	r3, r3, #1
 8008502:	b2da      	uxtb	r2, r3
 8008504:	69fb      	ldr	r3, [r7, #28]
 8008506:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	2200      	movs	r2, #0
 8008512:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8008514:	69b8      	ldr	r0, [r7, #24]
 8008516:	f00e fc39 	bl	8016d8c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800851a:	69fb      	ldr	r3, [r7, #28]
 800851c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851e:	2b00      	cmp	r3, #0
 8008520:	d005      	beq.n	800852e <err_tcp+0x6a>
 8008522:	69fb      	ldr	r3, [r7, #28]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	2200      	movs	r2, #0
 8008528:	2104      	movs	r1, #4
 800852a:	69f8      	ldr	r0, [r7, #28]
 800852c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800852e:	69fb      	ldr	r3, [r7, #28]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b00      	cmp	r3, #0
 8008534:	d005      	beq.n	8008542 <err_tcp+0x7e>
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800853a:	2200      	movs	r2, #0
 800853c:	2100      	movs	r1, #0
 800853e:	69f8      	ldr	r0, [r7, #28]
 8008540:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008542:	69fb      	ldr	r3, [r7, #28]
 8008544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008546:	2b00      	cmp	r3, #0
 8008548:	d005      	beq.n	8008556 <err_tcp+0x92>
 800854a:	69fb      	ldr	r3, [r7, #28]
 800854c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854e:	2200      	movs	r2, #0
 8008550:	2102      	movs	r1, #2
 8008552:	69f8      	ldr	r0, [r7, #28]
 8008554:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8008556:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800855a:	4618      	mov	r0, r3
 800855c:	f7ff fd86 	bl	800806c <lwip_netconn_err_to_msg>
 8008560:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8008562:	69fb      	ldr	r3, [r7, #28]
 8008564:	3310      	adds	r3, #16
 8008566:	4618      	mov	r0, r3
 8008568:	f00e fae7 	bl	8016b3a <sys_mbox_valid>
 800856c:	4603      	mov	r3, r0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d005      	beq.n	800857e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	3310      	adds	r3, #16
 8008576:	6939      	ldr	r1, [r7, #16]
 8008578:	4618      	mov	r0, r3
 800857a:	f00e fa69 	bl	8016a50 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	3314      	adds	r3, #20
 8008582:	4618      	mov	r0, r3
 8008584:	f00e fad9 	bl	8016b3a <sys_mbox_valid>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	d005      	beq.n	800859a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	3314      	adds	r3, #20
 8008592:	6939      	ldr	r1, [r7, #16]
 8008594:	4618      	mov	r0, r3
 8008596:	f00e fa5b 	bl	8016a50 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800859a:	7dfb      	ldrb	r3, [r7, #23]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d005      	beq.n	80085ac <err_tcp+0xe8>
 80085a0:	7dfb      	ldrb	r3, [r7, #23]
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d002      	beq.n	80085ac <err_tcp+0xe8>
 80085a6:	7dfb      	ldrb	r3, [r7, #23]
 80085a8:	2b03      	cmp	r3, #3
 80085aa:	d143      	bne.n	8008634 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 80085ac:	69fb      	ldr	r3, [r7, #28]
 80085ae:	7f1b      	ldrb	r3, [r3, #28]
 80085b0:	f003 0304 	and.w	r3, r3, #4
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bf14      	ite	ne
 80085b8:	2301      	movne	r3, #1
 80085ba:	2300      	moveq	r3, #0
 80085bc:	b2db      	uxtb	r3, r3
 80085be:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	7f1b      	ldrb	r3, [r3, #28]
 80085c4:	f023 0304 	bic.w	r3, r3, #4
 80085c8:	b2da      	uxtb	r2, r3
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d13b      	bne.n	800864c <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80085d4:	69fb      	ldr	r3, [r7, #28]
 80085d6:	6a1b      	ldr	r3, [r3, #32]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d106      	bne.n	80085ea <err_tcp+0x126>
 80085dc:	4b1e      	ldr	r3, [pc, #120]	; (8008658 <err_tcp+0x194>)
 80085de:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80085e2:	4920      	ldr	r1, [pc, #128]	; (8008664 <err_tcp+0x1a0>)
 80085e4:	481e      	ldr	r0, [pc, #120]	; (8008660 <err_tcp+0x19c>)
 80085e6:	f00e fc43 	bl	8016e70 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80085ea:	7dfb      	ldrb	r3, [r7, #23]
 80085ec:	2b04      	cmp	r3, #4
 80085ee:	d104      	bne.n	80085fa <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	6a1b      	ldr	r3, [r3, #32]
 80085f4:	2200      	movs	r2, #0
 80085f6:	711a      	strb	r2, [r3, #4]
 80085f8:	e003      	b.n	8008602 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80085fa:	69fb      	ldr	r3, [r7, #28]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	78fa      	ldrb	r2, [r7, #3]
 8008600:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	330c      	adds	r3, #12
 800860a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800860c:	68b8      	ldr	r0, [r7, #8]
 800860e:	f00e fb25 	bl	8016c5c <sys_sem_valid>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d106      	bne.n	8008626 <err_tcp+0x162>
 8008618:	4b0f      	ldr	r3, [pc, #60]	; (8008658 <err_tcp+0x194>)
 800861a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800861e:	4912      	ldr	r1, [pc, #72]	; (8008668 <err_tcp+0x1a4>)
 8008620:	480f      	ldr	r0, [pc, #60]	; (8008660 <err_tcp+0x19c>)
 8008622:	f00e fc25 	bl	8016e70 <iprintf>
      conn->current_msg = NULL;
 8008626:	69fb      	ldr	r3, [r7, #28]
 8008628:	2200      	movs	r2, #0
 800862a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800862c:	68b8      	ldr	r0, [r7, #8]
 800862e:	f00e fafb 	bl	8016c28 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8008632:	e00b      	b.n	800864c <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8008634:	69fb      	ldr	r3, [r7, #28]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d008      	beq.n	800864e <err_tcp+0x18a>
 800863c:	4b06      	ldr	r3, [pc, #24]	; (8008658 <err_tcp+0x194>)
 800863e:	f240 12f7 	movw	r2, #503	; 0x1f7
 8008642:	490a      	ldr	r1, [pc, #40]	; (800866c <err_tcp+0x1a8>)
 8008644:	4806      	ldr	r0, [pc, #24]	; (8008660 <err_tcp+0x19c>)
 8008646:	f00e fc13 	bl	8016e70 <iprintf>
  }
}
 800864a:	e000      	b.n	800864e <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800864c:	bf00      	nop
}
 800864e:	bf00      	nop
 8008650:	3720      	adds	r7, #32
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	08018748 	.word	0x08018748
 800865c:	080188a0 	.word	0x080188a0
 8008660:	0801878c 	.word	0x0801878c
 8008664:	080188b0 	.word	0x080188b0
 8008668:	080188cc 	.word	0x080188cc
 800866c:	080188e8 	.word	0x080188e8

08008670 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	68f8      	ldr	r0, [r7, #12]
 8008682:	f004 fd5d 	bl	800d140 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8008686:	490a      	ldr	r1, [pc, #40]	; (80086b0 <setup_tcp+0x40>)
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f004 fd6b 	bl	800d164 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800868e:	4909      	ldr	r1, [pc, #36]	; (80086b4 <setup_tcp+0x44>)
 8008690:	68f8      	ldr	r0, [r7, #12]
 8008692:	f004 fd89 	bl	800d1a8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8008696:	2202      	movs	r2, #2
 8008698:	4907      	ldr	r1, [pc, #28]	; (80086b8 <setup_tcp+0x48>)
 800869a:	68f8      	ldr	r0, [r7, #12]
 800869c:	f004 fde0 	bl	800d260 <tcp_poll>
  tcp_err(pcb, err_tcp);
 80086a0:	4906      	ldr	r1, [pc, #24]	; (80086bc <setup_tcp+0x4c>)
 80086a2:	68f8      	ldr	r0, [r7, #12]
 80086a4:	f004 fda2 	bl	800d1ec <tcp_err>
}
 80086a8:	bf00      	nop
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	08008249 	.word	0x08008249
 80086b4:	0800841d 	.word	0x0800841d
 80086b8:	08008355 	.word	0x08008355
 80086bc:	080084c5 	.word	0x080084c5

080086c0 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 80086c0:	b590      	push	{r4, r7, lr}
 80086c2:	b089      	sub	sp, #36	; 0x24
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80086d2:	69fb      	ldr	r3, [r7, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d102      	bne.n	80086de <accept_function+0x1e>
    return ERR_VAL;
 80086d8:	f06f 0305 	mvn.w	r3, #5
 80086dc:	e0a1      	b.n	8008822 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 80086de:	69fb      	ldr	r3, [r7, #28]
 80086e0:	3314      	adds	r3, #20
 80086e2:	4618      	mov	r0, r3
 80086e4:	f00e fa29 	bl	8016b3a <sys_mbox_valid>
 80086e8:	4603      	mov	r3, r0
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d102      	bne.n	80086f4 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 80086ee:	f06f 0305 	mvn.w	r3, #5
 80086f2:	e096      	b.n	8008822 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 80086f4:	68bb      	ldr	r3, [r7, #8]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d11b      	bne.n	8008732 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 80086fa:	69fb      	ldr	r3, [r7, #28]
 80086fc:	f103 0414 	add.w	r4, r3, #20
 8008700:	f06f 000c 	mvn.w	r0, #12
 8008704:	f7ff fcb2 	bl	800806c <lwip_netconn_err_to_msg>
 8008708:	4603      	mov	r3, r0
 800870a:	4619      	mov	r1, r3
 800870c:	4620      	mov	r0, r4
 800870e:	f00e f99f 	bl	8016a50 <sys_mbox_trypost>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d109      	bne.n	800872c <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008718:	69fb      	ldr	r3, [r7, #28]
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	d005      	beq.n	800872c <accept_function+0x6c>
 8008720:	69fb      	ldr	r3, [r7, #28]
 8008722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008724:	2200      	movs	r2, #0
 8008726:	2100      	movs	r1, #0
 8008728:	69f8      	ldr	r0, [r7, #28]
 800872a:	4798      	blx	r3
    }
    return ERR_VAL;
 800872c:	f06f 0305 	mvn.w	r3, #5
 8008730:	e077      	b.n	8008822 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8008732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d006      	beq.n	8008748 <accept_function+0x88>
 800873a:	4b3c      	ldr	r3, [pc, #240]	; (800882c <accept_function+0x16c>)
 800873c:	f240 222a 	movw	r2, #554	; 0x22a
 8008740:	493b      	ldr	r1, [pc, #236]	; (8008830 <accept_function+0x170>)
 8008742:	483c      	ldr	r0, [pc, #240]	; (8008834 <accept_function+0x174>)
 8008744:	f00e fb94 	bl	8016e70 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8008748:	69fb      	ldr	r3, [r7, #28]
 800874a:	781a      	ldrb	r2, [r3, #0]
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008750:	4619      	mov	r1, r3
 8008752:	4610      	mov	r0, r2
 8008754:	f000 f8f0 	bl	8008938 <netconn_alloc>
 8008758:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800875a:	69bb      	ldr	r3, [r7, #24]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11b      	bne.n	8008798 <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8008760:	69fb      	ldr	r3, [r7, #28]
 8008762:	f103 0414 	add.w	r4, r3, #20
 8008766:	f06f 000c 	mvn.w	r0, #12
 800876a:	f7ff fc7f 	bl	800806c <lwip_netconn_err_to_msg>
 800876e:	4603      	mov	r3, r0
 8008770:	4619      	mov	r1, r3
 8008772:	4620      	mov	r0, r4
 8008774:	f00e f96c 	bl	8016a50 <sys_mbox_trypost>
 8008778:	4603      	mov	r3, r0
 800877a:	2b00      	cmp	r3, #0
 800877c:	d109      	bne.n	8008792 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008782:	2b00      	cmp	r3, #0
 8008784:	d005      	beq.n	8008792 <accept_function+0xd2>
 8008786:	69fb      	ldr	r3, [r7, #28]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	2200      	movs	r2, #0
 800878c:	2100      	movs	r1, #0
 800878e:	69f8      	ldr	r0, [r7, #28]
 8008790:	4798      	blx	r3
    }
    return ERR_MEM;
 8008792:	f04f 33ff 	mov.w	r3, #4294967295
 8008796:	e044      	b.n	8008822 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8008798:	69bb      	ldr	r3, [r7, #24]
 800879a:	68ba      	ldr	r2, [r7, #8]
 800879c:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800879e:	69b8      	ldr	r0, [r7, #24]
 80087a0:	f7ff ff66 	bl	8008670 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	3314      	adds	r3, #20
 80087a8:	69b9      	ldr	r1, [r7, #24]
 80087aa:	4618      	mov	r0, r3
 80087ac:	f00e f950 	bl	8016a50 <sys_mbox_trypost>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d02a      	beq.n	800880c <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 80087b6:	69bb      	ldr	r3, [r7, #24]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 80087bc:	2100      	movs	r1, #0
 80087be:	6978      	ldr	r0, [r7, #20]
 80087c0:	f004 fcbe 	bl	800d140 <tcp_arg>
    tcp_recv(pcb, NULL);
 80087c4:	2100      	movs	r1, #0
 80087c6:	6978      	ldr	r0, [r7, #20]
 80087c8:	f004 fccc 	bl	800d164 <tcp_recv>
    tcp_sent(pcb, NULL);
 80087cc:	2100      	movs	r1, #0
 80087ce:	6978      	ldr	r0, [r7, #20]
 80087d0:	f004 fcea 	bl	800d1a8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2100      	movs	r1, #0
 80087d8:	6978      	ldr	r0, [r7, #20]
 80087da:	f004 fd41 	bl	800d260 <tcp_poll>
    tcp_err(pcb, NULL);
 80087de:	2100      	movs	r1, #0
 80087e0:	6978      	ldr	r0, [r7, #20]
 80087e2:	f004 fd03 	bl	800d1ec <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	2200      	movs	r2, #0
 80087ea:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	3310      	adds	r3, #16
 80087f0:	4618      	mov	r0, r3
 80087f2:	f00e f91b 	bl	8016a2c <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 80087f6:	69bb      	ldr	r3, [r7, #24]
 80087f8:	3310      	adds	r3, #16
 80087fa:	4618      	mov	r0, r3
 80087fc:	f00e f9ae 	bl	8016b5c <sys_mbox_set_invalid>
    netconn_free(newconn);
 8008800:	69b8      	ldr	r0, [r7, #24]
 8008802:	f000 f907 	bl	8008a14 <netconn_free>
    return ERR_MEM;
 8008806:	f04f 33ff 	mov.w	r3, #4294967295
 800880a:	e00a      	b.n	8008822 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008810:	2b00      	cmp	r3, #0
 8008812:	d005      	beq.n	8008820 <accept_function+0x160>
 8008814:	69fb      	ldr	r3, [r7, #28]
 8008816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008818:	2200      	movs	r2, #0
 800881a:	2100      	movs	r1, #0
 800881c:	69f8      	ldr	r0, [r7, #28]
 800881e:	4798      	blx	r3
  }

  return ERR_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3724      	adds	r7, #36	; 0x24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd90      	pop	{r4, r7, pc}
 800882a:	bf00      	nop
 800882c:	08018748 	.word	0x08018748
 8008830:	08018904 	.word	0x08018904
 8008834:	0801878c 	.word	0x0801878c

08008838 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8008838:	b590      	push	{r4, r7, lr}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2b00      	cmp	r3, #0
 800884c:	d006      	beq.n	800885c <pcb_new+0x24>
 800884e:	4b2b      	ldr	r3, [pc, #172]	; (80088fc <pcb_new+0xc4>)
 8008850:	f240 2265 	movw	r2, #613	; 0x265
 8008854:	492a      	ldr	r1, [pc, #168]	; (8008900 <pcb_new+0xc8>)
 8008856:	482b      	ldr	r0, [pc, #172]	; (8008904 <pcb_new+0xcc>)
 8008858:	f00e fb0a 	bl	8016e70 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	781b      	ldrb	r3, [r3, #0]
 8008862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008866:	2b10      	cmp	r3, #16
 8008868:	d022      	beq.n	80088b0 <pcb_new+0x78>
 800886a:	2b20      	cmp	r3, #32
 800886c:	d133      	bne.n	80088d6 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681c      	ldr	r4, [r3, #0]
 8008872:	7bfb      	ldrb	r3, [r7, #15]
 8008874:	4618      	mov	r0, r3
 8008876:	f009 ff06 	bl	8012686 <udp_new_ip_type>
 800887a:	4603      	mov	r3, r0
 800887c:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d02a      	beq.n	80088de <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2b22      	cmp	r3, #34	; 0x22
 8008890:	d104      	bne.n	800889c <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	685b      	ldr	r3, [r3, #4]
 8008898:	2201      	movs	r2, #1
 800889a:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	6858      	ldr	r0, [r3, #4]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	461a      	mov	r2, r3
 80088a8:	4917      	ldr	r1, [pc, #92]	; (8008908 <pcb_new+0xd0>)
 80088aa:	f009 fe73 	bl	8012594 <udp_recv>
      }
      break;
 80088ae:	e016      	b.n	80088de <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681c      	ldr	r4, [r3, #0]
 80088b4:	7bfb      	ldrb	r3, [r7, #15]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f004 fc34 	bl	800d124 <tcp_new_ip_type>
 80088bc:	4603      	mov	r3, r0
 80088be:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00b      	beq.n	80088e2 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff fece 	bl	8008670 <setup_tcp>
      }
      break;
 80088d4:	e005      	b.n	80088e2 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	22fa      	movs	r2, #250	; 0xfa
 80088da:	711a      	strb	r2, [r3, #4]
      return;
 80088dc:	e00a      	b.n	80088f4 <pcb_new+0xbc>
      break;
 80088de:	bf00      	nop
 80088e0:	e000      	b.n	80088e4 <pcb_new+0xac>
      break;
 80088e2:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d102      	bne.n	80088f4 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	22ff      	movs	r2, #255	; 0xff
 80088f2:	711a      	strb	r2, [r3, #4]
  }
}
 80088f4:	3714      	adds	r7, #20
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd90      	pop	{r4, r7, pc}
 80088fa:	bf00      	nop
 80088fc:	08018748 	.word	0x08018748
 8008900:	0801892c 	.word	0x0801892c
 8008904:	0801878c 	.word	0x0801878c
 8008908:	0800814d 	.word	0x0800814d

0800890c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b084      	sub	sp, #16
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	2200      	movs	r2, #0
 800891c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d102      	bne.n	800892e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8008928:	68f8      	ldr	r0, [r7, #12]
 800892a:	f7ff ff85 	bl	8008838 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800892e:	bf00      	nop
 8008930:	3710      	adds	r7, #16
 8008932:	46bd      	mov	sp, r7
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b086      	sub	sp, #24
 800893c:	af00      	add	r7, sp, #0
 800893e:	4603      	mov	r3, r0
 8008940:	6039      	str	r1, [r7, #0]
 8008942:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8008944:	2300      	movs	r3, #0
 8008946:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8008948:	2007      	movs	r0, #7
 800894a:	f001 fe69 	bl	800a620 <memp_malloc>
 800894e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d101      	bne.n	800895a <netconn_alloc+0x22>
    return NULL;
 8008956:	2300      	movs	r3, #0
 8008958:	e052      	b.n	8008a00 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	79fa      	ldrb	r2, [r7, #7]
 8008964:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008972:	2b10      	cmp	r3, #16
 8008974:	d004      	beq.n	8008980 <netconn_alloc+0x48>
 8008976:	2b20      	cmp	r3, #32
 8008978:	d105      	bne.n	8008986 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800897a:	2306      	movs	r3, #6
 800897c:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800897e:	e00a      	b.n	8008996 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8008980:	2306      	movs	r3, #6
 8008982:	617b      	str	r3, [r7, #20]
      break;
 8008984:	e007      	b.n	8008996 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8008986:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <netconn_alloc+0xd0>)
 8008988:	f240 22e5 	movw	r2, #741	; 0x2e5
 800898c:	491f      	ldr	r1, [pc, #124]	; (8008a0c <netconn_alloc+0xd4>)
 800898e:	4820      	ldr	r0, [pc, #128]	; (8008a10 <netconn_alloc+0xd8>)
 8008990:	f00e fa6e 	bl	8016e70 <iprintf>
      goto free_and_return;
 8008994:	e02f      	b.n	80089f6 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3310      	adds	r3, #16
 800899a:	6979      	ldr	r1, [r7, #20]
 800899c:	4618      	mov	r0, r3
 800899e:	f00e f823 	bl	80169e8 <sys_mbox_new>
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d125      	bne.n	80089f4 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	330c      	adds	r3, #12
 80089ac:	2100      	movs	r1, #0
 80089ae:	4618      	mov	r0, r3
 80089b0:	f00e f8e1 	bl	8016b76 <sys_sem_new>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	3310      	adds	r3, #16
 80089be:	4618      	mov	r0, r3
 80089c0:	f00e f834 	bl	8016a2c <sys_mbox_free>
    goto free_and_return;
 80089c4:	e017      	b.n	80089f6 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	3314      	adds	r3, #20
 80089ca:	4618      	mov	r0, r3
 80089cc:	f00e f8c6 	bl	8016b5c <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2200      	movs	r2, #0
 80089d4:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f04f 32ff 	mov.w	r2, #4294967295
 80089dc:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	683a      	ldr	r2, [r7, #0]
 80089e2:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	2200      	movs	r2, #0
 80089e8:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	7cfa      	ldrb	r2, [r7, #19]
 80089ee:	771a      	strb	r2, [r3, #28]
  return conn;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	e005      	b.n	8008a00 <netconn_alloc+0xc8>
    goto free_and_return;
 80089f4:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 80089f6:	68f9      	ldr	r1, [r7, #12]
 80089f8:	2007      	movs	r0, #7
 80089fa:	f001 fe63 	bl	800a6c4 <memp_free>
  return NULL;
 80089fe:	2300      	movs	r3, #0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3718      	adds	r7, #24
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}
 8008a08:	08018748 	.word	0x08018748
 8008a0c:	0801894c 	.word	0x0801894c
 8008a10:	0801878c 	.word	0x0801878c

08008a14 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d006      	beq.n	8008a32 <netconn_free+0x1e>
 8008a24:	4b1b      	ldr	r3, [pc, #108]	; (8008a94 <netconn_free+0x80>)
 8008a26:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8008a2a:	491b      	ldr	r1, [pc, #108]	; (8008a98 <netconn_free+0x84>)
 8008a2c:	481b      	ldr	r0, [pc, #108]	; (8008a9c <netconn_free+0x88>)
 8008a2e:	f00e fa1f 	bl	8016e70 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	3310      	adds	r3, #16
 8008a36:	4618      	mov	r0, r3
 8008a38:	f00e f87f 	bl	8016b3a <sys_mbox_valid>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d006      	beq.n	8008a50 <netconn_free+0x3c>
 8008a42:	4b14      	ldr	r3, [pc, #80]	; (8008a94 <netconn_free+0x80>)
 8008a44:	f240 3223 	movw	r2, #803	; 0x323
 8008a48:	4915      	ldr	r1, [pc, #84]	; (8008aa0 <netconn_free+0x8c>)
 8008a4a:	4814      	ldr	r0, [pc, #80]	; (8008a9c <netconn_free+0x88>)
 8008a4c:	f00e fa10 	bl	8016e70 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	3314      	adds	r3, #20
 8008a54:	4618      	mov	r0, r3
 8008a56:	f00e f870 	bl	8016b3a <sys_mbox_valid>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d006      	beq.n	8008a6e <netconn_free+0x5a>
 8008a60:	4b0c      	ldr	r3, [pc, #48]	; (8008a94 <netconn_free+0x80>)
 8008a62:	f240 3226 	movw	r2, #806	; 0x326
 8008a66:	490f      	ldr	r1, [pc, #60]	; (8008aa4 <netconn_free+0x90>)
 8008a68:	480c      	ldr	r0, [pc, #48]	; (8008a9c <netconn_free+0x88>)
 8008a6a:	f00e fa01 	bl	8016e70 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	330c      	adds	r3, #12
 8008a72:	4618      	mov	r0, r3
 8008a74:	f00e f8e5 	bl	8016c42 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	330c      	adds	r3, #12
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f00e f8fe 	bl	8016c7e <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	2007      	movs	r0, #7
 8008a86:	f001 fe1d 	bl	800a6c4 <memp_free>
}
 8008a8a:	bf00      	nop
 8008a8c:	3708      	adds	r7, #8
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}
 8008a92:	bf00      	nop
 8008a94:	08018748 	.word	0x08018748
 8008a98:	08018974 	.word	0x08018974
 8008a9c:	0801878c 	.word	0x0801878c
 8008aa0:	080189a4 	.word	0x080189a4
 8008aa4:	080189e0 	.word	0x080189e0

08008aa8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	3310      	adds	r3, #16
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f00e f840 	bl	8016b3a <sys_mbox_valid>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d02f      	beq.n	8008b20 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008ac0:	e018      	b.n	8008af4 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	781b      	ldrb	r3, [r3, #0]
 8008ac6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008aca:	2b10      	cmp	r3, #16
 8008acc:	d10e      	bne.n	8008aec <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	f107 020f 	add.w	r2, r7, #15
 8008ad4:	4611      	mov	r1, r2
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	f7ff fafe 	bl	80080d8 <lwip_netconn_is_err_msg>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d108      	bne.n	8008af4 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	f002 fc9d 	bl	800b424 <pbuf_free>
 8008aea:	e003      	b.n	8008af4 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	4618      	mov	r0, r3
 8008af0:	f000 fe8e 	bl	8009810 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3310      	adds	r3, #16
 8008af8:	f107 0210 	add.w	r2, r7, #16
 8008afc:	4611      	mov	r1, r2
 8008afe:	4618      	mov	r0, r3
 8008b00:	f00d ffff 	bl	8016b02 <sys_arch_mbox_tryfetch>
 8008b04:	4603      	mov	r3, r0
 8008b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b0a:	d1da      	bne.n	8008ac2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	3310      	adds	r3, #16
 8008b10:	4618      	mov	r0, r3
 8008b12:	f00d ff8b 	bl	8016a2c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3310      	adds	r3, #16
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	f00e f81e 	bl	8016b5c <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	3314      	adds	r3, #20
 8008b24:	4618      	mov	r0, r3
 8008b26:	f00e f808 	bl	8016b3a <sys_mbox_valid>
 8008b2a:	4603      	mov	r3, r0
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d034      	beq.n	8008b9a <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008b30:	e01d      	b.n	8008b6e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f107 020e 	add.w	r2, r7, #14
 8008b38:	4611      	mov	r1, r2
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7ff facc 	bl	80080d8 <lwip_netconn_is_err_msg>
 8008b40:	4603      	mov	r3, r0
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d113      	bne.n	8008b6e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8008b4a:	6978      	ldr	r0, [r7, #20]
 8008b4c:	f7ff ffac 	bl	8008aa8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d007      	beq.n	8008b68 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	685b      	ldr	r3, [r3, #4]
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f003 fa61 	bl	800c024 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	2200      	movs	r2, #0
 8008b66:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8008b68:	6978      	ldr	r0, [r7, #20]
 8008b6a:	f7ff ff53 	bl	8008a14 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3314      	adds	r3, #20
 8008b72:	f107 0210 	add.w	r2, r7, #16
 8008b76:	4611      	mov	r1, r2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f00d ffc2 	bl	8016b02 <sys_arch_mbox_tryfetch>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b84:	d1d5      	bne.n	8008b32 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	3314      	adds	r3, #20
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f00d ff4e 	bl	8016a2c <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	3314      	adds	r3, #20
 8008b94:	4618      	mov	r0, r3
 8008b96:	f00d ffe1 	bl	8016b5c <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8008b9a:	bf00      	nop
 8008b9c:	3718      	adds	r7, #24
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}
	...

08008ba4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b086      	sub	sp, #24
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d106      	bne.n	8008bc8 <lwip_netconn_do_close_internal+0x24>
 8008bba:	4ba1      	ldr	r3, [pc, #644]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008bbc:	f240 32a2 	movw	r2, #930	; 0x3a2
 8008bc0:	49a0      	ldr	r1, [pc, #640]	; (8008e44 <lwip_netconn_do_close_internal+0x2a0>)
 8008bc2:	48a1      	ldr	r0, [pc, #644]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008bc4:	f00e f954 	bl	8016e70 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d006      	beq.n	8008be2 <lwip_netconn_do_close_internal+0x3e>
 8008bd4:	4b9a      	ldr	r3, [pc, #616]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008bd6:	f240 32a3 	movw	r2, #931	; 0x3a3
 8008bda:	499c      	ldr	r1, [pc, #624]	; (8008e4c <lwip_netconn_do_close_internal+0x2a8>)
 8008bdc:	489a      	ldr	r0, [pc, #616]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008bde:	f00e f947 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	785b      	ldrb	r3, [r3, #1]
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d006      	beq.n	8008bf8 <lwip_netconn_do_close_internal+0x54>
 8008bea:	4b95      	ldr	r3, [pc, #596]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008bec:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8008bf0:	4997      	ldr	r1, [pc, #604]	; (8008e50 <lwip_netconn_do_close_internal+0x2ac>)
 8008bf2:	4895      	ldr	r0, [pc, #596]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008bf4:	f00e f93c 	bl	8016e70 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d106      	bne.n	8008c0e <lwip_netconn_do_close_internal+0x6a>
 8008c00:	4b8f      	ldr	r3, [pc, #572]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008c02:	f240 32a5 	movw	r2, #933	; 0x3a5
 8008c06:	4993      	ldr	r1, [pc, #588]	; (8008e54 <lwip_netconn_do_close_internal+0x2b0>)
 8008c08:	488f      	ldr	r0, [pc, #572]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008c0a:	f00e f931 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	6a1b      	ldr	r3, [r3, #32]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d106      	bne.n	8008c24 <lwip_netconn_do_close_internal+0x80>
 8008c16:	4b8a      	ldr	r3, [pc, #552]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008c18:	f240 32a6 	movw	r2, #934	; 0x3a6
 8008c1c:	498e      	ldr	r1, [pc, #568]	; (8008e58 <lwip_netconn_do_close_internal+0x2b4>)
 8008c1e:	488a      	ldr	r0, [pc, #552]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008c20:	f00e f926 	bl	8016e70 <iprintf>

  tpcb = conn->pcb.tcp;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	685b      	ldr	r3, [r3, #4]
 8008c28:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6a1b      	ldr	r3, [r3, #32]
 8008c2e:	7a1b      	ldrb	r3, [r3, #8]
 8008c30:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8008c32:	7bfb      	ldrb	r3, [r7, #15]
 8008c34:	f003 0301 	and.w	r3, r3, #1
 8008c38:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8008c3a:	7bfb      	ldrb	r3, [r7, #15]
 8008c3c:	f003 0302 	and.w	r3, r3, #2
 8008c40:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8008c42:	7bfb      	ldrb	r3, [r7, #15]
 8008c44:	2b03      	cmp	r3, #3
 8008c46:	d102      	bne.n	8008c4e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	75bb      	strb	r3, [r7, #22]
 8008c4c:	e01f      	b.n	8008c8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d00e      	beq.n	8008c72 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8008c58:	2b05      	cmp	r3, #5
 8008c5a:	d007      	beq.n	8008c6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8008c60:	2b06      	cmp	r3, #6
 8008c62:	d003      	beq.n	8008c6c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8008c68:	2b08      	cmp	r3, #8
 8008c6a:	d102      	bne.n	8008c72 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	75bb      	strb	r3, [r7, #22]
 8008c70:	e00d      	b.n	8008c8e <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8008c72:	7b7b      	ldrb	r3, [r7, #13]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d008      	beq.n	8008c8a <lwip_netconn_do_close_internal+0xe6>
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	8b5b      	ldrh	r3, [r3, #26]
 8008c7c:	f003 0310 	and.w	r3, r3, #16
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8008c84:	2301      	movs	r3, #1
 8008c86:	75bb      	strb	r3, [r7, #22]
 8008c88:	e001      	b.n	8008c8e <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8008c8e:	7dbb      	ldrb	r3, [r7, #22]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d003      	beq.n	8008c9c <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8008c94:	2100      	movs	r1, #0
 8008c96:	6938      	ldr	r0, [r7, #16]
 8008c98:	f004 fa52 	bl	800d140 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	7d1b      	ldrb	r3, [r3, #20]
 8008ca0:	2b01      	cmp	r3, #1
 8008ca2:	d104      	bne.n	8008cae <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6938      	ldr	r0, [r7, #16]
 8008ca8:	f004 fac2 	bl	800d230 <tcp_accept>
 8008cac:	e01d      	b.n	8008cea <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d007      	beq.n	8008cc4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6938      	ldr	r0, [r7, #16]
 8008cb8:	f004 fa54 	bl	800d164 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8008cbc:	2100      	movs	r1, #0
 8008cbe:	6938      	ldr	r0, [r7, #16]
 8008cc0:	f004 fab6 	bl	800d230 <tcp_accept>
    }
    if (shut_tx) {
 8008cc4:	7b7b      	ldrb	r3, [r7, #13]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8008cca:	2100      	movs	r1, #0
 8008ccc:	6938      	ldr	r0, [r7, #16]
 8008cce:	f004 fa6b 	bl	800d1a8 <tcp_sent>
    }
    if (shut_close) {
 8008cd2:	7dbb      	ldrb	r3, [r7, #22]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d008      	beq.n	8008cea <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2100      	movs	r1, #0
 8008cdc:	6938      	ldr	r0, [r7, #16]
 8008cde:	f004 fabf 	bl	800d260 <tcp_poll>
      tcp_err(tpcb, NULL);
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6938      	ldr	r0, [r7, #16]
 8008ce6:	f004 fa81 	bl	800d1ec <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8008cea:	7dbb      	ldrb	r3, [r7, #22]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d005      	beq.n	8008cfc <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8008cf0:	6938      	ldr	r0, [r7, #16]
 8008cf2:	f003 f851 	bl	800bd98 <tcp_close>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75fb      	strb	r3, [r7, #23]
 8008cfa:	e007      	b.n	8008d0c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8008cfc:	7bbb      	ldrb	r3, [r7, #14]
 8008cfe:	7b7a      	ldrb	r2, [r7, #13]
 8008d00:	4619      	mov	r1, r3
 8008d02:	6938      	ldr	r0, [r7, #16]
 8008d04:	f003 f874 	bl	800bdf0 <tcp_shutdown>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8008d0c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d102      	bne.n	8008d1a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8008d14:	2301      	movs	r3, #1
 8008d16:	757b      	strb	r3, [r7, #21]
 8008d18:	e016      	b.n	8008d48 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8008d1a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d10f      	bne.n	8008d44 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
 8008d28:	7a5b      	ldrb	r3, [r3, #9]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d10c      	bne.n	8008d48 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8008d2e:	2301      	movs	r3, #1
 8008d30:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8008d32:	7dbb      	ldrb	r3, [r7, #22]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d007      	beq.n	8008d48 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8008d38:	6938      	ldr	r0, [r7, #16]
 8008d3a:	f003 f973 	bl	800c024 <tcp_abort>
          err = ERR_OK;
 8008d3e:	2300      	movs	r3, #0
 8008d40:	75fb      	strb	r3, [r7, #23]
 8008d42:	e001      	b.n	8008d48 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8008d44:	2301      	movs	r3, #1
 8008d46:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8008d48:	7d7b      	ldrb	r3, [r7, #21]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d044      	beq.n	8008dd8 <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	330c      	adds	r3, #12
 8008d56:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6a1b      	ldr	r3, [r3, #32]
 8008d5c:	7dfa      	ldrb	r2, [r7, #23]
 8008d5e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8008d6c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d129      	bne.n	8008dc8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8008d74:	7dbb      	ldrb	r3, [r7, #22]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d005      	beq.n	8008d94 <lwip_netconn_do_close_internal+0x1f0>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	2104      	movs	r1, #4
 8008d90:	6878      	ldr	r0, [r7, #4]
 8008d92:	4798      	blx	r3
      }
      if (shut_rx) {
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d009      	beq.n	8008dae <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d005      	beq.n	8008dae <lwip_netconn_do_close_internal+0x20a>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008da6:	2200      	movs	r2, #0
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	4798      	blx	r3
      }
      if (shut_tx) {
 8008dae:	7b7b      	ldrb	r3, [r7, #13]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d009      	beq.n	8008dc8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d005      	beq.n	8008dc8 <lwip_netconn_do_close_internal+0x224>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2102      	movs	r1, #2
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d002      	beq.n	8008dd4 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8008dce:	68b8      	ldr	r0, [r7, #8]
 8008dd0:	f00d ff2a 	bl	8016c28 <sys_sem_signal>
    }
    return ERR_OK;
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e02e      	b.n	8008e36 <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 8008dd8:	7d7b      	ldrb	r3, [r7, #21]
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d11e      	bne.n	8008e1c <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	7d1b      	ldrb	r3, [r3, #20]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d106      	bne.n	8008df4 <lwip_netconn_do_close_internal+0x250>
 8008de6:	4b16      	ldr	r3, [pc, #88]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008de8:	f240 4241 	movw	r2, #1089	; 0x441
 8008dec:	491b      	ldr	r1, [pc, #108]	; (8008e5c <lwip_netconn_do_close_internal+0x2b8>)
 8008dee:	4816      	ldr	r0, [pc, #88]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008df0:	f00e f83e 	bl	8016e70 <iprintf>
    if (shut_tx) {
 8008df4:	7b7b      	ldrb	r3, [r7, #13]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 8008dfa:	4919      	ldr	r1, [pc, #100]	; (8008e60 <lwip_netconn_do_close_internal+0x2bc>)
 8008dfc:	6938      	ldr	r0, [r7, #16]
 8008dfe:	f004 f9d3 	bl	800d1a8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8008e02:	2201      	movs	r2, #1
 8008e04:	4917      	ldr	r1, [pc, #92]	; (8008e64 <lwip_netconn_do_close_internal+0x2c0>)
 8008e06:	6938      	ldr	r0, [r7, #16]
 8008e08:	f004 fa2a 	bl	800d260 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8008e0c:	4916      	ldr	r1, [pc, #88]	; (8008e68 <lwip_netconn_do_close_internal+0x2c4>)
 8008e0e:	6938      	ldr	r0, [r7, #16]
 8008e10:	f004 f9ec 	bl	800d1ec <tcp_err>
    tcp_arg(tpcb, conn);
 8008e14:	6879      	ldr	r1, [r7, #4]
 8008e16:	6938      	ldr	r0, [r7, #16]
 8008e18:	f004 f992 	bl	800d140 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8008e1c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d106      	bne.n	8008e32 <lwip_netconn_do_close_internal+0x28e>
 8008e24:	4b06      	ldr	r3, [pc, #24]	; (8008e40 <lwip_netconn_do_close_internal+0x29c>)
 8008e26:	f240 424d 	movw	r2, #1101	; 0x44d
 8008e2a:	4910      	ldr	r1, [pc, #64]	; (8008e6c <lwip_netconn_do_close_internal+0x2c8>)
 8008e2c:	4806      	ldr	r0, [pc, #24]	; (8008e48 <lwip_netconn_do_close_internal+0x2a4>)
 8008e2e:	f00e f81f 	bl	8016e70 <iprintf>
  return err;
 8008e32:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3718      	adds	r7, #24
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
 8008e3e:	bf00      	nop
 8008e40:	08018748 	.word	0x08018748
 8008e44:	08018a1c 	.word	0x08018a1c
 8008e48:	0801878c 	.word	0x0801878c
 8008e4c:	08018a2c 	.word	0x08018a2c
 8008e50:	08018a4c 	.word	0x08018a4c
 8008e54:	08018a70 	.word	0x08018a70
 8008e58:	080188b0 	.word	0x080188b0
 8008e5c:	08018a84 	.word	0x08018a84
 8008e60:	0800841d 	.word	0x0800841d
 8008e64:	08008355 	.word	0x08008355
 8008e68:	080084c5 	.word	0x080084c5
 8008e6c:	08018aa8 	.word	0x08018aa8

08008e70 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	785b      	ldrb	r3, [r3, #1]
 8008e82:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008e84:	7afb      	ldrb	r3, [r7, #11]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d00d      	beq.n	8008ea6 <lwip_netconn_do_delconn+0x36>
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	781b      	ldrb	r3, [r3, #0]
 8008e90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008e94:	2b10      	cmp	r3, #16
 8008e96:	d006      	beq.n	8008ea6 <lwip_netconn_do_delconn+0x36>
 8008e98:	4b60      	ldr	r3, [pc, #384]	; (800901c <lwip_netconn_do_delconn+0x1ac>)
 8008e9a:	f240 425e 	movw	r2, #1118	; 0x45e
 8008e9e:	4960      	ldr	r1, [pc, #384]	; (8009020 <lwip_netconn_do_delconn+0x1b0>)
 8008ea0:	4860      	ldr	r0, [pc, #384]	; (8009024 <lwip_netconn_do_delconn+0x1b4>)
 8008ea2:	f00d ffe5 	bl	8016e70 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008ea6:	7afb      	ldrb	r3, [r7, #11]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d005      	beq.n	8008eb8 <lwip_netconn_do_delconn+0x48>
 8008eac:	7afb      	ldrb	r3, [r7, #11]
 8008eae:	2b02      	cmp	r3, #2
 8008eb0:	d002      	beq.n	8008eb8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8008eb2:	7afb      	ldrb	r3, [r7, #11]
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d109      	bne.n	8008ecc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8008eb8:	7afb      	ldrb	r3, [r7, #11]
 8008eba:	2b03      	cmp	r3, #3
 8008ebc:	d10a      	bne.n	8008ed4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	7f1b      	ldrb	r3, [r3, #28]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d103      	bne.n	8008ed4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	22fb      	movs	r2, #251	; 0xfb
 8008ed0:	711a      	strb	r2, [r3, #4]
 8008ed2:	e097      	b.n	8009004 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008ed4:	7afb      	ldrb	r3, [r7, #11]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d10d      	bne.n	8008ef6 <lwip_netconn_do_delconn+0x86>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	7f1b      	ldrb	r3, [r3, #28]
 8008ee0:	f003 0304 	and.w	r3, r3, #4
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d106      	bne.n	8008ef6 <lwip_netconn_do_delconn+0x86>
 8008ee8:	4b4c      	ldr	r3, [pc, #304]	; (800901c <lwip_netconn_do_delconn+0x1ac>)
 8008eea:	f240 427a 	movw	r2, #1146	; 0x47a
 8008eee:	494e      	ldr	r1, [pc, #312]	; (8009028 <lwip_netconn_do_delconn+0x1b8>)
 8008ef0:	484c      	ldr	r0, [pc, #304]	; (8009024 <lwip_netconn_do_delconn+0x1b4>)
 8008ef2:	f00d ffbd 	bl	8016e70 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2200      	movs	r2, #0
 8008efa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f7ff fdd1 	bl	8008aa8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	685b      	ldr	r3, [r3, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d05f      	beq.n	8008fd0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	781b      	ldrb	r3, [r3, #0]
 8008f16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008f1a:	2b10      	cmp	r3, #16
 8008f1c:	d00d      	beq.n	8008f3a <lwip_netconn_do_delconn+0xca>
 8008f1e:	2b20      	cmp	r3, #32
 8008f20:	d151      	bne.n	8008fc6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	685b      	ldr	r3, [r3, #4]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f009 fb4e 	bl	80125d4 <udp_remove>
          break;
 8008f38:	e046      	b.n	8008fc8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	6a1b      	ldr	r3, [r3, #32]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d006      	beq.n	8008f52 <lwip_netconn_do_delconn+0xe2>
 8008f44:	4b35      	ldr	r3, [pc, #212]	; (800901c <lwip_netconn_do_delconn+0x1ac>)
 8008f46:	f240 4294 	movw	r2, #1172	; 0x494
 8008f4a:	4938      	ldr	r1, [pc, #224]	; (800902c <lwip_netconn_do_delconn+0x1bc>)
 8008f4c:	4835      	ldr	r0, [pc, #212]	; (8009024 <lwip_netconn_do_delconn+0x1b4>)
 8008f4e:	f00d ff8f 	bl	8016e70 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	2204      	movs	r2, #4
 8008f58:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4618      	mov	r0, r3
 8008f70:	f7ff fe18 	bl	8008ba4 <lwip_netconn_do_close_internal>
 8008f74:	4603      	mov	r3, r0
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d04b      	beq.n	8009012 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	785b      	ldrb	r3, [r3, #1]
 8008f80:	2b04      	cmp	r3, #4
 8008f82:	d006      	beq.n	8008f92 <lwip_netconn_do_delconn+0x122>
 8008f84:	4b25      	ldr	r3, [pc, #148]	; (800901c <lwip_netconn_do_delconn+0x1ac>)
 8008f86:	f240 429a 	movw	r2, #1178	; 0x49a
 8008f8a:	4929      	ldr	r1, [pc, #164]	; (8009030 <lwip_netconn_do_delconn+0x1c0>)
 8008f8c:	4825      	ldr	r0, [pc, #148]	; (8009024 <lwip_netconn_do_delconn+0x1b4>)
 8008f8e:	f00d ff6f 	bl	8016e70 <iprintf>
            UNLOCK_TCPIP_CORE();
 8008f92:	4828      	ldr	r0, [pc, #160]	; (8009034 <lwip_netconn_do_delconn+0x1c4>)
 8008f94:	f00d feb9 	bl	8016d0a <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	2100      	movs	r1, #0
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f00d fe10 	bl	8016bc6 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8008fa6:	4823      	ldr	r0, [pc, #140]	; (8009034 <lwip_netconn_do_delconn+0x1c4>)
 8008fa8:	f00d fea0 	bl	8016cec <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	785b      	ldrb	r3, [r3, #1]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d02d      	beq.n	8009012 <lwip_netconn_do_delconn+0x1a2>
 8008fb6:	4b19      	ldr	r3, [pc, #100]	; (800901c <lwip_netconn_do_delconn+0x1ac>)
 8008fb8:	f240 429e 	movw	r2, #1182	; 0x49e
 8008fbc:	491c      	ldr	r1, [pc, #112]	; (8009030 <lwip_netconn_do_delconn+0x1c0>)
 8008fbe:	4819      	ldr	r0, [pc, #100]	; (8009024 <lwip_netconn_do_delconn+0x1b4>)
 8008fc0:	f00d ff56 	bl	8016e70 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8008fc4:	e025      	b.n	8009012 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8008fc6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	2200      	movs	r2, #0
 8008fce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d007      	beq.n	8008fea <lwip_netconn_do_delconn+0x17a>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	6810      	ldr	r0, [r2, #0]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <lwip_netconn_do_delconn+0x194>
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	6810      	ldr	r0, [r2, #0]
 8008ffe:	2200      	movs	r2, #0
 8009000:	2102      	movs	r1, #2
 8009002:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	330c      	adds	r3, #12
 800900a:	4618      	mov	r0, r3
 800900c:	f00d fe26 	bl	8016c5c <sys_sem_valid>
 8009010:	e000      	b.n	8009014 <lwip_netconn_do_delconn+0x1a4>
          return;
 8009012:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8009014:	3710      	adds	r7, #16
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}
 800901a:	bf00      	nop
 800901c:	08018748 	.word	0x08018748
 8009020:	08018ab8 	.word	0x08018ab8
 8009024:	0801878c 	.word	0x0801878c
 8009028:	08018acc 	.word	0x08018acc
 800902c:	08018aec 	.word	0x08018aec
 8009030:	08018b08 	.word	0x08018b08
 8009034:	2000b904 	.word	0x2000b904

08009038 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	685b      	ldr	r3, [r3, #4]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d025      	beq.n	800909a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	781b      	ldrb	r3, [r3, #0]
 8009054:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009058:	2b10      	cmp	r3, #16
 800905a:	d00e      	beq.n	800907a <lwip_netconn_do_bind+0x42>
 800905c:	2b20      	cmp	r3, #32
 800905e:	d119      	bne.n	8009094 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	6858      	ldr	r0, [r3, #4]
 8009066:	68bb      	ldr	r3, [r7, #8]
 8009068:	6899      	ldr	r1, [r3, #8]
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	899b      	ldrh	r3, [r3, #12]
 800906e:	461a      	mov	r2, r3
 8009070:	f009 f99a 	bl	80123a8 <udp_bind>
 8009074:	4603      	mov	r3, r0
 8009076:	73fb      	strb	r3, [r7, #15]
        break;
 8009078:	e011      	b.n	800909e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	6858      	ldr	r0, [r3, #4]
 8009080:	68bb      	ldr	r3, [r7, #8]
 8009082:	6899      	ldr	r1, [r3, #8]
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	899b      	ldrh	r3, [r3, #12]
 8009088:	461a      	mov	r2, r3
 800908a:	f002 ffd7 	bl	800c03c <tcp_bind>
 800908e:	4603      	mov	r3, r0
 8009090:	73fb      	strb	r3, [r7, #15]
        break;
 8009092:	e004      	b.n	800909e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8009094:	23fa      	movs	r3, #250	; 0xfa
 8009096:	73fb      	strb	r3, [r7, #15]
        break;
 8009098:	e001      	b.n	800909e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800909a:	23fa      	movs	r3, #250	; 0xfa
 800909c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	7bfa      	ldrb	r2, [r7, #15]
 80090a2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80090a4:	bf00      	nop
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b086      	sub	sp, #24
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d07f      	beq.n	80091c2 <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80090c2:	697b      	ldr	r3, [r7, #20]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090cc:	2b10      	cmp	r3, #16
 80090ce:	d175      	bne.n	80091bc <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	785b      	ldrb	r3, [r3, #1]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d165      	bne.n	80091a6 <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	685b      	ldr	r3, [r3, #4]
 80090e0:	7d1b      	ldrb	r3, [r3, #20]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d002      	beq.n	80090ec <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80090e6:	23fa      	movs	r3, #250	; 0xfa
 80090e8:	72fb      	strb	r3, [r7, #11]
 80090ea:	e06c      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80090ec:	23ff      	movs	r3, #255	; 0xff
 80090ee:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	f107 020b 	add.w	r2, r7, #11
 80090fa:	7cf9      	ldrb	r1, [r7, #19]
 80090fc:	4618      	mov	r0, r3
 80090fe:	f003 f855 	bl	800c1ac <tcp_listen_with_backlog_and_err>
 8009102:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d05d      	beq.n	80091c6 <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	3310      	adds	r3, #16
 8009110:	4618      	mov	r0, r3
 8009112:	f00d fd12 	bl	8016b3a <sys_mbox_valid>
 8009116:	4603      	mov	r3, r0
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00b      	beq.n	8009134 <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3310      	adds	r3, #16
 8009122:	4618      	mov	r0, r3
 8009124:	f00d fc82 	bl	8016a2c <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 8009128:	697b      	ldr	r3, [r7, #20]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	3310      	adds	r3, #16
 800912e:	4618      	mov	r0, r3
 8009130:	f00d fd14 	bl	8016b5c <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3314      	adds	r3, #20
 800913e:	4618      	mov	r0, r3
 8009140:	f00d fcfb 	bl	8016b3a <sys_mbox_valid>
 8009144:	4603      	mov	r3, r0
 8009146:	2b00      	cmp	r3, #0
 8009148:	d108      	bne.n	800915c <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800914a:	697b      	ldr	r3, [r7, #20]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	3314      	adds	r3, #20
 8009150:	2106      	movs	r1, #6
 8009152:	4618      	mov	r0, r3
 8009154:	f00d fc48 	bl	80169e8 <sys_mbox_new>
 8009158:	4603      	mov	r3, r0
 800915a:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 800915c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d118      	bne.n	8009196 <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	2202      	movs	r2, #2
 800916a:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 800916c:	697b      	ldr	r3, [r7, #20]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68fa      	ldr	r2, [r7, #12]
 8009172:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8009174:	697b      	ldr	r3, [r7, #20]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	685a      	ldr	r2, [r3, #4]
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4619      	mov	r1, r3
 8009180:	4610      	mov	r0, r2
 8009182:	f003 ffdd 	bl	800d140 <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8009186:	697b      	ldr	r3, [r7, #20]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	4912      	ldr	r1, [pc, #72]	; (80091d8 <lwip_netconn_do_listen+0x12c>)
 800918e:	4618      	mov	r0, r3
 8009190:	f004 f84e 	bl	800d230 <tcp_accept>
 8009194:	e017      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8009196:	68f8      	ldr	r0, [r7, #12]
 8009198:	f002 fdfe 	bl	800bd98 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2200      	movs	r2, #0
 80091a2:	605a      	str	r2, [r3, #4]
 80091a4:	e00f      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	785b      	ldrb	r3, [r3, #1]
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d102      	bne.n	80091b6 <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	72fb      	strb	r3, [r7, #11]
 80091b4:	e007      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 80091b6:	23f5      	movs	r3, #245	; 0xf5
 80091b8:	72fb      	strb	r3, [r7, #11]
 80091ba:	e004      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 80091bc:	23f0      	movs	r3, #240	; 0xf0
 80091be:	72fb      	strb	r3, [r7, #11]
 80091c0:	e001      	b.n	80091c6 <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 80091c2:	23f5      	movs	r3, #245	; 0xf5
 80091c4:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 80091c6:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80091ce:	bf00      	nop
 80091d0:	3718      	adds	r7, #24
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	080086c1 	.word	0x080086c1

080091dc <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b086      	sub	sp, #24
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2200      	movs	r2, #0
 80091ec:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685b      	ldr	r3, [r3, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d022      	beq.n	800923e <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009202:	2b10      	cmp	r3, #16
 8009204:	d11b      	bne.n	800923e <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800920c:	697b      	ldr	r3, [r7, #20]
 800920e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009212:	d202      	bcs.n	800921a <lwip_netconn_do_recv+0x3e>
 8009214:	697b      	ldr	r3, [r7, #20]
 8009216:	b29b      	uxth	r3, r3
 8009218:	e001      	b.n	800921e <lwip_netconn_do_recv+0x42>
 800921a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800921e:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8009220:	693b      	ldr	r3, [r7, #16]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	89fa      	ldrh	r2, [r7, #14]
 8009228:	4611      	mov	r1, r2
 800922a:	4618      	mov	r0, r3
 800922c:	f003 f8c2 	bl	800c3b4 <tcp_recved>
        remaining -= recved;
 8009230:	89fb      	ldrh	r3, [r7, #14]
 8009232:	697a      	ldr	r2, [r7, #20]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d1e6      	bne.n	800920c <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800923e:	bf00      	nop
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b088      	sub	sp, #32
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
 8009250:	460b      	mov	r3, r1
 8009252:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8009254:	2300      	movs	r3, #0
 8009256:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d106      	bne.n	800926c <lwip_netconn_do_writemore+0x24>
 800925e:	4b96      	ldr	r3, [pc, #600]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 8009260:	f240 6273 	movw	r2, #1651	; 0x673
 8009264:	4995      	ldr	r1, [pc, #596]	; (80094bc <lwip_netconn_do_writemore+0x274>)
 8009266:	4896      	ldr	r0, [pc, #600]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 8009268:	f00d fe02 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	785b      	ldrb	r3, [r3, #1]
 8009270:	2b01      	cmp	r3, #1
 8009272:	d006      	beq.n	8009282 <lwip_netconn_do_writemore+0x3a>
 8009274:	4b90      	ldr	r3, [pc, #576]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 8009276:	f240 6274 	movw	r2, #1652	; 0x674
 800927a:	4992      	ldr	r1, [pc, #584]	; (80094c4 <lwip_netconn_do_writemore+0x27c>)
 800927c:	4890      	ldr	r0, [pc, #576]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 800927e:	f00d fdf7 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	6a1b      	ldr	r3, [r3, #32]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d106      	bne.n	8009298 <lwip_netconn_do_writemore+0x50>
 800928a:	4b8b      	ldr	r3, [pc, #556]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 800928c:	f240 6275 	movw	r2, #1653	; 0x675
 8009290:	498d      	ldr	r1, [pc, #564]	; (80094c8 <lwip_netconn_do_writemore+0x280>)
 8009292:	488b      	ldr	r0, [pc, #556]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 8009294:	f00d fdec 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	685b      	ldr	r3, [r3, #4]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <lwip_netconn_do_writemore+0x66>
 80092a0:	4b85      	ldr	r3, [pc, #532]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 80092a2:	f240 6276 	movw	r2, #1654	; 0x676
 80092a6:	4989      	ldr	r1, [pc, #548]	; (80094cc <lwip_netconn_do_writemore+0x284>)
 80092a8:	4885      	ldr	r0, [pc, #532]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 80092aa:	f00d fde1 	bl	8016e70 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6a1b      	ldr	r3, [r3, #32]
 80092b2:	699a      	ldr	r2, [r3, #24]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6a1b      	ldr	r3, [r3, #32]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	429a      	cmp	r2, r3
 80092bc:	d306      	bcc.n	80092cc <lwip_netconn_do_writemore+0x84>
 80092be:	4b7e      	ldr	r3, [pc, #504]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 80092c0:	f240 6277 	movw	r2, #1655	; 0x677
 80092c4:	4982      	ldr	r1, [pc, #520]	; (80094d0 <lwip_netconn_do_writemore+0x288>)
 80092c6:	487e      	ldr	r0, [pc, #504]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 80092c8:	f00d fdd2 	bl	8016e70 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	899b      	ldrh	r3, [r3, #12]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <lwip_netconn_do_writemore+0x9c>
 80092d6:	4b78      	ldr	r3, [pc, #480]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 80092d8:	f240 6279 	movw	r2, #1657	; 0x679
 80092dc:	497d      	ldr	r1, [pc, #500]	; (80094d4 <lwip_netconn_do_writemore+0x28c>)
 80092de:	4878      	ldr	r0, [pc, #480]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 80092e0:	f00d fdc6 	bl	8016e70 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6a1b      	ldr	r3, [r3, #32]
 80092e8:	7f1b      	ldrb	r3, [r3, #28]
 80092ea:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	7f1b      	ldrb	r3, [r3, #28]
 80092f0:	f003 0302 	and.w	r3, r3, #2
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d104      	bne.n	8009302 <lwip_netconn_do_writemore+0xba>
 80092f8:	7ebb      	ldrb	r3, [r7, #26]
 80092fa:	f003 0304 	and.w	r3, r3, #4
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d001      	beq.n	8009306 <lwip_netconn_do_writemore+0xbe>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <lwip_netconn_do_writemore+0xc0>
 8009306:	2300      	movs	r3, #0
 8009308:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a1b      	ldr	r3, [r3, #32]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	681a      	ldr	r2, [r3, #0]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6a1b      	ldr	r3, [r3, #32]
 8009316:	691b      	ldr	r3, [r3, #16]
 8009318:	4413      	add	r3, r2
 800931a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	685a      	ldr	r2, [r3, #4]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	6a1b      	ldr	r3, [r3, #32]
 8009328:	691b      	ldr	r3, [r3, #16]
 800932a:	1ad3      	subs	r3, r2, r3
 800932c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009334:	d307      	bcc.n	8009346 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8009336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800933a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800933c:	7ebb      	ldrb	r3, [r7, #26]
 800933e:	f043 0302 	orr.w	r3, r3, #2
 8009342:	76bb      	strb	r3, [r7, #26]
 8009344:	e001      	b.n	800934a <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8009352:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8009354:	89fa      	ldrh	r2, [r7, #14]
 8009356:	8bbb      	ldrh	r3, [r7, #28]
 8009358:	429a      	cmp	r2, r3
 800935a:	d216      	bcs.n	800938a <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800935c:	89fb      	ldrh	r3, [r7, #14]
 800935e:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8009360:	7e3b      	ldrb	r3, [r7, #24]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d00d      	beq.n	8009382 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8009366:	8bbb      	ldrh	r3, [r7, #28]
 8009368:	2b00      	cmp	r3, #0
 800936a:	d10e      	bne.n	800938a <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6a1b      	ldr	r3, [r3, #32]
 8009370:	699b      	ldr	r3, [r3, #24]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d102      	bne.n	800937c <lwip_netconn_do_writemore+0x134>
 8009376:	f06f 0306 	mvn.w	r3, #6
 800937a:	e000      	b.n	800937e <lwip_netconn_do_writemore+0x136>
 800937c:	2300      	movs	r3, #0
 800937e:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8009380:	e07d      	b.n	800947e <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8009382:	7ebb      	ldrb	r3, [r7, #26]
 8009384:	f043 0302 	orr.w	r3, r3, #2
 8009388:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	6a1b      	ldr	r3, [r3, #32]
 800938e:	691a      	ldr	r2, [r3, #16]
 8009390:	8bbb      	ldrh	r3, [r7, #28]
 8009392:	441a      	add	r2, r3
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	6a1b      	ldr	r3, [r3, #32]
 8009398:	689b      	ldr	r3, [r3, #8]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	429a      	cmp	r2, r3
 800939e:	d906      	bls.n	80093ae <lwip_netconn_do_writemore+0x166>
 80093a0:	4b45      	ldr	r3, [pc, #276]	; (80094b8 <lwip_netconn_do_writemore+0x270>)
 80093a2:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80093a6:	494c      	ldr	r1, [pc, #304]	; (80094d8 <lwip_netconn_do_writemore+0x290>)
 80093a8:	4845      	ldr	r0, [pc, #276]	; (80094c0 <lwip_netconn_do_writemore+0x278>)
 80093aa:	f00d fd61 	bl	8016e70 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80093ae:	8bbb      	ldrh	r3, [r7, #28]
 80093b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d103      	bne.n	80093c0 <lwip_netconn_do_writemore+0x178>
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093be:	d209      	bcs.n	80093d4 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 80093c4:	8bba      	ldrh	r2, [r7, #28]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d10b      	bne.n	80093e2 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	6a1b      	ldr	r3, [r3, #32]
 80093ce:	899b      	ldrh	r3, [r3, #12]
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	d906      	bls.n	80093e2 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 80093d4:	2301      	movs	r3, #1
 80093d6:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 80093d8:	7ebb      	ldrb	r3, [r7, #26]
 80093da:	f043 0302 	orr.w	r3, r3, #2
 80093de:	76bb      	strb	r3, [r7, #26]
 80093e0:	e001      	b.n	80093e6 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6858      	ldr	r0, [r3, #4]
 80093ea:	7ebb      	ldrb	r3, [r7, #26]
 80093ec:	8bba      	ldrh	r2, [r7, #28]
 80093ee:	6979      	ldr	r1, [r7, #20]
 80093f0:	f006 fde4 	bl	800ffbc <tcp_write>
 80093f4:	4603      	mov	r3, r0
 80093f6:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80093f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d12c      	bne.n	800945a <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6a1b      	ldr	r3, [r3, #32]
 8009404:	6999      	ldr	r1, [r3, #24]
 8009406:	8bba      	ldrh	r2, [r7, #28]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6a1b      	ldr	r3, [r3, #32]
 800940c:	440a      	add	r2, r1
 800940e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6a1b      	ldr	r3, [r3, #32]
 8009414:	6919      	ldr	r1, [r3, #16]
 8009416:	8bba      	ldrh	r2, [r7, #28]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	6a1b      	ldr	r3, [r3, #32]
 800941c:	440a      	add	r2, r1
 800941e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6a1b      	ldr	r3, [r3, #32]
 8009424:	691a      	ldr	r2, [r3, #16]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	6a1b      	ldr	r3, [r3, #32]
 800942a:	689b      	ldr	r3, [r3, #8]
 800942c:	685b      	ldr	r3, [r3, #4]
 800942e:	429a      	cmp	r2, r3
 8009430:	d113      	bne.n	800945a <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	6a1b      	ldr	r3, [r3, #32]
 8009436:	899a      	ldrh	r2, [r3, #12]
 8009438:	3a01      	subs	r2, #1
 800943a:	b292      	uxth	r2, r2
 800943c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	899b      	ldrh	r3, [r3, #12]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d008      	beq.n	800945a <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6a1b      	ldr	r3, [r3, #32]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	3208      	adds	r2, #8
 8009450:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	2200      	movs	r2, #0
 8009458:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800945a:	7e7b      	ldrb	r3, [r7, #25]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d004      	beq.n	800946a <lwip_netconn_do_writemore+0x222>
 8009460:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009464:	2b00      	cmp	r3, #0
 8009466:	f43f af50 	beq.w	800930a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800946a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d004      	beq.n	800947c <lwip_netconn_do_writemore+0x234>
 8009472:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800947a:	d146      	bne.n	800950a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800947c:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800947e:	7e3b      	ldrb	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d02b      	beq.n	80094dc <lwip_netconn_do_writemore+0x294>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6a1b      	ldr	r3, [r3, #32]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6a1b      	ldr	r3, [r3, #32]
 800948e:	695b      	ldr	r3, [r3, #20]
 8009490:	429a      	cmp	r2, r3
 8009492:	d223      	bcs.n	80094dc <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009498:	2b00      	cmp	r3, #0
 800949a:	d005      	beq.n	80094a8 <lwip_netconn_do_writemore+0x260>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a0:	2200      	movs	r2, #0
 80094a2:	2103      	movs	r1, #3
 80094a4:	6878      	ldr	r0, [r7, #4]
 80094a6:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	7f1b      	ldrb	r3, [r3, #28]
 80094ac:	f043 0310 	orr.w	r3, r3, #16
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	771a      	strb	r2, [r3, #28]
 80094b6:	e028      	b.n	800950a <lwip_netconn_do_writemore+0x2c2>
 80094b8:	08018748 	.word	0x08018748
 80094bc:	080188a0 	.word	0x080188a0
 80094c0:	0801878c 	.word	0x0801878c
 80094c4:	08018ba8 	.word	0x08018ba8
 80094c8:	080188b0 	.word	0x080188b0
 80094cc:	08018bc8 	.word	0x08018bc8
 80094d0:	08018be0 	.word	0x08018be0
 80094d4:	08018c20 	.word	0x08018c20
 80094d8:	08018c48 	.word	0x08018c48
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80094e4:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80094e8:	d305      	bcc.n	80094f6 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	685b      	ldr	r3, [r3, #4]
 80094ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80094f2:	2b04      	cmp	r3, #4
 80094f4:	d909      	bls.n	800950a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d005      	beq.n	800950a <lwip_netconn_do_writemore+0x2c2>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009502:	2200      	movs	r2, #0
 8009504:	2103      	movs	r1, #3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800950a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d11d      	bne.n	800954e <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	699a      	ldr	r2, [r3, #24]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	695b      	ldr	r3, [r3, #20]
 800951e:	429a      	cmp	r2, r3
 8009520:	d002      	beq.n	8009528 <lwip_netconn_do_writemore+0x2e0>
 8009522:	7e3b      	ldrb	r3, [r7, #24]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d001      	beq.n	800952c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8009528:	2301      	movs	r3, #1
 800952a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	4618      	mov	r0, r3
 8009532:	f007 fb2d 	bl	8010b90 <tcp_output>
 8009536:	4603      	mov	r3, r0
 8009538:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800953a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800953e:	f113 0f04 	cmn.w	r3, #4
 8009542:	d12c      	bne.n	800959e <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009544:	7b3b      	ldrb	r3, [r7, #12]
 8009546:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009548:	2301      	movs	r3, #1
 800954a:	76fb      	strb	r3, [r7, #27]
 800954c:	e027      	b.n	800959e <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800954e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009552:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009556:	d120      	bne.n	800959a <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	685b      	ldr	r3, [r3, #4]
 800955c:	4618      	mov	r0, r3
 800955e:	f007 fb17 	bl	8010b90 <tcp_output>
 8009562:	4603      	mov	r3, r0
 8009564:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8009566:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800956a:	f113 0f04 	cmn.w	r3, #4
 800956e:	d104      	bne.n	800957a <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8009570:	7b7b      	ldrb	r3, [r7, #13]
 8009572:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009574:	2301      	movs	r3, #1
 8009576:	76fb      	strb	r3, [r7, #27]
 8009578:	e011      	b.n	800959e <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800957a:	7e3b      	ldrb	r3, [r7, #24]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d00e      	beq.n	800959e <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d102      	bne.n	8009590 <lwip_netconn_do_writemore+0x348>
 800958a:	f06f 0306 	mvn.w	r3, #6
 800958e:	e000      	b.n	8009592 <lwip_netconn_do_writemore+0x34a>
 8009590:	2300      	movs	r3, #0
 8009592:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8009594:	2301      	movs	r3, #1
 8009596:	76fb      	strb	r3, [r7, #27]
 8009598:	e001      	b.n	800959e <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800959a:	2301      	movs	r3, #1
 800959c:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800959e:	7efb      	ldrb	r3, [r7, #27]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d015      	beq.n	80095d0 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a1b      	ldr	r3, [r3, #32]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	330c      	adds	r3, #12
 80095ac:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a1b      	ldr	r3, [r3, #32]
 80095b2:	7ffa      	ldrb	r2, [r7, #31]
 80095b4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2200      	movs	r2, #0
 80095ba:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2200      	movs	r2, #0
 80095c0:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80095c2:	78fb      	ldrb	r3, [r7, #3]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d006      	beq.n	80095d6 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 80095c8:	68b8      	ldr	r0, [r7, #8]
 80095ca:	f00d fb2d 	bl	8016c28 <sys_sem_signal>
 80095ce:	e002      	b.n	80095d6 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 80095d0:	f04f 33ff 	mov.w	r3, #4294967295
 80095d4:	e000      	b.n	80095d8 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3720      	adds	r7, #32
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 80095ec:	68bb      	ldr	r3, [r7, #8]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	4618      	mov	r0, r3
 80095f2:	f7fe fd20 	bl	8008036 <netconn_err>
 80095f6:	4603      	mov	r3, r0
 80095f8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80095fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d166      	bne.n	80096d0 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	781b      	ldrb	r3, [r3, #0]
 8009608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800960c:	2b10      	cmp	r3, #16
 800960e:	d15d      	bne.n	80096cc <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	785b      	ldrb	r3, [r3, #1]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d002      	beq.n	8009620 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800961a:	23fb      	movs	r3, #251	; 0xfb
 800961c:	73fb      	strb	r3, [r7, #15]
 800961e:	e057      	b.n	80096d0 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8009620:	68bb      	ldr	r3, [r7, #8]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	2b00      	cmp	r3, #0
 8009628:	d04d      	beq.n	80096c6 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	2201      	movs	r2, #1
 8009630:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	6a1b      	ldr	r3, [r3, #32]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d006      	beq.n	800964a <lwip_netconn_do_write+0x6a>
 800963c:	4b28      	ldr	r3, [pc, #160]	; (80096e0 <lwip_netconn_do_write+0x100>)
 800963e:	f240 7223 	movw	r2, #1827	; 0x723
 8009642:	4928      	ldr	r1, [pc, #160]	; (80096e4 <lwip_netconn_do_write+0x104>)
 8009644:	4828      	ldr	r0, [pc, #160]	; (80096e8 <lwip_netconn_do_write+0x108>)
 8009646:	f00d fc13 	bl	8016e70 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d106      	bne.n	8009660 <lwip_netconn_do_write+0x80>
 8009652:	4b23      	ldr	r3, [pc, #140]	; (80096e0 <lwip_netconn_do_write+0x100>)
 8009654:	f240 7224 	movw	r2, #1828	; 0x724
 8009658:	4924      	ldr	r1, [pc, #144]	; (80096ec <lwip_netconn_do_write+0x10c>)
 800965a:	4823      	ldr	r0, [pc, #140]	; (80096e8 <lwip_netconn_do_write+0x108>)
 800965c:	f00d fc08 	bl	8016e70 <iprintf>
        msg->conn->current_msg = msg;
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2100      	movs	r1, #0
 800966e:	4618      	mov	r0, r3
 8009670:	f7ff fdea 	bl	8009248 <lwip_netconn_do_writemore>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d02e      	beq.n	80096d8 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	785b      	ldrb	r3, [r3, #1]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d006      	beq.n	8009692 <lwip_netconn_do_write+0xb2>
 8009684:	4b16      	ldr	r3, [pc, #88]	; (80096e0 <lwip_netconn_do_write+0x100>)
 8009686:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800968a:	4919      	ldr	r1, [pc, #100]	; (80096f0 <lwip_netconn_do_write+0x110>)
 800968c:	4816      	ldr	r0, [pc, #88]	; (80096e8 <lwip_netconn_do_write+0x108>)
 800968e:	f00d fbef 	bl	8016e70 <iprintf>
          UNLOCK_TCPIP_CORE();
 8009692:	4818      	ldr	r0, [pc, #96]	; (80096f4 <lwip_netconn_do_write+0x114>)
 8009694:	f00d fb39 	bl	8016d0a <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	330c      	adds	r3, #12
 800969e:	2100      	movs	r1, #0
 80096a0:	4618      	mov	r0, r3
 80096a2:	f00d fa90 	bl	8016bc6 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 80096a6:	4813      	ldr	r0, [pc, #76]	; (80096f4 <lwip_netconn_do_write+0x114>)
 80096a8:	f00d fb20 	bl	8016cec <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 80096ac:	68bb      	ldr	r3, [r7, #8]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	d110      	bne.n	80096d8 <lwip_netconn_do_write+0xf8>
 80096b6:	4b0a      	ldr	r3, [pc, #40]	; (80096e0 <lwip_netconn_do_write+0x100>)
 80096b8:	f240 722c 	movw	r2, #1836	; 0x72c
 80096bc:	490c      	ldr	r1, [pc, #48]	; (80096f0 <lwip_netconn_do_write+0x110>)
 80096be:	480a      	ldr	r0, [pc, #40]	; (80096e8 <lwip_netconn_do_write+0x108>)
 80096c0:	f00d fbd6 	bl	8016e70 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 80096c4:	e008      	b.n	80096d8 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 80096c6:	23f5      	movs	r3, #245	; 0xf5
 80096c8:	73fb      	strb	r3, [r7, #15]
 80096ca:	e001      	b.n	80096d0 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 80096cc:	23fa      	movs	r3, #250	; 0xfa
 80096ce:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	7bfa      	ldrb	r2, [r7, #15]
 80096d4:	711a      	strb	r2, [r3, #4]
 80096d6:	e000      	b.n	80096da <lwip_netconn_do_write+0xfa>
        return;
 80096d8:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 80096da:	3710      	adds	r7, #16
 80096dc:	46bd      	mov	sp, r7
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	08018748 	.word	0x08018748
 80096e4:	08018aec 	.word	0x08018aec
 80096e8:	0801878c 	.word	0x0801878c
 80096ec:	08018c74 	.word	0x08018c74
 80096f0:	08018b08 	.word	0x08018b08
 80096f4:	2000b904 	.word	0x2000b904

080096f8 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	785b      	ldrb	r3, [r3, #1]
 800970a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	685b      	ldr	r3, [r3, #4]
 8009712:	2b00      	cmp	r3, #0
 8009714:	d069      	beq.n	80097ea <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	781b      	ldrb	r3, [r3, #0]
 800971c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8009720:	2b10      	cmp	r3, #16
 8009722:	d162      	bne.n	80097ea <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8009728:	2b03      	cmp	r3, #3
 800972a:	d002      	beq.n	8009732 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800972c:	7afb      	ldrb	r3, [r7, #11]
 800972e:	2b02      	cmp	r3, #2
 8009730:	d05b      	beq.n	80097ea <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	2b03      	cmp	r3, #3
 8009736:	d103      	bne.n	8009740 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	22f5      	movs	r2, #245	; 0xf5
 800973c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800973e:	e059      	b.n	80097f4 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8009740:	7afb      	ldrb	r3, [r7, #11]
 8009742:	2b01      	cmp	r3, #1
 8009744:	d103      	bne.n	800974e <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	22fb      	movs	r2, #251	; 0xfb
 800974a:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800974c:	e052      	b.n	80097f4 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	7a1b      	ldrb	r3, [r3, #8]
 8009752:	f003 0301 	and.w	r3, r3, #1
 8009756:	2b00      	cmp	r3, #0
 8009758:	d004      	beq.n	8009764 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4618      	mov	r0, r3
 8009760:	f7ff f9a2 	bl	8008aa8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	6a1b      	ldr	r3, [r3, #32]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d006      	beq.n	800977c <lwip_netconn_do_close+0x84>
 800976e:	4b23      	ldr	r3, [pc, #140]	; (80097fc <lwip_netconn_do_close+0x104>)
 8009770:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8009774:	4922      	ldr	r1, [pc, #136]	; (8009800 <lwip_netconn_do_close+0x108>)
 8009776:	4823      	ldr	r0, [pc, #140]	; (8009804 <lwip_netconn_do_close+0x10c>)
 8009778:	f00d fb7a 	bl	8016e70 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2204      	movs	r2, #4
 8009782:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	68fa      	ldr	r2, [r7, #12]
 800978a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	2100      	movs	r1, #0
 8009792:	4618      	mov	r0, r3
 8009794:	f7ff fa06 	bl	8008ba4 <lwip_netconn_do_close_internal>
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d029      	beq.n	80097f2 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	785b      	ldrb	r3, [r3, #1]
 80097a4:	2b04      	cmp	r3, #4
 80097a6:	d006      	beq.n	80097b6 <lwip_netconn_do_close+0xbe>
 80097a8:	4b14      	ldr	r3, [pc, #80]	; (80097fc <lwip_netconn_do_close+0x104>)
 80097aa:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80097ae:	4916      	ldr	r1, [pc, #88]	; (8009808 <lwip_netconn_do_close+0x110>)
 80097b0:	4814      	ldr	r0, [pc, #80]	; (8009804 <lwip_netconn_do_close+0x10c>)
 80097b2:	f00d fb5d 	bl	8016e70 <iprintf>
        UNLOCK_TCPIP_CORE();
 80097b6:	4815      	ldr	r0, [pc, #84]	; (800980c <lwip_netconn_do_close+0x114>)
 80097b8:	f00d faa7 	bl	8016d0a <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	330c      	adds	r3, #12
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f00d f9fe 	bl	8016bc6 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80097ca:	4810      	ldr	r0, [pc, #64]	; (800980c <lwip_netconn_do_close+0x114>)
 80097cc:	f00d fa8e 	bl	8016cec <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	785b      	ldrb	r3, [r3, #1]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00b      	beq.n	80097f2 <lwip_netconn_do_close+0xfa>
 80097da:	4b08      	ldr	r3, [pc, #32]	; (80097fc <lwip_netconn_do_close+0x104>)
 80097dc:	f240 72c6 	movw	r2, #1990	; 0x7c6
 80097e0:	4909      	ldr	r1, [pc, #36]	; (8009808 <lwip_netconn_do_close+0x110>)
 80097e2:	4808      	ldr	r0, [pc, #32]	; (8009804 <lwip_netconn_do_close+0x10c>)
 80097e4:	f00d fb44 	bl	8016e70 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 80097e8:	e003      	b.n	80097f2 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	22f5      	movs	r2, #245	; 0xf5
 80097ee:	711a      	strb	r2, [r3, #4]
 80097f0:	e000      	b.n	80097f4 <lwip_netconn_do_close+0xfc>
      return;
 80097f2:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	08018748 	.word	0x08018748
 8009800:	08018aec 	.word	0x08018aec
 8009804:	0801878c 	.word	0x0801878c
 8009808:	08018b08 	.word	0x08018b08
 800980c:	2000b904 	.word	0x2000b904

08009810 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d013      	beq.n	8009846 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00b      	beq.n	800983e <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4618      	mov	r0, r3
 800982c:	f001 fdfa 	bl	800b424 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2200      	movs	r2, #0
 8009834:	605a      	str	r2, [r3, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	685a      	ldr	r2, [r3, #4]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800983e:	6879      	ldr	r1, [r7, #4]
 8009840:	2006      	movs	r0, #6
 8009842:	f000 ff3f 	bl	800a6c4 <memp_free>
  }
}
 8009846:	bf00      	nop
 8009848:	3708      	adds	r7, #8
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
	...

08009850 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d108      	bne.n	8009874 <netbuf_data+0x24>
 8009862:	4b1b      	ldr	r3, [pc, #108]	; (80098d0 <netbuf_data+0x80>)
 8009864:	22c6      	movs	r2, #198	; 0xc6
 8009866:	491b      	ldr	r1, [pc, #108]	; (80098d4 <netbuf_data+0x84>)
 8009868:	481b      	ldr	r0, [pc, #108]	; (80098d8 <netbuf_data+0x88>)
 800986a:	f00d fb01 	bl	8016e70 <iprintf>
 800986e:	f06f 030f 	mvn.w	r3, #15
 8009872:	e029      	b.n	80098c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d108      	bne.n	800988c <netbuf_data+0x3c>
 800987a:	4b15      	ldr	r3, [pc, #84]	; (80098d0 <netbuf_data+0x80>)
 800987c:	22c7      	movs	r2, #199	; 0xc7
 800987e:	4917      	ldr	r1, [pc, #92]	; (80098dc <netbuf_data+0x8c>)
 8009880:	4815      	ldr	r0, [pc, #84]	; (80098d8 <netbuf_data+0x88>)
 8009882:	f00d faf5 	bl	8016e70 <iprintf>
 8009886:	f06f 030f 	mvn.w	r3, #15
 800988a:	e01d      	b.n	80098c8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d108      	bne.n	80098a4 <netbuf_data+0x54>
 8009892:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <netbuf_data+0x80>)
 8009894:	22c8      	movs	r2, #200	; 0xc8
 8009896:	4912      	ldr	r1, [pc, #72]	; (80098e0 <netbuf_data+0x90>)
 8009898:	480f      	ldr	r0, [pc, #60]	; (80098d8 <netbuf_data+0x88>)
 800989a:	f00d fae9 	bl	8016e70 <iprintf>
 800989e:	f06f 030f 	mvn.w	r3, #15
 80098a2:	e011      	b.n	80098c8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d102      	bne.n	80098b2 <netbuf_data+0x62>
    return ERR_BUF;
 80098ac:	f06f 0301 	mvn.w	r3, #1
 80098b0:	e00a      	b.n	80098c8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	685a      	ldr	r2, [r3, #4]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	895a      	ldrh	r2, [r3, #10]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 80098c6:	2300      	movs	r3, #0
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3710      	adds	r7, #16
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}
 80098d0:	08018ca0 	.word	0x08018ca0
 80098d4:	08018da8 	.word	0x08018da8
 80098d8:	08018cf0 	.word	0x08018cf0
 80098dc:	08018dc4 	.word	0x08018dc4
 80098e0:	08018de4 	.word	0x08018de4

080098e4 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	b082      	sub	sp, #8
 80098e8:	af00      	add	r7, sp, #0
 80098ea:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d108      	bne.n	8009904 <netbuf_next+0x20>
 80098f2:	4b11      	ldr	r3, [pc, #68]	; (8009938 <netbuf_next+0x54>)
 80098f4:	22e0      	movs	r2, #224	; 0xe0
 80098f6:	4911      	ldr	r1, [pc, #68]	; (800993c <netbuf_next+0x58>)
 80098f8:	4811      	ldr	r0, [pc, #68]	; (8009940 <netbuf_next+0x5c>)
 80098fa:	f00d fab9 	bl	8016e70 <iprintf>
 80098fe:	f04f 33ff 	mov.w	r3, #4294967295
 8009902:	e014      	b.n	800992e <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	685b      	ldr	r3, [r3, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d102      	bne.n	8009914 <netbuf_next+0x30>
    return -1;
 800990e:	f04f 33ff 	mov.w	r3, #4294967295
 8009912:	e00c      	b.n	800992e <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	685b      	ldr	r3, [r3, #4]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d101      	bne.n	800992c <netbuf_next+0x48>
    return 1;
 8009928:	2301      	movs	r3, #1
 800992a:	e000      	b.n	800992e <netbuf_next+0x4a>
  }
  return 0;
 800992c:	2300      	movs	r3, #0
}
 800992e:	4618      	mov	r0, r3
 8009930:	3708      	adds	r7, #8
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}
 8009936:	bf00      	nop
 8009938:	08018ca0 	.word	0x08018ca0
 800993c:	08018e00 	.word	0x08018e00
 8009940:	08018cf0 	.word	0x08018cf0

08009944 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b084      	sub	sp, #16
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
 800994c:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800994e:	f008 f9d7 	bl	8011d00 <sys_timeouts_sleeptime>
 8009952:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800995a:	d10b      	bne.n	8009974 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800995c:	4813      	ldr	r0, [pc, #76]	; (80099ac <tcpip_timeouts_mbox_fetch+0x68>)
 800995e:	f00d f9d4 	bl	8016d0a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8009962:	2200      	movs	r2, #0
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f00d f88c 	bl	8016a84 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800996c:	480f      	ldr	r0, [pc, #60]	; (80099ac <tcpip_timeouts_mbox_fetch+0x68>)
 800996e:	f00d f9bd 	bl	8016cec <sys_mutex_lock>
    return;
 8009972:	e018      	b.n	80099a6 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800997a:	f008 f987 	bl	8011c8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800997e:	e7e6      	b.n	800994e <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8009980:	480a      	ldr	r0, [pc, #40]	; (80099ac <tcpip_timeouts_mbox_fetch+0x68>)
 8009982:	f00d f9c2 	bl	8016d0a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8009986:	68fa      	ldr	r2, [r7, #12]
 8009988:	6839      	ldr	r1, [r7, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f00d f87a 	bl	8016a84 <sys_arch_mbox_fetch>
 8009990:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8009992:	4806      	ldr	r0, [pc, #24]	; (80099ac <tcpip_timeouts_mbox_fetch+0x68>)
 8009994:	f00d f9aa 	bl	8016cec <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800999e:	d102      	bne.n	80099a6 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80099a0:	f008 f974 	bl	8011c8c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80099a4:	e7d3      	b.n	800994e <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80099a6:	3710      	adds	r7, #16
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000b904 	.word	0x2000b904

080099b0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80099b8:	4810      	ldr	r0, [pc, #64]	; (80099fc <tcpip_thread+0x4c>)
 80099ba:	f00d f997 	bl	8016cec <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80099be:	4b10      	ldr	r3, [pc, #64]	; (8009a00 <tcpip_thread+0x50>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d005      	beq.n	80099d2 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80099c6:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <tcpip_thread+0x50>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a0e      	ldr	r2, [pc, #56]	; (8009a04 <tcpip_thread+0x54>)
 80099cc:	6812      	ldr	r2, [r2, #0]
 80099ce:	4610      	mov	r0, r2
 80099d0:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80099d2:	f107 030c 	add.w	r3, r7, #12
 80099d6:	4619      	mov	r1, r3
 80099d8:	480b      	ldr	r0, [pc, #44]	; (8009a08 <tcpip_thread+0x58>)
 80099da:	f7ff ffb3 	bl	8009944 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d106      	bne.n	80099f2 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80099e4:	4b09      	ldr	r3, [pc, #36]	; (8009a0c <tcpip_thread+0x5c>)
 80099e6:	2291      	movs	r2, #145	; 0x91
 80099e8:	4909      	ldr	r1, [pc, #36]	; (8009a10 <tcpip_thread+0x60>)
 80099ea:	480a      	ldr	r0, [pc, #40]	; (8009a14 <tcpip_thread+0x64>)
 80099ec:	f00d fa40 	bl	8016e70 <iprintf>
      continue;
 80099f0:	e003      	b.n	80099fa <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f000 f80f 	bl	8009a18 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80099fa:	e7ea      	b.n	80099d2 <tcpip_thread+0x22>
 80099fc:	2000b904 	.word	0x2000b904
 8009a00:	20008558 	.word	0x20008558
 8009a04:	2000855c 	.word	0x2000855c
 8009a08:	20008560 	.word	0x20008560
 8009a0c:	08018e38 	.word	0x08018e38
 8009a10:	08018e68 	.word	0x08018e68
 8009a14:	08018e88 	.word	0x08018e88

08009a18 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b082      	sub	sp, #8
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	781b      	ldrb	r3, [r3, #0]
 8009a24:	2b02      	cmp	r3, #2
 8009a26:	d026      	beq.n	8009a76 <tcpip_thread_handle_msg+0x5e>
 8009a28:	2b02      	cmp	r3, #2
 8009a2a:	dc2b      	bgt.n	8009a84 <tcpip_thread_handle_msg+0x6c>
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d002      	beq.n	8009a36 <tcpip_thread_handle_msg+0x1e>
 8009a30:	2b01      	cmp	r3, #1
 8009a32:	d015      	beq.n	8009a60 <tcpip_thread_handle_msg+0x48>
 8009a34:	e026      	b.n	8009a84 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	68db      	ldr	r3, [r3, #12]
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	6850      	ldr	r0, [r2, #4]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	6892      	ldr	r2, [r2, #8]
 8009a42:	4611      	mov	r1, r2
 8009a44:	4798      	blx	r3
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d004      	beq.n	8009a56 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	4618      	mov	r0, r3
 8009a52:	f001 fce7 	bl	800b424 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009a56:	6879      	ldr	r1, [r7, #4]
 8009a58:	2009      	movs	r0, #9
 8009a5a:	f000 fe33 	bl	800a6c4 <memp_free>
      break;
 8009a5e:	e018      	b.n	8009a92 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	687a      	ldr	r2, [r7, #4]
 8009a66:	6892      	ldr	r2, [r2, #8]
 8009a68:	4610      	mov	r0, r2
 8009a6a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8009a6c:	6879      	ldr	r1, [r7, #4]
 8009a6e:	2008      	movs	r0, #8
 8009a70:	f000 fe28 	bl	800a6c4 <memp_free>
      break;
 8009a74:	e00d      	b.n	8009a92 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	6892      	ldr	r2, [r2, #8]
 8009a7e:	4610      	mov	r0, r2
 8009a80:	4798      	blx	r3
      break;
 8009a82:	e006      	b.n	8009a92 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <tcpip_thread_handle_msg+0x84>)
 8009a86:	22cf      	movs	r2, #207	; 0xcf
 8009a88:	4905      	ldr	r1, [pc, #20]	; (8009aa0 <tcpip_thread_handle_msg+0x88>)
 8009a8a:	4806      	ldr	r0, [pc, #24]	; (8009aa4 <tcpip_thread_handle_msg+0x8c>)
 8009a8c:	f00d f9f0 	bl	8016e70 <iprintf>
      break;
 8009a90:	bf00      	nop
  }
}
 8009a92:	bf00      	nop
 8009a94:	3708      	adds	r7, #8
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	08018e38 	.word	0x08018e38
 8009aa0:	08018e68 	.word	0x08018e68
 8009aa4:	08018e88 	.word	0x08018e88

08009aa8 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009ab4:	481a      	ldr	r0, [pc, #104]	; (8009b20 <tcpip_inpkt+0x78>)
 8009ab6:	f00d f840 	bl	8016b3a <sys_mbox_valid>
 8009aba:	4603      	mov	r3, r0
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d105      	bne.n	8009acc <tcpip_inpkt+0x24>
 8009ac0:	4b18      	ldr	r3, [pc, #96]	; (8009b24 <tcpip_inpkt+0x7c>)
 8009ac2:	22fc      	movs	r2, #252	; 0xfc
 8009ac4:	4918      	ldr	r1, [pc, #96]	; (8009b28 <tcpip_inpkt+0x80>)
 8009ac6:	4819      	ldr	r0, [pc, #100]	; (8009b2c <tcpip_inpkt+0x84>)
 8009ac8:	f00d f9d2 	bl	8016e70 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8009acc:	2009      	movs	r0, #9
 8009ace:	f000 fda7 	bl	800a620 <memp_malloc>
 8009ad2:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8009ad4:	697b      	ldr	r3, [r7, #20]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d102      	bne.n	8009ae0 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8009ada:	f04f 33ff 	mov.w	r3, #4294967295
 8009ade:	e01a      	b.n	8009b16 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	68fa      	ldr	r2, [r7, #12]
 8009aea:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	68ba      	ldr	r2, [r7, #8]
 8009af0:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	687a      	ldr	r2, [r7, #4]
 8009af6:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009af8:	6979      	ldr	r1, [r7, #20]
 8009afa:	4809      	ldr	r0, [pc, #36]	; (8009b20 <tcpip_inpkt+0x78>)
 8009afc:	f00c ffa8 	bl	8016a50 <sys_mbox_trypost>
 8009b00:	4603      	mov	r3, r0
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d006      	beq.n	8009b14 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	2009      	movs	r0, #9
 8009b0a:	f000 fddb 	bl	800a6c4 <memp_free>
    return ERR_MEM;
 8009b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b12:	e000      	b.n	8009b16 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8009b14:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3718      	adds	r7, #24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	20008560 	.word	0x20008560
 8009b24:	08018e38 	.word	0x08018e38
 8009b28:	08018eb0 	.word	0x08018eb0
 8009b2c:	08018e88 	.word	0x08018e88

08009b30 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
 8009b38:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009b40:	f003 0318 	and.w	r3, r3, #24
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d006      	beq.n	8009b56 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8009b48:	4a08      	ldr	r2, [pc, #32]	; (8009b6c <tcpip_input+0x3c>)
 8009b4a:	6839      	ldr	r1, [r7, #0]
 8009b4c:	6878      	ldr	r0, [r7, #4]
 8009b4e:	f7ff ffab 	bl	8009aa8 <tcpip_inpkt>
 8009b52:	4603      	mov	r3, r0
 8009b54:	e005      	b.n	8009b62 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8009b56:	4a06      	ldr	r2, [pc, #24]	; (8009b70 <tcpip_input+0x40>)
 8009b58:	6839      	ldr	r1, [r7, #0]
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff ffa4 	bl	8009aa8 <tcpip_inpkt>
 8009b60:	4603      	mov	r3, r0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3708      	adds	r7, #8
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0801683d 	.word	0x0801683d
 8009b70:	08015715 	.word	0x08015715

08009b74 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b084      	sub	sp, #16
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
 8009b7c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8009b7e:	4819      	ldr	r0, [pc, #100]	; (8009be4 <tcpip_try_callback+0x70>)
 8009b80:	f00c ffdb 	bl	8016b3a <sys_mbox_valid>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <tcpip_try_callback+0x24>
 8009b8a:	4b17      	ldr	r3, [pc, #92]	; (8009be8 <tcpip_try_callback+0x74>)
 8009b8c:	f240 125d 	movw	r2, #349	; 0x15d
 8009b90:	4916      	ldr	r1, [pc, #88]	; (8009bec <tcpip_try_callback+0x78>)
 8009b92:	4817      	ldr	r0, [pc, #92]	; (8009bf0 <tcpip_try_callback+0x7c>)
 8009b94:	f00d f96c 	bl	8016e70 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8009b98:	2008      	movs	r0, #8
 8009b9a:	f000 fd41 	bl	800a620 <memp_malloc>
 8009b9e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d102      	bne.n	8009bac <tcpip_try_callback+0x38>
    return ERR_MEM;
 8009ba6:	f04f 33ff 	mov.w	r3, #4294967295
 8009baa:	e017      	b.n	8009bdc <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8009bbe:	68f9      	ldr	r1, [r7, #12]
 8009bc0:	4808      	ldr	r0, [pc, #32]	; (8009be4 <tcpip_try_callback+0x70>)
 8009bc2:	f00c ff45 	bl	8016a50 <sys_mbox_trypost>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d006      	beq.n	8009bda <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8009bcc:	68f9      	ldr	r1, [r7, #12]
 8009bce:	2008      	movs	r0, #8
 8009bd0:	f000 fd78 	bl	800a6c4 <memp_free>
    return ERR_MEM;
 8009bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8009bd8:	e000      	b.n	8009bdc <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8009bda:	2300      	movs	r3, #0
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	3710      	adds	r7, #16
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}
 8009be4:	20008560 	.word	0x20008560
 8009be8:	08018e38 	.word	0x08018e38
 8009bec:	08018eb0 	.word	0x08018eb0
 8009bf0:	08018e88 	.word	0x08018e88

08009bf4 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	60f8      	str	r0, [r7, #12]
 8009bfc:	60b9      	str	r1, [r7, #8]
 8009bfe:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8009c00:	4806      	ldr	r0, [pc, #24]	; (8009c1c <tcpip_send_msg_wait_sem+0x28>)
 8009c02:	f00d f873 	bl	8016cec <sys_mutex_lock>
  fn(apimsg);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	68b8      	ldr	r0, [r7, #8]
 8009c0a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8009c0c:	4803      	ldr	r0, [pc, #12]	; (8009c1c <tcpip_send_msg_wait_sem+0x28>)
 8009c0e:	f00d f87c 	bl	8016d0a <sys_mutex_unlock>
  return ERR_OK;
 8009c12:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3710      	adds	r7, #16
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	2000b904 	.word	0x2000b904

08009c20 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af02      	add	r7, sp, #8
 8009c26:	6078      	str	r0, [r7, #4]
 8009c28:	6039      	str	r1, [r7, #0]
  lwip_init();
 8009c2a:	f000 f871 	bl	8009d10 <lwip_init>

  tcpip_init_done = initfunc;
 8009c2e:	4a17      	ldr	r2, [pc, #92]	; (8009c8c <tcpip_init+0x6c>)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8009c34:	4a16      	ldr	r2, [pc, #88]	; (8009c90 <tcpip_init+0x70>)
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8009c3a:	2106      	movs	r1, #6
 8009c3c:	4815      	ldr	r0, [pc, #84]	; (8009c94 <tcpip_init+0x74>)
 8009c3e:	f00c fed3 	bl	80169e8 <sys_mbox_new>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d006      	beq.n	8009c56 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8009c48:	4b13      	ldr	r3, [pc, #76]	; (8009c98 <tcpip_init+0x78>)
 8009c4a:	f240 2261 	movw	r2, #609	; 0x261
 8009c4e:	4913      	ldr	r1, [pc, #76]	; (8009c9c <tcpip_init+0x7c>)
 8009c50:	4813      	ldr	r0, [pc, #76]	; (8009ca0 <tcpip_init+0x80>)
 8009c52:	f00d f90d 	bl	8016e70 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8009c56:	4813      	ldr	r0, [pc, #76]	; (8009ca4 <tcpip_init+0x84>)
 8009c58:	f00d f82c 	bl	8016cb4 <sys_mutex_new>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d006      	beq.n	8009c70 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8009c62:	4b0d      	ldr	r3, [pc, #52]	; (8009c98 <tcpip_init+0x78>)
 8009c64:	f240 2265 	movw	r2, #613	; 0x265
 8009c68:	490f      	ldr	r1, [pc, #60]	; (8009ca8 <tcpip_init+0x88>)
 8009c6a:	480d      	ldr	r0, [pc, #52]	; (8009ca0 <tcpip_init+0x80>)
 8009c6c:	f00d f900 	bl	8016e70 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8009c70:	2300      	movs	r3, #0
 8009c72:	9300      	str	r3, [sp, #0]
 8009c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c78:	2200      	movs	r2, #0
 8009c7a:	490c      	ldr	r1, [pc, #48]	; (8009cac <tcpip_init+0x8c>)
 8009c7c:	480c      	ldr	r0, [pc, #48]	; (8009cb0 <tcpip_init+0x90>)
 8009c7e:	f00d f851 	bl	8016d24 <sys_thread_new>
}
 8009c82:	bf00      	nop
 8009c84:	3708      	adds	r7, #8
 8009c86:	46bd      	mov	sp, r7
 8009c88:	bd80      	pop	{r7, pc}
 8009c8a:	bf00      	nop
 8009c8c:	20008558 	.word	0x20008558
 8009c90:	2000855c 	.word	0x2000855c
 8009c94:	20008560 	.word	0x20008560
 8009c98:	08018e38 	.word	0x08018e38
 8009c9c:	08018ec0 	.word	0x08018ec0
 8009ca0:	08018e88 	.word	0x08018e88
 8009ca4:	2000b904 	.word	0x2000b904
 8009ca8:	08018ee4 	.word	0x08018ee4
 8009cac:	080099b1 	.word	0x080099b1
 8009cb0:	08018f08 	.word	0x08018f08

08009cb4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	4603      	mov	r3, r0
 8009cbc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009cbe:	88fb      	ldrh	r3, [r7, #6]
 8009cc0:	021b      	lsls	r3, r3, #8
 8009cc2:	b21a      	sxth	r2, r3
 8009cc4:	88fb      	ldrh	r3, [r7, #6]
 8009cc6:	0a1b      	lsrs	r3, r3, #8
 8009cc8:	b29b      	uxth	r3, r3
 8009cca:	b21b      	sxth	r3, r3
 8009ccc:	4313      	orrs	r3, r2
 8009cce:	b21b      	sxth	r3, r3
 8009cd0:	b29b      	uxth	r3, r3
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	370c      	adds	r7, #12
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b083      	sub	sp, #12
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	061a      	lsls	r2, r3, #24
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	021b      	lsls	r3, r3, #8
 8009cee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009cf2:	431a      	orrs	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	0a1b      	lsrs	r3, r3, #8
 8009cf8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009cfc:	431a      	orrs	r2, r3
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	0e1b      	lsrs	r3, r3, #24
 8009d02:	4313      	orrs	r3, r2
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	370c      	adds	r7, #12
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0e:	4770      	bx	lr

08009d10 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009d16:	2300      	movs	r3, #0
 8009d18:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009d1a:	f00c ffbd 	bl	8016c98 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009d1e:	f000 f8d5 	bl	8009ecc <mem_init>
  memp_init();
 8009d22:	f000 fc31 	bl	800a588 <memp_init>
  pbuf_init();
  netif_init();
 8009d26:	f000 fcf7 	bl	800a718 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009d2a:	f008 f821 	bl	8011d70 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009d2e:	f001 fe23 	bl	800b978 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009d32:	f007 ff63 	bl	8011bfc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009d36:	bf00      	nop
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}
	...

08009d40 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009d40:	b480      	push	{r7}
 8009d42:	b083      	sub	sp, #12
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	4603      	mov	r3, r0
 8009d48:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <ptr_to_mem+0x20>)
 8009d4c:	681a      	ldr	r2, [r3, #0]
 8009d4e:	88fb      	ldrh	r3, [r7, #6]
 8009d50:	4413      	add	r3, r2
}
 8009d52:	4618      	mov	r0, r3
 8009d54:	370c      	adds	r7, #12
 8009d56:	46bd      	mov	sp, r7
 8009d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5c:	4770      	bx	lr
 8009d5e:	bf00      	nop
 8009d60:	20008564 	.word	0x20008564

08009d64 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009d64:	b480      	push	{r7}
 8009d66:	b083      	sub	sp, #12
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009d6c:	4b05      	ldr	r3, [pc, #20]	; (8009d84 <mem_to_ptr+0x20>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	687a      	ldr	r2, [r7, #4]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	b29b      	uxth	r3, r3
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d80:	4770      	bx	lr
 8009d82:	bf00      	nop
 8009d84:	20008564 	.word	0x20008564

08009d88 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009d88:	b590      	push	{r4, r7, lr}
 8009d8a:	b085      	sub	sp, #20
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009d90:	4b45      	ldr	r3, [pc, #276]	; (8009ea8 <plug_holes+0x120>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	429a      	cmp	r2, r3
 8009d98:	d206      	bcs.n	8009da8 <plug_holes+0x20>
 8009d9a:	4b44      	ldr	r3, [pc, #272]	; (8009eac <plug_holes+0x124>)
 8009d9c:	f240 12df 	movw	r2, #479	; 0x1df
 8009da0:	4943      	ldr	r1, [pc, #268]	; (8009eb0 <plug_holes+0x128>)
 8009da2:	4844      	ldr	r0, [pc, #272]	; (8009eb4 <plug_holes+0x12c>)
 8009da4:	f00d f864 	bl	8016e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009da8:	4b43      	ldr	r3, [pc, #268]	; (8009eb8 <plug_holes+0x130>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d306      	bcc.n	8009dc0 <plug_holes+0x38>
 8009db2:	4b3e      	ldr	r3, [pc, #248]	; (8009eac <plug_holes+0x124>)
 8009db4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009db8:	4940      	ldr	r1, [pc, #256]	; (8009ebc <plug_holes+0x134>)
 8009dba:	483e      	ldr	r0, [pc, #248]	; (8009eb4 <plug_holes+0x12c>)
 8009dbc:	f00d f858 	bl	8016e70 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	791b      	ldrb	r3, [r3, #4]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d006      	beq.n	8009dd6 <plug_holes+0x4e>
 8009dc8:	4b38      	ldr	r3, [pc, #224]	; (8009eac <plug_holes+0x124>)
 8009dca:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009dce:	493c      	ldr	r1, [pc, #240]	; (8009ec0 <plug_holes+0x138>)
 8009dd0:	4838      	ldr	r0, [pc, #224]	; (8009eb4 <plug_holes+0x12c>)
 8009dd2:	f00d f84d 	bl	8016e70 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	881b      	ldrh	r3, [r3, #0]
 8009dda:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009dde:	d906      	bls.n	8009dee <plug_holes+0x66>
 8009de0:	4b32      	ldr	r3, [pc, #200]	; (8009eac <plug_holes+0x124>)
 8009de2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009de6:	4937      	ldr	r1, [pc, #220]	; (8009ec4 <plug_holes+0x13c>)
 8009de8:	4832      	ldr	r0, [pc, #200]	; (8009eb4 <plug_holes+0x12c>)
 8009dea:	f00d f841 	bl	8016e70 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	881b      	ldrh	r3, [r3, #0]
 8009df2:	4618      	mov	r0, r3
 8009df4:	f7ff ffa4 	bl	8009d40 <ptr_to_mem>
 8009df8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009dfa:	687a      	ldr	r2, [r7, #4]
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	429a      	cmp	r2, r3
 8009e00:	d024      	beq.n	8009e4c <plug_holes+0xc4>
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	791b      	ldrb	r3, [r3, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d120      	bne.n	8009e4c <plug_holes+0xc4>
 8009e0a:	4b2b      	ldr	r3, [pc, #172]	; (8009eb8 <plug_holes+0x130>)
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	429a      	cmp	r2, r3
 8009e12:	d01b      	beq.n	8009e4c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009e14:	4b2c      	ldr	r3, [pc, #176]	; (8009ec8 <plug_holes+0x140>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d102      	bne.n	8009e24 <plug_holes+0x9c>
      lfree = mem;
 8009e1e:	4a2a      	ldr	r2, [pc, #168]	; (8009ec8 <plug_holes+0x140>)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	881a      	ldrh	r2, [r3, #0]
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	881b      	ldrh	r3, [r3, #0]
 8009e30:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e34:	d00a      	beq.n	8009e4c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	881b      	ldrh	r3, [r3, #0]
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	f7ff ff80 	bl	8009d40 <ptr_to_mem>
 8009e40:	4604      	mov	r4, r0
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff ff8e 	bl	8009d64 <mem_to_ptr>
 8009e48:	4603      	mov	r3, r0
 8009e4a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	885b      	ldrh	r3, [r3, #2]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f7ff ff75 	bl	8009d40 <ptr_to_mem>
 8009e56:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d01f      	beq.n	8009ea0 <plug_holes+0x118>
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	791b      	ldrb	r3, [r3, #4]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d11b      	bne.n	8009ea0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009e68:	4b17      	ldr	r3, [pc, #92]	; (8009ec8 <plug_holes+0x140>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d102      	bne.n	8009e78 <plug_holes+0xf0>
      lfree = pmem;
 8009e72:	4a15      	ldr	r2, [pc, #84]	; (8009ec8 <plug_holes+0x140>)
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	881a      	ldrh	r2, [r3, #0]
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	881b      	ldrh	r3, [r3, #0]
 8009e84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009e88:	d00a      	beq.n	8009ea0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7ff ff56 	bl	8009d40 <ptr_to_mem>
 8009e94:	4604      	mov	r4, r0
 8009e96:	68b8      	ldr	r0, [r7, #8]
 8009e98:	f7ff ff64 	bl	8009d64 <mem_to_ptr>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd90      	pop	{r4, r7, pc}
 8009ea8:	20008564 	.word	0x20008564
 8009eac:	08018f18 	.word	0x08018f18
 8009eb0:	08018f48 	.word	0x08018f48
 8009eb4:	08018f60 	.word	0x08018f60
 8009eb8:	20008568 	.word	0x20008568
 8009ebc:	08018f88 	.word	0x08018f88
 8009ec0:	08018fa4 	.word	0x08018fa4
 8009ec4:	08018fc0 	.word	0x08018fc0
 8009ec8:	20008570 	.word	0x20008570

08009ecc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009ecc:	b580      	push	{r7, lr}
 8009ece:	b082      	sub	sp, #8
 8009ed0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009ed2:	4b1f      	ldr	r3, [pc, #124]	; (8009f50 <mem_init+0x84>)
 8009ed4:	3303      	adds	r3, #3
 8009ed6:	f023 0303 	bic.w	r3, r3, #3
 8009eda:	461a      	mov	r2, r3
 8009edc:	4b1d      	ldr	r3, [pc, #116]	; (8009f54 <mem_init+0x88>)
 8009ede:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009ee0:	4b1c      	ldr	r3, [pc, #112]	; (8009f54 <mem_init+0x88>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009eec:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009efa:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009efe:	f7ff ff1f 	bl	8009d40 <ptr_to_mem>
 8009f02:	4603      	mov	r3, r0
 8009f04:	4a14      	ldr	r2, [pc, #80]	; (8009f58 <mem_init+0x8c>)
 8009f06:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009f08:	4b13      	ldr	r3, [pc, #76]	; (8009f58 <mem_init+0x8c>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8009f10:	4b11      	ldr	r3, [pc, #68]	; (8009f58 <mem_init+0x8c>)
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f18:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8009f1a:	4b0f      	ldr	r3, [pc, #60]	; (8009f58 <mem_init+0x8c>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009f22:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8009f24:	4b0b      	ldr	r3, [pc, #44]	; (8009f54 <mem_init+0x88>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a0c      	ldr	r2, [pc, #48]	; (8009f5c <mem_init+0x90>)
 8009f2a:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8009f2c:	480c      	ldr	r0, [pc, #48]	; (8009f60 <mem_init+0x94>)
 8009f2e:	f00c fec1 	bl	8016cb4 <sys_mutex_new>
 8009f32:	4603      	mov	r3, r0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d006      	beq.n	8009f46 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8009f38:	4b0a      	ldr	r3, [pc, #40]	; (8009f64 <mem_init+0x98>)
 8009f3a:	f240 221f 	movw	r2, #543	; 0x21f
 8009f3e:	490a      	ldr	r1, [pc, #40]	; (8009f68 <mem_init+0x9c>)
 8009f40:	480a      	ldr	r0, [pc, #40]	; (8009f6c <mem_init+0xa0>)
 8009f42:	f00c ff95 	bl	8016e70 <iprintf>
  }
}
 8009f46:	bf00      	nop
 8009f48:	3708      	adds	r7, #8
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	bd80      	pop	{r7, pc}
 8009f4e:	bf00      	nop
 8009f50:	2000b920 	.word	0x2000b920
 8009f54:	20008564 	.word	0x20008564
 8009f58:	20008568 	.word	0x20008568
 8009f5c:	20008570 	.word	0x20008570
 8009f60:	2000856c 	.word	0x2000856c
 8009f64:	08018f18 	.word	0x08018f18
 8009f68:	08018fec 	.word	0x08018fec
 8009f6c:	08018f60 	.word	0x08018f60

08009f70 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b086      	sub	sp, #24
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8009f78:	6878      	ldr	r0, [r7, #4]
 8009f7a:	f7ff fef3 	bl	8009d64 <mem_to_ptr>
 8009f7e:	4603      	mov	r3, r0
 8009f80:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	881b      	ldrh	r3, [r3, #0]
 8009f86:	4618      	mov	r0, r3
 8009f88:	f7ff feda 	bl	8009d40 <ptr_to_mem>
 8009f8c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	885b      	ldrh	r3, [r3, #2]
 8009f92:	4618      	mov	r0, r3
 8009f94:	f7ff fed4 	bl	8009d40 <ptr_to_mem>
 8009f98:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fa2:	d818      	bhi.n	8009fd6 <mem_link_valid+0x66>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	885b      	ldrh	r3, [r3, #2]
 8009fa8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009fac:	d813      	bhi.n	8009fd6 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8009fb2:	8afa      	ldrh	r2, [r7, #22]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d004      	beq.n	8009fc2 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	8afa      	ldrh	r2, [r7, #22]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d109      	bne.n	8009fd6 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009fc2:	4b08      	ldr	r3, [pc, #32]	; (8009fe4 <mem_link_valid+0x74>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8009fc6:	693a      	ldr	r2, [r7, #16]
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d006      	beq.n	8009fda <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	885b      	ldrh	r3, [r3, #2]
 8009fd0:	8afa      	ldrh	r2, [r7, #22]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d001      	beq.n	8009fda <mem_link_valid+0x6a>
    return 0;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	e000      	b.n	8009fdc <mem_link_valid+0x6c>
  }
  return 1;
 8009fda:	2301      	movs	r3, #1
}
 8009fdc:	4618      	mov	r0, r3
 8009fde:	3718      	adds	r7, #24
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20008568 	.word	0x20008568

08009fe8 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b088      	sub	sp, #32
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d070      	beq.n	800a0d8 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d00d      	beq.n	800a01c <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a000:	4b37      	ldr	r3, [pc, #220]	; (800a0e0 <mem_free+0xf8>)
 800a002:	f240 2273 	movw	r2, #627	; 0x273
 800a006:	4937      	ldr	r1, [pc, #220]	; (800a0e4 <mem_free+0xfc>)
 800a008:	4837      	ldr	r0, [pc, #220]	; (800a0e8 <mem_free+0x100>)
 800a00a:	f00c ff31 	bl	8016e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a00e:	f00c feaf 	bl	8016d70 <sys_arch_protect>
 800a012:	60f8      	str	r0, [r7, #12]
 800a014:	68f8      	ldr	r0, [r7, #12]
 800a016:	f00c feb9 	bl	8016d8c <sys_arch_unprotect>
    return;
 800a01a:	e05e      	b.n	800a0da <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	3b08      	subs	r3, #8
 800a020:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a022:	4b32      	ldr	r3, [pc, #200]	; (800a0ec <mem_free+0x104>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d306      	bcc.n	800a03a <mem_free+0x52>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f103 020c 	add.w	r2, r3, #12
 800a032:	4b2f      	ldr	r3, [pc, #188]	; (800a0f0 <mem_free+0x108>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	429a      	cmp	r2, r3
 800a038:	d90d      	bls.n	800a056 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a03a:	4b29      	ldr	r3, [pc, #164]	; (800a0e0 <mem_free+0xf8>)
 800a03c:	f240 227f 	movw	r2, #639	; 0x27f
 800a040:	492c      	ldr	r1, [pc, #176]	; (800a0f4 <mem_free+0x10c>)
 800a042:	4829      	ldr	r0, [pc, #164]	; (800a0e8 <mem_free+0x100>)
 800a044:	f00c ff14 	bl	8016e70 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a048:	f00c fe92 	bl	8016d70 <sys_arch_protect>
 800a04c:	6138      	str	r0, [r7, #16]
 800a04e:	6938      	ldr	r0, [r7, #16]
 800a050:	f00c fe9c 	bl	8016d8c <sys_arch_unprotect>
    return;
 800a054:	e041      	b.n	800a0da <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a056:	4828      	ldr	r0, [pc, #160]	; (800a0f8 <mem_free+0x110>)
 800a058:	f00c fe48 	bl	8016cec <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	791b      	ldrb	r3, [r3, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d110      	bne.n	800a086 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a064:	4b1e      	ldr	r3, [pc, #120]	; (800a0e0 <mem_free+0xf8>)
 800a066:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a06a:	4924      	ldr	r1, [pc, #144]	; (800a0fc <mem_free+0x114>)
 800a06c:	481e      	ldr	r0, [pc, #120]	; (800a0e8 <mem_free+0x100>)
 800a06e:	f00c feff 	bl	8016e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a072:	4821      	ldr	r0, [pc, #132]	; (800a0f8 <mem_free+0x110>)
 800a074:	f00c fe49 	bl	8016d0a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a078:	f00c fe7a 	bl	8016d70 <sys_arch_protect>
 800a07c:	6178      	str	r0, [r7, #20]
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f00c fe84 	bl	8016d8c <sys_arch_unprotect>
    return;
 800a084:	e029      	b.n	800a0da <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a086:	69f8      	ldr	r0, [r7, #28]
 800a088:	f7ff ff72 	bl	8009f70 <mem_link_valid>
 800a08c:	4603      	mov	r3, r0
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d110      	bne.n	800a0b4 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <mem_free+0xf8>)
 800a094:	f240 2295 	movw	r2, #661	; 0x295
 800a098:	4919      	ldr	r1, [pc, #100]	; (800a100 <mem_free+0x118>)
 800a09a:	4813      	ldr	r0, [pc, #76]	; (800a0e8 <mem_free+0x100>)
 800a09c:	f00c fee8 	bl	8016e70 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a0a0:	4815      	ldr	r0, [pc, #84]	; (800a0f8 <mem_free+0x110>)
 800a0a2:	f00c fe32 	bl	8016d0a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a0a6:	f00c fe63 	bl	8016d70 <sys_arch_protect>
 800a0aa:	61b8      	str	r0, [r7, #24]
 800a0ac:	69b8      	ldr	r0, [r7, #24]
 800a0ae:	f00c fe6d 	bl	8016d8c <sys_arch_unprotect>
    return;
 800a0b2:	e012      	b.n	800a0da <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a0ba:	4b12      	ldr	r3, [pc, #72]	; (800a104 <mem_free+0x11c>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d202      	bcs.n	800a0ca <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a0c4:	4a0f      	ldr	r2, [pc, #60]	; (800a104 <mem_free+0x11c>)
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a0ca:	69f8      	ldr	r0, [r7, #28]
 800a0cc:	f7ff fe5c 	bl	8009d88 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a0d0:	4809      	ldr	r0, [pc, #36]	; (800a0f8 <mem_free+0x110>)
 800a0d2:	f00c fe1a 	bl	8016d0a <sys_mutex_unlock>
 800a0d6:	e000      	b.n	800a0da <mem_free+0xf2>
    return;
 800a0d8:	bf00      	nop
}
 800a0da:	3720      	adds	r7, #32
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	08018f18 	.word	0x08018f18
 800a0e4:	08019008 	.word	0x08019008
 800a0e8:	08018f60 	.word	0x08018f60
 800a0ec:	20008564 	.word	0x20008564
 800a0f0:	20008568 	.word	0x20008568
 800a0f4:	0801902c 	.word	0x0801902c
 800a0f8:	2000856c 	.word	0x2000856c
 800a0fc:	08019048 	.word	0x08019048
 800a100:	08019070 	.word	0x08019070
 800a104:	20008570 	.word	0x20008570

0800a108 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b088      	sub	sp, #32
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	460b      	mov	r3, r1
 800a112:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a114:	887b      	ldrh	r3, [r7, #2]
 800a116:	3303      	adds	r3, #3
 800a118:	b29b      	uxth	r3, r3
 800a11a:	f023 0303 	bic.w	r3, r3, #3
 800a11e:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a120:	8bfb      	ldrh	r3, [r7, #30]
 800a122:	2b0b      	cmp	r3, #11
 800a124:	d801      	bhi.n	800a12a <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a126:	230c      	movs	r3, #12
 800a128:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a12a:	8bfb      	ldrh	r3, [r7, #30]
 800a12c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a130:	d803      	bhi.n	800a13a <mem_trim+0x32>
 800a132:	8bfa      	ldrh	r2, [r7, #30]
 800a134:	887b      	ldrh	r3, [r7, #2]
 800a136:	429a      	cmp	r2, r3
 800a138:	d201      	bcs.n	800a13e <mem_trim+0x36>
    return NULL;
 800a13a:	2300      	movs	r3, #0
 800a13c:	e0d8      	b.n	800a2f0 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a13e:	4b6e      	ldr	r3, [pc, #440]	; (800a2f8 <mem_trim+0x1f0>)
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	429a      	cmp	r2, r3
 800a146:	d304      	bcc.n	800a152 <mem_trim+0x4a>
 800a148:	4b6c      	ldr	r3, [pc, #432]	; (800a2fc <mem_trim+0x1f4>)
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	687a      	ldr	r2, [r7, #4]
 800a14e:	429a      	cmp	r2, r3
 800a150:	d306      	bcc.n	800a160 <mem_trim+0x58>
 800a152:	4b6b      	ldr	r3, [pc, #428]	; (800a300 <mem_trim+0x1f8>)
 800a154:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a158:	496a      	ldr	r1, [pc, #424]	; (800a304 <mem_trim+0x1fc>)
 800a15a:	486b      	ldr	r0, [pc, #428]	; (800a308 <mem_trim+0x200>)
 800a15c:	f00c fe88 	bl	8016e70 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a160:	4b65      	ldr	r3, [pc, #404]	; (800a2f8 <mem_trim+0x1f0>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	687a      	ldr	r2, [r7, #4]
 800a166:	429a      	cmp	r2, r3
 800a168:	d304      	bcc.n	800a174 <mem_trim+0x6c>
 800a16a:	4b64      	ldr	r3, [pc, #400]	; (800a2fc <mem_trim+0x1f4>)
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	687a      	ldr	r2, [r7, #4]
 800a170:	429a      	cmp	r2, r3
 800a172:	d307      	bcc.n	800a184 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a174:	f00c fdfc 	bl	8016d70 <sys_arch_protect>
 800a178:	60b8      	str	r0, [r7, #8]
 800a17a:	68b8      	ldr	r0, [r7, #8]
 800a17c:	f00c fe06 	bl	8016d8c <sys_arch_unprotect>
    return rmem;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	e0b5      	b.n	800a2f0 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	3b08      	subs	r3, #8
 800a188:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a18a:	69b8      	ldr	r0, [r7, #24]
 800a18c:	f7ff fdea 	bl	8009d64 <mem_to_ptr>
 800a190:	4603      	mov	r3, r0
 800a192:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	881a      	ldrh	r2, [r3, #0]
 800a198:	8afb      	ldrh	r3, [r7, #22]
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	b29b      	uxth	r3, r3
 800a19e:	3b08      	subs	r3, #8
 800a1a0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a1a2:	8bfa      	ldrh	r2, [r7, #30]
 800a1a4:	8abb      	ldrh	r3, [r7, #20]
 800a1a6:	429a      	cmp	r2, r3
 800a1a8:	d906      	bls.n	800a1b8 <mem_trim+0xb0>
 800a1aa:	4b55      	ldr	r3, [pc, #340]	; (800a300 <mem_trim+0x1f8>)
 800a1ac:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a1b0:	4956      	ldr	r1, [pc, #344]	; (800a30c <mem_trim+0x204>)
 800a1b2:	4855      	ldr	r0, [pc, #340]	; (800a308 <mem_trim+0x200>)
 800a1b4:	f00c fe5c 	bl	8016e70 <iprintf>
  if (newsize > size) {
 800a1b8:	8bfa      	ldrh	r2, [r7, #30]
 800a1ba:	8abb      	ldrh	r3, [r7, #20]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d901      	bls.n	800a1c4 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	e095      	b.n	800a2f0 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a1c4:	8bfa      	ldrh	r2, [r7, #30]
 800a1c6:	8abb      	ldrh	r3, [r7, #20]
 800a1c8:	429a      	cmp	r2, r3
 800a1ca:	d101      	bne.n	800a1d0 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	e08f      	b.n	800a2f0 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a1d0:	484f      	ldr	r0, [pc, #316]	; (800a310 <mem_trim+0x208>)
 800a1d2:	f00c fd8b 	bl	8016cec <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	881b      	ldrh	r3, [r3, #0]
 800a1da:	4618      	mov	r0, r3
 800a1dc:	f7ff fdb0 	bl	8009d40 <ptr_to_mem>
 800a1e0:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	791b      	ldrb	r3, [r3, #4]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d13f      	bne.n	800a26a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a1ea:	69bb      	ldr	r3, [r7, #24]
 800a1ec:	881b      	ldrh	r3, [r3, #0]
 800a1ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1f2:	d106      	bne.n	800a202 <mem_trim+0xfa>
 800a1f4:	4b42      	ldr	r3, [pc, #264]	; (800a300 <mem_trim+0x1f8>)
 800a1f6:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a1fa:	4946      	ldr	r1, [pc, #280]	; (800a314 <mem_trim+0x20c>)
 800a1fc:	4842      	ldr	r0, [pc, #264]	; (800a308 <mem_trim+0x200>)
 800a1fe:	f00c fe37 	bl	8016e70 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	881b      	ldrh	r3, [r3, #0]
 800a206:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a208:	8afa      	ldrh	r2, [r7, #22]
 800a20a:	8bfb      	ldrh	r3, [r7, #30]
 800a20c:	4413      	add	r3, r2
 800a20e:	b29b      	uxth	r3, r3
 800a210:	3308      	adds	r3, #8
 800a212:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a214:	4b40      	ldr	r3, [pc, #256]	; (800a318 <mem_trim+0x210>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	693a      	ldr	r2, [r7, #16]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d106      	bne.n	800a22c <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a21e:	89fb      	ldrh	r3, [r7, #14]
 800a220:	4618      	mov	r0, r3
 800a222:	f7ff fd8d 	bl	8009d40 <ptr_to_mem>
 800a226:	4603      	mov	r3, r0
 800a228:	4a3b      	ldr	r2, [pc, #236]	; (800a318 <mem_trim+0x210>)
 800a22a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a22c:	89fb      	ldrh	r3, [r7, #14]
 800a22e:	4618      	mov	r0, r3
 800a230:	f7ff fd86 	bl	8009d40 <ptr_to_mem>
 800a234:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a236:	693b      	ldr	r3, [r7, #16]
 800a238:	2200      	movs	r2, #0
 800a23a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	89ba      	ldrh	r2, [r7, #12]
 800a240:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a242:	693b      	ldr	r3, [r7, #16]
 800a244:	8afa      	ldrh	r2, [r7, #22]
 800a246:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	89fa      	ldrh	r2, [r7, #14]
 800a24c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	881b      	ldrh	r3, [r3, #0]
 800a252:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a256:	d047      	beq.n	800a2e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	881b      	ldrh	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7ff fd6f 	bl	8009d40 <ptr_to_mem>
 800a262:	4602      	mov	r2, r0
 800a264:	89fb      	ldrh	r3, [r7, #14]
 800a266:	8053      	strh	r3, [r2, #2]
 800a268:	e03e      	b.n	800a2e8 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a26a:	8bfb      	ldrh	r3, [r7, #30]
 800a26c:	f103 0214 	add.w	r2, r3, #20
 800a270:	8abb      	ldrh	r3, [r7, #20]
 800a272:	429a      	cmp	r2, r3
 800a274:	d838      	bhi.n	800a2e8 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a276:	8afa      	ldrh	r2, [r7, #22]
 800a278:	8bfb      	ldrh	r3, [r7, #30]
 800a27a:	4413      	add	r3, r2
 800a27c:	b29b      	uxth	r3, r3
 800a27e:	3308      	adds	r3, #8
 800a280:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a282:	69bb      	ldr	r3, [r7, #24]
 800a284:	881b      	ldrh	r3, [r3, #0]
 800a286:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a28a:	d106      	bne.n	800a29a <mem_trim+0x192>
 800a28c:	4b1c      	ldr	r3, [pc, #112]	; (800a300 <mem_trim+0x1f8>)
 800a28e:	f240 3216 	movw	r2, #790	; 0x316
 800a292:	4920      	ldr	r1, [pc, #128]	; (800a314 <mem_trim+0x20c>)
 800a294:	481c      	ldr	r0, [pc, #112]	; (800a308 <mem_trim+0x200>)
 800a296:	f00c fdeb 	bl	8016e70 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a29a:	89fb      	ldrh	r3, [r7, #14]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f7ff fd4f 	bl	8009d40 <ptr_to_mem>
 800a2a2:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a2a4:	4b1c      	ldr	r3, [pc, #112]	; (800a318 <mem_trim+0x210>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	429a      	cmp	r2, r3
 800a2ac:	d202      	bcs.n	800a2b4 <mem_trim+0x1ac>
      lfree = mem2;
 800a2ae:	4a1a      	ldr	r2, [pc, #104]	; (800a318 <mem_trim+0x210>)
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	2200      	movs	r2, #0
 800a2b8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a2ba:	69bb      	ldr	r3, [r7, #24]
 800a2bc:	881a      	ldrh	r2, [r3, #0]
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	8afa      	ldrh	r2, [r7, #22]
 800a2c6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a2c8:	69bb      	ldr	r3, [r7, #24]
 800a2ca:	89fa      	ldrh	r2, [r7, #14]
 800a2cc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	881b      	ldrh	r3, [r3, #0]
 800a2d2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2d6:	d007      	beq.n	800a2e8 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a2d8:	693b      	ldr	r3, [r7, #16]
 800a2da:	881b      	ldrh	r3, [r3, #0]
 800a2dc:	4618      	mov	r0, r3
 800a2de:	f7ff fd2f 	bl	8009d40 <ptr_to_mem>
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	89fb      	ldrh	r3, [r7, #14]
 800a2e6:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a2e8:	4809      	ldr	r0, [pc, #36]	; (800a310 <mem_trim+0x208>)
 800a2ea:	f00c fd0e 	bl	8016d0a <sys_mutex_unlock>
  return rmem;
 800a2ee:	687b      	ldr	r3, [r7, #4]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3720      	adds	r7, #32
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}
 800a2f8:	20008564 	.word	0x20008564
 800a2fc:	20008568 	.word	0x20008568
 800a300:	08018f18 	.word	0x08018f18
 800a304:	080190a4 	.word	0x080190a4
 800a308:	08018f60 	.word	0x08018f60
 800a30c:	080190bc 	.word	0x080190bc
 800a310:	2000856c 	.word	0x2000856c
 800a314:	080190dc 	.word	0x080190dc
 800a318:	20008570 	.word	0x20008570

0800a31c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a31c:	b580      	push	{r7, lr}
 800a31e:	b088      	sub	sp, #32
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a326:	88fb      	ldrh	r3, [r7, #6]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d101      	bne.n	800a330 <mem_malloc+0x14>
    return NULL;
 800a32c:	2300      	movs	r3, #0
 800a32e:	e0e2      	b.n	800a4f6 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a330:	88fb      	ldrh	r3, [r7, #6]
 800a332:	3303      	adds	r3, #3
 800a334:	b29b      	uxth	r3, r3
 800a336:	f023 0303 	bic.w	r3, r3, #3
 800a33a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a33c:	8bbb      	ldrh	r3, [r7, #28]
 800a33e:	2b0b      	cmp	r3, #11
 800a340:	d801      	bhi.n	800a346 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a342:	230c      	movs	r3, #12
 800a344:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a346:	8bbb      	ldrh	r3, [r7, #28]
 800a348:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a34c:	d803      	bhi.n	800a356 <mem_malloc+0x3a>
 800a34e:	8bba      	ldrh	r2, [r7, #28]
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	429a      	cmp	r2, r3
 800a354:	d201      	bcs.n	800a35a <mem_malloc+0x3e>
    return NULL;
 800a356:	2300      	movs	r3, #0
 800a358:	e0cd      	b.n	800a4f6 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a35a:	4869      	ldr	r0, [pc, #420]	; (800a500 <mem_malloc+0x1e4>)
 800a35c:	f00c fcc6 	bl	8016cec <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a360:	4b68      	ldr	r3, [pc, #416]	; (800a504 <mem_malloc+0x1e8>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f7ff fcfd 	bl	8009d64 <mem_to_ptr>
 800a36a:	4603      	mov	r3, r0
 800a36c:	83fb      	strh	r3, [r7, #30]
 800a36e:	e0b7      	b.n	800a4e0 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a370:	8bfb      	ldrh	r3, [r7, #30]
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fce4 	bl	8009d40 <ptr_to_mem>
 800a378:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	791b      	ldrb	r3, [r3, #4]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	f040 80a7 	bne.w	800a4d2 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	881b      	ldrh	r3, [r3, #0]
 800a388:	461a      	mov	r2, r3
 800a38a:	8bfb      	ldrh	r3, [r7, #30]
 800a38c:	1ad3      	subs	r3, r2, r3
 800a38e:	f1a3 0208 	sub.w	r2, r3, #8
 800a392:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a394:	429a      	cmp	r2, r3
 800a396:	f0c0 809c 	bcc.w	800a4d2 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	881b      	ldrh	r3, [r3, #0]
 800a39e:	461a      	mov	r2, r3
 800a3a0:	8bfb      	ldrh	r3, [r7, #30]
 800a3a2:	1ad3      	subs	r3, r2, r3
 800a3a4:	f1a3 0208 	sub.w	r2, r3, #8
 800a3a8:	8bbb      	ldrh	r3, [r7, #28]
 800a3aa:	3314      	adds	r3, #20
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d333      	bcc.n	800a418 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a3b0:	8bfa      	ldrh	r2, [r7, #30]
 800a3b2:	8bbb      	ldrh	r3, [r7, #28]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	b29b      	uxth	r3, r3
 800a3b8:	3308      	adds	r3, #8
 800a3ba:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a3bc:	8a7b      	ldrh	r3, [r7, #18]
 800a3be:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3c2:	d106      	bne.n	800a3d2 <mem_malloc+0xb6>
 800a3c4:	4b50      	ldr	r3, [pc, #320]	; (800a508 <mem_malloc+0x1ec>)
 800a3c6:	f240 3287 	movw	r2, #903	; 0x387
 800a3ca:	4950      	ldr	r1, [pc, #320]	; (800a50c <mem_malloc+0x1f0>)
 800a3cc:	4850      	ldr	r0, [pc, #320]	; (800a510 <mem_malloc+0x1f4>)
 800a3ce:	f00c fd4f 	bl	8016e70 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a3d2:	8a7b      	ldrh	r3, [r7, #18]
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7ff fcb3 	bl	8009d40 <ptr_to_mem>
 800a3da:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a3e2:	697b      	ldr	r3, [r7, #20]
 800a3e4:	881a      	ldrh	r2, [r3, #0]
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	8bfa      	ldrh	r2, [r7, #30]
 800a3ee:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	8a7a      	ldrh	r2, [r7, #18]
 800a3f4:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a3f6:	697b      	ldr	r3, [r7, #20]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	881b      	ldrh	r3, [r3, #0]
 800a400:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a404:	d00b      	beq.n	800a41e <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	881b      	ldrh	r3, [r3, #0]
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7ff fc98 	bl	8009d40 <ptr_to_mem>
 800a410:	4602      	mov	r2, r0
 800a412:	8a7b      	ldrh	r3, [r7, #18]
 800a414:	8053      	strh	r3, [r2, #2]
 800a416:	e002      	b.n	800a41e <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	2201      	movs	r2, #1
 800a41c:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a41e:	4b39      	ldr	r3, [pc, #228]	; (800a504 <mem_malloc+0x1e8>)
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	429a      	cmp	r2, r3
 800a426:	d127      	bne.n	800a478 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800a428:	4b36      	ldr	r3, [pc, #216]	; (800a504 <mem_malloc+0x1e8>)
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a42e:	e005      	b.n	800a43c <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a430:	69bb      	ldr	r3, [r7, #24]
 800a432:	881b      	ldrh	r3, [r3, #0]
 800a434:	4618      	mov	r0, r3
 800a436:	f7ff fc83 	bl	8009d40 <ptr_to_mem>
 800a43a:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a43c:	69bb      	ldr	r3, [r7, #24]
 800a43e:	791b      	ldrb	r3, [r3, #4]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d004      	beq.n	800a44e <mem_malloc+0x132>
 800a444:	4b33      	ldr	r3, [pc, #204]	; (800a514 <mem_malloc+0x1f8>)
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	69ba      	ldr	r2, [r7, #24]
 800a44a:	429a      	cmp	r2, r3
 800a44c:	d1f0      	bne.n	800a430 <mem_malloc+0x114>
          }
          lfree = cur;
 800a44e:	4a2d      	ldr	r2, [pc, #180]	; (800a504 <mem_malloc+0x1e8>)
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a454:	4b2b      	ldr	r3, [pc, #172]	; (800a504 <mem_malloc+0x1e8>)
 800a456:	681a      	ldr	r2, [r3, #0]
 800a458:	4b2e      	ldr	r3, [pc, #184]	; (800a514 <mem_malloc+0x1f8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d00b      	beq.n	800a478 <mem_malloc+0x15c>
 800a460:	4b28      	ldr	r3, [pc, #160]	; (800a504 <mem_malloc+0x1e8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	791b      	ldrb	r3, [r3, #4]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d006      	beq.n	800a478 <mem_malloc+0x15c>
 800a46a:	4b27      	ldr	r3, [pc, #156]	; (800a508 <mem_malloc+0x1ec>)
 800a46c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a470:	4929      	ldr	r1, [pc, #164]	; (800a518 <mem_malloc+0x1fc>)
 800a472:	4827      	ldr	r0, [pc, #156]	; (800a510 <mem_malloc+0x1f4>)
 800a474:	f00c fcfc 	bl	8016e70 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800a478:	4821      	ldr	r0, [pc, #132]	; (800a500 <mem_malloc+0x1e4>)
 800a47a:	f00c fc46 	bl	8016d0a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a47e:	8bba      	ldrh	r2, [r7, #28]
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	4413      	add	r3, r2
 800a484:	3308      	adds	r3, #8
 800a486:	4a23      	ldr	r2, [pc, #140]	; (800a514 <mem_malloc+0x1f8>)
 800a488:	6812      	ldr	r2, [r2, #0]
 800a48a:	4293      	cmp	r3, r2
 800a48c:	d906      	bls.n	800a49c <mem_malloc+0x180>
 800a48e:	4b1e      	ldr	r3, [pc, #120]	; (800a508 <mem_malloc+0x1ec>)
 800a490:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a494:	4921      	ldr	r1, [pc, #132]	; (800a51c <mem_malloc+0x200>)
 800a496:	481e      	ldr	r0, [pc, #120]	; (800a510 <mem_malloc+0x1f4>)
 800a498:	f00c fcea 	bl	8016e70 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f003 0303 	and.w	r3, r3, #3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d006      	beq.n	800a4b4 <mem_malloc+0x198>
 800a4a6:	4b18      	ldr	r3, [pc, #96]	; (800a508 <mem_malloc+0x1ec>)
 800a4a8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a4ac:	491c      	ldr	r1, [pc, #112]	; (800a520 <mem_malloc+0x204>)
 800a4ae:	4818      	ldr	r0, [pc, #96]	; (800a510 <mem_malloc+0x1f4>)
 800a4b0:	f00c fcde 	bl	8016e70 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a4b4:	697b      	ldr	r3, [r7, #20]
 800a4b6:	f003 0303 	and.w	r3, r3, #3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d006      	beq.n	800a4cc <mem_malloc+0x1b0>
 800a4be:	4b12      	ldr	r3, [pc, #72]	; (800a508 <mem_malloc+0x1ec>)
 800a4c0:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a4c4:	4917      	ldr	r1, [pc, #92]	; (800a524 <mem_malloc+0x208>)
 800a4c6:	4812      	ldr	r0, [pc, #72]	; (800a510 <mem_malloc+0x1f4>)
 800a4c8:	f00c fcd2 	bl	8016e70 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a4cc:	697b      	ldr	r3, [r7, #20]
 800a4ce:	3308      	adds	r3, #8
 800a4d0:	e011      	b.n	800a4f6 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800a4d2:	8bfb      	ldrh	r3, [r7, #30]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fc33 	bl	8009d40 <ptr_to_mem>
 800a4da:	4603      	mov	r3, r0
 800a4dc:	881b      	ldrh	r3, [r3, #0]
 800a4de:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a4e0:	8bfa      	ldrh	r2, [r7, #30]
 800a4e2:	8bbb      	ldrh	r3, [r7, #28]
 800a4e4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	f4ff af41 	bcc.w	800a370 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800a4ee:	4804      	ldr	r0, [pc, #16]	; (800a500 <mem_malloc+0x1e4>)
 800a4f0:	f00c fc0b 	bl	8016d0a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a4f4:	2300      	movs	r3, #0
}
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	3720      	adds	r7, #32
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	bd80      	pop	{r7, pc}
 800a4fe:	bf00      	nop
 800a500:	2000856c 	.word	0x2000856c
 800a504:	20008570 	.word	0x20008570
 800a508:	08018f18 	.word	0x08018f18
 800a50c:	080190dc 	.word	0x080190dc
 800a510:	08018f60 	.word	0x08018f60
 800a514:	20008568 	.word	0x20008568
 800a518:	080190f0 	.word	0x080190f0
 800a51c:	0801910c 	.word	0x0801910c
 800a520:	0801913c 	.word	0x0801913c
 800a524:	0801916c 	.word	0x0801916c

0800a528 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2200      	movs	r2, #0
 800a536:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	685b      	ldr	r3, [r3, #4]
 800a53c:	3303      	adds	r3, #3
 800a53e:	f023 0303 	bic.w	r3, r3, #3
 800a542:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]
 800a548:	e011      	b.n	800a56e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	689b      	ldr	r3, [r3, #8]
 800a54e:	681a      	ldr	r2, [r3, #0]
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	689b      	ldr	r3, [r3, #8]
 800a558:	68ba      	ldr	r2, [r7, #8]
 800a55a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	881b      	ldrh	r3, [r3, #0]
 800a560:	461a      	mov	r2, r3
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4413      	add	r3, r2
 800a566:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	3301      	adds	r3, #1
 800a56c:	60fb      	str	r3, [r7, #12]
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	885b      	ldrh	r3, [r3, #2]
 800a572:	461a      	mov	r2, r3
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	4293      	cmp	r3, r2
 800a578:	dbe7      	blt.n	800a54a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a57a:	bf00      	nop
 800a57c:	bf00      	nop
 800a57e:	3714      	adds	r7, #20
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a58e:	2300      	movs	r3, #0
 800a590:	80fb      	strh	r3, [r7, #6]
 800a592:	e009      	b.n	800a5a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a594:	88fb      	ldrh	r3, [r7, #6]
 800a596:	4a08      	ldr	r2, [pc, #32]	; (800a5b8 <memp_init+0x30>)
 800a598:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a59c:	4618      	mov	r0, r3
 800a59e:	f7ff ffc3 	bl	800a528 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a5a2:	88fb      	ldrh	r3, [r7, #6]
 800a5a4:	3301      	adds	r3, #1
 800a5a6:	80fb      	strh	r3, [r7, #6]
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	2b0c      	cmp	r3, #12
 800a5ac:	d9f2      	bls.n	800a594 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a5ae:	bf00      	nop
 800a5b0:	bf00      	nop
 800a5b2:	3708      	adds	r7, #8
 800a5b4:	46bd      	mov	sp, r7
 800a5b6:	bd80      	pop	{r7, pc}
 800a5b8:	0801bd18 	.word	0x0801bd18

0800a5bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800a5c4:	f00c fbd4 	bl	8016d70 <sys_arch_protect>
 800a5c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a5d2:	68bb      	ldr	r3, [r7, #8]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d015      	beq.n	800a604 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	689b      	ldr	r3, [r3, #8]
 800a5dc:	68ba      	ldr	r2, [r7, #8]
 800a5de:	6812      	ldr	r2, [r2, #0]
 800a5e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	f003 0303 	and.w	r3, r3, #3
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <do_memp_malloc_pool+0x3e>
 800a5ec:	4b09      	ldr	r3, [pc, #36]	; (800a614 <do_memp_malloc_pool+0x58>)
 800a5ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a5f2:	4909      	ldr	r1, [pc, #36]	; (800a618 <do_memp_malloc_pool+0x5c>)
 800a5f4:	4809      	ldr	r0, [pc, #36]	; (800a61c <do_memp_malloc_pool+0x60>)
 800a5f6:	f00c fc3b 	bl	8016e70 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a5fa:	68f8      	ldr	r0, [r7, #12]
 800a5fc:	f00c fbc6 	bl	8016d8c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	e003      	b.n	800a60c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800a604:	68f8      	ldr	r0, [r7, #12]
 800a606:	f00c fbc1 	bl	8016d8c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3710      	adds	r7, #16
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}
 800a614:	08019190 	.word	0x08019190
 800a618:	080191c0 	.word	0x080191c0
 800a61c:	080191e4 	.word	0x080191e4

0800a620 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a620:	b580      	push	{r7, lr}
 800a622:	b084      	sub	sp, #16
 800a624:	af00      	add	r7, sp, #0
 800a626:	4603      	mov	r3, r0
 800a628:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a62a:	79fb      	ldrb	r3, [r7, #7]
 800a62c:	2b0c      	cmp	r3, #12
 800a62e:	d908      	bls.n	800a642 <memp_malloc+0x22>
 800a630:	4b0a      	ldr	r3, [pc, #40]	; (800a65c <memp_malloc+0x3c>)
 800a632:	f240 1257 	movw	r2, #343	; 0x157
 800a636:	490a      	ldr	r1, [pc, #40]	; (800a660 <memp_malloc+0x40>)
 800a638:	480a      	ldr	r0, [pc, #40]	; (800a664 <memp_malloc+0x44>)
 800a63a:	f00c fc19 	bl	8016e70 <iprintf>
 800a63e:	2300      	movs	r3, #0
 800a640:	e008      	b.n	800a654 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	4a08      	ldr	r2, [pc, #32]	; (800a668 <memp_malloc+0x48>)
 800a646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7ff ffb6 	bl	800a5bc <do_memp_malloc_pool>
 800a650:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a652:	68fb      	ldr	r3, [r7, #12]
}
 800a654:	4618      	mov	r0, r3
 800a656:	3710      	adds	r7, #16
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}
 800a65c:	08019190 	.word	0x08019190
 800a660:	08019220 	.word	0x08019220
 800a664:	080191e4 	.word	0x080191e4
 800a668:	0801bd18 	.word	0x0801bd18

0800a66c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b084      	sub	sp, #16
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	f003 0303 	and.w	r3, r3, #3
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d006      	beq.n	800a68e <do_memp_free_pool+0x22>
 800a680:	4b0d      	ldr	r3, [pc, #52]	; (800a6b8 <do_memp_free_pool+0x4c>)
 800a682:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a686:	490d      	ldr	r1, [pc, #52]	; (800a6bc <do_memp_free_pool+0x50>)
 800a688:	480d      	ldr	r0, [pc, #52]	; (800a6c0 <do_memp_free_pool+0x54>)
 800a68a:	f00c fbf1 	bl	8016e70 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800a692:	f00c fb6d 	bl	8016d70 <sys_arch_protect>
 800a696:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	689b      	ldr	r3, [r3, #8]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	68fa      	ldr	r2, [r7, #12]
 800a6a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800a6aa:	68b8      	ldr	r0, [r7, #8]
 800a6ac:	f00c fb6e 	bl	8016d8c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800a6b0:	bf00      	nop
 800a6b2:	3710      	adds	r7, #16
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	bd80      	pop	{r7, pc}
 800a6b8:	08019190 	.word	0x08019190
 800a6bc:	08019240 	.word	0x08019240
 800a6c0:	080191e4 	.word	0x080191e4

0800a6c4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	4603      	mov	r3, r0
 800a6cc:	6039      	str	r1, [r7, #0]
 800a6ce:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a6d0:	79fb      	ldrb	r3, [r7, #7]
 800a6d2:	2b0c      	cmp	r3, #12
 800a6d4:	d907      	bls.n	800a6e6 <memp_free+0x22>
 800a6d6:	4b0c      	ldr	r3, [pc, #48]	; (800a708 <memp_free+0x44>)
 800a6d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a6dc:	490b      	ldr	r1, [pc, #44]	; (800a70c <memp_free+0x48>)
 800a6de:	480c      	ldr	r0, [pc, #48]	; (800a710 <memp_free+0x4c>)
 800a6e0:	f00c fbc6 	bl	8016e70 <iprintf>
 800a6e4:	e00c      	b.n	800a700 <memp_free+0x3c>

  if (mem == NULL) {
 800a6e6:	683b      	ldr	r3, [r7, #0]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d008      	beq.n	800a6fe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a6ec:	79fb      	ldrb	r3, [r7, #7]
 800a6ee:	4a09      	ldr	r2, [pc, #36]	; (800a714 <memp_free+0x50>)
 800a6f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6f4:	6839      	ldr	r1, [r7, #0]
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	f7ff ffb8 	bl	800a66c <do_memp_free_pool>
 800a6fc:	e000      	b.n	800a700 <memp_free+0x3c>
    return;
 800a6fe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a700:	3708      	adds	r7, #8
 800a702:	46bd      	mov	sp, r7
 800a704:	bd80      	pop	{r7, pc}
 800a706:	bf00      	nop
 800a708:	08019190 	.word	0x08019190
 800a70c:	08019260 	.word	0x08019260
 800a710:	080191e4 	.word	0x080191e4
 800a714:	0801bd18 	.word	0x0801bd18

0800a718 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a718:	b480      	push	{r7}
 800a71a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a71c:	bf00      	nop
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
	...

0800a728 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
 800a734:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d108      	bne.n	800a74e <netif_add+0x26>
 800a73c:	4b5b      	ldr	r3, [pc, #364]	; (800a8ac <netif_add+0x184>)
 800a73e:	f240 1227 	movw	r2, #295	; 0x127
 800a742:	495b      	ldr	r1, [pc, #364]	; (800a8b0 <netif_add+0x188>)
 800a744:	485b      	ldr	r0, [pc, #364]	; (800a8b4 <netif_add+0x18c>)
 800a746:	f00c fb93 	bl	8016e70 <iprintf>
 800a74a:	2300      	movs	r3, #0
 800a74c:	e0a9      	b.n	800a8a2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a750:	2b00      	cmp	r3, #0
 800a752:	d108      	bne.n	800a766 <netif_add+0x3e>
 800a754:	4b55      	ldr	r3, [pc, #340]	; (800a8ac <netif_add+0x184>)
 800a756:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a75a:	4957      	ldr	r1, [pc, #348]	; (800a8b8 <netif_add+0x190>)
 800a75c:	4855      	ldr	r0, [pc, #340]	; (800a8b4 <netif_add+0x18c>)
 800a75e:	f00c fb87 	bl	8016e70 <iprintf>
 800a762:	2300      	movs	r3, #0
 800a764:	e09d      	b.n	800a8a2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a76c:	4b53      	ldr	r3, [pc, #332]	; (800a8bc <netif_add+0x194>)
 800a76e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d101      	bne.n	800a77a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a776:	4b51      	ldr	r3, [pc, #324]	; (800a8bc <netif_add+0x194>)
 800a778:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d101      	bne.n	800a784 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a780:	4b4e      	ldr	r3, [pc, #312]	; (800a8bc <netif_add+0x194>)
 800a782:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	2200      	movs	r2, #0
 800a788:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2200      	movs	r2, #0
 800a78e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	2200      	movs	r2, #0
 800a794:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	4a49      	ldr	r2, [pc, #292]	; (800a8c0 <netif_add+0x198>)
 800a79a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	2200      	movs	r2, #0
 800a7a6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3324      	adds	r3, #36	; 0x24
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	2100      	movs	r1, #0
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f00c fb54 	bl	8016e60 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	6a3a      	ldr	r2, [r7, #32]
 800a7c2:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a7c4:	4b3f      	ldr	r3, [pc, #252]	; (800a8c4 <netif_add+0x19c>)
 800a7c6:	781a      	ldrb	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7d2:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	68b9      	ldr	r1, [r7, #8]
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 f914 	bl	800aa08 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a7e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	4798      	blx	r3
 800a7e6:	4603      	mov	r3, r0
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d001      	beq.n	800a7f0 <netif_add+0xc8>
    return NULL;
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	e058      	b.n	800a8a2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a7f6:	2bff      	cmp	r3, #255	; 0xff
 800a7f8:	d103      	bne.n	800a802 <netif_add+0xda>
        netif->num = 0;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a806:	4b30      	ldr	r3, [pc, #192]	; (800a8c8 <netif_add+0x1a0>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	e02b      	b.n	800a866 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a80e:	697a      	ldr	r2, [r7, #20]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	429a      	cmp	r2, r3
 800a814:	d106      	bne.n	800a824 <netif_add+0xfc>
 800a816:	4b25      	ldr	r3, [pc, #148]	; (800a8ac <netif_add+0x184>)
 800a818:	f240 128b 	movw	r2, #395	; 0x18b
 800a81c:	492b      	ldr	r1, [pc, #172]	; (800a8cc <netif_add+0x1a4>)
 800a81e:	4825      	ldr	r0, [pc, #148]	; (800a8b4 <netif_add+0x18c>)
 800a820:	f00c fb26 	bl	8016e70 <iprintf>
        num_netifs++;
 800a824:	693b      	ldr	r3, [r7, #16]
 800a826:	3301      	adds	r3, #1
 800a828:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2bff      	cmp	r3, #255	; 0xff
 800a82e:	dd06      	ble.n	800a83e <netif_add+0x116>
 800a830:	4b1e      	ldr	r3, [pc, #120]	; (800a8ac <netif_add+0x184>)
 800a832:	f240 128d 	movw	r2, #397	; 0x18d
 800a836:	4926      	ldr	r1, [pc, #152]	; (800a8d0 <netif_add+0x1a8>)
 800a838:	481e      	ldr	r0, [pc, #120]	; (800a8b4 <netif_add+0x18c>)
 800a83a:	f00c fb19 	bl	8016e70 <iprintf>
        if (netif2->num == netif->num) {
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a84a:	429a      	cmp	r2, r3
 800a84c:	d108      	bne.n	800a860 <netif_add+0x138>
          netif->num++;
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a854:	3301      	adds	r3, #1
 800a856:	b2da      	uxtb	r2, r3
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800a85e:	e005      	b.n	800a86c <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	617b      	str	r3, [r7, #20]
 800a866:	697b      	ldr	r3, [r7, #20]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d1d0      	bne.n	800a80e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d1be      	bne.n	800a7f0 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a878:	2bfe      	cmp	r3, #254	; 0xfe
 800a87a:	d103      	bne.n	800a884 <netif_add+0x15c>
    netif_num = 0;
 800a87c:	4b11      	ldr	r3, [pc, #68]	; (800a8c4 <netif_add+0x19c>)
 800a87e:	2200      	movs	r2, #0
 800a880:	701a      	strb	r2, [r3, #0]
 800a882:	e006      	b.n	800a892 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a88a:	3301      	adds	r3, #1
 800a88c:	b2da      	uxtb	r2, r3
 800a88e:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <netif_add+0x19c>)
 800a890:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a892:	4b0d      	ldr	r3, [pc, #52]	; (800a8c8 <netif_add+0x1a0>)
 800a894:	681a      	ldr	r2, [r3, #0]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a89a:	4a0b      	ldr	r2, [pc, #44]	; (800a8c8 <netif_add+0x1a0>)
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	3718      	adds	r7, #24
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	bf00      	nop
 800a8ac:	0801927c 	.word	0x0801927c
 800a8b0:	08019310 	.word	0x08019310
 800a8b4:	080192cc 	.word	0x080192cc
 800a8b8:	0801932c 	.word	0x0801932c
 800a8bc:	0801bd9c 	.word	0x0801bd9c
 800a8c0:	0800aceb 	.word	0x0800aceb
 800a8c4:	200085a8 	.word	0x200085a8
 800a8c8:	2000f02c 	.word	0x2000f02c
 800a8cc:	08019350 	.word	0x08019350
 800a8d0:	08019364 	.word	0x08019364

0800a8d4 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a8d4:	b580      	push	{r7, lr}
 800a8d6:	b082      	sub	sp, #8
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a8de:	6839      	ldr	r1, [r7, #0]
 800a8e0:	6878      	ldr	r0, [r7, #4]
 800a8e2:	f002 fe63 	bl	800d5ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a8e6:	6839      	ldr	r1, [r7, #0]
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f007 fed9 	bl	80126a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a8ee:	bf00      	nop
 800a8f0:	3708      	adds	r7, #8
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
	...

0800a8f8 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d106      	bne.n	800a918 <netif_do_set_ipaddr+0x20>
 800a90a:	4b1d      	ldr	r3, [pc, #116]	; (800a980 <netif_do_set_ipaddr+0x88>)
 800a90c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a910:	491c      	ldr	r1, [pc, #112]	; (800a984 <netif_do_set_ipaddr+0x8c>)
 800a912:	481d      	ldr	r0, [pc, #116]	; (800a988 <netif_do_set_ipaddr+0x90>)
 800a914:	f00c faac 	bl	8016e70 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d106      	bne.n	800a92c <netif_do_set_ipaddr+0x34>
 800a91e:	4b18      	ldr	r3, [pc, #96]	; (800a980 <netif_do_set_ipaddr+0x88>)
 800a920:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a924:	4917      	ldr	r1, [pc, #92]	; (800a984 <netif_do_set_ipaddr+0x8c>)
 800a926:	4818      	ldr	r0, [pc, #96]	; (800a988 <netif_do_set_ipaddr+0x90>)
 800a928:	f00c faa2 	bl	8016e70 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a92c:	68bb      	ldr	r3, [r7, #8]
 800a92e:	681a      	ldr	r2, [r3, #0]
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	3304      	adds	r3, #4
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d01c      	beq.n	800a974 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	3304      	adds	r3, #4
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a94a:	f107 0314 	add.w	r3, r7, #20
 800a94e:	4619      	mov	r1, r3
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f7ff ffbf 	bl	800a8d4 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d002      	beq.n	800a962 <netif_do_set_ipaddr+0x6a>
 800a95c:	68bb      	ldr	r3, [r7, #8]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	e000      	b.n	800a964 <netif_do_set_ipaddr+0x6c>
 800a962:	2300      	movs	r3, #0
 800a964:	68fa      	ldr	r2, [r7, #12]
 800a966:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a968:	2101      	movs	r1, #1
 800a96a:	68f8      	ldr	r0, [r7, #12]
 800a96c:	f000 f8d2 	bl	800ab14 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a974:	2300      	movs	r3, #0
}
 800a976:	4618      	mov	r0, r3
 800a978:	3718      	adds	r7, #24
 800a97a:	46bd      	mov	sp, r7
 800a97c:	bd80      	pop	{r7, pc}
 800a97e:	bf00      	nop
 800a980:	0801927c 	.word	0x0801927c
 800a984:	08019394 	.word	0x08019394
 800a988:	080192cc 	.word	0x080192cc

0800a98c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a98c:	b480      	push	{r7}
 800a98e:	b085      	sub	sp, #20
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	681a      	ldr	r2, [r3, #0]
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	3308      	adds	r3, #8
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d00a      	beq.n	800a9bc <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d002      	beq.n	800a9b2 <netif_do_set_netmask+0x26>
 800a9ac:	68bb      	ldr	r3, [r7, #8]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	e000      	b.n	800a9b4 <netif_do_set_netmask+0x28>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	e000      	b.n	800a9be <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3714      	adds	r7, #20
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c8:	4770      	bx	lr

0800a9ca <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a9ca:	b480      	push	{r7}
 800a9cc:	b085      	sub	sp, #20
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	60f8      	str	r0, [r7, #12]
 800a9d2:	60b9      	str	r1, [r7, #8]
 800a9d4:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	330c      	adds	r3, #12
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d00a      	beq.n	800a9fa <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d002      	beq.n	800a9f0 <netif_do_set_gw+0x26>
 800a9ea:	68bb      	ldr	r3, [r7, #8]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	e000      	b.n	800a9f2 <netif_do_set_gw+0x28>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3714      	adds	r7, #20
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60f8      	str	r0, [r7, #12]
 800aa10:	60b9      	str	r1, [r7, #8]
 800aa12:	607a      	str	r2, [r7, #4]
 800aa14:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa16:	2300      	movs	r3, #0
 800aa18:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa1e:	68bb      	ldr	r3, [r7, #8]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d101      	bne.n	800aa28 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aa24:	4b1c      	ldr	r3, [pc, #112]	; (800aa98 <netif_set_addr+0x90>)
 800aa26:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d101      	bne.n	800aa32 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aa2e:	4b1a      	ldr	r3, [pc, #104]	; (800aa98 <netif_set_addr+0x90>)
 800aa30:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d101      	bne.n	800aa3c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aa38:	4b17      	ldr	r3, [pc, #92]	; (800aa98 <netif_set_addr+0x90>)
 800aa3a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d003      	beq.n	800aa4a <netif_set_addr+0x42>
 800aa42:	68bb      	ldr	r3, [r7, #8]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d101      	bne.n	800aa4e <netif_set_addr+0x46>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	e000      	b.n	800aa50 <netif_set_addr+0x48>
 800aa4e:	2300      	movs	r3, #0
 800aa50:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aa52:	697b      	ldr	r3, [r7, #20]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d006      	beq.n	800aa66 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa58:	f107 0310 	add.w	r3, r7, #16
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	68b9      	ldr	r1, [r7, #8]
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f7ff ff49 	bl	800a8f8 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	6879      	ldr	r1, [r7, #4]
 800aa6a:	68f8      	ldr	r0, [r7, #12]
 800aa6c:	f7ff ff8e 	bl	800a98c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aa70:	69ba      	ldr	r2, [r7, #24]
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	f7ff ffa8 	bl	800a9ca <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d106      	bne.n	800aa8e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa80:	f107 0310 	add.w	r3, r7, #16
 800aa84:	461a      	mov	r2, r3
 800aa86:	68b9      	ldr	r1, [r7, #8]
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f7ff ff35 	bl	800a8f8 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aa8e:	bf00      	nop
 800aa90:	3720      	adds	r7, #32
 800aa92:	46bd      	mov	sp, r7
 800aa94:	bd80      	pop	{r7, pc}
 800aa96:	bf00      	nop
 800aa98:	0801bd9c 	.word	0x0801bd9c

0800aa9c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aaa4:	4a04      	ldr	r2, [pc, #16]	; (800aab8 <netif_set_default+0x1c>)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aaaa:	bf00      	nop
 800aaac:	370c      	adds	r7, #12
 800aaae:	46bd      	mov	sp, r7
 800aab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab4:	4770      	bx	lr
 800aab6:	bf00      	nop
 800aab8:	2000f030 	.word	0x2000f030

0800aabc <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aabc:	b580      	push	{r7, lr}
 800aabe:	b082      	sub	sp, #8
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d107      	bne.n	800aada <netif_set_up+0x1e>
 800aaca:	4b0f      	ldr	r3, [pc, #60]	; (800ab08 <netif_set_up+0x4c>)
 800aacc:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aad0:	490e      	ldr	r1, [pc, #56]	; (800ab0c <netif_set_up+0x50>)
 800aad2:	480f      	ldr	r0, [pc, #60]	; (800ab10 <netif_set_up+0x54>)
 800aad4:	f00c f9cc 	bl	8016e70 <iprintf>
 800aad8:	e013      	b.n	800ab02 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aae0:	f003 0301 	and.w	r3, r3, #1
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10c      	bne.n	800ab02 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800aafa:	2103      	movs	r1, #3
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f809 	bl	800ab14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}
 800ab08:	0801927c 	.word	0x0801927c
 800ab0c:	08019404 	.word	0x08019404
 800ab10:	080192cc 	.word	0x080192cc

0800ab14 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b082      	sub	sp, #8
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d106      	bne.n	800ab34 <netif_issue_reports+0x20>
 800ab26:	4b18      	ldr	r3, [pc, #96]	; (800ab88 <netif_issue_reports+0x74>)
 800ab28:	f240 326d 	movw	r2, #877	; 0x36d
 800ab2c:	4917      	ldr	r1, [pc, #92]	; (800ab8c <netif_issue_reports+0x78>)
 800ab2e:	4818      	ldr	r0, [pc, #96]	; (800ab90 <netif_issue_reports+0x7c>)
 800ab30:	f00c f99e 	bl	8016e70 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab3a:	f003 0304 	and.w	r3, r3, #4
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d01e      	beq.n	800ab80 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab48:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d017      	beq.n	800ab80 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab50:	78fb      	ldrb	r3, [r7, #3]
 800ab52:	f003 0301 	and.w	r3, r3, #1
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d013      	beq.n	800ab82 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	3304      	adds	r3, #4
 800ab5e:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d00e      	beq.n	800ab82 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ab6a:	f003 0308 	and.w	r3, r3, #8
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d007      	beq.n	800ab82 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3304      	adds	r3, #4
 800ab76:	4619      	mov	r1, r3
 800ab78:	6878      	ldr	r0, [r7, #4]
 800ab7a:	f00a fb91 	bl	80152a0 <etharp_request>
 800ab7e:	e000      	b.n	800ab82 <netif_issue_reports+0x6e>
    return;
 800ab80:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ab82:	3708      	adds	r7, #8
 800ab84:	46bd      	mov	sp, r7
 800ab86:	bd80      	pop	{r7, pc}
 800ab88:	0801927c 	.word	0x0801927c
 800ab8c:	08019420 	.word	0x08019420
 800ab90:	080192cc 	.word	0x080192cc

0800ab94 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d107      	bne.n	800abb2 <netif_set_down+0x1e>
 800aba2:	4b12      	ldr	r3, [pc, #72]	; (800abec <netif_set_down+0x58>)
 800aba4:	f240 329b 	movw	r2, #923	; 0x39b
 800aba8:	4911      	ldr	r1, [pc, #68]	; (800abf0 <netif_set_down+0x5c>)
 800abaa:	4812      	ldr	r0, [pc, #72]	; (800abf4 <netif_set_down+0x60>)
 800abac:	f00c f960 	bl	8016e70 <iprintf>
 800abb0:	e019      	b.n	800abe6 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abb8:	f003 0301 	and.w	r3, r3, #1
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d012      	beq.n	800abe6 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abc6:	f023 0301 	bic.w	r3, r3, #1
 800abca:	b2da      	uxtb	r2, r3
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800abd8:	f003 0308 	and.w	r3, r3, #8
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d002      	beq.n	800abe6 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800abe0:	6878      	ldr	r0, [r7, #4]
 800abe2:	f009 ff17 	bl	8014a14 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800abe6:	3708      	adds	r7, #8
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}
 800abec:	0801927c 	.word	0x0801927c
 800abf0:	08019444 	.word	0x08019444
 800abf4:	080192cc 	.word	0x080192cc

0800abf8 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d107      	bne.n	800ac16 <netif_set_link_up+0x1e>
 800ac06:	4b15      	ldr	r3, [pc, #84]	; (800ac5c <netif_set_link_up+0x64>)
 800ac08:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ac0c:	4914      	ldr	r1, [pc, #80]	; (800ac60 <netif_set_link_up+0x68>)
 800ac0e:	4815      	ldr	r0, [pc, #84]	; (800ac64 <netif_set_link_up+0x6c>)
 800ac10:	f00c f92e 	bl	8016e70 <iprintf>
 800ac14:	e01e      	b.n	800ac54 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac1c:	f003 0304 	and.w	r3, r3, #4
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d117      	bne.n	800ac54 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac2a:	f043 0304 	orr.w	r3, r3, #4
 800ac2e:	b2da      	uxtb	r2, r3
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f008 f95c 	bl	8012ef4 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ac3c:	2103      	movs	r1, #3
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7ff ff68 	bl	800ab14 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	69db      	ldr	r3, [r3, #28]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d003      	beq.n	800ac54 <netif_set_link_up+0x5c>
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	69db      	ldr	r3, [r3, #28]
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ac54:	3708      	adds	r7, #8
 800ac56:	46bd      	mov	sp, r7
 800ac58:	bd80      	pop	{r7, pc}
 800ac5a:	bf00      	nop
 800ac5c:	0801927c 	.word	0x0801927c
 800ac60:	08019464 	.word	0x08019464
 800ac64:	080192cc 	.word	0x080192cc

0800ac68 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d107      	bne.n	800ac86 <netif_set_link_down+0x1e>
 800ac76:	4b11      	ldr	r3, [pc, #68]	; (800acbc <netif_set_link_down+0x54>)
 800ac78:	f240 4206 	movw	r2, #1030	; 0x406
 800ac7c:	4910      	ldr	r1, [pc, #64]	; (800acc0 <netif_set_link_down+0x58>)
 800ac7e:	4811      	ldr	r0, [pc, #68]	; (800acc4 <netif_set_link_down+0x5c>)
 800ac80:	f00c f8f6 	bl	8016e70 <iprintf>
 800ac84:	e017      	b.n	800acb6 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d010      	beq.n	800acb6 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800ac9a:	f023 0304 	bic.w	r3, r3, #4
 800ac9e:	b2da      	uxtb	r2, r3
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	69db      	ldr	r3, [r3, #28]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d003      	beq.n	800acb6 <netif_set_link_down+0x4e>
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800acb6:	3708      	adds	r7, #8
 800acb8:	46bd      	mov	sp, r7
 800acba:	bd80      	pop	{r7, pc}
 800acbc:	0801927c 	.word	0x0801927c
 800acc0:	08019488 	.word	0x08019488
 800acc4:	080192cc 	.word	0x080192cc

0800acc8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800acc8:	b480      	push	{r7}
 800acca:	b083      	sub	sp, #12
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d002      	beq.n	800acde <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	683a      	ldr	r2, [r7, #0]
 800acdc:	61da      	str	r2, [r3, #28]
  }
}
 800acde:	bf00      	nop
 800ace0:	370c      	adds	r7, #12
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr

0800acea <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800acea:	b480      	push	{r7}
 800acec:	b085      	sub	sp, #20
 800acee:	af00      	add	r7, sp, #0
 800acf0:	60f8      	str	r0, [r7, #12]
 800acf2:	60b9      	str	r1, [r7, #8]
 800acf4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800acf6:	f06f 030b 	mvn.w	r3, #11
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3714      	adds	r7, #20
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b085      	sub	sp, #20
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	4603      	mov	r3, r0
 800ad10:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d013      	beq.n	800ad40 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ad18:	4b0d      	ldr	r3, [pc, #52]	; (800ad50 <netif_get_by_index+0x48>)
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	60fb      	str	r3, [r7, #12]
 800ad1e:	e00c      	b.n	800ad3a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ad26:	3301      	adds	r3, #1
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	79fa      	ldrb	r2, [r7, #7]
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	d101      	bne.n	800ad34 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	e006      	b.n	800ad42 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	60fb      	str	r3, [r7, #12]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d1ef      	bne.n	800ad20 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	2000f02c 	.word	0x2000f02c

0800ad54 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b082      	sub	sp, #8
 800ad58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800ad5a:	f00c f809 	bl	8016d70 <sys_arch_protect>
 800ad5e:	6038      	str	r0, [r7, #0]
 800ad60:	4b0d      	ldr	r3, [pc, #52]	; (800ad98 <pbuf_free_ooseq+0x44>)
 800ad62:	2200      	movs	r2, #0
 800ad64:	701a      	strb	r2, [r3, #0]
 800ad66:	6838      	ldr	r0, [r7, #0]
 800ad68:	f00c f810 	bl	8016d8c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ad6c:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <pbuf_free_ooseq+0x48>)
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	607b      	str	r3, [r7, #4]
 800ad72:	e00a      	b.n	800ad8a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d003      	beq.n	800ad84 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f002 fc53 	bl	800d628 <tcp_free_ooseq>
      return;
 800ad82:	e005      	b.n	800ad90 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	68db      	ldr	r3, [r3, #12]
 800ad88:	607b      	str	r3, [r7, #4]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d1f1      	bne.n	800ad74 <pbuf_free_ooseq+0x20>
    }
  }
}
 800ad90:	3708      	adds	r7, #8
 800ad92:	46bd      	mov	sp, r7
 800ad94:	bd80      	pop	{r7, pc}
 800ad96:	bf00      	nop
 800ad98:	2000f034 	.word	0x2000f034
 800ad9c:	2000f03c 	.word	0x2000f03c

0800ada0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b082      	sub	sp, #8
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800ada8:	f7ff ffd4 	bl	800ad54 <pbuf_free_ooseq>
}
 800adac:	bf00      	nop
 800adae:	3708      	adds	r7, #8
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b082      	sub	sp, #8
 800adb8:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800adba:	f00b ffd9 	bl	8016d70 <sys_arch_protect>
 800adbe:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800adc0:	4b0f      	ldr	r3, [pc, #60]	; (800ae00 <pbuf_pool_is_empty+0x4c>)
 800adc2:	781b      	ldrb	r3, [r3, #0]
 800adc4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800adc6:	4b0e      	ldr	r3, [pc, #56]	; (800ae00 <pbuf_pool_is_empty+0x4c>)
 800adc8:	2201      	movs	r2, #1
 800adca:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800adcc:	6878      	ldr	r0, [r7, #4]
 800adce:	f00b ffdd 	bl	8016d8c <sys_arch_unprotect>

  if (!queued) {
 800add2:	78fb      	ldrb	r3, [r7, #3]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d10f      	bne.n	800adf8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800add8:	2100      	movs	r1, #0
 800adda:	480a      	ldr	r0, [pc, #40]	; (800ae04 <pbuf_pool_is_empty+0x50>)
 800addc:	f7fe feca 	bl	8009b74 <tcpip_try_callback>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d008      	beq.n	800adf8 <pbuf_pool_is_empty+0x44>
 800ade6:	f00b ffc3 	bl	8016d70 <sys_arch_protect>
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	4b04      	ldr	r3, [pc, #16]	; (800ae00 <pbuf_pool_is_empty+0x4c>)
 800adee:	2200      	movs	r2, #0
 800adf0:	701a      	strb	r2, [r3, #0]
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f00b ffca 	bl	8016d8c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800adf8:	bf00      	nop
 800adfa:	3708      	adds	r7, #8
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	2000f034 	.word	0x2000f034
 800ae04:	0800ada1 	.word	0x0800ada1

0800ae08 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	60f8      	str	r0, [r7, #12]
 800ae10:	60b9      	str	r1, [r7, #8]
 800ae12:	4611      	mov	r1, r2
 800ae14:	461a      	mov	r2, r3
 800ae16:	460b      	mov	r3, r1
 800ae18:	80fb      	strh	r3, [r7, #6]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2200      	movs	r2, #0
 800ae22:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	68ba      	ldr	r2, [r7, #8]
 800ae28:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	88fa      	ldrh	r2, [r7, #6]
 800ae2e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	88ba      	ldrh	r2, [r7, #4]
 800ae34:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ae36:	8b3b      	ldrh	r3, [r7, #24]
 800ae38:	b2da      	uxtb	r2, r3
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	7f3a      	ldrb	r2, [r7, #28]
 800ae42:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	2201      	movs	r2, #1
 800ae48:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	2200      	movs	r2, #0
 800ae4e:	73da      	strb	r2, [r3, #15]
}
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ae5c:	b580      	push	{r7, lr}
 800ae5e:	b08c      	sub	sp, #48	; 0x30
 800ae60:	af02      	add	r7, sp, #8
 800ae62:	4603      	mov	r3, r0
 800ae64:	71fb      	strb	r3, [r7, #7]
 800ae66:	460b      	mov	r3, r1
 800ae68:	80bb      	strh	r3, [r7, #4]
 800ae6a:	4613      	mov	r3, r2
 800ae6c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ae6e:	79fb      	ldrb	r3, [r7, #7]
 800ae70:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ae72:	887b      	ldrh	r3, [r7, #2]
 800ae74:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae78:	d07f      	beq.n	800af7a <pbuf_alloc+0x11e>
 800ae7a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ae7e:	f300 80c8 	bgt.w	800b012 <pbuf_alloc+0x1b6>
 800ae82:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae86:	d010      	beq.n	800aeaa <pbuf_alloc+0x4e>
 800ae88:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ae8c:	f300 80c1 	bgt.w	800b012 <pbuf_alloc+0x1b6>
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d002      	beq.n	800ae9a <pbuf_alloc+0x3e>
 800ae94:	2b41      	cmp	r3, #65	; 0x41
 800ae96:	f040 80bc 	bne.w	800b012 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ae9a:	887a      	ldrh	r2, [r7, #2]
 800ae9c:	88bb      	ldrh	r3, [r7, #4]
 800ae9e:	4619      	mov	r1, r3
 800aea0:	2000      	movs	r0, #0
 800aea2:	f000 f8d1 	bl	800b048 <pbuf_alloc_reference>
 800aea6:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800aea8:	e0bd      	b.n	800b026 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800aeb2:	88bb      	ldrh	r3, [r7, #4]
 800aeb4:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800aeb6:	200c      	movs	r0, #12
 800aeb8:	f7ff fbb2 	bl	800a620 <memp_malloc>
 800aebc:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800aebe:	693b      	ldr	r3, [r7, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d109      	bne.n	800aed8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800aec4:	f7ff ff76 	bl	800adb4 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800aec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d002      	beq.n	800aed4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800aece:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aed0:	f000 faa8 	bl	800b424 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800aed4:	2300      	movs	r3, #0
 800aed6:	e0a7      	b.n	800b028 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800aed8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeda:	3303      	adds	r3, #3
 800aedc:	b29b      	uxth	r3, r3
 800aede:	f023 0303 	bic.w	r3, r3, #3
 800aee2:	b29b      	uxth	r3, r3
 800aee4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	8b7a      	ldrh	r2, [r7, #26]
 800aeec:	4293      	cmp	r3, r2
 800aeee:	bf28      	it	cs
 800aef0:	4613      	movcs	r3, r2
 800aef2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800aef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aef6:	3310      	adds	r3, #16
 800aef8:	693a      	ldr	r2, [r7, #16]
 800aefa:	4413      	add	r3, r2
 800aefc:	3303      	adds	r3, #3
 800aefe:	f023 0303 	bic.w	r3, r3, #3
 800af02:	4618      	mov	r0, r3
 800af04:	89f9      	ldrh	r1, [r7, #14]
 800af06:	8b7a      	ldrh	r2, [r7, #26]
 800af08:	2300      	movs	r3, #0
 800af0a:	9301      	str	r3, [sp, #4]
 800af0c:	887b      	ldrh	r3, [r7, #2]
 800af0e:	9300      	str	r3, [sp, #0]
 800af10:	460b      	mov	r3, r1
 800af12:	4601      	mov	r1, r0
 800af14:	6938      	ldr	r0, [r7, #16]
 800af16:	f7ff ff77 	bl	800ae08 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f003 0303 	and.w	r3, r3, #3
 800af22:	2b00      	cmp	r3, #0
 800af24:	d006      	beq.n	800af34 <pbuf_alloc+0xd8>
 800af26:	4b42      	ldr	r3, [pc, #264]	; (800b030 <pbuf_alloc+0x1d4>)
 800af28:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af2c:	4941      	ldr	r1, [pc, #260]	; (800b034 <pbuf_alloc+0x1d8>)
 800af2e:	4842      	ldr	r0, [pc, #264]	; (800b038 <pbuf_alloc+0x1dc>)
 800af30:	f00b ff9e 	bl	8016e70 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800af34:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af36:	3303      	adds	r3, #3
 800af38:	f023 0303 	bic.w	r3, r3, #3
 800af3c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800af40:	d106      	bne.n	800af50 <pbuf_alloc+0xf4>
 800af42:	4b3b      	ldr	r3, [pc, #236]	; (800b030 <pbuf_alloc+0x1d4>)
 800af44:	f44f 7281 	mov.w	r2, #258	; 0x102
 800af48:	493c      	ldr	r1, [pc, #240]	; (800b03c <pbuf_alloc+0x1e0>)
 800af4a:	483b      	ldr	r0, [pc, #236]	; (800b038 <pbuf_alloc+0x1dc>)
 800af4c:	f00b ff90 	bl	8016e70 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800af50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af52:	2b00      	cmp	r3, #0
 800af54:	d102      	bne.n	800af5c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800af56:	693b      	ldr	r3, [r7, #16]
 800af58:	627b      	str	r3, [r7, #36]	; 0x24
 800af5a:	e002      	b.n	800af62 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800af5c:	69fb      	ldr	r3, [r7, #28]
 800af5e:	693a      	ldr	r2, [r7, #16]
 800af60:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800af66:	8b7a      	ldrh	r2, [r7, #26]
 800af68:	89fb      	ldrh	r3, [r7, #14]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800af6e:	2300      	movs	r3, #0
 800af70:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800af72:	8b7b      	ldrh	r3, [r7, #26]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d19e      	bne.n	800aeb6 <pbuf_alloc+0x5a>
      break;
 800af78:	e055      	b.n	800b026 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800af7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800af7c:	3303      	adds	r3, #3
 800af7e:	b29b      	uxth	r3, r3
 800af80:	f023 0303 	bic.w	r3, r3, #3
 800af84:	b29a      	uxth	r2, r3
 800af86:	88bb      	ldrh	r3, [r7, #4]
 800af88:	3303      	adds	r3, #3
 800af8a:	b29b      	uxth	r3, r3
 800af8c:	f023 0303 	bic.w	r3, r3, #3
 800af90:	b29b      	uxth	r3, r3
 800af92:	4413      	add	r3, r2
 800af94:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800af96:	8b3b      	ldrh	r3, [r7, #24]
 800af98:	3310      	adds	r3, #16
 800af9a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800af9c:	8b3a      	ldrh	r2, [r7, #24]
 800af9e:	88bb      	ldrh	r3, [r7, #4]
 800afa0:	3303      	adds	r3, #3
 800afa2:	f023 0303 	bic.w	r3, r3, #3
 800afa6:	429a      	cmp	r2, r3
 800afa8:	d306      	bcc.n	800afb8 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800afaa:	8afa      	ldrh	r2, [r7, #22]
 800afac:	88bb      	ldrh	r3, [r7, #4]
 800afae:	3303      	adds	r3, #3
 800afb0:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800afb4:	429a      	cmp	r2, r3
 800afb6:	d201      	bcs.n	800afbc <pbuf_alloc+0x160>
        return NULL;
 800afb8:	2300      	movs	r3, #0
 800afba:	e035      	b.n	800b028 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800afbc:	8afb      	ldrh	r3, [r7, #22]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff f9ac 	bl	800a31c <mem_malloc>
 800afc4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800afc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d101      	bne.n	800afd0 <pbuf_alloc+0x174>
        return NULL;
 800afcc:	2300      	movs	r3, #0
 800afce:	e02b      	b.n	800b028 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800afd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800afd2:	3310      	adds	r3, #16
 800afd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afd6:	4413      	add	r3, r2
 800afd8:	3303      	adds	r3, #3
 800afda:	f023 0303 	bic.w	r3, r3, #3
 800afde:	4618      	mov	r0, r3
 800afe0:	88b9      	ldrh	r1, [r7, #4]
 800afe2:	88ba      	ldrh	r2, [r7, #4]
 800afe4:	2300      	movs	r3, #0
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	887b      	ldrh	r3, [r7, #2]
 800afea:	9300      	str	r3, [sp, #0]
 800afec:	460b      	mov	r3, r1
 800afee:	4601      	mov	r1, r0
 800aff0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aff2:	f7ff ff09 	bl	800ae08 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	f003 0303 	and.w	r3, r3, #3
 800affe:	2b00      	cmp	r3, #0
 800b000:	d010      	beq.n	800b024 <pbuf_alloc+0x1c8>
 800b002:	4b0b      	ldr	r3, [pc, #44]	; (800b030 <pbuf_alloc+0x1d4>)
 800b004:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b008:	490d      	ldr	r1, [pc, #52]	; (800b040 <pbuf_alloc+0x1e4>)
 800b00a:	480b      	ldr	r0, [pc, #44]	; (800b038 <pbuf_alloc+0x1dc>)
 800b00c:	f00b ff30 	bl	8016e70 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b010:	e008      	b.n	800b024 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b012:	4b07      	ldr	r3, [pc, #28]	; (800b030 <pbuf_alloc+0x1d4>)
 800b014:	f240 1227 	movw	r2, #295	; 0x127
 800b018:	490a      	ldr	r1, [pc, #40]	; (800b044 <pbuf_alloc+0x1e8>)
 800b01a:	4807      	ldr	r0, [pc, #28]	; (800b038 <pbuf_alloc+0x1dc>)
 800b01c:	f00b ff28 	bl	8016e70 <iprintf>
      return NULL;
 800b020:	2300      	movs	r3, #0
 800b022:	e001      	b.n	800b028 <pbuf_alloc+0x1cc>
      break;
 800b024:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3728      	adds	r7, #40	; 0x28
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	080194ac 	.word	0x080194ac
 800b034:	080194dc 	.word	0x080194dc
 800b038:	0801950c 	.word	0x0801950c
 800b03c:	08019534 	.word	0x08019534
 800b040:	08019568 	.word	0x08019568
 800b044:	08019594 	.word	0x08019594

0800b048 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	6078      	str	r0, [r7, #4]
 800b050:	460b      	mov	r3, r1
 800b052:	807b      	strh	r3, [r7, #2]
 800b054:	4613      	mov	r3, r2
 800b056:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b058:	883b      	ldrh	r3, [r7, #0]
 800b05a:	2b41      	cmp	r3, #65	; 0x41
 800b05c:	d009      	beq.n	800b072 <pbuf_alloc_reference+0x2a>
 800b05e:	883b      	ldrh	r3, [r7, #0]
 800b060:	2b01      	cmp	r3, #1
 800b062:	d006      	beq.n	800b072 <pbuf_alloc_reference+0x2a>
 800b064:	4b0f      	ldr	r3, [pc, #60]	; (800b0a4 <pbuf_alloc_reference+0x5c>)
 800b066:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b06a:	490f      	ldr	r1, [pc, #60]	; (800b0a8 <pbuf_alloc_reference+0x60>)
 800b06c:	480f      	ldr	r0, [pc, #60]	; (800b0ac <pbuf_alloc_reference+0x64>)
 800b06e:	f00b feff 	bl	8016e70 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b072:	200b      	movs	r0, #11
 800b074:	f7ff fad4 	bl	800a620 <memp_malloc>
 800b078:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b080:	2300      	movs	r3, #0
 800b082:	e00b      	b.n	800b09c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b084:	8879      	ldrh	r1, [r7, #2]
 800b086:	887a      	ldrh	r2, [r7, #2]
 800b088:	2300      	movs	r3, #0
 800b08a:	9301      	str	r3, [sp, #4]
 800b08c:	883b      	ldrh	r3, [r7, #0]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	460b      	mov	r3, r1
 800b092:	6879      	ldr	r1, [r7, #4]
 800b094:	68f8      	ldr	r0, [r7, #12]
 800b096:	f7ff feb7 	bl	800ae08 <pbuf_init_alloced_pbuf>
  return p;
 800b09a:	68fb      	ldr	r3, [r7, #12]
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	080194ac 	.word	0x080194ac
 800b0a8:	080195b0 	.word	0x080195b0
 800b0ac:	0801950c 	.word	0x0801950c

0800b0b0 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b0b0:	b580      	push	{r7, lr}
 800b0b2:	b088      	sub	sp, #32
 800b0b4:	af02      	add	r7, sp, #8
 800b0b6:	607b      	str	r3, [r7, #4]
 800b0b8:	4603      	mov	r3, r0
 800b0ba:	73fb      	strb	r3, [r7, #15]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	81bb      	strh	r3, [r7, #12]
 800b0c0:	4613      	mov	r3, r2
 800b0c2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b0c4:	7bfb      	ldrb	r3, [r7, #15]
 800b0c6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b0c8:	8a7b      	ldrh	r3, [r7, #18]
 800b0ca:	3303      	adds	r3, #3
 800b0cc:	f023 0203 	bic.w	r2, r3, #3
 800b0d0:	89bb      	ldrh	r3, [r7, #12]
 800b0d2:	441a      	add	r2, r3
 800b0d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d901      	bls.n	800b0de <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e018      	b.n	800b110 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d007      	beq.n	800b0f4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b0e4:	8a7b      	ldrh	r3, [r7, #18]
 800b0e6:	3303      	adds	r3, #3
 800b0e8:	f023 0303 	bic.w	r3, r3, #3
 800b0ec:	6a3a      	ldr	r2, [r7, #32]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	617b      	str	r3, [r7, #20]
 800b0f2:	e001      	b.n	800b0f8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	89b9      	ldrh	r1, [r7, #12]
 800b0fc:	89ba      	ldrh	r2, [r7, #12]
 800b0fe:	2302      	movs	r3, #2
 800b100:	9301      	str	r3, [sp, #4]
 800b102:	897b      	ldrh	r3, [r7, #10]
 800b104:	9300      	str	r3, [sp, #0]
 800b106:	460b      	mov	r3, r1
 800b108:	6979      	ldr	r1, [r7, #20]
 800b10a:	f7ff fe7d 	bl	800ae08 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b10e:	687b      	ldr	r3, [r7, #4]
}
 800b110:	4618      	mov	r0, r3
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b084      	sub	sp, #16
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	6078      	str	r0, [r7, #4]
 800b120:	460b      	mov	r3, r1
 800b122:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d106      	bne.n	800b138 <pbuf_realloc+0x20>
 800b12a:	4b3a      	ldr	r3, [pc, #232]	; (800b214 <pbuf_realloc+0xfc>)
 800b12c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b130:	4939      	ldr	r1, [pc, #228]	; (800b218 <pbuf_realloc+0x100>)
 800b132:	483a      	ldr	r0, [pc, #232]	; (800b21c <pbuf_realloc+0x104>)
 800b134:	f00b fe9c 	bl	8016e70 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	891b      	ldrh	r3, [r3, #8]
 800b13c:	887a      	ldrh	r2, [r7, #2]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d263      	bcs.n	800b20a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	891a      	ldrh	r2, [r3, #8]
 800b146:	887b      	ldrh	r3, [r7, #2]
 800b148:	1ad3      	subs	r3, r2, r3
 800b14a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b14c:	887b      	ldrh	r3, [r7, #2]
 800b14e:	817b      	strh	r3, [r7, #10]
  q = p;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b154:	e018      	b.n	800b188 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	895b      	ldrh	r3, [r3, #10]
 800b15a:	897a      	ldrh	r2, [r7, #10]
 800b15c:	1ad3      	subs	r3, r2, r3
 800b15e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	891a      	ldrh	r2, [r3, #8]
 800b164:	893b      	ldrh	r3, [r7, #8]
 800b166:	1ad3      	subs	r3, r2, r3
 800b168:	b29a      	uxth	r2, r3
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d106      	bne.n	800b188 <pbuf_realloc+0x70>
 800b17a:	4b26      	ldr	r3, [pc, #152]	; (800b214 <pbuf_realloc+0xfc>)
 800b17c:	f240 12af 	movw	r2, #431	; 0x1af
 800b180:	4927      	ldr	r1, [pc, #156]	; (800b220 <pbuf_realloc+0x108>)
 800b182:	4826      	ldr	r0, [pc, #152]	; (800b21c <pbuf_realloc+0x104>)
 800b184:	f00b fe74 	bl	8016e70 <iprintf>
  while (rem_len > q->len) {
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	895b      	ldrh	r3, [r3, #10]
 800b18c:	897a      	ldrh	r2, [r7, #10]
 800b18e:	429a      	cmp	r2, r3
 800b190:	d8e1      	bhi.n	800b156 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	7b1b      	ldrb	r3, [r3, #12]
 800b196:	f003 030f 	and.w	r3, r3, #15
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d121      	bne.n	800b1e2 <pbuf_realloc+0xca>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	895b      	ldrh	r3, [r3, #10]
 800b1a2:	897a      	ldrh	r2, [r7, #10]
 800b1a4:	429a      	cmp	r2, r3
 800b1a6:	d01c      	beq.n	800b1e2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	7b5b      	ldrb	r3, [r3, #13]
 800b1ac:	f003 0302 	and.w	r3, r3, #2
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d116      	bne.n	800b1e2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	1ad3      	subs	r3, r2, r3
 800b1bc:	b29a      	uxth	r2, r3
 800b1be:	897b      	ldrh	r3, [r7, #10]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	b29b      	uxth	r3, r3
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7fe ff9e 	bl	800a108 <mem_trim>
 800b1cc:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <pbuf_realloc+0xca>
 800b1d4:	4b0f      	ldr	r3, [pc, #60]	; (800b214 <pbuf_realloc+0xfc>)
 800b1d6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b1da:	4912      	ldr	r1, [pc, #72]	; (800b224 <pbuf_realloc+0x10c>)
 800b1dc:	480f      	ldr	r0, [pc, #60]	; (800b21c <pbuf_realloc+0x104>)
 800b1de:	f00b fe47 	bl	8016e70 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	897a      	ldrh	r2, [r7, #10]
 800b1e6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	895a      	ldrh	r2, [r3, #10]
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d004      	beq.n	800b202 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	f000 f911 	bl	800b424 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	601a      	str	r2, [r3, #0]
 800b208:	e000      	b.n	800b20c <pbuf_realloc+0xf4>
    return;
 800b20a:	bf00      	nop

}
 800b20c:	3710      	adds	r7, #16
 800b20e:	46bd      	mov	sp, r7
 800b210:	bd80      	pop	{r7, pc}
 800b212:	bf00      	nop
 800b214:	080194ac 	.word	0x080194ac
 800b218:	080195c4 	.word	0x080195c4
 800b21c:	0801950c 	.word	0x0801950c
 800b220:	080195dc 	.word	0x080195dc
 800b224:	080195f4 	.word	0x080195f4

0800b228 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b086      	sub	sp, #24
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	60f8      	str	r0, [r7, #12]
 800b230:	60b9      	str	r1, [r7, #8]
 800b232:	4613      	mov	r3, r2
 800b234:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d106      	bne.n	800b24a <pbuf_add_header_impl+0x22>
 800b23c:	4b2b      	ldr	r3, [pc, #172]	; (800b2ec <pbuf_add_header_impl+0xc4>)
 800b23e:	f240 12df 	movw	r2, #479	; 0x1df
 800b242:	492b      	ldr	r1, [pc, #172]	; (800b2f0 <pbuf_add_header_impl+0xc8>)
 800b244:	482b      	ldr	r0, [pc, #172]	; (800b2f4 <pbuf_add_header_impl+0xcc>)
 800b246:	f00b fe13 	bl	8016e70 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <pbuf_add_header_impl+0x30>
 800b250:	68bb      	ldr	r3, [r7, #8]
 800b252:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b256:	d301      	bcc.n	800b25c <pbuf_add_header_impl+0x34>
    return 1;
 800b258:	2301      	movs	r3, #1
 800b25a:	e043      	b.n	800b2e4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d101      	bne.n	800b266 <pbuf_add_header_impl+0x3e>
    return 0;
 800b262:	2300      	movs	r3, #0
 800b264:	e03e      	b.n	800b2e4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b266:	68bb      	ldr	r3, [r7, #8]
 800b268:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	891a      	ldrh	r2, [r3, #8]
 800b26e:	8a7b      	ldrh	r3, [r7, #18]
 800b270:	4413      	add	r3, r2
 800b272:	b29b      	uxth	r3, r3
 800b274:	8a7a      	ldrh	r2, [r7, #18]
 800b276:	429a      	cmp	r2, r3
 800b278:	d901      	bls.n	800b27e <pbuf_add_header_impl+0x56>
    return 1;
 800b27a:	2301      	movs	r3, #1
 800b27c:	e032      	b.n	800b2e4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	7b1b      	ldrb	r3, [r3, #12]
 800b282:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b284:	8a3b      	ldrh	r3, [r7, #16]
 800b286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00c      	beq.n	800b2a8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	685a      	ldr	r2, [r3, #4]
 800b292:	68bb      	ldr	r3, [r7, #8]
 800b294:	425b      	negs	r3, r3
 800b296:	4413      	add	r3, r2
 800b298:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	3310      	adds	r3, #16
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	429a      	cmp	r2, r3
 800b2a2:	d20d      	bcs.n	800b2c0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	e01d      	b.n	800b2e4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b2a8:	79fb      	ldrb	r3, [r7, #7]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d006      	beq.n	800b2bc <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	685a      	ldr	r2, [r3, #4]
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	425b      	negs	r3, r3
 800b2b6:	4413      	add	r3, r2
 800b2b8:	617b      	str	r3, [r7, #20]
 800b2ba:	e001      	b.n	800b2c0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e011      	b.n	800b2e4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	697a      	ldr	r2, [r7, #20]
 800b2c4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	895a      	ldrh	r2, [r3, #10]
 800b2ca:	8a7b      	ldrh	r3, [r7, #18]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	891a      	ldrh	r2, [r3, #8]
 800b2d8:	8a7b      	ldrh	r3, [r7, #18]
 800b2da:	4413      	add	r3, r2
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	811a      	strh	r2, [r3, #8]


  return 0;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	080194ac 	.word	0x080194ac
 800b2f0:	08019610 	.word	0x08019610
 800b2f4:	0801950c 	.word	0x0801950c

0800b2f8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b302:	2200      	movs	r2, #0
 800b304:	6839      	ldr	r1, [r7, #0]
 800b306:	6878      	ldr	r0, [r7, #4]
 800b308:	f7ff ff8e 	bl	800b228 <pbuf_add_header_impl>
 800b30c:	4603      	mov	r3, r0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
	...

0800b318 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b084      	sub	sp, #16
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
 800b320:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	2b00      	cmp	r3, #0
 800b326:	d106      	bne.n	800b336 <pbuf_remove_header+0x1e>
 800b328:	4b20      	ldr	r3, [pc, #128]	; (800b3ac <pbuf_remove_header+0x94>)
 800b32a:	f240 224b 	movw	r2, #587	; 0x24b
 800b32e:	4920      	ldr	r1, [pc, #128]	; (800b3b0 <pbuf_remove_header+0x98>)
 800b330:	4820      	ldr	r0, [pc, #128]	; (800b3b4 <pbuf_remove_header+0x9c>)
 800b332:	f00b fd9d 	bl	8016e70 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d003      	beq.n	800b344 <pbuf_remove_header+0x2c>
 800b33c:	683b      	ldr	r3, [r7, #0]
 800b33e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b342:	d301      	bcc.n	800b348 <pbuf_remove_header+0x30>
    return 1;
 800b344:	2301      	movs	r3, #1
 800b346:	e02c      	b.n	800b3a2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b348:	683b      	ldr	r3, [r7, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <pbuf_remove_header+0x3a>
    return 0;
 800b34e:	2300      	movs	r3, #0
 800b350:	e027      	b.n	800b3a2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	895b      	ldrh	r3, [r3, #10]
 800b35a:	89fa      	ldrh	r2, [r7, #14]
 800b35c:	429a      	cmp	r2, r3
 800b35e:	d908      	bls.n	800b372 <pbuf_remove_header+0x5a>
 800b360:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <pbuf_remove_header+0x94>)
 800b362:	f240 2255 	movw	r2, #597	; 0x255
 800b366:	4914      	ldr	r1, [pc, #80]	; (800b3b8 <pbuf_remove_header+0xa0>)
 800b368:	4812      	ldr	r0, [pc, #72]	; (800b3b4 <pbuf_remove_header+0x9c>)
 800b36a:	f00b fd81 	bl	8016e70 <iprintf>
 800b36e:	2301      	movs	r3, #1
 800b370:	e017      	b.n	800b3a2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	685b      	ldr	r3, [r3, #4]
 800b376:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	441a      	add	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	895a      	ldrh	r2, [r3, #10]
 800b388:	89fb      	ldrh	r3, [r7, #14]
 800b38a:	1ad3      	subs	r3, r2, r3
 800b38c:	b29a      	uxth	r2, r3
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	891a      	ldrh	r2, [r3, #8]
 800b396:	89fb      	ldrh	r3, [r7, #14]
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	b29a      	uxth	r2, r3
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b3a0:	2300      	movs	r3, #0
}
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	3710      	adds	r7, #16
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	080194ac 	.word	0x080194ac
 800b3b0:	08019610 	.word	0x08019610
 800b3b4:	0801950c 	.word	0x0801950c
 800b3b8:	0801961c 	.word	0x0801961c

0800b3bc <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
 800b3c4:	460b      	mov	r3, r1
 800b3c6:	807b      	strh	r3, [r7, #2]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b3cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	da08      	bge.n	800b3e6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b3d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b3d8:	425b      	negs	r3, r3
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6878      	ldr	r0, [r7, #4]
 800b3de:	f7ff ff9b 	bl	800b318 <pbuf_remove_header>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	e007      	b.n	800b3f6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b3e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b3ea:	787a      	ldrb	r2, [r7, #1]
 800b3ec:	4619      	mov	r1, r3
 800b3ee:	6878      	ldr	r0, [r7, #4]
 800b3f0:	f7ff ff1a 	bl	800b228 <pbuf_add_header_impl>
 800b3f4:	4603      	mov	r3, r0
  }
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3708      	adds	r7, #8
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}

0800b3fe <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b3fe:	b580      	push	{r7, lr}
 800b400:	b082      	sub	sp, #8
 800b402:	af00      	add	r7, sp, #0
 800b404:	6078      	str	r0, [r7, #4]
 800b406:	460b      	mov	r3, r1
 800b408:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b40a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b40e:	2201      	movs	r2, #1
 800b410:	4619      	mov	r1, r3
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	f7ff ffd2 	bl	800b3bc <pbuf_header_impl>
 800b418:	4603      	mov	r3, r0
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3708      	adds	r7, #8
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
	...

0800b424 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b088      	sub	sp, #32
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d10b      	bne.n	800b44a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d106      	bne.n	800b446 <pbuf_free+0x22>
 800b438:	4b3b      	ldr	r3, [pc, #236]	; (800b528 <pbuf_free+0x104>)
 800b43a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b43e:	493b      	ldr	r1, [pc, #236]	; (800b52c <pbuf_free+0x108>)
 800b440:	483b      	ldr	r0, [pc, #236]	; (800b530 <pbuf_free+0x10c>)
 800b442:	f00b fd15 	bl	8016e70 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b446:	2300      	movs	r3, #0
 800b448:	e069      	b.n	800b51e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b44a:	2300      	movs	r3, #0
 800b44c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b44e:	e062      	b.n	800b516 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800b450:	f00b fc8e 	bl	8016d70 <sys_arch_protect>
 800b454:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	7b9b      	ldrb	r3, [r3, #14]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d106      	bne.n	800b46c <pbuf_free+0x48>
 800b45e:	4b32      	ldr	r3, [pc, #200]	; (800b528 <pbuf_free+0x104>)
 800b460:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b464:	4933      	ldr	r1, [pc, #204]	; (800b534 <pbuf_free+0x110>)
 800b466:	4832      	ldr	r0, [pc, #200]	; (800b530 <pbuf_free+0x10c>)
 800b468:	f00b fd02 	bl	8016e70 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	7b9b      	ldrb	r3, [r3, #14]
 800b470:	3b01      	subs	r3, #1
 800b472:	b2da      	uxtb	r2, r3
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	739a      	strb	r2, [r3, #14]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	7b9b      	ldrb	r3, [r3, #14]
 800b47c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800b47e:	69b8      	ldr	r0, [r7, #24]
 800b480:	f00b fc84 	bl	8016d8c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b484:	7dfb      	ldrb	r3, [r7, #23]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d143      	bne.n	800b512 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	7b1b      	ldrb	r3, [r3, #12]
 800b494:	f003 030f 	and.w	r3, r3, #15
 800b498:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	7b5b      	ldrb	r3, [r3, #13]
 800b49e:	f003 0302 	and.w	r3, r3, #2
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d011      	beq.n	800b4ca <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d106      	bne.n	800b4c0 <pbuf_free+0x9c>
 800b4b2:	4b1d      	ldr	r3, [pc, #116]	; (800b528 <pbuf_free+0x104>)
 800b4b4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b4b8:	491f      	ldr	r1, [pc, #124]	; (800b538 <pbuf_free+0x114>)
 800b4ba:	481d      	ldr	r0, [pc, #116]	; (800b530 <pbuf_free+0x10c>)
 800b4bc:	f00b fcd8 	bl	8016e70 <iprintf>
        pc->custom_free_function(p);
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	691b      	ldr	r3, [r3, #16]
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	4798      	blx	r3
 800b4c8:	e01d      	b.n	800b506 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	d104      	bne.n	800b4da <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800b4d0:	6879      	ldr	r1, [r7, #4]
 800b4d2:	200c      	movs	r0, #12
 800b4d4:	f7ff f8f6 	bl	800a6c4 <memp_free>
 800b4d8:	e015      	b.n	800b506 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b4da:	7bfb      	ldrb	r3, [r7, #15]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d104      	bne.n	800b4ea <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800b4e0:	6879      	ldr	r1, [r7, #4]
 800b4e2:	200b      	movs	r0, #11
 800b4e4:	f7ff f8ee 	bl	800a6c4 <memp_free>
 800b4e8:	e00d      	b.n	800b506 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b4ea:	7bfb      	ldrb	r3, [r7, #15]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d103      	bne.n	800b4f8 <pbuf_free+0xd4>
          mem_free(p);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7fe fd79 	bl	8009fe8 <mem_free>
 800b4f6:	e006      	b.n	800b506 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b4f8:	4b0b      	ldr	r3, [pc, #44]	; (800b528 <pbuf_free+0x104>)
 800b4fa:	f240 320f 	movw	r2, #783	; 0x30f
 800b4fe:	490f      	ldr	r1, [pc, #60]	; (800b53c <pbuf_free+0x118>)
 800b500:	480b      	ldr	r0, [pc, #44]	; (800b530 <pbuf_free+0x10c>)
 800b502:	f00b fcb5 	bl	8016e70 <iprintf>
        }
      }
      count++;
 800b506:	7ffb      	ldrb	r3, [r7, #31]
 800b508:	3301      	adds	r3, #1
 800b50a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800b50c:	693b      	ldr	r3, [r7, #16]
 800b50e:	607b      	str	r3, [r7, #4]
 800b510:	e001      	b.n	800b516 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b512:	2300      	movs	r3, #0
 800b514:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d199      	bne.n	800b450 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b51c:	7ffb      	ldrb	r3, [r7, #31]
}
 800b51e:	4618      	mov	r0, r3
 800b520:	3720      	adds	r7, #32
 800b522:	46bd      	mov	sp, r7
 800b524:	bd80      	pop	{r7, pc}
 800b526:	bf00      	nop
 800b528:	080194ac 	.word	0x080194ac
 800b52c:	08019610 	.word	0x08019610
 800b530:	0801950c 	.word	0x0801950c
 800b534:	0801963c 	.word	0x0801963c
 800b538:	08019654 	.word	0x08019654
 800b53c:	08019678 	.word	0x08019678

0800b540 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b540:	b480      	push	{r7}
 800b542:	b085      	sub	sp, #20
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b548:	2300      	movs	r3, #0
 800b54a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b54c:	e005      	b.n	800b55a <pbuf_clen+0x1a>
    ++len;
 800b54e:	89fb      	ldrh	r3, [r7, #14]
 800b550:	3301      	adds	r3, #1
 800b552:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d1f6      	bne.n	800b54e <pbuf_clen+0xe>
  }
  return len;
 800b560:	89fb      	ldrh	r3, [r7, #14]
}
 800b562:	4618      	mov	r0, r3
 800b564:	3714      	adds	r7, #20
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr
	...

0800b570 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d016      	beq.n	800b5ac <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b57e:	f00b fbf7 	bl	8016d70 <sys_arch_protect>
 800b582:	60f8      	str	r0, [r7, #12]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	7b9b      	ldrb	r3, [r3, #14]
 800b588:	3301      	adds	r3, #1
 800b58a:	b2da      	uxtb	r2, r3
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	739a      	strb	r2, [r3, #14]
 800b590:	68f8      	ldr	r0, [r7, #12]
 800b592:	f00b fbfb 	bl	8016d8c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	7b9b      	ldrb	r3, [r3, #14]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d106      	bne.n	800b5ac <pbuf_ref+0x3c>
 800b59e:	4b05      	ldr	r3, [pc, #20]	; (800b5b4 <pbuf_ref+0x44>)
 800b5a0:	f240 3242 	movw	r2, #834	; 0x342
 800b5a4:	4904      	ldr	r1, [pc, #16]	; (800b5b8 <pbuf_ref+0x48>)
 800b5a6:	4805      	ldr	r0, [pc, #20]	; (800b5bc <pbuf_ref+0x4c>)
 800b5a8:	f00b fc62 	bl	8016e70 <iprintf>
  }
}
 800b5ac:	bf00      	nop
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	080194ac 	.word	0x080194ac
 800b5b8:	0801968c 	.word	0x0801968c
 800b5bc:	0801950c 	.word	0x0801950c

0800b5c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b084      	sub	sp, #16
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d002      	beq.n	800b5d6 <pbuf_cat+0x16>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d107      	bne.n	800b5e6 <pbuf_cat+0x26>
 800b5d6:	4b20      	ldr	r3, [pc, #128]	; (800b658 <pbuf_cat+0x98>)
 800b5d8:	f240 3259 	movw	r2, #857	; 0x359
 800b5dc:	491f      	ldr	r1, [pc, #124]	; (800b65c <pbuf_cat+0x9c>)
 800b5de:	4820      	ldr	r0, [pc, #128]	; (800b660 <pbuf_cat+0xa0>)
 800b5e0:	f00b fc46 	bl	8016e70 <iprintf>
 800b5e4:	e034      	b.n	800b650 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	60fb      	str	r3, [r7, #12]
 800b5ea:	e00a      	b.n	800b602 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	891a      	ldrh	r2, [r3, #8]
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	891b      	ldrh	r3, [r3, #8]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	b29a      	uxth	r2, r3
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d1f0      	bne.n	800b5ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	891a      	ldrh	r2, [r3, #8]
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	895b      	ldrh	r3, [r3, #10]
 800b612:	429a      	cmp	r2, r3
 800b614:	d006      	beq.n	800b624 <pbuf_cat+0x64>
 800b616:	4b10      	ldr	r3, [pc, #64]	; (800b658 <pbuf_cat+0x98>)
 800b618:	f240 3262 	movw	r2, #866	; 0x362
 800b61c:	4911      	ldr	r1, [pc, #68]	; (800b664 <pbuf_cat+0xa4>)
 800b61e:	4810      	ldr	r0, [pc, #64]	; (800b660 <pbuf_cat+0xa0>)
 800b620:	f00b fc26 	bl	8016e70 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d006      	beq.n	800b63a <pbuf_cat+0x7a>
 800b62c:	4b0a      	ldr	r3, [pc, #40]	; (800b658 <pbuf_cat+0x98>)
 800b62e:	f240 3263 	movw	r2, #867	; 0x363
 800b632:	490d      	ldr	r1, [pc, #52]	; (800b668 <pbuf_cat+0xa8>)
 800b634:	480a      	ldr	r0, [pc, #40]	; (800b660 <pbuf_cat+0xa0>)
 800b636:	f00b fc1b 	bl	8016e70 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	891a      	ldrh	r2, [r3, #8]
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	891b      	ldrh	r3, [r3, #8]
 800b642:	4413      	add	r3, r2
 800b644:	b29a      	uxth	r2, r3
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	683a      	ldr	r2, [r7, #0]
 800b64e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b650:	3710      	adds	r7, #16
 800b652:	46bd      	mov	sp, r7
 800b654:	bd80      	pop	{r7, pc}
 800b656:	bf00      	nop
 800b658:	080194ac 	.word	0x080194ac
 800b65c:	080196a0 	.word	0x080196a0
 800b660:	0801950c 	.word	0x0801950c
 800b664:	080196d8 	.word	0x080196d8
 800b668:	08019708 	.word	0x08019708

0800b66c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b676:	6839      	ldr	r1, [r7, #0]
 800b678:	6878      	ldr	r0, [r7, #4]
 800b67a:	f7ff ffa1 	bl	800b5c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b67e:	6838      	ldr	r0, [r7, #0]
 800b680:	f7ff ff76 	bl	800b570 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b086      	sub	sp, #24
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
 800b694:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b696:	2300      	movs	r3, #0
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	2300      	movs	r3, #0
 800b69c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d008      	beq.n	800b6b6 <pbuf_copy+0x2a>
 800b6a4:	683b      	ldr	r3, [r7, #0]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d005      	beq.n	800b6b6 <pbuf_copy+0x2a>
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	891a      	ldrh	r2, [r3, #8]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	891b      	ldrh	r3, [r3, #8]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d209      	bcs.n	800b6ca <pbuf_copy+0x3e>
 800b6b6:	4b57      	ldr	r3, [pc, #348]	; (800b814 <pbuf_copy+0x188>)
 800b6b8:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b6bc:	4956      	ldr	r1, [pc, #344]	; (800b818 <pbuf_copy+0x18c>)
 800b6be:	4857      	ldr	r0, [pc, #348]	; (800b81c <pbuf_copy+0x190>)
 800b6c0:	f00b fbd6 	bl	8016e70 <iprintf>
 800b6c4:	f06f 030f 	mvn.w	r3, #15
 800b6c8:	e09f      	b.n	800b80a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	895b      	ldrh	r3, [r3, #10]
 800b6ce:	461a      	mov	r2, r3
 800b6d0:	697b      	ldr	r3, [r7, #20]
 800b6d2:	1ad2      	subs	r2, r2, r3
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	895b      	ldrh	r3, [r3, #10]
 800b6d8:	4619      	mov	r1, r3
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	1acb      	subs	r3, r1, r3
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d306      	bcc.n	800b6f0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	895b      	ldrh	r3, [r3, #10]
 800b6e6:	461a      	mov	r2, r3
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	1ad3      	subs	r3, r2, r3
 800b6ec:	60fb      	str	r3, [r7, #12]
 800b6ee:	e005      	b.n	800b6fc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	895b      	ldrh	r3, [r3, #10]
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	1ad3      	subs	r3, r2, r3
 800b6fa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	685a      	ldr	r2, [r3, #4]
 800b700:	697b      	ldr	r3, [r7, #20]
 800b702:	18d0      	adds	r0, r2, r3
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	685a      	ldr	r2, [r3, #4]
 800b708:	693b      	ldr	r3, [r7, #16]
 800b70a:	4413      	add	r3, r2
 800b70c:	68fa      	ldr	r2, [r7, #12]
 800b70e:	4619      	mov	r1, r3
 800b710:	f00b fb7e 	bl	8016e10 <memcpy>
    offset_to += len;
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	4413      	add	r3, r2
 800b722:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	895b      	ldrh	r3, [r3, #10]
 800b728:	461a      	mov	r2, r3
 800b72a:	697b      	ldr	r3, [r7, #20]
 800b72c:	4293      	cmp	r3, r2
 800b72e:	d906      	bls.n	800b73e <pbuf_copy+0xb2>
 800b730:	4b38      	ldr	r3, [pc, #224]	; (800b814 <pbuf_copy+0x188>)
 800b732:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b736:	493a      	ldr	r1, [pc, #232]	; (800b820 <pbuf_copy+0x194>)
 800b738:	4838      	ldr	r0, [pc, #224]	; (800b81c <pbuf_copy+0x190>)
 800b73a:	f00b fb99 	bl	8016e70 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	895b      	ldrh	r3, [r3, #10]
 800b742:	461a      	mov	r2, r3
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	4293      	cmp	r3, r2
 800b748:	d906      	bls.n	800b758 <pbuf_copy+0xcc>
 800b74a:	4b32      	ldr	r3, [pc, #200]	; (800b814 <pbuf_copy+0x188>)
 800b74c:	f240 32da 	movw	r2, #986	; 0x3da
 800b750:	4934      	ldr	r1, [pc, #208]	; (800b824 <pbuf_copy+0x198>)
 800b752:	4832      	ldr	r0, [pc, #200]	; (800b81c <pbuf_copy+0x190>)
 800b754:	f00b fb8c 	bl	8016e70 <iprintf>
    if (offset_from >= p_from->len) {
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	895b      	ldrh	r3, [r3, #10]
 800b75c:	461a      	mov	r2, r3
 800b75e:	693b      	ldr	r3, [r7, #16]
 800b760:	4293      	cmp	r3, r2
 800b762:	d304      	bcc.n	800b76e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b764:	2300      	movs	r3, #0
 800b766:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	895b      	ldrh	r3, [r3, #10]
 800b772:	461a      	mov	r2, r3
 800b774:	697b      	ldr	r3, [r7, #20]
 800b776:	4293      	cmp	r3, r2
 800b778:	d114      	bne.n	800b7a4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d10c      	bne.n	800b7a4 <pbuf_copy+0x118>
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d009      	beq.n	800b7a4 <pbuf_copy+0x118>
 800b790:	4b20      	ldr	r3, [pc, #128]	; (800b814 <pbuf_copy+0x188>)
 800b792:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b796:	4924      	ldr	r1, [pc, #144]	; (800b828 <pbuf_copy+0x19c>)
 800b798:	4820      	ldr	r0, [pc, #128]	; (800b81c <pbuf_copy+0x190>)
 800b79a:	f00b fb69 	bl	8016e70 <iprintf>
 800b79e:	f06f 030f 	mvn.w	r3, #15
 800b7a2:	e032      	b.n	800b80a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d013      	beq.n	800b7d2 <pbuf_copy+0x146>
 800b7aa:	683b      	ldr	r3, [r7, #0]
 800b7ac:	895a      	ldrh	r2, [r3, #10]
 800b7ae:	683b      	ldr	r3, [r7, #0]
 800b7b0:	891b      	ldrh	r3, [r3, #8]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d10d      	bne.n	800b7d2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d009      	beq.n	800b7d2 <pbuf_copy+0x146>
 800b7be:	4b15      	ldr	r3, [pc, #84]	; (800b814 <pbuf_copy+0x188>)
 800b7c0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b7c4:	4919      	ldr	r1, [pc, #100]	; (800b82c <pbuf_copy+0x1a0>)
 800b7c6:	4815      	ldr	r0, [pc, #84]	; (800b81c <pbuf_copy+0x190>)
 800b7c8:	f00b fb52 	bl	8016e70 <iprintf>
 800b7cc:	f06f 0305 	mvn.w	r3, #5
 800b7d0:	e01b      	b.n	800b80a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d013      	beq.n	800b800 <pbuf_copy+0x174>
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	895a      	ldrh	r2, [r3, #10]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	891b      	ldrh	r3, [r3, #8]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d10d      	bne.n	800b800 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d009      	beq.n	800b800 <pbuf_copy+0x174>
 800b7ec:	4b09      	ldr	r3, [pc, #36]	; (800b814 <pbuf_copy+0x188>)
 800b7ee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b7f2:	490e      	ldr	r1, [pc, #56]	; (800b82c <pbuf_copy+0x1a0>)
 800b7f4:	4809      	ldr	r0, [pc, #36]	; (800b81c <pbuf_copy+0x190>)
 800b7f6:	f00b fb3b 	bl	8016e70 <iprintf>
 800b7fa:	f06f 0305 	mvn.w	r3, #5
 800b7fe:	e004      	b.n	800b80a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	2b00      	cmp	r3, #0
 800b804:	f47f af61 	bne.w	800b6ca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3718      	adds	r7, #24
 800b80e:	46bd      	mov	sp, r7
 800b810:	bd80      	pop	{r7, pc}
 800b812:	bf00      	nop
 800b814:	080194ac 	.word	0x080194ac
 800b818:	08019754 	.word	0x08019754
 800b81c:	0801950c 	.word	0x0801950c
 800b820:	08019784 	.word	0x08019784
 800b824:	0801979c 	.word	0x0801979c
 800b828:	080197b8 	.word	0x080197b8
 800b82c:	080197c8 	.word	0x080197c8

0800b830 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b088      	sub	sp, #32
 800b834:	af00      	add	r7, sp, #0
 800b836:	60f8      	str	r0, [r7, #12]
 800b838:	60b9      	str	r1, [r7, #8]
 800b83a:	4611      	mov	r1, r2
 800b83c:	461a      	mov	r2, r3
 800b83e:	460b      	mov	r3, r1
 800b840:	80fb      	strh	r3, [r7, #6]
 800b842:	4613      	mov	r3, r2
 800b844:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b846:	2300      	movs	r3, #0
 800b848:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d108      	bne.n	800b866 <pbuf_copy_partial+0x36>
 800b854:	4b2b      	ldr	r3, [pc, #172]	; (800b904 <pbuf_copy_partial+0xd4>)
 800b856:	f240 420a 	movw	r2, #1034	; 0x40a
 800b85a:	492b      	ldr	r1, [pc, #172]	; (800b908 <pbuf_copy_partial+0xd8>)
 800b85c:	482b      	ldr	r0, [pc, #172]	; (800b90c <pbuf_copy_partial+0xdc>)
 800b85e:	f00b fb07 	bl	8016e70 <iprintf>
 800b862:	2300      	movs	r3, #0
 800b864:	e04a      	b.n	800b8fc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d108      	bne.n	800b87e <pbuf_copy_partial+0x4e>
 800b86c:	4b25      	ldr	r3, [pc, #148]	; (800b904 <pbuf_copy_partial+0xd4>)
 800b86e:	f240 420b 	movw	r2, #1035	; 0x40b
 800b872:	4927      	ldr	r1, [pc, #156]	; (800b910 <pbuf_copy_partial+0xe0>)
 800b874:	4825      	ldr	r0, [pc, #148]	; (800b90c <pbuf_copy_partial+0xdc>)
 800b876:	f00b fafb 	bl	8016e70 <iprintf>
 800b87a:	2300      	movs	r3, #0
 800b87c:	e03e      	b.n	800b8fc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	61fb      	str	r3, [r7, #28]
 800b882:	e034      	b.n	800b8ee <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b884:	88bb      	ldrh	r3, [r7, #4]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d00a      	beq.n	800b8a0 <pbuf_copy_partial+0x70>
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	895b      	ldrh	r3, [r3, #10]
 800b88e:	88ba      	ldrh	r2, [r7, #4]
 800b890:	429a      	cmp	r2, r3
 800b892:	d305      	bcc.n	800b8a0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b894:	69fb      	ldr	r3, [r7, #28]
 800b896:	895b      	ldrh	r3, [r3, #10]
 800b898:	88ba      	ldrh	r2, [r7, #4]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	80bb      	strh	r3, [r7, #4]
 800b89e:	e023      	b.n	800b8e8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b8a0:	69fb      	ldr	r3, [r7, #28]
 800b8a2:	895a      	ldrh	r2, [r3, #10]
 800b8a4:	88bb      	ldrh	r3, [r7, #4]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b8aa:	8b3a      	ldrh	r2, [r7, #24]
 800b8ac:	88fb      	ldrh	r3, [r7, #6]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d901      	bls.n	800b8b6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b8b2:	88fb      	ldrh	r3, [r7, #6]
 800b8b4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b8b6:	8b7b      	ldrh	r3, [r7, #26]
 800b8b8:	68ba      	ldr	r2, [r7, #8]
 800b8ba:	18d0      	adds	r0, r2, r3
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	88bb      	ldrh	r3, [r7, #4]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	8b3a      	ldrh	r2, [r7, #24]
 800b8c6:	4619      	mov	r1, r3
 800b8c8:	f00b faa2 	bl	8016e10 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b8cc:	8afa      	ldrh	r2, [r7, #22]
 800b8ce:	8b3b      	ldrh	r3, [r7, #24]
 800b8d0:	4413      	add	r3, r2
 800b8d2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b8d4:	8b7a      	ldrh	r2, [r7, #26]
 800b8d6:	8b3b      	ldrh	r3, [r7, #24]
 800b8d8:	4413      	add	r3, r2
 800b8da:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b8dc:	88fa      	ldrh	r2, [r7, #6]
 800b8de:	8b3b      	ldrh	r3, [r7, #24]
 800b8e0:	1ad3      	subs	r3, r2, r3
 800b8e2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b8e4:	2300      	movs	r3, #0
 800b8e6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b8e8:	69fb      	ldr	r3, [r7, #28]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	61fb      	str	r3, [r7, #28]
 800b8ee:	88fb      	ldrh	r3, [r7, #6]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	d002      	beq.n	800b8fa <pbuf_copy_partial+0xca>
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d1c4      	bne.n	800b884 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b8fa:	8afb      	ldrh	r3, [r7, #22]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	080194ac 	.word	0x080194ac
 800b908:	080197f4 	.word	0x080197f4
 800b90c:	0801950c 	.word	0x0801950c
 800b910:	08019814 	.word	0x08019814

0800b914 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b914:	b580      	push	{r7, lr}
 800b916:	b084      	sub	sp, #16
 800b918:	af00      	add	r7, sp, #0
 800b91a:	4603      	mov	r3, r0
 800b91c:	603a      	str	r2, [r7, #0]
 800b91e:	71fb      	strb	r3, [r7, #7]
 800b920:	460b      	mov	r3, r1
 800b922:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	8919      	ldrh	r1, [r3, #8]
 800b928:	88ba      	ldrh	r2, [r7, #4]
 800b92a:	79fb      	ldrb	r3, [r7, #7]
 800b92c:	4618      	mov	r0, r3
 800b92e:	f7ff fa95 	bl	800ae5c <pbuf_alloc>
 800b932:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	2b00      	cmp	r3, #0
 800b938:	d101      	bne.n	800b93e <pbuf_clone+0x2a>
    return NULL;
 800b93a:	2300      	movs	r3, #0
 800b93c:	e011      	b.n	800b962 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b93e:	6839      	ldr	r1, [r7, #0]
 800b940:	68f8      	ldr	r0, [r7, #12]
 800b942:	f7ff fea3 	bl	800b68c <pbuf_copy>
 800b946:	4603      	mov	r3, r0
 800b948:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b94a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d006      	beq.n	800b960 <pbuf_clone+0x4c>
 800b952:	4b06      	ldr	r3, [pc, #24]	; (800b96c <pbuf_clone+0x58>)
 800b954:	f240 5224 	movw	r2, #1316	; 0x524
 800b958:	4905      	ldr	r1, [pc, #20]	; (800b970 <pbuf_clone+0x5c>)
 800b95a:	4806      	ldr	r0, [pc, #24]	; (800b974 <pbuf_clone+0x60>)
 800b95c:	f00b fa88 	bl	8016e70 <iprintf>
  return q;
 800b960:	68fb      	ldr	r3, [r7, #12]
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop
 800b96c:	080194ac 	.word	0x080194ac
 800b970:	08019920 	.word	0x08019920
 800b974:	0801950c 	.word	0x0801950c

0800b978 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b97c:	f00b fa90 	bl	8016ea0 <rand>
 800b980:	4603      	mov	r3, r0
 800b982:	b29b      	uxth	r3, r3
 800b984:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b988:	b29b      	uxth	r3, r3
 800b98a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b98e:	b29a      	uxth	r2, r3
 800b990:	4b01      	ldr	r3, [pc, #4]	; (800b998 <tcp_init+0x20>)
 800b992:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b994:	bf00      	nop
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000010 	.word	0x20000010

0800b99c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	7d1b      	ldrb	r3, [r3, #20]
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d105      	bne.n	800b9b8 <tcp_free+0x1c>
 800b9ac:	4b06      	ldr	r3, [pc, #24]	; (800b9c8 <tcp_free+0x2c>)
 800b9ae:	22d4      	movs	r2, #212	; 0xd4
 800b9b0:	4906      	ldr	r1, [pc, #24]	; (800b9cc <tcp_free+0x30>)
 800b9b2:	4807      	ldr	r0, [pc, #28]	; (800b9d0 <tcp_free+0x34>)
 800b9b4:	f00b fa5c 	bl	8016e70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b9b8:	6879      	ldr	r1, [r7, #4]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	f7fe fe82 	bl	800a6c4 <memp_free>
}
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}
 800b9c8:	080199ac 	.word	0x080199ac
 800b9cc:	080199dc 	.word	0x080199dc
 800b9d0:	080199f0 	.word	0x080199f0

0800b9d4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	7d1b      	ldrb	r3, [r3, #20]
 800b9e0:	2b01      	cmp	r3, #1
 800b9e2:	d105      	bne.n	800b9f0 <tcp_free_listen+0x1c>
 800b9e4:	4b06      	ldr	r3, [pc, #24]	; (800ba00 <tcp_free_listen+0x2c>)
 800b9e6:	22df      	movs	r2, #223	; 0xdf
 800b9e8:	4906      	ldr	r1, [pc, #24]	; (800ba04 <tcp_free_listen+0x30>)
 800b9ea:	4807      	ldr	r0, [pc, #28]	; (800ba08 <tcp_free_listen+0x34>)
 800b9ec:	f00b fa40 	bl	8016e70 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b9f0:	6879      	ldr	r1, [r7, #4]
 800b9f2:	2002      	movs	r0, #2
 800b9f4:	f7fe fe66 	bl	800a6c4 <memp_free>
}
 800b9f8:	bf00      	nop
 800b9fa:	3708      	adds	r7, #8
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	bd80      	pop	{r7, pc}
 800ba00:	080199ac 	.word	0x080199ac
 800ba04:	08019a18 	.word	0x08019a18
 800ba08:	080199f0 	.word	0x080199f0

0800ba0c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ba10:	f001 f8a6 	bl	800cb60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ba14:	4b07      	ldr	r3, [pc, #28]	; (800ba34 <tcp_tmr+0x28>)
 800ba16:	781b      	ldrb	r3, [r3, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	b2da      	uxtb	r2, r3
 800ba1c:	4b05      	ldr	r3, [pc, #20]	; (800ba34 <tcp_tmr+0x28>)
 800ba1e:	701a      	strb	r2, [r3, #0]
 800ba20:	4b04      	ldr	r3, [pc, #16]	; (800ba34 <tcp_tmr+0x28>)
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 0301 	and.w	r3, r3, #1
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d001      	beq.n	800ba30 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ba2c:	f000 fd58 	bl	800c4e0 <tcp_slowtmr>
  }
}
 800ba30:	bf00      	nop
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	200085a9 	.word	0x200085a9

0800ba38 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d105      	bne.n	800ba54 <tcp_remove_listener+0x1c>
 800ba48:	4b0d      	ldr	r3, [pc, #52]	; (800ba80 <tcp_remove_listener+0x48>)
 800ba4a:	22ff      	movs	r2, #255	; 0xff
 800ba4c:	490d      	ldr	r1, [pc, #52]	; (800ba84 <tcp_remove_listener+0x4c>)
 800ba4e:	480e      	ldr	r0, [pc, #56]	; (800ba88 <tcp_remove_listener+0x50>)
 800ba50:	f00b fa0e 	bl	8016e70 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	60fb      	str	r3, [r7, #12]
 800ba58:	e00a      	b.n	800ba70 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	429a      	cmp	r2, r3
 800ba62:	d102      	bne.n	800ba6a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	2200      	movs	r2, #0
 800ba68:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ba6a:	68fb      	ldr	r3, [r7, #12]
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	60fb      	str	r3, [r7, #12]
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d1f1      	bne.n	800ba5a <tcp_remove_listener+0x22>
    }
  }
}
 800ba76:	bf00      	nop
 800ba78:	bf00      	nop
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}
 800ba80:	080199ac 	.word	0x080199ac
 800ba84:	08019a34 	.word	0x08019a34
 800ba88:	080199f0 	.word	0x080199f0

0800ba8c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	b084      	sub	sp, #16
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d106      	bne.n	800baa8 <tcp_listen_closed+0x1c>
 800ba9a:	4b14      	ldr	r3, [pc, #80]	; (800baec <tcp_listen_closed+0x60>)
 800ba9c:	f240 1211 	movw	r2, #273	; 0x111
 800baa0:	4913      	ldr	r1, [pc, #76]	; (800baf0 <tcp_listen_closed+0x64>)
 800baa2:	4814      	ldr	r0, [pc, #80]	; (800baf4 <tcp_listen_closed+0x68>)
 800baa4:	f00b f9e4 	bl	8016e70 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	7d1b      	ldrb	r3, [r3, #20]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d006      	beq.n	800babe <tcp_listen_closed+0x32>
 800bab0:	4b0e      	ldr	r3, [pc, #56]	; (800baec <tcp_listen_closed+0x60>)
 800bab2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bab6:	4910      	ldr	r1, [pc, #64]	; (800baf8 <tcp_listen_closed+0x6c>)
 800bab8:	480e      	ldr	r0, [pc, #56]	; (800baf4 <tcp_listen_closed+0x68>)
 800baba:	f00b f9d9 	bl	8016e70 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800babe:	2301      	movs	r3, #1
 800bac0:	60fb      	str	r3, [r7, #12]
 800bac2:	e00b      	b.n	800badc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bac4:	4a0d      	ldr	r2, [pc, #52]	; (800bafc <tcp_listen_closed+0x70>)
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	6879      	ldr	r1, [r7, #4]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff ffb1 	bl	800ba38 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	3301      	adds	r3, #1
 800bada:	60fb      	str	r3, [r7, #12]
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d9f0      	bls.n	800bac4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bae2:	bf00      	nop
 800bae4:	bf00      	nop
 800bae6:	3710      	adds	r7, #16
 800bae8:	46bd      	mov	sp, r7
 800baea:	bd80      	pop	{r7, pc}
 800baec:	080199ac 	.word	0x080199ac
 800baf0:	08019a5c 	.word	0x08019a5c
 800baf4:	080199f0 	.word	0x080199f0
 800baf8:	08019a68 	.word	0x08019a68
 800bafc:	0801bd64 	.word	0x0801bd64

0800bb00 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bb00:	b5b0      	push	{r4, r5, r7, lr}
 800bb02:	b088      	sub	sp, #32
 800bb04:	af04      	add	r7, sp, #16
 800bb06:	6078      	str	r0, [r7, #4]
 800bb08:	460b      	mov	r3, r1
 800bb0a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d106      	bne.n	800bb20 <tcp_close_shutdown+0x20>
 800bb12:	4b63      	ldr	r3, [pc, #396]	; (800bca0 <tcp_close_shutdown+0x1a0>)
 800bb14:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bb18:	4962      	ldr	r1, [pc, #392]	; (800bca4 <tcp_close_shutdown+0x1a4>)
 800bb1a:	4863      	ldr	r0, [pc, #396]	; (800bca8 <tcp_close_shutdown+0x1a8>)
 800bb1c:	f00b f9a8 	bl	8016e70 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d066      	beq.n	800bbf4 <tcp_close_shutdown+0xf4>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	7d1b      	ldrb	r3, [r3, #20]
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d003      	beq.n	800bb36 <tcp_close_shutdown+0x36>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	7d1b      	ldrb	r3, [r3, #20]
 800bb32:	2b07      	cmp	r3, #7
 800bb34:	d15e      	bne.n	800bbf4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d104      	bne.n	800bb48 <tcp_close_shutdown+0x48>
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bb42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bb46:	d055      	beq.n	800bbf4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	8b5b      	ldrh	r3, [r3, #26]
 800bb4c:	f003 0310 	and.w	r3, r3, #16
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d106      	bne.n	800bb62 <tcp_close_shutdown+0x62>
 800bb54:	4b52      	ldr	r3, [pc, #328]	; (800bca0 <tcp_close_shutdown+0x1a0>)
 800bb56:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bb5a:	4954      	ldr	r1, [pc, #336]	; (800bcac <tcp_close_shutdown+0x1ac>)
 800bb5c:	4852      	ldr	r0, [pc, #328]	; (800bca8 <tcp_close_shutdown+0x1a8>)
 800bb5e:	f00b f987 	bl	8016e70 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bb6a:	687d      	ldr	r5, [r7, #4]
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	3304      	adds	r3, #4
 800bb70:	687a      	ldr	r2, [r7, #4]
 800bb72:	8ad2      	ldrh	r2, [r2, #22]
 800bb74:	6879      	ldr	r1, [r7, #4]
 800bb76:	8b09      	ldrh	r1, [r1, #24]
 800bb78:	9102      	str	r1, [sp, #8]
 800bb7a:	9201      	str	r2, [sp, #4]
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	462b      	mov	r3, r5
 800bb80:	4622      	mov	r2, r4
 800bb82:	4601      	mov	r1, r0
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f005 fdb7 	bl	80116f8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f001 fb98 	bl	800d2c0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bb90:	4b47      	ldr	r3, [pc, #284]	; (800bcb0 <tcp_close_shutdown+0x1b0>)
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	687a      	ldr	r2, [r7, #4]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	d105      	bne.n	800bba6 <tcp_close_shutdown+0xa6>
 800bb9a:	4b45      	ldr	r3, [pc, #276]	; (800bcb0 <tcp_close_shutdown+0x1b0>)
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	68db      	ldr	r3, [r3, #12]
 800bba0:	4a43      	ldr	r2, [pc, #268]	; (800bcb0 <tcp_close_shutdown+0x1b0>)
 800bba2:	6013      	str	r3, [r2, #0]
 800bba4:	e013      	b.n	800bbce <tcp_close_shutdown+0xce>
 800bba6:	4b42      	ldr	r3, [pc, #264]	; (800bcb0 <tcp_close_shutdown+0x1b0>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	60fb      	str	r3, [r7, #12]
 800bbac:	e00c      	b.n	800bbc8 <tcp_close_shutdown+0xc8>
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	687a      	ldr	r2, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d104      	bne.n	800bbc2 <tcp_close_shutdown+0xc2>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68da      	ldr	r2, [r3, #12]
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	60da      	str	r2, [r3, #12]
 800bbc0:	e005      	b.n	800bbce <tcp_close_shutdown+0xce>
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	68db      	ldr	r3, [r3, #12]
 800bbc6:	60fb      	str	r3, [r7, #12]
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d1ef      	bne.n	800bbae <tcp_close_shutdown+0xae>
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	60da      	str	r2, [r3, #12]
 800bbd4:	4b37      	ldr	r3, [pc, #220]	; (800bcb4 <tcp_close_shutdown+0x1b4>)
 800bbd6:	2201      	movs	r2, #1
 800bbd8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bbda:	4b37      	ldr	r3, [pc, #220]	; (800bcb8 <tcp_close_shutdown+0x1b8>)
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	687a      	ldr	r2, [r7, #4]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d102      	bne.n	800bbea <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bbe4:	f004 f82c 	bl	800fc40 <tcp_trigger_input_pcb_close>
 800bbe8:	e002      	b.n	800bbf0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f7ff fed6 	bl	800b99c <tcp_free>
      }
      return ERR_OK;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	e050      	b.n	800bc96 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	7d1b      	ldrb	r3, [r3, #20]
 800bbf8:	2b02      	cmp	r3, #2
 800bbfa:	d03b      	beq.n	800bc74 <tcp_close_shutdown+0x174>
 800bbfc:	2b02      	cmp	r3, #2
 800bbfe:	dc44      	bgt.n	800bc8a <tcp_close_shutdown+0x18a>
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d002      	beq.n	800bc0a <tcp_close_shutdown+0x10a>
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d02a      	beq.n	800bc5e <tcp_close_shutdown+0x15e>
 800bc08:	e03f      	b.n	800bc8a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	8adb      	ldrh	r3, [r3, #22]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d021      	beq.n	800bc56 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bc12:	4b2a      	ldr	r3, [pc, #168]	; (800bcbc <tcp_close_shutdown+0x1bc>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	687a      	ldr	r2, [r7, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d105      	bne.n	800bc28 <tcp_close_shutdown+0x128>
 800bc1c:	4b27      	ldr	r3, [pc, #156]	; (800bcbc <tcp_close_shutdown+0x1bc>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	68db      	ldr	r3, [r3, #12]
 800bc22:	4a26      	ldr	r2, [pc, #152]	; (800bcbc <tcp_close_shutdown+0x1bc>)
 800bc24:	6013      	str	r3, [r2, #0]
 800bc26:	e013      	b.n	800bc50 <tcp_close_shutdown+0x150>
 800bc28:	4b24      	ldr	r3, [pc, #144]	; (800bcbc <tcp_close_shutdown+0x1bc>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	60bb      	str	r3, [r7, #8]
 800bc2e:	e00c      	b.n	800bc4a <tcp_close_shutdown+0x14a>
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	68db      	ldr	r3, [r3, #12]
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	429a      	cmp	r2, r3
 800bc38:	d104      	bne.n	800bc44 <tcp_close_shutdown+0x144>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	68da      	ldr	r2, [r3, #12]
 800bc3e:	68bb      	ldr	r3, [r7, #8]
 800bc40:	60da      	str	r2, [r3, #12]
 800bc42:	e005      	b.n	800bc50 <tcp_close_shutdown+0x150>
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	68db      	ldr	r3, [r3, #12]
 800bc48:	60bb      	str	r3, [r7, #8]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d1ef      	bne.n	800bc30 <tcp_close_shutdown+0x130>
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	2200      	movs	r2, #0
 800bc54:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bc56:	6878      	ldr	r0, [r7, #4]
 800bc58:	f7ff fea0 	bl	800b99c <tcp_free>
      break;
 800bc5c:	e01a      	b.n	800bc94 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f7ff ff14 	bl	800ba8c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bc64:	6879      	ldr	r1, [r7, #4]
 800bc66:	4816      	ldr	r0, [pc, #88]	; (800bcc0 <tcp_close_shutdown+0x1c0>)
 800bc68:	f001 fb7a 	bl	800d360 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bc6c:	6878      	ldr	r0, [r7, #4]
 800bc6e:	f7ff feb1 	bl	800b9d4 <tcp_free_listen>
      break;
 800bc72:	e00f      	b.n	800bc94 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	480e      	ldr	r0, [pc, #56]	; (800bcb0 <tcp_close_shutdown+0x1b0>)
 800bc78:	f001 fb72 	bl	800d360 <tcp_pcb_remove>
 800bc7c:	4b0d      	ldr	r3, [pc, #52]	; (800bcb4 <tcp_close_shutdown+0x1b4>)
 800bc7e:	2201      	movs	r2, #1
 800bc80:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bc82:	6878      	ldr	r0, [r7, #4]
 800bc84:	f7ff fe8a 	bl	800b99c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bc88:	e004      	b.n	800bc94 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bc8a:	6878      	ldr	r0, [r7, #4]
 800bc8c:	f000 f81a 	bl	800bcc4 <tcp_close_shutdown_fin>
 800bc90:	4603      	mov	r3, r0
 800bc92:	e000      	b.n	800bc96 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bc94:	2300      	movs	r3, #0
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bdb0      	pop	{r4, r5, r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	080199ac 	.word	0x080199ac
 800bca4:	08019a80 	.word	0x08019a80
 800bca8:	080199f0 	.word	0x080199f0
 800bcac:	08019aa0 	.word	0x08019aa0
 800bcb0:	2000f03c 	.word	0x2000f03c
 800bcb4:	2000f038 	.word	0x2000f038
 800bcb8:	2000f050 	.word	0x2000f050
 800bcbc:	2000f048 	.word	0x2000f048
 800bcc0:	2000f044 	.word	0x2000f044

0800bcc4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d106      	bne.n	800bce0 <tcp_close_shutdown_fin+0x1c>
 800bcd2:	4b2e      	ldr	r3, [pc, #184]	; (800bd8c <tcp_close_shutdown_fin+0xc8>)
 800bcd4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bcd8:	492d      	ldr	r1, [pc, #180]	; (800bd90 <tcp_close_shutdown_fin+0xcc>)
 800bcda:	482e      	ldr	r0, [pc, #184]	; (800bd94 <tcp_close_shutdown_fin+0xd0>)
 800bcdc:	f00b f8c8 	bl	8016e70 <iprintf>

  switch (pcb->state) {
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	2b07      	cmp	r3, #7
 800bce6:	d020      	beq.n	800bd2a <tcp_close_shutdown_fin+0x66>
 800bce8:	2b07      	cmp	r3, #7
 800bcea:	dc2b      	bgt.n	800bd44 <tcp_close_shutdown_fin+0x80>
 800bcec:	2b03      	cmp	r3, #3
 800bcee:	d002      	beq.n	800bcf6 <tcp_close_shutdown_fin+0x32>
 800bcf0:	2b04      	cmp	r3, #4
 800bcf2:	d00d      	beq.n	800bd10 <tcp_close_shutdown_fin+0x4c>
 800bcf4:	e026      	b.n	800bd44 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f004 fe0c 	bl	8010914 <tcp_send_fin>
 800bcfc:	4603      	mov	r3, r0
 800bcfe:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bd00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d11f      	bne.n	800bd48 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2205      	movs	r2, #5
 800bd0c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bd0e:	e01b      	b.n	800bd48 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f004 fdff 	bl	8010914 <tcp_send_fin>
 800bd16:	4603      	mov	r3, r0
 800bd18:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d114      	bne.n	800bd4c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2205      	movs	r2, #5
 800bd26:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bd28:	e010      	b.n	800bd4c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f004 fdf2 	bl	8010914 <tcp_send_fin>
 800bd30:	4603      	mov	r3, r0
 800bd32:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bd34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d109      	bne.n	800bd50 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2209      	movs	r2, #9
 800bd40:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bd42:	e005      	b.n	800bd50 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bd44:	2300      	movs	r3, #0
 800bd46:	e01c      	b.n	800bd82 <tcp_close_shutdown_fin+0xbe>
      break;
 800bd48:	bf00      	nop
 800bd4a:	e002      	b.n	800bd52 <tcp_close_shutdown_fin+0x8e>
      break;
 800bd4c:	bf00      	nop
 800bd4e:	e000      	b.n	800bd52 <tcp_close_shutdown_fin+0x8e>
      break;
 800bd50:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bd52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d103      	bne.n	800bd62 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f004 ff18 	bl	8010b90 <tcp_output>
 800bd60:	e00d      	b.n	800bd7e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bd62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bd66:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd6a:	d108      	bne.n	800bd7e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	8b5b      	ldrh	r3, [r3, #26]
 800bd70:	f043 0308 	orr.w	r3, r3, #8
 800bd74:	b29a      	uxth	r2, r3
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	e001      	b.n	800bd82 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bd7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bd82:	4618      	mov	r0, r3
 800bd84:	3710      	adds	r7, #16
 800bd86:	46bd      	mov	sp, r7
 800bd88:	bd80      	pop	{r7, pc}
 800bd8a:	bf00      	nop
 800bd8c:	080199ac 	.word	0x080199ac
 800bd90:	08019a5c 	.word	0x08019a5c
 800bd94:	080199f0 	.word	0x080199f0

0800bd98 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d109      	bne.n	800bdba <tcp_close+0x22>
 800bda6:	4b0f      	ldr	r3, [pc, #60]	; (800bde4 <tcp_close+0x4c>)
 800bda8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bdac:	490e      	ldr	r1, [pc, #56]	; (800bde8 <tcp_close+0x50>)
 800bdae:	480f      	ldr	r0, [pc, #60]	; (800bdec <tcp_close+0x54>)
 800bdb0:	f00b f85e 	bl	8016e70 <iprintf>
 800bdb4:	f06f 030f 	mvn.w	r3, #15
 800bdb8:	e00f      	b.n	800bdda <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	7d1b      	ldrb	r3, [r3, #20]
 800bdbe:	2b01      	cmp	r3, #1
 800bdc0:	d006      	beq.n	800bdd0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	8b5b      	ldrh	r3, [r3, #26]
 800bdc6:	f043 0310 	orr.w	r3, r3, #16
 800bdca:	b29a      	uxth	r2, r3
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bdd0:	2101      	movs	r1, #1
 800bdd2:	6878      	ldr	r0, [r7, #4]
 800bdd4:	f7ff fe94 	bl	800bb00 <tcp_close_shutdown>
 800bdd8:	4603      	mov	r3, r0
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	3708      	adds	r7, #8
 800bdde:	46bd      	mov	sp, r7
 800bde0:	bd80      	pop	{r7, pc}
 800bde2:	bf00      	nop
 800bde4:	080199ac 	.word	0x080199ac
 800bde8:	08019abc 	.word	0x08019abc
 800bdec:	080199f0 	.word	0x080199f0

0800bdf0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d109      	bne.n	800be16 <tcp_shutdown+0x26>
 800be02:	4b26      	ldr	r3, [pc, #152]	; (800be9c <tcp_shutdown+0xac>)
 800be04:	f240 2207 	movw	r2, #519	; 0x207
 800be08:	4925      	ldr	r1, [pc, #148]	; (800bea0 <tcp_shutdown+0xb0>)
 800be0a:	4826      	ldr	r0, [pc, #152]	; (800bea4 <tcp_shutdown+0xb4>)
 800be0c:	f00b f830 	bl	8016e70 <iprintf>
 800be10:	f06f 030f 	mvn.w	r3, #15
 800be14:	e03d      	b.n	800be92 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	7d1b      	ldrb	r3, [r3, #20]
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d102      	bne.n	800be24 <tcp_shutdown+0x34>
    return ERR_CONN;
 800be1e:	f06f 030a 	mvn.w	r3, #10
 800be22:	e036      	b.n	800be92 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d01b      	beq.n	800be62 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	8b5b      	ldrh	r3, [r3, #26]
 800be2e:	f043 0310 	orr.w	r3, r3, #16
 800be32:	b29a      	uxth	r2, r3
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d005      	beq.n	800be4a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800be3e:	2101      	movs	r1, #1
 800be40:	68f8      	ldr	r0, [r7, #12]
 800be42:	f7ff fe5d 	bl	800bb00 <tcp_close_shutdown>
 800be46:	4603      	mov	r3, r0
 800be48:	e023      	b.n	800be92 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d007      	beq.n	800be62 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be56:	4618      	mov	r0, r3
 800be58:	f7ff fae4 	bl	800b424 <pbuf_free>
      pcb->refused_data = NULL;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d013      	beq.n	800be90 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	7d1b      	ldrb	r3, [r3, #20]
 800be6c:	2b04      	cmp	r3, #4
 800be6e:	dc02      	bgt.n	800be76 <tcp_shutdown+0x86>
 800be70:	2b03      	cmp	r3, #3
 800be72:	da02      	bge.n	800be7a <tcp_shutdown+0x8a>
 800be74:	e009      	b.n	800be8a <tcp_shutdown+0x9a>
 800be76:	2b07      	cmp	r3, #7
 800be78:	d107      	bne.n	800be8a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	4619      	mov	r1, r3
 800be80:	68f8      	ldr	r0, [r7, #12]
 800be82:	f7ff fe3d 	bl	800bb00 <tcp_close_shutdown>
 800be86:	4603      	mov	r3, r0
 800be88:	e003      	b.n	800be92 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800be8a:	f06f 030a 	mvn.w	r3, #10
 800be8e:	e000      	b.n	800be92 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800be90:	2300      	movs	r3, #0
}
 800be92:	4618      	mov	r0, r3
 800be94:	3710      	adds	r7, #16
 800be96:	46bd      	mov	sp, r7
 800be98:	bd80      	pop	{r7, pc}
 800be9a:	bf00      	nop
 800be9c:	080199ac 	.word	0x080199ac
 800bea0:	08019ad4 	.word	0x08019ad4
 800bea4:	080199f0 	.word	0x080199f0

0800bea8 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bea8:	b580      	push	{r7, lr}
 800beaa:	b08e      	sub	sp, #56	; 0x38
 800beac:	af04      	add	r7, sp, #16
 800beae:	6078      	str	r0, [r7, #4]
 800beb0:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d107      	bne.n	800bec8 <tcp_abandon+0x20>
 800beb8:	4b52      	ldr	r3, [pc, #328]	; (800c004 <tcp_abandon+0x15c>)
 800beba:	f240 223d 	movw	r2, #573	; 0x23d
 800bebe:	4952      	ldr	r1, [pc, #328]	; (800c008 <tcp_abandon+0x160>)
 800bec0:	4852      	ldr	r0, [pc, #328]	; (800c00c <tcp_abandon+0x164>)
 800bec2:	f00a ffd5 	bl	8016e70 <iprintf>
 800bec6:	e099      	b.n	800bffc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	7d1b      	ldrb	r3, [r3, #20]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d106      	bne.n	800bede <tcp_abandon+0x36>
 800bed0:	4b4c      	ldr	r3, [pc, #304]	; (800c004 <tcp_abandon+0x15c>)
 800bed2:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bed6:	494e      	ldr	r1, [pc, #312]	; (800c010 <tcp_abandon+0x168>)
 800bed8:	484c      	ldr	r0, [pc, #304]	; (800c00c <tcp_abandon+0x164>)
 800beda:	f00a ffc9 	bl	8016e70 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	7d1b      	ldrb	r3, [r3, #20]
 800bee2:	2b0a      	cmp	r3, #10
 800bee4:	d107      	bne.n	800bef6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bee6:	6879      	ldr	r1, [r7, #4]
 800bee8:	484a      	ldr	r0, [pc, #296]	; (800c014 <tcp_abandon+0x16c>)
 800beea:	f001 fa39 	bl	800d360 <tcp_pcb_remove>
    tcp_free(pcb);
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff fd54 	bl	800b99c <tcp_free>
 800bef4:	e082      	b.n	800bffc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bef6:	2300      	movs	r3, #0
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800befa:	2300      	movs	r3, #0
 800befc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf02:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf08:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf10:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	7d1b      	ldrb	r3, [r3, #20]
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d126      	bne.n	800bf6e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	8adb      	ldrh	r3, [r3, #22]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d02e      	beq.n	800bf86 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf28:	4b3b      	ldr	r3, [pc, #236]	; (800c018 <tcp_abandon+0x170>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	687a      	ldr	r2, [r7, #4]
 800bf2e:	429a      	cmp	r2, r3
 800bf30:	d105      	bne.n	800bf3e <tcp_abandon+0x96>
 800bf32:	4b39      	ldr	r3, [pc, #228]	; (800c018 <tcp_abandon+0x170>)
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	4a37      	ldr	r2, [pc, #220]	; (800c018 <tcp_abandon+0x170>)
 800bf3a:	6013      	str	r3, [r2, #0]
 800bf3c:	e013      	b.n	800bf66 <tcp_abandon+0xbe>
 800bf3e:	4b36      	ldr	r3, [pc, #216]	; (800c018 <tcp_abandon+0x170>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	61fb      	str	r3, [r7, #28]
 800bf44:	e00c      	b.n	800bf60 <tcp_abandon+0xb8>
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	68db      	ldr	r3, [r3, #12]
 800bf4a:	687a      	ldr	r2, [r7, #4]
 800bf4c:	429a      	cmp	r2, r3
 800bf4e:	d104      	bne.n	800bf5a <tcp_abandon+0xb2>
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	68da      	ldr	r2, [r3, #12]
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	60da      	str	r2, [r3, #12]
 800bf58:	e005      	b.n	800bf66 <tcp_abandon+0xbe>
 800bf5a:	69fb      	ldr	r3, [r7, #28]
 800bf5c:	68db      	ldr	r3, [r3, #12]
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	69fb      	ldr	r3, [r7, #28]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d1ef      	bne.n	800bf46 <tcp_abandon+0x9e>
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	60da      	str	r2, [r3, #12]
 800bf6c:	e00b      	b.n	800bf86 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	8adb      	ldrh	r3, [r3, #22]
 800bf76:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bf78:	6879      	ldr	r1, [r7, #4]
 800bf7a:	4828      	ldr	r0, [pc, #160]	; (800c01c <tcp_abandon+0x174>)
 800bf7c:	f001 f9f0 	bl	800d360 <tcp_pcb_remove>
 800bf80:	4b27      	ldr	r3, [pc, #156]	; (800c020 <tcp_abandon+0x178>)
 800bf82:	2201      	movs	r2, #1
 800bf84:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d004      	beq.n	800bf98 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bf92:	4618      	mov	r0, r3
 800bf94:	f000 fec4 	bl	800cd20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d004      	beq.n	800bfaa <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 febb 	bl	800cd20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d004      	beq.n	800bfbc <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bfb6:	4618      	mov	r0, r3
 800bfb8:	f000 feb2 	bl	800cd20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d00e      	beq.n	800bfe0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bfc2:	6879      	ldr	r1, [r7, #4]
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	3304      	adds	r3, #4
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	8b12      	ldrh	r2, [r2, #24]
 800bfcc:	9202      	str	r2, [sp, #8]
 800bfce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bfd0:	9201      	str	r2, [sp, #4]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	69b9      	ldr	r1, [r7, #24]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f005 fb8c 	bl	80116f8 <tcp_rst>
    }
    last_state = pcb->state;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	7d1b      	ldrb	r3, [r3, #20]
 800bfe4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f7ff fcd8 	bl	800b99c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800bfec:	693b      	ldr	r3, [r7, #16]
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d004      	beq.n	800bffc <tcp_abandon+0x154>
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	f06f 010c 	mvn.w	r1, #12
 800bff8:	68f8      	ldr	r0, [r7, #12]
 800bffa:	4798      	blx	r3
  }
}
 800bffc:	3728      	adds	r7, #40	; 0x28
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	080199ac 	.word	0x080199ac
 800c008:	08019af0 	.word	0x08019af0
 800c00c:	080199f0 	.word	0x080199f0
 800c010:	08019b0c 	.word	0x08019b0c
 800c014:	2000f04c 	.word	0x2000f04c
 800c018:	2000f048 	.word	0x2000f048
 800c01c:	2000f03c 	.word	0x2000f03c
 800c020:	2000f038 	.word	0x2000f038

0800c024 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c024:	b580      	push	{r7, lr}
 800c026:	b082      	sub	sp, #8
 800c028:	af00      	add	r7, sp, #0
 800c02a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c02c:	2101      	movs	r1, #1
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7ff ff3a 	bl	800bea8 <tcp_abandon>
}
 800c034:	bf00      	nop
 800c036:	3708      	adds	r7, #8
 800c038:	46bd      	mov	sp, r7
 800c03a:	bd80      	pop	{r7, pc}

0800c03c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b088      	sub	sp, #32
 800c040:	af00      	add	r7, sp, #0
 800c042:	60f8      	str	r0, [r7, #12]
 800c044:	60b9      	str	r1, [r7, #8]
 800c046:	4613      	mov	r3, r2
 800c048:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800c04a:	2304      	movs	r3, #4
 800c04c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d101      	bne.n	800c058 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800c054:	4b3e      	ldr	r3, [pc, #248]	; (800c150 <tcp_bind+0x114>)
 800c056:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d109      	bne.n	800c072 <tcp_bind+0x36>
 800c05e:	4b3d      	ldr	r3, [pc, #244]	; (800c154 <tcp_bind+0x118>)
 800c060:	f240 22a9 	movw	r2, #681	; 0x2a9
 800c064:	493c      	ldr	r1, [pc, #240]	; (800c158 <tcp_bind+0x11c>)
 800c066:	483d      	ldr	r0, [pc, #244]	; (800c15c <tcp_bind+0x120>)
 800c068:	f00a ff02 	bl	8016e70 <iprintf>
 800c06c:	f06f 030f 	mvn.w	r3, #15
 800c070:	e06a      	b.n	800c148 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	7d1b      	ldrb	r3, [r3, #20]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d009      	beq.n	800c08e <tcp_bind+0x52>
 800c07a:	4b36      	ldr	r3, [pc, #216]	; (800c154 <tcp_bind+0x118>)
 800c07c:	f240 22ab 	movw	r2, #683	; 0x2ab
 800c080:	4937      	ldr	r1, [pc, #220]	; (800c160 <tcp_bind+0x124>)
 800c082:	4836      	ldr	r0, [pc, #216]	; (800c15c <tcp_bind+0x120>)
 800c084:	f00a fef4 	bl	8016e70 <iprintf>
 800c088:	f06f 0305 	mvn.w	r3, #5
 800c08c:	e05c      	b.n	800c148 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800c08e:	88fb      	ldrh	r3, [r7, #6]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d109      	bne.n	800c0a8 <tcp_bind+0x6c>
    port = tcp_new_port();
 800c094:	f000 f9de 	bl	800c454 <tcp_new_port>
 800c098:	4603      	mov	r3, r0
 800c09a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800c09c:	88fb      	ldrh	r3, [r7, #6]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d135      	bne.n	800c10e <tcp_bind+0xd2>
      return ERR_BUF;
 800c0a2:	f06f 0301 	mvn.w	r3, #1
 800c0a6:	e04f      	b.n	800c148 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800c0a8:	2300      	movs	r3, #0
 800c0aa:	61fb      	str	r3, [r7, #28]
 800c0ac:	e02b      	b.n	800c106 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c0ae:	4a2d      	ldr	r2, [pc, #180]	; (800c164 <tcp_bind+0x128>)
 800c0b0:	69fb      	ldr	r3, [r7, #28]
 800c0b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c0b6:	681b      	ldr	r3, [r3, #0]
 800c0b8:	61bb      	str	r3, [r7, #24]
 800c0ba:	e01e      	b.n	800c0fa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	8adb      	ldrh	r3, [r3, #22]
 800c0c0:	88fa      	ldrh	r2, [r7, #6]
 800c0c2:	429a      	cmp	r2, r3
 800c0c4:	d116      	bne.n	800c0f4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800c0c6:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d010      	beq.n	800c0ee <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800c0cc:	69bb      	ldr	r3, [r7, #24]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d00c      	beq.n	800c0ee <tcp_bind+0xb2>
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d009      	beq.n	800c0ee <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800c0da:	68bb      	ldr	r3, [r7, #8]
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	2b00      	cmp	r3, #0
 800c0e0:	d005      	beq.n	800c0ee <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800c0e2:	69bb      	ldr	r3, [r7, #24]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800c0ea:	429a      	cmp	r2, r3
 800c0ec:	d102      	bne.n	800c0f4 <tcp_bind+0xb8>
              return ERR_USE;
 800c0ee:	f06f 0307 	mvn.w	r3, #7
 800c0f2:	e029      	b.n	800c148 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800c0f4:	69bb      	ldr	r3, [r7, #24]
 800c0f6:	68db      	ldr	r3, [r3, #12]
 800c0f8:	61bb      	str	r3, [r7, #24]
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d1dd      	bne.n	800c0bc <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	3301      	adds	r3, #1
 800c104:	61fb      	str	r3, [r7, #28]
 800c106:	69fa      	ldr	r2, [r7, #28]
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	dbcf      	blt.n	800c0ae <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800c10e:	68bb      	ldr	r3, [r7, #8]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d00c      	beq.n	800c12e <tcp_bind+0xf2>
 800c114:	68bb      	ldr	r3, [r7, #8]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d008      	beq.n	800c12e <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d002      	beq.n	800c128 <tcp_bind+0xec>
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	e000      	b.n	800c12a <tcp_bind+0xee>
 800c128:	2300      	movs	r3, #0
 800c12a:	68fa      	ldr	r2, [r7, #12]
 800c12c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	88fa      	ldrh	r2, [r7, #6]
 800c132:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800c134:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <tcp_bind+0x12c>)
 800c136:	681a      	ldr	r2, [r3, #0]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	60da      	str	r2, [r3, #12]
 800c13c:	4a0a      	ldr	r2, [pc, #40]	; (800c168 <tcp_bind+0x12c>)
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	f005 fc9b 	bl	8011a7c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3720      	adds	r7, #32
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}
 800c150:	0801bd9c 	.word	0x0801bd9c
 800c154:	080199ac 	.word	0x080199ac
 800c158:	08019b40 	.word	0x08019b40
 800c15c:	080199f0 	.word	0x080199f0
 800c160:	08019b58 	.word	0x08019b58
 800c164:	0801bd64 	.word	0x0801bd64
 800c168:	2000f048 	.word	0x2000f048

0800c16c <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	4613      	mov	r3, r2
 800c178:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 800c17a:	68bb      	ldr	r3, [r7, #8]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d106      	bne.n	800c18e <tcp_accept_null+0x22>
 800c180:	4b07      	ldr	r3, [pc, #28]	; (800c1a0 <tcp_accept_null+0x34>)
 800c182:	f240 320f 	movw	r2, #783	; 0x30f
 800c186:	4907      	ldr	r1, [pc, #28]	; (800c1a4 <tcp_accept_null+0x38>)
 800c188:	4807      	ldr	r0, [pc, #28]	; (800c1a8 <tcp_accept_null+0x3c>)
 800c18a:	f00a fe71 	bl	8016e70 <iprintf>

  tcp_abort(pcb);
 800c18e:	68b8      	ldr	r0, [r7, #8]
 800c190:	f7ff ff48 	bl	800c024 <tcp_abort>

  return ERR_ABRT;
 800c194:	f06f 030c 	mvn.w	r3, #12
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3710      	adds	r7, #16
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bd80      	pop	{r7, pc}
 800c1a0:	080199ac 	.word	0x080199ac
 800c1a4:	08019b80 	.word	0x08019b80
 800c1a8:	080199f0 	.word	0x080199f0

0800c1ac <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b088      	sub	sp, #32
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	460b      	mov	r3, r1
 800c1b6:	607a      	str	r2, [r7, #4]
 800c1b8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d109      	bne.n	800c1d8 <tcp_listen_with_backlog_and_err+0x2c>
 800c1c4:	4b47      	ldr	r3, [pc, #284]	; (800c2e4 <tcp_listen_with_backlog_and_err+0x138>)
 800c1c6:	f240 3259 	movw	r2, #857	; 0x359
 800c1ca:	4947      	ldr	r1, [pc, #284]	; (800c2e8 <tcp_listen_with_backlog_and_err+0x13c>)
 800c1cc:	4847      	ldr	r0, [pc, #284]	; (800c2ec <tcp_listen_with_backlog_and_err+0x140>)
 800c1ce:	f00a fe4f 	bl	8016e70 <iprintf>
 800c1d2:	23f0      	movs	r3, #240	; 0xf0
 800c1d4:	76fb      	strb	r3, [r7, #27]
 800c1d6:	e079      	b.n	800c2cc <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	7d1b      	ldrb	r3, [r3, #20]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d009      	beq.n	800c1f4 <tcp_listen_with_backlog_and_err+0x48>
 800c1e0:	4b40      	ldr	r3, [pc, #256]	; (800c2e4 <tcp_listen_with_backlog_and_err+0x138>)
 800c1e2:	f240 325a 	movw	r2, #858	; 0x35a
 800c1e6:	4942      	ldr	r1, [pc, #264]	; (800c2f0 <tcp_listen_with_backlog_and_err+0x144>)
 800c1e8:	4840      	ldr	r0, [pc, #256]	; (800c2ec <tcp_listen_with_backlog_and_err+0x140>)
 800c1ea:	f00a fe41 	bl	8016e70 <iprintf>
 800c1ee:	23f1      	movs	r3, #241	; 0xf1
 800c1f0:	76fb      	strb	r3, [r7, #27]
 800c1f2:	e06b      	b.n	800c2cc <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	7d1b      	ldrb	r3, [r3, #20]
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d104      	bne.n	800c206 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800c200:	23f7      	movs	r3, #247	; 0xf7
 800c202:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c204:	e062      	b.n	800c2cc <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800c206:	2002      	movs	r0, #2
 800c208:	f7fe fa0a 	bl	800a620 <memp_malloc>
 800c20c:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800c20e:	69fb      	ldr	r3, [r7, #28]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d102      	bne.n	800c21a <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 800c214:	23ff      	movs	r3, #255	; 0xff
 800c216:	76fb      	strb	r3, [r7, #27]
    goto done;
 800c218:	e058      	b.n	800c2cc <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	691a      	ldr	r2, [r3, #16]
 800c21e:	69fb      	ldr	r3, [r7, #28]
 800c220:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	8ada      	ldrh	r2, [r3, #22]
 800c226:	69fb      	ldr	r3, [r7, #28]
 800c228:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	2201      	movs	r2, #1
 800c22e:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	7d5a      	ldrb	r2, [r3, #21]
 800c234:	69fb      	ldr	r3, [r7, #28]
 800c236:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	7a5a      	ldrb	r2, [r3, #9]
 800c23c:	69fb      	ldr	r3, [r7, #28]
 800c23e:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 800c240:	69fb      	ldr	r3, [r7, #28]
 800c242:	2200      	movs	r2, #0
 800c244:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	7ada      	ldrb	r2, [r3, #11]
 800c24a:	69fb      	ldr	r3, [r7, #28]
 800c24c:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	7a9a      	ldrb	r2, [r3, #10]
 800c252:	69fb      	ldr	r3, [r7, #28]
 800c254:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	69fb      	ldr	r3, [r7, #28]
 800c25c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	8adb      	ldrh	r3, [r3, #22]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d021      	beq.n	800c2aa <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800c266:	4b23      	ldr	r3, [pc, #140]	; (800c2f4 <tcp_listen_with_backlog_and_err+0x148>)
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d105      	bne.n	800c27c <tcp_listen_with_backlog_and_err+0xd0>
 800c270:	4b20      	ldr	r3, [pc, #128]	; (800c2f4 <tcp_listen_with_backlog_and_err+0x148>)
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	68db      	ldr	r3, [r3, #12]
 800c276:	4a1f      	ldr	r2, [pc, #124]	; (800c2f4 <tcp_listen_with_backlog_and_err+0x148>)
 800c278:	6013      	str	r3, [r2, #0]
 800c27a:	e013      	b.n	800c2a4 <tcp_listen_with_backlog_and_err+0xf8>
 800c27c:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <tcp_listen_with_backlog_and_err+0x148>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	617b      	str	r3, [r7, #20]
 800c282:	e00c      	b.n	800c29e <tcp_listen_with_backlog_and_err+0xf2>
 800c284:	697b      	ldr	r3, [r7, #20]
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	68fa      	ldr	r2, [r7, #12]
 800c28a:	429a      	cmp	r2, r3
 800c28c:	d104      	bne.n	800c298 <tcp_listen_with_backlog_and_err+0xec>
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	68da      	ldr	r2, [r3, #12]
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	60da      	str	r2, [r3, #12]
 800c296:	e005      	b.n	800c2a4 <tcp_listen_with_backlog_and_err+0xf8>
 800c298:	697b      	ldr	r3, [r7, #20]
 800c29a:	68db      	ldr	r3, [r3, #12]
 800c29c:	617b      	str	r3, [r7, #20]
 800c29e:	697b      	ldr	r3, [r7, #20]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1ef      	bne.n	800c284 <tcp_listen_with_backlog_and_err+0xd8>
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	2200      	movs	r2, #0
 800c2a8:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 800c2aa:	68f8      	ldr	r0, [r7, #12]
 800c2ac:	f7ff fb76 	bl	800b99c <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800c2b0:	69fb      	ldr	r3, [r7, #28]
 800c2b2:	4a11      	ldr	r2, [pc, #68]	; (800c2f8 <tcp_listen_with_backlog_and_err+0x14c>)
 800c2b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800c2b6:	4b11      	ldr	r3, [pc, #68]	; (800c2fc <tcp_listen_with_backlog_and_err+0x150>)
 800c2b8:	681a      	ldr	r2, [r3, #0]
 800c2ba:	69fb      	ldr	r3, [r7, #28]
 800c2bc:	60da      	str	r2, [r3, #12]
 800c2be:	4a0f      	ldr	r2, [pc, #60]	; (800c2fc <tcp_listen_with_backlog_and_err+0x150>)
 800c2c0:	69fb      	ldr	r3, [r7, #28]
 800c2c2:	6013      	str	r3, [r2, #0]
 800c2c4:	f005 fbda 	bl	8011a7c <tcp_timer_needed>
  res = ERR_OK;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d002      	beq.n	800c2d8 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	7efa      	ldrb	r2, [r7, #27]
 800c2d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800c2d8:	69fb      	ldr	r3, [r7, #28]
}
 800c2da:	4618      	mov	r0, r3
 800c2dc:	3720      	adds	r7, #32
 800c2de:	46bd      	mov	sp, r7
 800c2e0:	bd80      	pop	{r7, pc}
 800c2e2:	bf00      	nop
 800c2e4:	080199ac 	.word	0x080199ac
 800c2e8:	08019ba0 	.word	0x08019ba0
 800c2ec:	080199f0 	.word	0x080199f0
 800c2f0:	08019bd0 	.word	0x08019bd0
 800c2f4:	2000f048 	.word	0x2000f048
 800c2f8:	0800c16d 	.word	0x0800c16d
 800c2fc:	2000f044 	.word	0x2000f044

0800c300 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c300:	b580      	push	{r7, lr}
 800c302:	b084      	sub	sp, #16
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d106      	bne.n	800c31c <tcp_update_rcv_ann_wnd+0x1c>
 800c30e:	4b25      	ldr	r3, [pc, #148]	; (800c3a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c310:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c314:	4924      	ldr	r1, [pc, #144]	; (800c3a8 <tcp_update_rcv_ann_wnd+0xa8>)
 800c316:	4825      	ldr	r0, [pc, #148]	; (800c3ac <tcp_update_rcv_ann_wnd+0xac>)
 800c318:	f00a fdaa 	bl	8016e70 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c320:	687a      	ldr	r2, [r7, #4]
 800c322:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c324:	4413      	add	r3, r2
 800c326:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c32c:	687a      	ldr	r2, [r7, #4]
 800c32e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c330:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c334:	bf28      	it	cs
 800c336:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c33a:	b292      	uxth	r2, r2
 800c33c:	4413      	add	r3, r2
 800c33e:	68fa      	ldr	r2, [r7, #12]
 800c340:	1ad3      	subs	r3, r2, r3
 800c342:	2b00      	cmp	r3, #0
 800c344:	db08      	blt.n	800c358 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c352:	68fa      	ldr	r2, [r7, #12]
 800c354:	1ad3      	subs	r3, r2, r3
 800c356:	e020      	b.n	800c39a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c360:	1ad3      	subs	r3, r2, r3
 800c362:	2b00      	cmp	r3, #0
 800c364:	dd03      	ble.n	800c36e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	2200      	movs	r2, #0
 800c36a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c36c:	e014      	b.n	800c398 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c376:	1ad3      	subs	r3, r2, r3
 800c378:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c380:	d306      	bcc.n	800c390 <tcp_update_rcv_ann_wnd+0x90>
 800c382:	4b08      	ldr	r3, [pc, #32]	; (800c3a4 <tcp_update_rcv_ann_wnd+0xa4>)
 800c384:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c388:	4909      	ldr	r1, [pc, #36]	; (800c3b0 <tcp_update_rcv_ann_wnd+0xb0>)
 800c38a:	4808      	ldr	r0, [pc, #32]	; (800c3ac <tcp_update_rcv_ann_wnd+0xac>)
 800c38c:	f00a fd70 	bl	8016e70 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	b29a      	uxth	r2, r3
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c398:	2300      	movs	r3, #0
  }
}
 800c39a:	4618      	mov	r0, r3
 800c39c:	3710      	adds	r7, #16
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	bd80      	pop	{r7, pc}
 800c3a2:	bf00      	nop
 800c3a4:	080199ac 	.word	0x080199ac
 800c3a8:	08019c08 	.word	0x08019c08
 800c3ac:	080199f0 	.word	0x080199f0
 800c3b0:	08019c2c 	.word	0x08019c2c

0800c3b4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	460b      	mov	r3, r1
 800c3be:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d107      	bne.n	800c3d6 <tcp_recved+0x22>
 800c3c6:	4b1f      	ldr	r3, [pc, #124]	; (800c444 <tcp_recved+0x90>)
 800c3c8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c3cc:	491e      	ldr	r1, [pc, #120]	; (800c448 <tcp_recved+0x94>)
 800c3ce:	481f      	ldr	r0, [pc, #124]	; (800c44c <tcp_recved+0x98>)
 800c3d0:	f00a fd4e 	bl	8016e70 <iprintf>
 800c3d4:	e032      	b.n	800c43c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	7d1b      	ldrb	r3, [r3, #20]
 800c3da:	2b01      	cmp	r3, #1
 800c3dc:	d106      	bne.n	800c3ec <tcp_recved+0x38>
 800c3de:	4b19      	ldr	r3, [pc, #100]	; (800c444 <tcp_recved+0x90>)
 800c3e0:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c3e4:	491a      	ldr	r1, [pc, #104]	; (800c450 <tcp_recved+0x9c>)
 800c3e6:	4819      	ldr	r0, [pc, #100]	; (800c44c <tcp_recved+0x98>)
 800c3e8:	f00a fd42 	bl	8016e70 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c3f0:	887b      	ldrh	r3, [r7, #2]
 800c3f2:	4413      	add	r3, r2
 800c3f4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c3f6:	89fb      	ldrh	r3, [r7, #14]
 800c3f8:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c3fc:	d804      	bhi.n	800c408 <tcp_recved+0x54>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c402:	89fa      	ldrh	r2, [r7, #14]
 800c404:	429a      	cmp	r2, r3
 800c406:	d204      	bcs.n	800c412 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c40e:	851a      	strh	r2, [r3, #40]	; 0x28
 800c410:	e002      	b.n	800c418 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	89fa      	ldrh	r2, [r7, #14]
 800c416:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f7ff ff71 	bl	800c300 <tcp_update_rcv_ann_wnd>
 800c41e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c420:	68bb      	ldr	r3, [r7, #8]
 800c422:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c426:	d309      	bcc.n	800c43c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	8b5b      	ldrh	r3, [r3, #26]
 800c42c:	f043 0302 	orr.w	r3, r3, #2
 800c430:	b29a      	uxth	r2, r3
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f004 fbaa 	bl	8010b90 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c43c:	3710      	adds	r7, #16
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	bf00      	nop
 800c444:	080199ac 	.word	0x080199ac
 800c448:	08019c48 	.word	0x08019c48
 800c44c:	080199f0 	.word	0x080199f0
 800c450:	08019c60 	.word	0x08019c60

0800c454 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800c45e:	4b1e      	ldr	r3, [pc, #120]	; (800c4d8 <tcp_new_port+0x84>)
 800c460:	881b      	ldrh	r3, [r3, #0]
 800c462:	3301      	adds	r3, #1
 800c464:	b29a      	uxth	r2, r3
 800c466:	4b1c      	ldr	r3, [pc, #112]	; (800c4d8 <tcp_new_port+0x84>)
 800c468:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800c46a:	4b1b      	ldr	r3, [pc, #108]	; (800c4d8 <tcp_new_port+0x84>)
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800c472:	4293      	cmp	r3, r2
 800c474:	d103      	bne.n	800c47e <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800c476:	4b18      	ldr	r3, [pc, #96]	; (800c4d8 <tcp_new_port+0x84>)
 800c478:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800c47c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c47e:	2300      	movs	r3, #0
 800c480:	71fb      	strb	r3, [r7, #7]
 800c482:	e01e      	b.n	800c4c2 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c484:	79fb      	ldrb	r3, [r7, #7]
 800c486:	4a15      	ldr	r2, [pc, #84]	; (800c4dc <tcp_new_port+0x88>)
 800c488:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	603b      	str	r3, [r7, #0]
 800c490:	e011      	b.n	800c4b6 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	8ada      	ldrh	r2, [r3, #22]
 800c496:	4b10      	ldr	r3, [pc, #64]	; (800c4d8 <tcp_new_port+0x84>)
 800c498:	881b      	ldrh	r3, [r3, #0]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d108      	bne.n	800c4b0 <tcp_new_port+0x5c>
        n++;
 800c49e:	88bb      	ldrh	r3, [r7, #4]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800c4a4:	88bb      	ldrh	r3, [r7, #4]
 800c4a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c4aa:	d3d8      	bcc.n	800c45e <tcp_new_port+0xa>
          return 0;
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	e00d      	b.n	800c4cc <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800c4b0:	683b      	ldr	r3, [r7, #0]
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	603b      	str	r3, [r7, #0]
 800c4b6:	683b      	ldr	r3, [r7, #0]
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d1ea      	bne.n	800c492 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800c4bc:	79fb      	ldrb	r3, [r7, #7]
 800c4be:	3301      	adds	r3, #1
 800c4c0:	71fb      	strb	r3, [r7, #7]
 800c4c2:	79fb      	ldrb	r3, [r7, #7]
 800c4c4:	2b03      	cmp	r3, #3
 800c4c6:	d9dd      	bls.n	800c484 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800c4c8:	4b03      	ldr	r3, [pc, #12]	; (800c4d8 <tcp_new_port+0x84>)
 800c4ca:	881b      	ldrh	r3, [r3, #0]
}
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	370c      	adds	r7, #12
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d6:	4770      	bx	lr
 800c4d8:	20000010 	.word	0x20000010
 800c4dc:	0801bd64 	.word	0x0801bd64

0800c4e0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c4e0:	b5b0      	push	{r4, r5, r7, lr}
 800c4e2:	b090      	sub	sp, #64	; 0x40
 800c4e4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c4ec:	4b94      	ldr	r3, [pc, #592]	; (800c740 <tcp_slowtmr+0x260>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	3301      	adds	r3, #1
 800c4f2:	4a93      	ldr	r2, [pc, #588]	; (800c740 <tcp_slowtmr+0x260>)
 800c4f4:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c4f6:	4b93      	ldr	r3, [pc, #588]	; (800c744 <tcp_slowtmr+0x264>)
 800c4f8:	781b      	ldrb	r3, [r3, #0]
 800c4fa:	3301      	adds	r3, #1
 800c4fc:	b2da      	uxtb	r2, r3
 800c4fe:	4b91      	ldr	r3, [pc, #580]	; (800c744 <tcp_slowtmr+0x264>)
 800c500:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c502:	2300      	movs	r3, #0
 800c504:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c506:	4b90      	ldr	r3, [pc, #576]	; (800c748 <tcp_slowtmr+0x268>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c50c:	e29f      	b.n	800ca4e <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c50e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c510:	7d1b      	ldrb	r3, [r3, #20]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d106      	bne.n	800c524 <tcp_slowtmr+0x44>
 800c516:	4b8d      	ldr	r3, [pc, #564]	; (800c74c <tcp_slowtmr+0x26c>)
 800c518:	f240 42be 	movw	r2, #1214	; 0x4be
 800c51c:	498c      	ldr	r1, [pc, #560]	; (800c750 <tcp_slowtmr+0x270>)
 800c51e:	488d      	ldr	r0, [pc, #564]	; (800c754 <tcp_slowtmr+0x274>)
 800c520:	f00a fca6 	bl	8016e70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	7d1b      	ldrb	r3, [r3, #20]
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d106      	bne.n	800c53a <tcp_slowtmr+0x5a>
 800c52c:	4b87      	ldr	r3, [pc, #540]	; (800c74c <tcp_slowtmr+0x26c>)
 800c52e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c532:	4989      	ldr	r1, [pc, #548]	; (800c758 <tcp_slowtmr+0x278>)
 800c534:	4887      	ldr	r0, [pc, #540]	; (800c754 <tcp_slowtmr+0x274>)
 800c536:	f00a fc9b 	bl	8016e70 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c53c:	7d1b      	ldrb	r3, [r3, #20]
 800c53e:	2b0a      	cmp	r3, #10
 800c540:	d106      	bne.n	800c550 <tcp_slowtmr+0x70>
 800c542:	4b82      	ldr	r3, [pc, #520]	; (800c74c <tcp_slowtmr+0x26c>)
 800c544:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c548:	4984      	ldr	r1, [pc, #528]	; (800c75c <tcp_slowtmr+0x27c>)
 800c54a:	4882      	ldr	r0, [pc, #520]	; (800c754 <tcp_slowtmr+0x274>)
 800c54c:	f00a fc90 	bl	8016e70 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c552:	7f9a      	ldrb	r2, [r3, #30]
 800c554:	4b7b      	ldr	r3, [pc, #492]	; (800c744 <tcp_slowtmr+0x264>)
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d105      	bne.n	800c568 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c562:	68db      	ldr	r3, [r3, #12]
 800c564:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c566:	e272      	b.n	800ca4e <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c568:	4b76      	ldr	r3, [pc, #472]	; (800c744 <tcp_slowtmr+0x264>)
 800c56a:	781a      	ldrb	r2, [r3, #0]
 800c56c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c570:	2300      	movs	r3, #0
 800c572:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c576:	2300      	movs	r3, #0
 800c578:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57e:	7d1b      	ldrb	r3, [r3, #20]
 800c580:	2b02      	cmp	r3, #2
 800c582:	d10a      	bne.n	800c59a <tcp_slowtmr+0xba>
 800c584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c58a:	2b05      	cmp	r3, #5
 800c58c:	d905      	bls.n	800c59a <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c58e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c592:	3301      	adds	r3, #1
 800c594:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c598:	e11e      	b.n	800c7d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c59a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c59c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c5a0:	2b0b      	cmp	r3, #11
 800c5a2:	d905      	bls.n	800c5b0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c5a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5ae:	e113      	b.n	800c7d8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d075      	beq.n	800c6a6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c5ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d006      	beq.n	800c5d0 <tcp_slowtmr+0xf0>
 800c5c2:	4b62      	ldr	r3, [pc, #392]	; (800c74c <tcp_slowtmr+0x26c>)
 800c5c4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c5c8:	4965      	ldr	r1, [pc, #404]	; (800c760 <tcp_slowtmr+0x280>)
 800c5ca:	4862      	ldr	r0, [pc, #392]	; (800c754 <tcp_slowtmr+0x274>)
 800c5cc:	f00a fc50 	bl	8016e70 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c5d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <tcp_slowtmr+0x106>
 800c5d8:	4b5c      	ldr	r3, [pc, #368]	; (800c74c <tcp_slowtmr+0x26c>)
 800c5da:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c5de:	4961      	ldr	r1, [pc, #388]	; (800c764 <tcp_slowtmr+0x284>)
 800c5e0:	485c      	ldr	r0, [pc, #368]	; (800c754 <tcp_slowtmr+0x274>)
 800c5e2:	f00a fc45 	bl	8016e70 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c5ec:	2b0b      	cmp	r3, #11
 800c5ee:	d905      	bls.n	800c5fc <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5f4:	3301      	adds	r3, #1
 800c5f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c5fa:	e0ed      	b.n	800c7d8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fe:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c602:	3b01      	subs	r3, #1
 800c604:	4a58      	ldr	r2, [pc, #352]	; (800c768 <tcp_slowtmr+0x288>)
 800c606:	5cd3      	ldrb	r3, [r2, r3]
 800c608:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c60c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c610:	7c7a      	ldrb	r2, [r7, #17]
 800c612:	429a      	cmp	r2, r3
 800c614:	d907      	bls.n	800c626 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c618:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c61c:	3301      	adds	r3, #1
 800c61e:	b2da      	uxtb	r2, r3
 800c620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c622:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c628:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c62c:	7c7a      	ldrb	r2, [r7, #17]
 800c62e:	429a      	cmp	r2, r3
 800c630:	f200 80d2 	bhi.w	800c7d8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c634:	2301      	movs	r3, #1
 800c636:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c63a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d108      	bne.n	800c654 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c644:	f005 f94c 	bl	80118e0 <tcp_zero_window_probe>
 800c648:	4603      	mov	r3, r0
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d014      	beq.n	800c678 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c64e:	2300      	movs	r3, #0
 800c650:	623b      	str	r3, [r7, #32]
 800c652:	e011      	b.n	800c678 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c65a:	4619      	mov	r1, r3
 800c65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c65e:	f004 f811 	bl	8010684 <tcp_split_unsent_seg>
 800c662:	4603      	mov	r3, r0
 800c664:	2b00      	cmp	r3, #0
 800c666:	d107      	bne.n	800c678 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c668:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c66a:	f004 fa91 	bl	8010b90 <tcp_output>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d101      	bne.n	800c678 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c674:	2300      	movs	r3, #0
 800c676:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	f000 80ac 	beq.w	800c7d8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c682:	2200      	movs	r2, #0
 800c684:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c68e:	2b06      	cmp	r3, #6
 800c690:	f200 80a2 	bhi.w	800c7d8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c696:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c69a:	3301      	adds	r3, #1
 800c69c:	b2da      	uxtb	r2, r3
 800c69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c6a4:	e098      	b.n	800c7d8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	db0f      	blt.n	800c6d0 <tcp_slowtmr+0x1f0>
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6b6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c6ba:	4293      	cmp	r3, r2
 800c6bc:	d008      	beq.n	800c6d0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c6be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	3301      	adds	r3, #1
 800c6c8:	b29b      	uxth	r3, r3
 800c6ca:	b21a      	sxth	r2, r3
 800c6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ce:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c6d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c6d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c6dc:	429a      	cmp	r2, r3
 800c6de:	db7b      	blt.n	800c7d8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c6e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6e2:	f004 fd47 	bl	8011174 <tcp_rexmit_rto_prepare>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d007      	beq.n	800c6fc <tcp_slowtmr+0x21c>
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d171      	bne.n	800c7d8 <tcp_slowtmr+0x2f8>
 800c6f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d06d      	beq.n	800c7d8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c6fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6fe:	7d1b      	ldrb	r3, [r3, #20]
 800c700:	2b02      	cmp	r3, #2
 800c702:	d03a      	beq.n	800c77a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c706:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c70a:	2b0c      	cmp	r3, #12
 800c70c:	bf28      	it	cs
 800c70e:	230c      	movcs	r3, #12
 800c710:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c714:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c718:	10db      	asrs	r3, r3, #3
 800c71a:	b21b      	sxth	r3, r3
 800c71c:	461a      	mov	r2, r3
 800c71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c720:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c724:	4413      	add	r3, r2
 800c726:	7efa      	ldrb	r2, [r7, #27]
 800c728:	4910      	ldr	r1, [pc, #64]	; (800c76c <tcp_slowtmr+0x28c>)
 800c72a:	5c8a      	ldrb	r2, [r1, r2]
 800c72c:	4093      	lsls	r3, r2
 800c72e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c736:	4293      	cmp	r3, r2
 800c738:	dc1a      	bgt.n	800c770 <tcp_slowtmr+0x290>
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	b21a      	sxth	r2, r3
 800c73e:	e019      	b.n	800c774 <tcp_slowtmr+0x294>
 800c740:	2000f040 	.word	0x2000f040
 800c744:	200085aa 	.word	0x200085aa
 800c748:	2000f03c 	.word	0x2000f03c
 800c74c:	080199ac 	.word	0x080199ac
 800c750:	08019cf0 	.word	0x08019cf0
 800c754:	080199f0 	.word	0x080199f0
 800c758:	08019d1c 	.word	0x08019d1c
 800c75c:	08019d48 	.word	0x08019d48
 800c760:	08019d78 	.word	0x08019d78
 800c764:	08019dac 	.word	0x08019dac
 800c768:	0801bd5c 	.word	0x0801bd5c
 800c76c:	0801bd4c 	.word	0x0801bd4c
 800c770:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c776:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c77a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77c:	2200      	movs	r2, #0
 800c77e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c782:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c78c:	4293      	cmp	r3, r2
 800c78e:	bf28      	it	cs
 800c790:	4613      	movcs	r3, r2
 800c792:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c794:	8a7b      	ldrh	r3, [r7, #18]
 800c796:	085b      	lsrs	r3, r3, #1
 800c798:	b29a      	uxth	r2, r3
 800c79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c7a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7aa:	005b      	lsls	r3, r3, #1
 800c7ac:	b29b      	uxth	r3, r3
 800c7ae:	429a      	cmp	r2, r3
 800c7b0:	d206      	bcs.n	800c7c0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c7b6:	005b      	lsls	r3, r3, #1
 800c7b8:	b29a      	uxth	r2, r3
 800c7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7bc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7cc:	2200      	movs	r2, #0
 800c7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c7d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7d4:	f004 fd3e 	bl	8011254 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7da:	7d1b      	ldrb	r3, [r3, #20]
 800c7dc:	2b06      	cmp	r3, #6
 800c7de:	d111      	bne.n	800c804 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7e2:	8b5b      	ldrh	r3, [r3, #26]
 800c7e4:	f003 0310 	and.w	r3, r3, #16
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d00b      	beq.n	800c804 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c7ec:	4b9d      	ldr	r3, [pc, #628]	; (800ca64 <tcp_slowtmr+0x584>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7f2:	6a1b      	ldr	r3, [r3, #32]
 800c7f4:	1ad3      	subs	r3, r2, r3
 800c7f6:	2b28      	cmp	r3, #40	; 0x28
 800c7f8:	d904      	bls.n	800c804 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c7fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7fe:	3301      	adds	r3, #1
 800c800:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c806:	7a5b      	ldrb	r3, [r3, #9]
 800c808:	f003 0308 	and.w	r3, r3, #8
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d04c      	beq.n	800c8aa <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c812:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c814:	2b04      	cmp	r3, #4
 800c816:	d003      	beq.n	800c820 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c818:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c81c:	2b07      	cmp	r3, #7
 800c81e:	d144      	bne.n	800c8aa <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c820:	4b90      	ldr	r3, [pc, #576]	; (800ca64 <tcp_slowtmr+0x584>)
 800c822:	681a      	ldr	r2, [r3, #0]
 800c824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c826:	6a1b      	ldr	r3, [r3, #32]
 800c828:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c82a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c82c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c830:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c834:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c838:	498b      	ldr	r1, [pc, #556]	; (800ca68 <tcp_slowtmr+0x588>)
 800c83a:	fba1 1303 	umull	r1, r3, r1, r3
 800c83e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c840:	429a      	cmp	r2, r3
 800c842:	d90a      	bls.n	800c85a <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c844:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c848:	3301      	adds	r3, #1
 800c84a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c84e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c852:	3301      	adds	r3, #1
 800c854:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c858:	e027      	b.n	800c8aa <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c85a:	4b82      	ldr	r3, [pc, #520]	; (800ca64 <tcp_slowtmr+0x584>)
 800c85c:	681a      	ldr	r2, [r3, #0]
 800c85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c860:	6a1b      	ldr	r3, [r3, #32]
 800c862:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c866:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c870:	4618      	mov	r0, r3
 800c872:	4b7e      	ldr	r3, [pc, #504]	; (800ca6c <tcp_slowtmr+0x58c>)
 800c874:	fb03 f300 	mul.w	r3, r3, r0
 800c878:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c87a:	497b      	ldr	r1, [pc, #492]	; (800ca68 <tcp_slowtmr+0x588>)
 800c87c:	fba1 1303 	umull	r1, r3, r1, r3
 800c880:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c882:	429a      	cmp	r2, r3
 800c884:	d911      	bls.n	800c8aa <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c886:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c888:	f004 ffea 	bl	8011860 <tcp_keepalive>
 800c88c:	4603      	mov	r3, r0
 800c88e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c892:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c896:	2b00      	cmp	r3, #0
 800c898:	d107      	bne.n	800c8aa <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c89c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c8a0:	3301      	adds	r3, #1
 800c8a2:	b2da      	uxtb	r2, r3
 800c8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a6:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d011      	beq.n	800c8d6 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c8b2:	4b6c      	ldr	r3, [pc, #432]	; (800ca64 <tcp_slowtmr+0x584>)
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b8:	6a1b      	ldr	r3, [r3, #32]
 800c8ba:	1ad2      	subs	r2, r2, r3
 800c8bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	460b      	mov	r3, r1
 800c8c6:	005b      	lsls	r3, r3, #1
 800c8c8:	440b      	add	r3, r1
 800c8ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d302      	bcc.n	800c8d6 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c8d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c8d2:	f000 fea9 	bl	800d628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c8d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d8:	7d1b      	ldrb	r3, [r3, #20]
 800c8da:	2b03      	cmp	r3, #3
 800c8dc:	d10b      	bne.n	800c8f6 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c8de:	4b61      	ldr	r3, [pc, #388]	; (800ca64 <tcp_slowtmr+0x584>)
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e4:	6a1b      	ldr	r3, [r3, #32]
 800c8e6:	1ad3      	subs	r3, r2, r3
 800c8e8:	2b28      	cmp	r3, #40	; 0x28
 800c8ea:	d904      	bls.n	800c8f6 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c8ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8f0:	3301      	adds	r3, #1
 800c8f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	7d1b      	ldrb	r3, [r3, #20]
 800c8fa:	2b09      	cmp	r3, #9
 800c8fc:	d10b      	bne.n	800c916 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c8fe:	4b59      	ldr	r3, [pc, #356]	; (800ca64 <tcp_slowtmr+0x584>)
 800c900:	681a      	ldr	r2, [r3, #0]
 800c902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	2bf0      	cmp	r3, #240	; 0xf0
 800c90a:	d904      	bls.n	800c916 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c90c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c910:	3301      	adds	r3, #1
 800c912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c916:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d060      	beq.n	800c9e0 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c924:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c926:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c928:	f000 fcca 	bl	800d2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c92c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d010      	beq.n	800c954 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c932:	4b4f      	ldr	r3, [pc, #316]	; (800ca70 <tcp_slowtmr+0x590>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c938:	429a      	cmp	r2, r3
 800c93a:	d106      	bne.n	800c94a <tcp_slowtmr+0x46a>
 800c93c:	4b4d      	ldr	r3, [pc, #308]	; (800ca74 <tcp_slowtmr+0x594>)
 800c93e:	f240 526d 	movw	r2, #1389	; 0x56d
 800c942:	494d      	ldr	r1, [pc, #308]	; (800ca78 <tcp_slowtmr+0x598>)
 800c944:	484d      	ldr	r0, [pc, #308]	; (800ca7c <tcp_slowtmr+0x59c>)
 800c946:	f00a fa93 	bl	8016e70 <iprintf>
        prev->next = pcb->next;
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	68da      	ldr	r2, [r3, #12]
 800c94e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c950:	60da      	str	r2, [r3, #12]
 800c952:	e00f      	b.n	800c974 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c954:	4b46      	ldr	r3, [pc, #280]	; (800ca70 <tcp_slowtmr+0x590>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d006      	beq.n	800c96c <tcp_slowtmr+0x48c>
 800c95e:	4b45      	ldr	r3, [pc, #276]	; (800ca74 <tcp_slowtmr+0x594>)
 800c960:	f240 5271 	movw	r2, #1393	; 0x571
 800c964:	4946      	ldr	r1, [pc, #280]	; (800ca80 <tcp_slowtmr+0x5a0>)
 800c966:	4845      	ldr	r0, [pc, #276]	; (800ca7c <tcp_slowtmr+0x59c>)
 800c968:	f00a fa82 	bl	8016e70 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c96c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c96e:	68db      	ldr	r3, [r3, #12]
 800c970:	4a3f      	ldr	r2, [pc, #252]	; (800ca70 <tcp_slowtmr+0x590>)
 800c972:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c974:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d013      	beq.n	800c9a4 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c97e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c982:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c984:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	3304      	adds	r3, #4
 800c98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c98c:	8ad2      	ldrh	r2, [r2, #22]
 800c98e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c990:	8b09      	ldrh	r1, [r1, #24]
 800c992:	9102      	str	r1, [sp, #8]
 800c994:	9201      	str	r2, [sp, #4]
 800c996:	9300      	str	r3, [sp, #0]
 800c998:	462b      	mov	r3, r5
 800c99a:	4622      	mov	r2, r4
 800c99c:	4601      	mov	r1, r0
 800c99e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9a0:	f004 feaa 	bl	80116f8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	691b      	ldr	r3, [r3, #16]
 800c9a8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c9aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9ac:	7d1b      	ldrb	r3, [r3, #20]
 800c9ae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c9ba:	6838      	ldr	r0, [r7, #0]
 800c9bc:	f7fe ffee 	bl	800b99c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c9c0:	4b30      	ldr	r3, [pc, #192]	; (800ca84 <tcp_slowtmr+0x5a4>)
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <tcp_slowtmr+0x4f6>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	f06f 010c 	mvn.w	r1, #12
 800c9d2:	68b8      	ldr	r0, [r7, #8]
 800c9d4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c9d6:	4b2b      	ldr	r3, [pc, #172]	; (800ca84 <tcp_slowtmr+0x5a4>)
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d037      	beq.n	800ca4e <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c9de:	e590      	b.n	800c502 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c9e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e6:	68db      	ldr	r3, [r3, #12]
 800c9e8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ec:	7f1b      	ldrb	r3, [r3, #28]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c9f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f8:	7f1a      	ldrb	r2, [r3, #28]
 800c9fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fc:	7f5b      	ldrb	r3, [r3, #29]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d325      	bcc.n	800ca4e <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800ca02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca04:	2200      	movs	r2, #0
 800ca06:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800ca08:	4b1e      	ldr	r3, [pc, #120]	; (800ca84 <tcp_slowtmr+0x5a4>)
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800ca0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d00b      	beq.n	800ca30 <tcp_slowtmr+0x550>
 800ca18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ca20:	6912      	ldr	r2, [r2, #16]
 800ca22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ca24:	4610      	mov	r0, r2
 800ca26:	4798      	blx	r3
 800ca28:	4603      	mov	r3, r0
 800ca2a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800ca2e:	e002      	b.n	800ca36 <tcp_slowtmr+0x556>
 800ca30:	2300      	movs	r3, #0
 800ca32:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ca36:	4b13      	ldr	r3, [pc, #76]	; (800ca84 <tcp_slowtmr+0x5a4>)
 800ca38:	781b      	ldrb	r3, [r3, #0]
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d000      	beq.n	800ca40 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800ca3e:	e560      	b.n	800c502 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800ca40:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d102      	bne.n	800ca4e <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800ca48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca4a:	f004 f8a1 	bl	8010b90 <tcp_output>
  while (pcb != NULL) {
 800ca4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	f47f ad5c 	bne.w	800c50e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800ca56:	2300      	movs	r3, #0
 800ca58:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800ca5a:	4b0b      	ldr	r3, [pc, #44]	; (800ca88 <tcp_slowtmr+0x5a8>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ca60:	e067      	b.n	800cb32 <tcp_slowtmr+0x652>
 800ca62:	bf00      	nop
 800ca64:	2000f040 	.word	0x2000f040
 800ca68:	10624dd3 	.word	0x10624dd3
 800ca6c:	000124f8 	.word	0x000124f8
 800ca70:	2000f03c 	.word	0x2000f03c
 800ca74:	080199ac 	.word	0x080199ac
 800ca78:	08019de4 	.word	0x08019de4
 800ca7c:	080199f0 	.word	0x080199f0
 800ca80:	08019e10 	.word	0x08019e10
 800ca84:	2000f038 	.word	0x2000f038
 800ca88:	2000f04c 	.word	0x2000f04c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ca8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8e:	7d1b      	ldrb	r3, [r3, #20]
 800ca90:	2b0a      	cmp	r3, #10
 800ca92:	d006      	beq.n	800caa2 <tcp_slowtmr+0x5c2>
 800ca94:	4b2b      	ldr	r3, [pc, #172]	; (800cb44 <tcp_slowtmr+0x664>)
 800ca96:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800ca9a:	492b      	ldr	r1, [pc, #172]	; (800cb48 <tcp_slowtmr+0x668>)
 800ca9c:	482b      	ldr	r0, [pc, #172]	; (800cb4c <tcp_slowtmr+0x66c>)
 800ca9e:	f00a f9e7 	bl	8016e70 <iprintf>
    pcb_remove = 0;
 800caa2:	2300      	movs	r3, #0
 800caa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800caa8:	4b29      	ldr	r3, [pc, #164]	; (800cb50 <tcp_slowtmr+0x670>)
 800caaa:	681a      	ldr	r2, [r3, #0]
 800caac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caae:	6a1b      	ldr	r3, [r3, #32]
 800cab0:	1ad3      	subs	r3, r2, r3
 800cab2:	2bf0      	cmp	r3, #240	; 0xf0
 800cab4:	d904      	bls.n	800cac0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cab6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caba:	3301      	adds	r3, #1
 800cabc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d02f      	beq.n	800cb28 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800caca:	f000 fbf9 	bl	800d2c0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d010      	beq.n	800caf6 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cad4:	4b1f      	ldr	r3, [pc, #124]	; (800cb54 <tcp_slowtmr+0x674>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cada:	429a      	cmp	r2, r3
 800cadc:	d106      	bne.n	800caec <tcp_slowtmr+0x60c>
 800cade:	4b19      	ldr	r3, [pc, #100]	; (800cb44 <tcp_slowtmr+0x664>)
 800cae0:	f240 52af 	movw	r2, #1455	; 0x5af
 800cae4:	491c      	ldr	r1, [pc, #112]	; (800cb58 <tcp_slowtmr+0x678>)
 800cae6:	4819      	ldr	r0, [pc, #100]	; (800cb4c <tcp_slowtmr+0x66c>)
 800cae8:	f00a f9c2 	bl	8016e70 <iprintf>
        prev->next = pcb->next;
 800caec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caee:	68da      	ldr	r2, [r3, #12]
 800caf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800caf2:	60da      	str	r2, [r3, #12]
 800caf4:	e00f      	b.n	800cb16 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800caf6:	4b17      	ldr	r3, [pc, #92]	; (800cb54 <tcp_slowtmr+0x674>)
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d006      	beq.n	800cb0e <tcp_slowtmr+0x62e>
 800cb00:	4b10      	ldr	r3, [pc, #64]	; (800cb44 <tcp_slowtmr+0x664>)
 800cb02:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cb06:	4915      	ldr	r1, [pc, #84]	; (800cb5c <tcp_slowtmr+0x67c>)
 800cb08:	4810      	ldr	r0, [pc, #64]	; (800cb4c <tcp_slowtmr+0x66c>)
 800cb0a:	f00a f9b1 	bl	8016e70 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cb0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	4a10      	ldr	r2, [pc, #64]	; (800cb54 <tcp_slowtmr+0x674>)
 800cb14:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cb16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb18:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cb1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb1c:	68db      	ldr	r3, [r3, #12]
 800cb1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cb20:	69f8      	ldr	r0, [r7, #28]
 800cb22:	f7fe ff3b 	bl	800b99c <tcp_free>
 800cb26:	e004      	b.n	800cb32 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cb2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d1a9      	bne.n	800ca8c <tcp_slowtmr+0x5ac>
    }
  }
}
 800cb38:	bf00      	nop
 800cb3a:	bf00      	nop
 800cb3c:	3730      	adds	r7, #48	; 0x30
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bdb0      	pop	{r4, r5, r7, pc}
 800cb42:	bf00      	nop
 800cb44:	080199ac 	.word	0x080199ac
 800cb48:	08019e3c 	.word	0x08019e3c
 800cb4c:	080199f0 	.word	0x080199f0
 800cb50:	2000f040 	.word	0x2000f040
 800cb54:	2000f04c 	.word	0x2000f04c
 800cb58:	08019e6c 	.word	0x08019e6c
 800cb5c:	08019e94 	.word	0x08019e94

0800cb60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800cb66:	4b2d      	ldr	r3, [pc, #180]	; (800cc1c <tcp_fasttmr+0xbc>)
 800cb68:	781b      	ldrb	r3, [r3, #0]
 800cb6a:	3301      	adds	r3, #1
 800cb6c:	b2da      	uxtb	r2, r3
 800cb6e:	4b2b      	ldr	r3, [pc, #172]	; (800cc1c <tcp_fasttmr+0xbc>)
 800cb70:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800cb72:	4b2b      	ldr	r3, [pc, #172]	; (800cc20 <tcp_fasttmr+0xc0>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cb78:	e048      	b.n	800cc0c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	7f9a      	ldrb	r2, [r3, #30]
 800cb7e:	4b27      	ldr	r3, [pc, #156]	; (800cc1c <tcp_fasttmr+0xbc>)
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d03f      	beq.n	800cc06 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800cb86:	4b25      	ldr	r3, [pc, #148]	; (800cc1c <tcp_fasttmr+0xbc>)
 800cb88:	781a      	ldrb	r2, [r3, #0]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	8b5b      	ldrh	r3, [r3, #26]
 800cb92:	f003 0301 	and.w	r3, r3, #1
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d010      	beq.n	800cbbc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	8b5b      	ldrh	r3, [r3, #26]
 800cb9e:	f043 0302 	orr.w	r3, r3, #2
 800cba2:	b29a      	uxth	r2, r3
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f003 fff1 	bl	8010b90 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	8b5b      	ldrh	r3, [r3, #26]
 800cbb2:	f023 0303 	bic.w	r3, r3, #3
 800cbb6:	b29a      	uxth	r2, r3
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	8b5b      	ldrh	r3, [r3, #26]
 800cbc0:	f003 0308 	and.w	r3, r3, #8
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d009      	beq.n	800cbdc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	8b5b      	ldrh	r3, [r3, #26]
 800cbcc:	f023 0308 	bic.w	r3, r3, #8
 800cbd0:	b29a      	uxth	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7ff f874 	bl	800bcc4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	68db      	ldr	r3, [r3, #12]
 800cbe0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00a      	beq.n	800cc00 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cbea:	4b0e      	ldr	r3, [pc, #56]	; (800cc24 <tcp_fasttmr+0xc4>)
 800cbec:	2200      	movs	r2, #0
 800cbee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cbf0:	6878      	ldr	r0, [r7, #4]
 800cbf2:	f000 f819 	bl	800cc28 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cbf6:	4b0b      	ldr	r3, [pc, #44]	; (800cc24 <tcp_fasttmr+0xc4>)
 800cbf8:	781b      	ldrb	r3, [r3, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d000      	beq.n	800cc00 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cbfe:	e7b8      	b.n	800cb72 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cc00:	683b      	ldr	r3, [r7, #0]
 800cc02:	607b      	str	r3, [r7, #4]
 800cc04:	e002      	b.n	800cc0c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	68db      	ldr	r3, [r3, #12]
 800cc0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d1b3      	bne.n	800cb7a <tcp_fasttmr+0x1a>
    }
  }
}
 800cc12:	bf00      	nop
 800cc14:	bf00      	nop
 800cc16:	3708      	adds	r7, #8
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}
 800cc1c:	200085aa 	.word	0x200085aa
 800cc20:	2000f03c 	.word	0x2000f03c
 800cc24:	2000f038 	.word	0x2000f038

0800cc28 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cc28:	b590      	push	{r4, r7, lr}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
 800cc2e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d109      	bne.n	800cc4a <tcp_process_refused_data+0x22>
 800cc36:	4b37      	ldr	r3, [pc, #220]	; (800cd14 <tcp_process_refused_data+0xec>)
 800cc38:	f240 6209 	movw	r2, #1545	; 0x609
 800cc3c:	4936      	ldr	r1, [pc, #216]	; (800cd18 <tcp_process_refused_data+0xf0>)
 800cc3e:	4837      	ldr	r0, [pc, #220]	; (800cd1c <tcp_process_refused_data+0xf4>)
 800cc40:	f00a f916 	bl	8016e70 <iprintf>
 800cc44:	f06f 030f 	mvn.w	r3, #15
 800cc48:	e060      	b.n	800cd0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc4e:	7b5b      	ldrb	r3, [r3, #13]
 800cc50:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc56:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2200      	movs	r2, #0
 800cc5c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00b      	beq.n	800cc80 <tcp_process_refused_data+0x58>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6918      	ldr	r0, [r3, #16]
 800cc72:	2300      	movs	r3, #0
 800cc74:	68ba      	ldr	r2, [r7, #8]
 800cc76:	6879      	ldr	r1, [r7, #4]
 800cc78:	47a0      	blx	r4
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73fb      	strb	r3, [r7, #15]
 800cc7e:	e007      	b.n	800cc90 <tcp_process_refused_data+0x68>
 800cc80:	2300      	movs	r3, #0
 800cc82:	68ba      	ldr	r2, [r7, #8]
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	2000      	movs	r0, #0
 800cc88:	f000 f8a4 	bl	800cdd4 <tcp_recv_null>
 800cc8c:	4603      	mov	r3, r0
 800cc8e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cc90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d12a      	bne.n	800ccee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cc98:	7bbb      	ldrb	r3, [r7, #14]
 800cc9a:	f003 0320 	and.w	r3, r3, #32
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d033      	beq.n	800cd0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cca6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ccaa:	d005      	beq.n	800ccb8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	b29a      	uxth	r2, r3
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d00b      	beq.n	800ccda <tcp_process_refused_data+0xb2>
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6918      	ldr	r0, [r3, #16]
 800cccc:	2300      	movs	r3, #0
 800ccce:	2200      	movs	r2, #0
 800ccd0:	6879      	ldr	r1, [r7, #4]
 800ccd2:	47a0      	blx	r4
 800ccd4:	4603      	mov	r3, r0
 800ccd6:	73fb      	strb	r3, [r7, #15]
 800ccd8:	e001      	b.n	800ccde <tcp_process_refused_data+0xb6>
 800ccda:	2300      	movs	r3, #0
 800ccdc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ccde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce2:	f113 0f0d 	cmn.w	r3, #13
 800cce6:	d110      	bne.n	800cd0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cce8:	f06f 030c 	mvn.w	r3, #12
 800ccec:	e00e      	b.n	800cd0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ccee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf2:	f113 0f0d 	cmn.w	r3, #13
 800ccf6:	d102      	bne.n	800ccfe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ccf8:	f06f 030c 	mvn.w	r3, #12
 800ccfc:	e006      	b.n	800cd0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	68ba      	ldr	r2, [r7, #8]
 800cd02:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800cd04:	f06f 0304 	mvn.w	r3, #4
 800cd08:	e000      	b.n	800cd0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800cd0a:	2300      	movs	r3, #0
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3714      	adds	r7, #20
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd90      	pop	{r4, r7, pc}
 800cd14:	080199ac 	.word	0x080199ac
 800cd18:	08019ebc 	.word	0x08019ebc
 800cd1c:	080199f0 	.word	0x080199f0

0800cd20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b084      	sub	sp, #16
 800cd24:	af00      	add	r7, sp, #0
 800cd26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800cd28:	e007      	b.n	800cd3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 f80a 	bl	800cd4a <tcp_seg_free>
    seg = next;
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d1f4      	bne.n	800cd2a <tcp_segs_free+0xa>
  }
}
 800cd40:	bf00      	nop
 800cd42:	bf00      	nop
 800cd44:	3710      	adds	r7, #16
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	b082      	sub	sp, #8
 800cd4e:	af00      	add	r7, sp, #0
 800cd50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d00c      	beq.n	800cd72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	685b      	ldr	r3, [r3, #4]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d004      	beq.n	800cd6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	4618      	mov	r0, r3
 800cd66:	f7fe fb5d 	bl	800b424 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800cd6a:	6879      	ldr	r1, [r7, #4]
 800cd6c:	2003      	movs	r0, #3
 800cd6e:	f7fd fca9 	bl	800a6c4 <memp_free>
  }
}
 800cd72:	bf00      	nop
 800cd74:	3708      	adds	r7, #8
 800cd76:	46bd      	mov	sp, r7
 800cd78:	bd80      	pop	{r7, pc}
	...

0800cd7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800cd7c:	b580      	push	{r7, lr}
 800cd7e:	b084      	sub	sp, #16
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d106      	bne.n	800cd98 <tcp_seg_copy+0x1c>
 800cd8a:	4b0f      	ldr	r3, [pc, #60]	; (800cdc8 <tcp_seg_copy+0x4c>)
 800cd8c:	f240 6282 	movw	r2, #1666	; 0x682
 800cd90:	490e      	ldr	r1, [pc, #56]	; (800cdcc <tcp_seg_copy+0x50>)
 800cd92:	480f      	ldr	r0, [pc, #60]	; (800cdd0 <tcp_seg_copy+0x54>)
 800cd94:	f00a f86c 	bl	8016e70 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800cd98:	2003      	movs	r0, #3
 800cd9a:	f7fd fc41 	bl	800a620 <memp_malloc>
 800cd9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <tcp_seg_copy+0x2e>
    return NULL;
 800cda6:	2300      	movs	r3, #0
 800cda8:	e00a      	b.n	800cdc0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cdaa:	2210      	movs	r2, #16
 800cdac:	6879      	ldr	r1, [r7, #4]
 800cdae:	68f8      	ldr	r0, [r7, #12]
 800cdb0:	f00a f82e 	bl	8016e10 <memcpy>
  pbuf_ref(cseg->p);
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	685b      	ldr	r3, [r3, #4]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f7fe fbd9 	bl	800b570 <pbuf_ref>
  return cseg;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	080199ac 	.word	0x080199ac
 800cdcc:	08019f00 	.word	0x08019f00
 800cdd0:	080199f0 	.word	0x080199f0

0800cdd4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	60f8      	str	r0, [r7, #12]
 800cddc:	60b9      	str	r1, [r7, #8]
 800cdde:	607a      	str	r2, [r7, #4]
 800cde0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d109      	bne.n	800cdfc <tcp_recv_null+0x28>
 800cde8:	4b12      	ldr	r3, [pc, #72]	; (800ce34 <tcp_recv_null+0x60>)
 800cdea:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cdee:	4912      	ldr	r1, [pc, #72]	; (800ce38 <tcp_recv_null+0x64>)
 800cdf0:	4812      	ldr	r0, [pc, #72]	; (800ce3c <tcp_recv_null+0x68>)
 800cdf2:	f00a f83d 	bl	8016e70 <iprintf>
 800cdf6:	f06f 030f 	mvn.w	r3, #15
 800cdfa:	e016      	b.n	800ce2a <tcp_recv_null+0x56>

  if (p != NULL) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d009      	beq.n	800ce16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	891b      	ldrh	r3, [r3, #8]
 800ce06:	4619      	mov	r1, r3
 800ce08:	68b8      	ldr	r0, [r7, #8]
 800ce0a:	f7ff fad3 	bl	800c3b4 <tcp_recved>
    pbuf_free(p);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f7fe fb08 	bl	800b424 <pbuf_free>
 800ce14:	e008      	b.n	800ce28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ce16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d104      	bne.n	800ce28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ce1e:	68b8      	ldr	r0, [r7, #8]
 800ce20:	f7fe ffba 	bl	800bd98 <tcp_close>
 800ce24:	4603      	mov	r3, r0
 800ce26:	e000      	b.n	800ce2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ce28:	2300      	movs	r3, #0
}
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	3710      	adds	r7, #16
 800ce2e:	46bd      	mov	sp, r7
 800ce30:	bd80      	pop	{r7, pc}
 800ce32:	bf00      	nop
 800ce34:	080199ac 	.word	0x080199ac
 800ce38:	08019f1c 	.word	0x08019f1c
 800ce3c:	080199f0 	.word	0x080199f0

0800ce40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	4603      	mov	r3, r0
 800ce48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ce4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	db01      	blt.n	800ce56 <tcp_kill_prio+0x16>
 800ce52:	79fb      	ldrb	r3, [r7, #7]
 800ce54:	e000      	b.n	800ce58 <tcp_kill_prio+0x18>
 800ce56:	237f      	movs	r3, #127	; 0x7f
 800ce58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ce5a:	7afb      	ldrb	r3, [r7, #11]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d034      	beq.n	800ceca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ce60:	7afb      	ldrb	r3, [r7, #11]
 800ce62:	3b01      	subs	r3, #1
 800ce64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ce66:	2300      	movs	r3, #0
 800ce68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ce6e:	4b19      	ldr	r3, [pc, #100]	; (800ced4 <tcp_kill_prio+0x94>)
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	617b      	str	r3, [r7, #20]
 800ce74:	e01f      	b.n	800ceb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	7d5b      	ldrb	r3, [r3, #21]
 800ce7a:	7afa      	ldrb	r2, [r7, #11]
 800ce7c:	429a      	cmp	r2, r3
 800ce7e:	d80c      	bhi.n	800ce9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ce84:	7afa      	ldrb	r2, [r7, #11]
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d112      	bne.n	800ceb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ce8a:	4b13      	ldr	r3, [pc, #76]	; (800ced8 <tcp_kill_prio+0x98>)
 800ce8c:	681a      	ldr	r2, [r3, #0]
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	6a1b      	ldr	r3, [r3, #32]
 800ce92:	1ad3      	subs	r3, r2, r3
 800ce94:	68fa      	ldr	r2, [r7, #12]
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d80a      	bhi.n	800ceb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ce9a:	4b0f      	ldr	r3, [pc, #60]	; (800ced8 <tcp_kill_prio+0x98>)
 800ce9c:	681a      	ldr	r2, [r3, #0]
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	6a1b      	ldr	r3, [r3, #32]
 800cea2:	1ad3      	subs	r3, r2, r3
 800cea4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cea6:	697b      	ldr	r3, [r7, #20]
 800cea8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ceaa:	697b      	ldr	r3, [r7, #20]
 800ceac:	7d5b      	ldrb	r3, [r3, #21]
 800ceae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ceb0:	697b      	ldr	r3, [r7, #20]
 800ceb2:	68db      	ldr	r3, [r3, #12]
 800ceb4:	617b      	str	r3, [r7, #20]
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1dc      	bne.n	800ce76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d004      	beq.n	800cecc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cec2:	6938      	ldr	r0, [r7, #16]
 800cec4:	f7ff f8ae 	bl	800c024 <tcp_abort>
 800cec8:	e000      	b.n	800cecc <tcp_kill_prio+0x8c>
    return;
 800ceca:	bf00      	nop
  }
}
 800cecc:	3718      	adds	r7, #24
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}
 800ced2:	bf00      	nop
 800ced4:	2000f03c 	.word	0x2000f03c
 800ced8:	2000f040 	.word	0x2000f040

0800cedc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b086      	sub	sp, #24
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	4603      	mov	r3, r0
 800cee4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cee6:	79fb      	ldrb	r3, [r7, #7]
 800cee8:	2b08      	cmp	r3, #8
 800ceea:	d009      	beq.n	800cf00 <tcp_kill_state+0x24>
 800ceec:	79fb      	ldrb	r3, [r7, #7]
 800ceee:	2b09      	cmp	r3, #9
 800cef0:	d006      	beq.n	800cf00 <tcp_kill_state+0x24>
 800cef2:	4b1a      	ldr	r3, [pc, #104]	; (800cf5c <tcp_kill_state+0x80>)
 800cef4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cef8:	4919      	ldr	r1, [pc, #100]	; (800cf60 <tcp_kill_state+0x84>)
 800cefa:	481a      	ldr	r0, [pc, #104]	; (800cf64 <tcp_kill_state+0x88>)
 800cefc:	f009 ffb8 	bl	8016e70 <iprintf>

  inactivity = 0;
 800cf00:	2300      	movs	r3, #0
 800cf02:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cf04:	2300      	movs	r3, #0
 800cf06:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf08:	4b17      	ldr	r3, [pc, #92]	; (800cf68 <tcp_kill_state+0x8c>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	617b      	str	r3, [r7, #20]
 800cf0e:	e017      	b.n	800cf40 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	7d1b      	ldrb	r3, [r3, #20]
 800cf14:	79fa      	ldrb	r2, [r7, #7]
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d10f      	bne.n	800cf3a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf1a:	4b14      	ldr	r3, [pc, #80]	; (800cf6c <tcp_kill_state+0x90>)
 800cf1c:	681a      	ldr	r2, [r3, #0]
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	6a1b      	ldr	r3, [r3, #32]
 800cf22:	1ad3      	subs	r3, r2, r3
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d807      	bhi.n	800cf3a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cf2a:	4b10      	ldr	r3, [pc, #64]	; (800cf6c <tcp_kill_state+0x90>)
 800cf2c:	681a      	ldr	r2, [r3, #0]
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	6a1b      	ldr	r3, [r3, #32]
 800cf32:	1ad3      	subs	r3, r2, r3
 800cf34:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	68db      	ldr	r3, [r3, #12]
 800cf3e:	617b      	str	r3, [r7, #20]
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d1e4      	bne.n	800cf10 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cf46:	693b      	ldr	r3, [r7, #16]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cf4c:	2100      	movs	r1, #0
 800cf4e:	6938      	ldr	r0, [r7, #16]
 800cf50:	f7fe ffaa 	bl	800bea8 <tcp_abandon>
  }
}
 800cf54:	bf00      	nop
 800cf56:	3718      	adds	r7, #24
 800cf58:	46bd      	mov	sp, r7
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	080199ac 	.word	0x080199ac
 800cf60:	08019f38 	.word	0x08019f38
 800cf64:	080199f0 	.word	0x080199f0
 800cf68:	2000f03c 	.word	0x2000f03c
 800cf6c:	2000f040 	.word	0x2000f040

0800cf70 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	b084      	sub	sp, #16
 800cf74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cf76:	2300      	movs	r3, #0
 800cf78:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cf7a:	2300      	movs	r3, #0
 800cf7c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cf7e:	4b12      	ldr	r3, [pc, #72]	; (800cfc8 <tcp_kill_timewait+0x58>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	60fb      	str	r3, [r7, #12]
 800cf84:	e012      	b.n	800cfac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cf86:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <tcp_kill_timewait+0x5c>)
 800cf88:	681a      	ldr	r2, [r3, #0]
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	6a1b      	ldr	r3, [r3, #32]
 800cf8e:	1ad3      	subs	r3, r2, r3
 800cf90:	687a      	ldr	r2, [r7, #4]
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d807      	bhi.n	800cfa6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cf96:	4b0d      	ldr	r3, [pc, #52]	; (800cfcc <tcp_kill_timewait+0x5c>)
 800cf98:	681a      	ldr	r2, [r3, #0]
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	6a1b      	ldr	r3, [r3, #32]
 800cf9e:	1ad3      	subs	r3, r2, r3
 800cfa0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d1e9      	bne.n	800cf86 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800cfb2:	68bb      	ldr	r3, [r7, #8]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d002      	beq.n	800cfbe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cfb8:	68b8      	ldr	r0, [r7, #8]
 800cfba:	f7ff f833 	bl	800c024 <tcp_abort>
  }
}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	2000f04c 	.word	0x2000f04c
 800cfcc:	2000f040 	.word	0x2000f040

0800cfd0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b082      	sub	sp, #8
 800cfd4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cfd6:	4b10      	ldr	r3, [pc, #64]	; (800d018 <tcp_handle_closepend+0x48>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cfdc:	e014      	b.n	800d008 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	68db      	ldr	r3, [r3, #12]
 800cfe2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	8b5b      	ldrh	r3, [r3, #26]
 800cfe8:	f003 0308 	and.w	r3, r3, #8
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d009      	beq.n	800d004 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	8b5b      	ldrh	r3, [r3, #26]
 800cff4:	f023 0308 	bic.w	r3, r3, #8
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f7fe fe60 	bl	800bcc4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d004:	683b      	ldr	r3, [r7, #0]
 800d006:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	2b00      	cmp	r3, #0
 800d00c:	d1e7      	bne.n	800cfde <tcp_handle_closepend+0xe>
  }
}
 800d00e:	bf00      	nop
 800d010:	bf00      	nop
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000f03c 	.word	0x2000f03c

0800d01c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b084      	sub	sp, #16
 800d020:	af00      	add	r7, sp, #0
 800d022:	4603      	mov	r3, r0
 800d024:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d026:	2001      	movs	r0, #1
 800d028:	f7fd fafa 	bl	800a620 <memp_malloc>
 800d02c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d126      	bne.n	800d082 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d034:	f7ff ffcc 	bl	800cfd0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d038:	f7ff ff9a 	bl	800cf70 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d03c:	2001      	movs	r0, #1
 800d03e:	f7fd faef 	bl	800a620 <memp_malloc>
 800d042:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d11b      	bne.n	800d082 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d04a:	2009      	movs	r0, #9
 800d04c:	f7ff ff46 	bl	800cedc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d050:	2001      	movs	r0, #1
 800d052:	f7fd fae5 	bl	800a620 <memp_malloc>
 800d056:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d111      	bne.n	800d082 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d05e:	2008      	movs	r0, #8
 800d060:	f7ff ff3c 	bl	800cedc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d064:	2001      	movs	r0, #1
 800d066:	f7fd fadb 	bl	800a620 <memp_malloc>
 800d06a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d107      	bne.n	800d082 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d072:	79fb      	ldrb	r3, [r7, #7]
 800d074:	4618      	mov	r0, r3
 800d076:	f7ff fee3 	bl	800ce40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d07a:	2001      	movs	r0, #1
 800d07c:	f7fd fad0 	bl	800a620 <memp_malloc>
 800d080:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d03f      	beq.n	800d108 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d088:	229c      	movs	r2, #156	; 0x9c
 800d08a:	2100      	movs	r1, #0
 800d08c:	68f8      	ldr	r0, [r7, #12]
 800d08e:	f009 fee7 	bl	8016e60 <memset>
    pcb->prio = prio;
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	79fa      	ldrb	r2, [r7, #7]
 800d096:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d09e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d0a8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	22ff      	movs	r2, #255	; 0xff
 800d0b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d0be:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	2206      	movs	r2, #6
 800d0c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2206      	movs	r2, #6
 800d0cc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d0d4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d0de:	4b0d      	ldr	r3, [pc, #52]	; (800d114 <tcp_alloc+0xf8>)
 800d0e0:	681a      	ldr	r2, [r3, #0]
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d0e6:	4b0c      	ldr	r3, [pc, #48]	; (800d118 <tcp_alloc+0xfc>)
 800d0e8:	781a      	ldrb	r2, [r3, #0]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d0f4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	4a08      	ldr	r2, [pc, #32]	; (800d11c <tcp_alloc+0x100>)
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	4a07      	ldr	r2, [pc, #28]	; (800d120 <tcp_alloc+0x104>)
 800d104:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d108:	68fb      	ldr	r3, [r7, #12]
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3710      	adds	r7, #16
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	2000f040 	.word	0x2000f040
 800d118:	200085aa 	.word	0x200085aa
 800d11c:	0800cdd5 	.word	0x0800cdd5
 800d120:	006ddd00 	.word	0x006ddd00

0800d124 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800d124:	b580      	push	{r7, lr}
 800d126:	b084      	sub	sp, #16
 800d128:	af00      	add	r7, sp, #0
 800d12a:	4603      	mov	r3, r0
 800d12c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800d12e:	2040      	movs	r0, #64	; 0x40
 800d130:	f7ff ff74 	bl	800d01c <tcp_alloc>
 800d134:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800d136:	68fb      	ldr	r3, [r7, #12]
}
 800d138:	4618      	mov	r0, r3
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}

0800d140 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800d140:	b480      	push	{r7}
 800d142:	b083      	sub	sp, #12
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d002      	beq.n	800d156 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	683a      	ldr	r2, [r7, #0]
 800d154:	611a      	str	r2, [r3, #16]
  }
}
 800d156:	bf00      	nop
 800d158:	370c      	adds	r7, #12
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
	...

0800d164 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b082      	sub	sp, #8
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d00e      	beq.n	800d192 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	7d1b      	ldrb	r3, [r3, #20]
 800d178:	2b01      	cmp	r3, #1
 800d17a:	d106      	bne.n	800d18a <tcp_recv+0x26>
 800d17c:	4b07      	ldr	r3, [pc, #28]	; (800d19c <tcp_recv+0x38>)
 800d17e:	f240 72df 	movw	r2, #2015	; 0x7df
 800d182:	4907      	ldr	r1, [pc, #28]	; (800d1a0 <tcp_recv+0x3c>)
 800d184:	4807      	ldr	r0, [pc, #28]	; (800d1a4 <tcp_recv+0x40>)
 800d186:	f009 fe73 	bl	8016e70 <iprintf>
    pcb->recv = recv;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	683a      	ldr	r2, [r7, #0]
 800d18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800d192:	bf00      	nop
 800d194:	3708      	adds	r7, #8
 800d196:	46bd      	mov	sp, r7
 800d198:	bd80      	pop	{r7, pc}
 800d19a:	bf00      	nop
 800d19c:	080199ac 	.word	0x080199ac
 800d1a0:	08019f48 	.word	0x08019f48
 800d1a4:	080199f0 	.word	0x080199f0

0800d1a8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800d1a8:	b580      	push	{r7, lr}
 800d1aa:	b082      	sub	sp, #8
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d00e      	beq.n	800d1d6 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	7d1b      	ldrb	r3, [r3, #20]
 800d1bc:	2b01      	cmp	r3, #1
 800d1be:	d106      	bne.n	800d1ce <tcp_sent+0x26>
 800d1c0:	4b07      	ldr	r3, [pc, #28]	; (800d1e0 <tcp_sent+0x38>)
 800d1c2:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800d1c6:	4907      	ldr	r1, [pc, #28]	; (800d1e4 <tcp_sent+0x3c>)
 800d1c8:	4807      	ldr	r0, [pc, #28]	; (800d1e8 <tcp_sent+0x40>)
 800d1ca:	f009 fe51 	bl	8016e70 <iprintf>
    pcb->sent = sent;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	683a      	ldr	r2, [r7, #0]
 800d1d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800d1d6:	bf00      	nop
 800d1d8:	3708      	adds	r7, #8
 800d1da:	46bd      	mov	sp, r7
 800d1dc:	bd80      	pop	{r7, pc}
 800d1de:	bf00      	nop
 800d1e0:	080199ac 	.word	0x080199ac
 800d1e4:	08019f70 	.word	0x08019f70
 800d1e8:	080199f0 	.word	0x080199f0

0800d1ec <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b082      	sub	sp, #8
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	6078      	str	r0, [r7, #4]
 800d1f4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d00e      	beq.n	800d21a <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	7d1b      	ldrb	r3, [r3, #20]
 800d200:	2b01      	cmp	r3, #1
 800d202:	d106      	bne.n	800d212 <tcp_err+0x26>
 800d204:	4b07      	ldr	r3, [pc, #28]	; (800d224 <tcp_err+0x38>)
 800d206:	f640 020d 	movw	r2, #2061	; 0x80d
 800d20a:	4907      	ldr	r1, [pc, #28]	; (800d228 <tcp_err+0x3c>)
 800d20c:	4807      	ldr	r0, [pc, #28]	; (800d22c <tcp_err+0x40>)
 800d20e:	f009 fe2f 	bl	8016e70 <iprintf>
    pcb->errf = err;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	683a      	ldr	r2, [r7, #0]
 800d216:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800d21a:	bf00      	nop
 800d21c:	3708      	adds	r7, #8
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	080199ac 	.word	0x080199ac
 800d228:	08019f98 	.word	0x08019f98
 800d22c:	080199f0 	.word	0x080199f0

0800d230 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800d230:	b480      	push	{r7}
 800d232:	b085      	sub	sp, #20
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d008      	beq.n	800d252 <tcp_accept+0x22>
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	7d1b      	ldrb	r3, [r3, #20]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d104      	bne.n	800d252 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	683a      	ldr	r2, [r7, #0]
 800d250:	619a      	str	r2, [r3, #24]
  }
}
 800d252:	bf00      	nop
 800d254:	3714      	adds	r7, #20
 800d256:	46bd      	mov	sp, r7
 800d258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25c:	4770      	bx	lr
	...

0800d260 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800d260:	b580      	push	{r7, lr}
 800d262:	b084      	sub	sp, #16
 800d264:	af00      	add	r7, sp, #0
 800d266:	60f8      	str	r0, [r7, #12]
 800d268:	60b9      	str	r1, [r7, #8]
 800d26a:	4613      	mov	r3, r2
 800d26c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d107      	bne.n	800d284 <tcp_poll+0x24>
 800d274:	4b0e      	ldr	r3, [pc, #56]	; (800d2b0 <tcp_poll+0x50>)
 800d276:	f640 023d 	movw	r2, #2109	; 0x83d
 800d27a:	490e      	ldr	r1, [pc, #56]	; (800d2b4 <tcp_poll+0x54>)
 800d27c:	480e      	ldr	r0, [pc, #56]	; (800d2b8 <tcp_poll+0x58>)
 800d27e:	f009 fdf7 	bl	8016e70 <iprintf>
 800d282:	e011      	b.n	800d2a8 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	7d1b      	ldrb	r3, [r3, #20]
 800d288:	2b01      	cmp	r3, #1
 800d28a:	d106      	bne.n	800d29a <tcp_poll+0x3a>
 800d28c:	4b08      	ldr	r3, [pc, #32]	; (800d2b0 <tcp_poll+0x50>)
 800d28e:	f640 023e 	movw	r2, #2110	; 0x83e
 800d292:	490a      	ldr	r1, [pc, #40]	; (800d2bc <tcp_poll+0x5c>)
 800d294:	4808      	ldr	r0, [pc, #32]	; (800d2b8 <tcp_poll+0x58>)
 800d296:	f009 fdeb 	bl	8016e70 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	68ba      	ldr	r2, [r7, #8]
 800d29e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	79fa      	ldrb	r2, [r7, #7]
 800d2a6:	775a      	strb	r2, [r3, #29]
}
 800d2a8:	3710      	adds	r7, #16
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	080199ac 	.word	0x080199ac
 800d2b4:	08019fc0 	.word	0x08019fc0
 800d2b8:	080199f0 	.word	0x080199f0
 800d2bc:	08019fd8 	.word	0x08019fd8

0800d2c0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d2c0:	b580      	push	{r7, lr}
 800d2c2:	b082      	sub	sp, #8
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d107      	bne.n	800d2de <tcp_pcb_purge+0x1e>
 800d2ce:	4b21      	ldr	r3, [pc, #132]	; (800d354 <tcp_pcb_purge+0x94>)
 800d2d0:	f640 0251 	movw	r2, #2129	; 0x851
 800d2d4:	4920      	ldr	r1, [pc, #128]	; (800d358 <tcp_pcb_purge+0x98>)
 800d2d6:	4821      	ldr	r0, [pc, #132]	; (800d35c <tcp_pcb_purge+0x9c>)
 800d2d8:	f009 fdca 	bl	8016e70 <iprintf>
 800d2dc:	e037      	b.n	800d34e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7d1b      	ldrb	r3, [r3, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d033      	beq.n	800d34e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d2ea:	2b0a      	cmp	r3, #10
 800d2ec:	d02f      	beq.n	800d34e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d02b      	beq.n	800d34e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d007      	beq.n	800d30e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d302:	4618      	mov	r0, r3
 800d304:	f7fe f88e 	bl	800b424 <pbuf_free>
      pcb->refused_data = NULL;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	2200      	movs	r2, #0
 800d30c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d312:	2b00      	cmp	r3, #0
 800d314:	d002      	beq.n	800d31c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d316:	6878      	ldr	r0, [r7, #4]
 800d318:	f000 f986 	bl	800d628 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d322:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d328:	4618      	mov	r0, r3
 800d32a:	f7ff fcf9 	bl	800cd20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d332:	4618      	mov	r0, r3
 800d334:	f7ff fcf4 	bl	800cd20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	66da      	str	r2, [r3, #108]	; 0x6c
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2200      	movs	r2, #0
 800d34a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d34e:	3708      	adds	r7, #8
 800d350:	46bd      	mov	sp, r7
 800d352:	bd80      	pop	{r7, pc}
 800d354:	080199ac 	.word	0x080199ac
 800d358:	08019ff8 	.word	0x08019ff8
 800d35c:	080199f0 	.word	0x080199f0

0800d360 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	2b00      	cmp	r3, #0
 800d36e:	d106      	bne.n	800d37e <tcp_pcb_remove+0x1e>
 800d370:	4b3e      	ldr	r3, [pc, #248]	; (800d46c <tcp_pcb_remove+0x10c>)
 800d372:	f640 0283 	movw	r2, #2179	; 0x883
 800d376:	493e      	ldr	r1, [pc, #248]	; (800d470 <tcp_pcb_remove+0x110>)
 800d378:	483e      	ldr	r0, [pc, #248]	; (800d474 <tcp_pcb_remove+0x114>)
 800d37a:	f009 fd79 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d106      	bne.n	800d392 <tcp_pcb_remove+0x32>
 800d384:	4b39      	ldr	r3, [pc, #228]	; (800d46c <tcp_pcb_remove+0x10c>)
 800d386:	f640 0284 	movw	r2, #2180	; 0x884
 800d38a:	493b      	ldr	r1, [pc, #236]	; (800d478 <tcp_pcb_remove+0x118>)
 800d38c:	4839      	ldr	r0, [pc, #228]	; (800d474 <tcp_pcb_remove+0x114>)
 800d38e:	f009 fd6f 	bl	8016e70 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	683a      	ldr	r2, [r7, #0]
 800d398:	429a      	cmp	r2, r3
 800d39a:	d105      	bne.n	800d3a8 <tcp_pcb_remove+0x48>
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	68da      	ldr	r2, [r3, #12]
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	e013      	b.n	800d3d0 <tcp_pcb_remove+0x70>
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	60fb      	str	r3, [r7, #12]
 800d3ae:	e00c      	b.n	800d3ca <tcp_pcb_remove+0x6a>
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	683a      	ldr	r2, [r7, #0]
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d104      	bne.n	800d3c4 <tcp_pcb_remove+0x64>
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	68da      	ldr	r2, [r3, #12]
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	60da      	str	r2, [r3, #12]
 800d3c2:	e005      	b.n	800d3d0 <tcp_pcb_remove+0x70>
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	68db      	ldr	r3, [r3, #12]
 800d3c8:	60fb      	str	r3, [r7, #12]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d1ef      	bne.n	800d3b0 <tcp_pcb_remove+0x50>
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	2200      	movs	r2, #0
 800d3d4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d3d6:	6838      	ldr	r0, [r7, #0]
 800d3d8:	f7ff ff72 	bl	800d2c0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d3dc:	683b      	ldr	r3, [r7, #0]
 800d3de:	7d1b      	ldrb	r3, [r3, #20]
 800d3e0:	2b0a      	cmp	r3, #10
 800d3e2:	d013      	beq.n	800d40c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d3e4:	683b      	ldr	r3, [r7, #0]
 800d3e6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d3e8:	2b01      	cmp	r3, #1
 800d3ea:	d00f      	beq.n	800d40c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	8b5b      	ldrh	r3, [r3, #26]
 800d3f0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d009      	beq.n	800d40c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d3f8:	683b      	ldr	r3, [r7, #0]
 800d3fa:	8b5b      	ldrh	r3, [r3, #26]
 800d3fc:	f043 0302 	orr.w	r3, r3, #2
 800d400:	b29a      	uxth	r2, r3
 800d402:	683b      	ldr	r3, [r7, #0]
 800d404:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d406:	6838      	ldr	r0, [r7, #0]
 800d408:	f003 fbc2 	bl	8010b90 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	7d1b      	ldrb	r3, [r3, #20]
 800d410:	2b01      	cmp	r3, #1
 800d412:	d020      	beq.n	800d456 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d414:	683b      	ldr	r3, [r7, #0]
 800d416:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d006      	beq.n	800d42a <tcp_pcb_remove+0xca>
 800d41c:	4b13      	ldr	r3, [pc, #76]	; (800d46c <tcp_pcb_remove+0x10c>)
 800d41e:	f640 0293 	movw	r2, #2195	; 0x893
 800d422:	4916      	ldr	r1, [pc, #88]	; (800d47c <tcp_pcb_remove+0x11c>)
 800d424:	4813      	ldr	r0, [pc, #76]	; (800d474 <tcp_pcb_remove+0x114>)
 800d426:	f009 fd23 	bl	8016e70 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d006      	beq.n	800d440 <tcp_pcb_remove+0xe0>
 800d432:	4b0e      	ldr	r3, [pc, #56]	; (800d46c <tcp_pcb_remove+0x10c>)
 800d434:	f640 0294 	movw	r2, #2196	; 0x894
 800d438:	4911      	ldr	r1, [pc, #68]	; (800d480 <tcp_pcb_remove+0x120>)
 800d43a:	480e      	ldr	r0, [pc, #56]	; (800d474 <tcp_pcb_remove+0x114>)
 800d43c:	f009 fd18 	bl	8016e70 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d444:	2b00      	cmp	r3, #0
 800d446:	d006      	beq.n	800d456 <tcp_pcb_remove+0xf6>
 800d448:	4b08      	ldr	r3, [pc, #32]	; (800d46c <tcp_pcb_remove+0x10c>)
 800d44a:	f640 0296 	movw	r2, #2198	; 0x896
 800d44e:	490d      	ldr	r1, [pc, #52]	; (800d484 <tcp_pcb_remove+0x124>)
 800d450:	4808      	ldr	r0, [pc, #32]	; (800d474 <tcp_pcb_remove+0x114>)
 800d452:	f009 fd0d 	bl	8016e70 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2200      	movs	r2, #0
 800d45a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d45c:	683b      	ldr	r3, [r7, #0]
 800d45e:	2200      	movs	r2, #0
 800d460:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d462:	bf00      	nop
 800d464:	3710      	adds	r7, #16
 800d466:	46bd      	mov	sp, r7
 800d468:	bd80      	pop	{r7, pc}
 800d46a:	bf00      	nop
 800d46c:	080199ac 	.word	0x080199ac
 800d470:	0801a014 	.word	0x0801a014
 800d474:	080199f0 	.word	0x080199f0
 800d478:	0801a030 	.word	0x0801a030
 800d47c:	0801a050 	.word	0x0801a050
 800d480:	0801a068 	.word	0x0801a068
 800d484:	0801a084 	.word	0x0801a084

0800d488 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d106      	bne.n	800d4a4 <tcp_next_iss+0x1c>
 800d496:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <tcp_next_iss+0x38>)
 800d498:	f640 02af 	movw	r2, #2223	; 0x8af
 800d49c:	4909      	ldr	r1, [pc, #36]	; (800d4c4 <tcp_next_iss+0x3c>)
 800d49e:	480a      	ldr	r0, [pc, #40]	; (800d4c8 <tcp_next_iss+0x40>)
 800d4a0:	f009 fce6 	bl	8016e70 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d4a4:	4b09      	ldr	r3, [pc, #36]	; (800d4cc <tcp_next_iss+0x44>)
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	4b09      	ldr	r3, [pc, #36]	; (800d4d0 <tcp_next_iss+0x48>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	4413      	add	r3, r2
 800d4ae:	4a07      	ldr	r2, [pc, #28]	; (800d4cc <tcp_next_iss+0x44>)
 800d4b0:	6013      	str	r3, [r2, #0]
  return iss;
 800d4b2:	4b06      	ldr	r3, [pc, #24]	; (800d4cc <tcp_next_iss+0x44>)
 800d4b4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3708      	adds	r7, #8
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	080199ac 	.word	0x080199ac
 800d4c4:	0801a09c 	.word	0x0801a09c
 800d4c8:	080199f0 	.word	0x080199f0
 800d4cc:	20000014 	.word	0x20000014
 800d4d0:	2000f040 	.word	0x2000f040

0800d4d4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b086      	sub	sp, #24
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d106      	bne.n	800d4f6 <tcp_eff_send_mss_netif+0x22>
 800d4e8:	4b14      	ldr	r3, [pc, #80]	; (800d53c <tcp_eff_send_mss_netif+0x68>)
 800d4ea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d4ee:	4914      	ldr	r1, [pc, #80]	; (800d540 <tcp_eff_send_mss_netif+0x6c>)
 800d4f0:	4814      	ldr	r0, [pc, #80]	; (800d544 <tcp_eff_send_mss_netif+0x70>)
 800d4f2:	f009 fcbd 	bl	8016e70 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d4f6:	68bb      	ldr	r3, [r7, #8]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d101      	bne.n	800d500 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d4fc:	89fb      	ldrh	r3, [r7, #14]
 800d4fe:	e019      	b.n	800d534 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d500:	68bb      	ldr	r3, [r7, #8]
 800d502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d504:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d506:	8afb      	ldrh	r3, [r7, #22]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d012      	beq.n	800d532 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d50c:	2328      	movs	r3, #40	; 0x28
 800d50e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d510:	8afa      	ldrh	r2, [r7, #22]
 800d512:	8abb      	ldrh	r3, [r7, #20]
 800d514:	429a      	cmp	r2, r3
 800d516:	d904      	bls.n	800d522 <tcp_eff_send_mss_netif+0x4e>
 800d518:	8afa      	ldrh	r2, [r7, #22]
 800d51a:	8abb      	ldrh	r3, [r7, #20]
 800d51c:	1ad3      	subs	r3, r2, r3
 800d51e:	b29b      	uxth	r3, r3
 800d520:	e000      	b.n	800d524 <tcp_eff_send_mss_netif+0x50>
 800d522:	2300      	movs	r3, #0
 800d524:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d526:	8a7a      	ldrh	r2, [r7, #18]
 800d528:	89fb      	ldrh	r3, [r7, #14]
 800d52a:	4293      	cmp	r3, r2
 800d52c:	bf28      	it	cs
 800d52e:	4613      	movcs	r3, r2
 800d530:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d532:	89fb      	ldrh	r3, [r7, #14]
}
 800d534:	4618      	mov	r0, r3
 800d536:	3718      	adds	r7, #24
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	080199ac 	.word	0x080199ac
 800d540:	0801a0b8 	.word	0x0801a0b8
 800d544:	080199f0 	.word	0x080199f0

0800d548 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b084      	sub	sp, #16
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
 800d550:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d119      	bne.n	800d590 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d55c:	4b10      	ldr	r3, [pc, #64]	; (800d5a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d55e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d562:	4910      	ldr	r1, [pc, #64]	; (800d5a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d564:	4810      	ldr	r0, [pc, #64]	; (800d5a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d566:	f009 fc83 	bl	8016e70 <iprintf>

  while (pcb != NULL) {
 800d56a:	e011      	b.n	800d590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	681a      	ldr	r2, [r3, #0]
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d108      	bne.n	800d58a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d57e:	68f8      	ldr	r0, [r7, #12]
 800d580:	f7fe fd50 	bl	800c024 <tcp_abort>
      pcb = next;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	e002      	b.n	800d590 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	68db      	ldr	r3, [r3, #12]
 800d58e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d1ea      	bne.n	800d56c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d596:	bf00      	nop
 800d598:	bf00      	nop
 800d59a:	3710      	adds	r7, #16
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	080199ac 	.word	0x080199ac
 800d5a4:	0801a0e0 	.word	0x0801a0e0
 800d5a8:	080199f0 	.word	0x080199f0

0800d5ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b084      	sub	sp, #16
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d02a      	beq.n	800d612 <tcp_netif_ip_addr_changed+0x66>
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d026      	beq.n	800d612 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d5c4:	4b15      	ldr	r3, [pc, #84]	; (800d61c <tcp_netif_ip_addr_changed+0x70>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f7ff ffbc 	bl	800d548 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d5d0:	4b13      	ldr	r3, [pc, #76]	; (800d620 <tcp_netif_ip_addr_changed+0x74>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f7ff ffb6 	bl	800d548 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d5dc:	683b      	ldr	r3, [r7, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d017      	beq.n	800d612 <tcp_netif_ip_addr_changed+0x66>
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d013      	beq.n	800d612 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5ea:	4b0e      	ldr	r3, [pc, #56]	; (800d624 <tcp_netif_ip_addr_changed+0x78>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	60fb      	str	r3, [r7, #12]
 800d5f0:	e00c      	b.n	800d60c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	681b      	ldr	r3, [r3, #0]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d103      	bne.n	800d606 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	681a      	ldr	r2, [r3, #0]
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	60fb      	str	r3, [r7, #12]
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d1ef      	bne.n	800d5f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d612:	bf00      	nop
 800d614:	3710      	adds	r7, #16
 800d616:	46bd      	mov	sp, r7
 800d618:	bd80      	pop	{r7, pc}
 800d61a:	bf00      	nop
 800d61c:	2000f03c 	.word	0x2000f03c
 800d620:	2000f048 	.word	0x2000f048
 800d624:	2000f044 	.word	0x2000f044

0800d628 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
 800d62e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d634:	2b00      	cmp	r3, #0
 800d636:	d007      	beq.n	800d648 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d63c:	4618      	mov	r0, r3
 800d63e:	f7ff fb6f 	bl	800cd20 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2200      	movs	r2, #0
 800d646:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d648:	bf00      	nop
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d650:	b590      	push	{r4, r7, lr}
 800d652:	b08d      	sub	sp, #52	; 0x34
 800d654:	af04      	add	r7, sp, #16
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d105      	bne.n	800d66c <tcp_input+0x1c>
 800d660:	4b9b      	ldr	r3, [pc, #620]	; (800d8d0 <tcp_input+0x280>)
 800d662:	2283      	movs	r2, #131	; 0x83
 800d664:	499b      	ldr	r1, [pc, #620]	; (800d8d4 <tcp_input+0x284>)
 800d666:	489c      	ldr	r0, [pc, #624]	; (800d8d8 <tcp_input+0x288>)
 800d668:	f009 fc02 	bl	8016e70 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	4a9a      	ldr	r2, [pc, #616]	; (800d8dc <tcp_input+0x28c>)
 800d672:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	895b      	ldrh	r3, [r3, #10]
 800d678:	2b13      	cmp	r3, #19
 800d67a:	f240 83c4 	bls.w	800de06 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d67e:	4b98      	ldr	r3, [pc, #608]	; (800d8e0 <tcp_input+0x290>)
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	4a97      	ldr	r2, [pc, #604]	; (800d8e0 <tcp_input+0x290>)
 800d684:	6812      	ldr	r2, [r2, #0]
 800d686:	4611      	mov	r1, r2
 800d688:	4618      	mov	r0, r3
 800d68a:	f008 fa5d 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	f040 83ba 	bne.w	800de0a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d696:	4b92      	ldr	r3, [pc, #584]	; (800d8e0 <tcp_input+0x290>)
 800d698:	695b      	ldr	r3, [r3, #20]
 800d69a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d69e:	2be0      	cmp	r3, #224	; 0xe0
 800d6a0:	f000 83b3 	beq.w	800de0a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d6a4:	4b8d      	ldr	r3, [pc, #564]	; (800d8dc <tcp_input+0x28c>)
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	899b      	ldrh	r3, [r3, #12]
 800d6aa:	b29b      	uxth	r3, r3
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7fc fb01 	bl	8009cb4 <lwip_htons>
 800d6b2:	4603      	mov	r3, r0
 800d6b4:	0b1b      	lsrs	r3, r3, #12
 800d6b6:	b29b      	uxth	r3, r3
 800d6b8:	b2db      	uxtb	r3, r3
 800d6ba:	009b      	lsls	r3, r3, #2
 800d6bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d6be:	7cbb      	ldrb	r3, [r7, #18]
 800d6c0:	2b13      	cmp	r3, #19
 800d6c2:	f240 83a4 	bls.w	800de0e <tcp_input+0x7be>
 800d6c6:	7cbb      	ldrb	r3, [r7, #18]
 800d6c8:	b29a      	uxth	r2, r3
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	891b      	ldrh	r3, [r3, #8]
 800d6ce:	429a      	cmp	r2, r3
 800d6d0:	f200 839d 	bhi.w	800de0e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d6d4:	7cbb      	ldrb	r3, [r7, #18]
 800d6d6:	b29b      	uxth	r3, r3
 800d6d8:	3b14      	subs	r3, #20
 800d6da:	b29a      	uxth	r2, r3
 800d6dc:	4b81      	ldr	r3, [pc, #516]	; (800d8e4 <tcp_input+0x294>)
 800d6de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d6e0:	4b81      	ldr	r3, [pc, #516]	; (800d8e8 <tcp_input+0x298>)
 800d6e2:	2200      	movs	r2, #0
 800d6e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	895a      	ldrh	r2, [r3, #10]
 800d6ea:	7cbb      	ldrb	r3, [r7, #18]
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	429a      	cmp	r2, r3
 800d6f0:	d309      	bcc.n	800d706 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d6f2:	4b7c      	ldr	r3, [pc, #496]	; (800d8e4 <tcp_input+0x294>)
 800d6f4:	881a      	ldrh	r2, [r3, #0]
 800d6f6:	4b7d      	ldr	r3, [pc, #500]	; (800d8ec <tcp_input+0x29c>)
 800d6f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d6fa:	7cbb      	ldrb	r3, [r7, #18]
 800d6fc:	4619      	mov	r1, r3
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f7fd fe0a 	bl	800b318 <pbuf_remove_header>
 800d704:	e04e      	b.n	800d7a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d105      	bne.n	800d71a <tcp_input+0xca>
 800d70e:	4b70      	ldr	r3, [pc, #448]	; (800d8d0 <tcp_input+0x280>)
 800d710:	22c2      	movs	r2, #194	; 0xc2
 800d712:	4977      	ldr	r1, [pc, #476]	; (800d8f0 <tcp_input+0x2a0>)
 800d714:	4870      	ldr	r0, [pc, #448]	; (800d8d8 <tcp_input+0x288>)
 800d716:	f009 fbab 	bl	8016e70 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d71a:	2114      	movs	r1, #20
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7fd fdfb 	bl	800b318 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	895a      	ldrh	r2, [r3, #10]
 800d726:	4b71      	ldr	r3, [pc, #452]	; (800d8ec <tcp_input+0x29c>)
 800d728:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d72a:	4b6e      	ldr	r3, [pc, #440]	; (800d8e4 <tcp_input+0x294>)
 800d72c:	881a      	ldrh	r2, [r3, #0]
 800d72e:	4b6f      	ldr	r3, [pc, #444]	; (800d8ec <tcp_input+0x29c>)
 800d730:	881b      	ldrh	r3, [r3, #0]
 800d732:	1ad3      	subs	r3, r2, r3
 800d734:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d736:	4b6d      	ldr	r3, [pc, #436]	; (800d8ec <tcp_input+0x29c>)
 800d738:	881b      	ldrh	r3, [r3, #0]
 800d73a:	4619      	mov	r1, r3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7fd fdeb 	bl	800b318 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	681b      	ldr	r3, [r3, #0]
 800d746:	895b      	ldrh	r3, [r3, #10]
 800d748:	8a3a      	ldrh	r2, [r7, #16]
 800d74a:	429a      	cmp	r2, r3
 800d74c:	f200 8361 	bhi.w	800de12 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	685b      	ldr	r3, [r3, #4]
 800d756:	4a64      	ldr	r2, [pc, #400]	; (800d8e8 <tcp_input+0x298>)
 800d758:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	8a3a      	ldrh	r2, [r7, #16]
 800d760:	4611      	mov	r1, r2
 800d762:	4618      	mov	r0, r3
 800d764:	f7fd fdd8 	bl	800b318 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	891a      	ldrh	r2, [r3, #8]
 800d76c:	8a3b      	ldrh	r3, [r7, #16]
 800d76e:	1ad3      	subs	r3, r2, r3
 800d770:	b29a      	uxth	r2, r3
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	895b      	ldrh	r3, [r3, #10]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d005      	beq.n	800d78a <tcp_input+0x13a>
 800d77e:	4b54      	ldr	r3, [pc, #336]	; (800d8d0 <tcp_input+0x280>)
 800d780:	22df      	movs	r2, #223	; 0xdf
 800d782:	495c      	ldr	r1, [pc, #368]	; (800d8f4 <tcp_input+0x2a4>)
 800d784:	4854      	ldr	r0, [pc, #336]	; (800d8d8 <tcp_input+0x288>)
 800d786:	f009 fb73 	bl	8016e70 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	891a      	ldrh	r2, [r3, #8]
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	891b      	ldrh	r3, [r3, #8]
 800d794:	429a      	cmp	r2, r3
 800d796:	d005      	beq.n	800d7a4 <tcp_input+0x154>
 800d798:	4b4d      	ldr	r3, [pc, #308]	; (800d8d0 <tcp_input+0x280>)
 800d79a:	22e0      	movs	r2, #224	; 0xe0
 800d79c:	4956      	ldr	r1, [pc, #344]	; (800d8f8 <tcp_input+0x2a8>)
 800d79e:	484e      	ldr	r0, [pc, #312]	; (800d8d8 <tcp_input+0x288>)
 800d7a0:	f009 fb66 	bl	8016e70 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d7a4:	4b4d      	ldr	r3, [pc, #308]	; (800d8dc <tcp_input+0x28c>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	881b      	ldrh	r3, [r3, #0]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	4a4b      	ldr	r2, [pc, #300]	; (800d8dc <tcp_input+0x28c>)
 800d7ae:	6814      	ldr	r4, [r2, #0]
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7fc fa7f 	bl	8009cb4 <lwip_htons>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d7ba:	4b48      	ldr	r3, [pc, #288]	; (800d8dc <tcp_input+0x28c>)
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	885b      	ldrh	r3, [r3, #2]
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	4a46      	ldr	r2, [pc, #280]	; (800d8dc <tcp_input+0x28c>)
 800d7c4:	6814      	ldr	r4, [r2, #0]
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7fc fa74 	bl	8009cb4 <lwip_htons>
 800d7cc:	4603      	mov	r3, r0
 800d7ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d7d0:	4b42      	ldr	r3, [pc, #264]	; (800d8dc <tcp_input+0x28c>)
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	4a41      	ldr	r2, [pc, #260]	; (800d8dc <tcp_input+0x28c>)
 800d7d8:	6814      	ldr	r4, [r2, #0]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f7fc fa7f 	bl	8009cde <lwip_htonl>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	6063      	str	r3, [r4, #4]
 800d7e4:	6863      	ldr	r3, [r4, #4]
 800d7e6:	4a45      	ldr	r2, [pc, #276]	; (800d8fc <tcp_input+0x2ac>)
 800d7e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d7ea:	4b3c      	ldr	r3, [pc, #240]	; (800d8dc <tcp_input+0x28c>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	689b      	ldr	r3, [r3, #8]
 800d7f0:	4a3a      	ldr	r2, [pc, #232]	; (800d8dc <tcp_input+0x28c>)
 800d7f2:	6814      	ldr	r4, [r2, #0]
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f7fc fa72 	bl	8009cde <lwip_htonl>
 800d7fa:	4603      	mov	r3, r0
 800d7fc:	60a3      	str	r3, [r4, #8]
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	4a3f      	ldr	r2, [pc, #252]	; (800d900 <tcp_input+0x2b0>)
 800d802:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d804:	4b35      	ldr	r3, [pc, #212]	; (800d8dc <tcp_input+0x28c>)
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	89db      	ldrh	r3, [r3, #14]
 800d80a:	b29b      	uxth	r3, r3
 800d80c:	4a33      	ldr	r2, [pc, #204]	; (800d8dc <tcp_input+0x28c>)
 800d80e:	6814      	ldr	r4, [r2, #0]
 800d810:	4618      	mov	r0, r3
 800d812:	f7fc fa4f 	bl	8009cb4 <lwip_htons>
 800d816:	4603      	mov	r3, r0
 800d818:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d81a:	4b30      	ldr	r3, [pc, #192]	; (800d8dc <tcp_input+0x28c>)
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	899b      	ldrh	r3, [r3, #12]
 800d820:	b29b      	uxth	r3, r3
 800d822:	4618      	mov	r0, r3
 800d824:	f7fc fa46 	bl	8009cb4 <lwip_htons>
 800d828:	4603      	mov	r3, r0
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d830:	b2da      	uxtb	r2, r3
 800d832:	4b34      	ldr	r3, [pc, #208]	; (800d904 <tcp_input+0x2b4>)
 800d834:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	891a      	ldrh	r2, [r3, #8]
 800d83a:	4b33      	ldr	r3, [pc, #204]	; (800d908 <tcp_input+0x2b8>)
 800d83c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d83e:	4b31      	ldr	r3, [pc, #196]	; (800d904 <tcp_input+0x2b4>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	f003 0303 	and.w	r3, r3, #3
 800d846:	2b00      	cmp	r3, #0
 800d848:	d00c      	beq.n	800d864 <tcp_input+0x214>
    tcplen++;
 800d84a:	4b2f      	ldr	r3, [pc, #188]	; (800d908 <tcp_input+0x2b8>)
 800d84c:	881b      	ldrh	r3, [r3, #0]
 800d84e:	3301      	adds	r3, #1
 800d850:	b29a      	uxth	r2, r3
 800d852:	4b2d      	ldr	r3, [pc, #180]	; (800d908 <tcp_input+0x2b8>)
 800d854:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	891a      	ldrh	r2, [r3, #8]
 800d85a:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <tcp_input+0x2b8>)
 800d85c:	881b      	ldrh	r3, [r3, #0]
 800d85e:	429a      	cmp	r2, r3
 800d860:	f200 82d9 	bhi.w	800de16 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d864:	2300      	movs	r3, #0
 800d866:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d868:	4b28      	ldr	r3, [pc, #160]	; (800d90c <tcp_input+0x2bc>)
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	e09d      	b.n	800d9ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d870:	69fb      	ldr	r3, [r7, #28]
 800d872:	7d1b      	ldrb	r3, [r3, #20]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d105      	bne.n	800d884 <tcp_input+0x234>
 800d878:	4b15      	ldr	r3, [pc, #84]	; (800d8d0 <tcp_input+0x280>)
 800d87a:	22fb      	movs	r2, #251	; 0xfb
 800d87c:	4924      	ldr	r1, [pc, #144]	; (800d910 <tcp_input+0x2c0>)
 800d87e:	4816      	ldr	r0, [pc, #88]	; (800d8d8 <tcp_input+0x288>)
 800d880:	f009 faf6 	bl	8016e70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d884:	69fb      	ldr	r3, [r7, #28]
 800d886:	7d1b      	ldrb	r3, [r3, #20]
 800d888:	2b0a      	cmp	r3, #10
 800d88a:	d105      	bne.n	800d898 <tcp_input+0x248>
 800d88c:	4b10      	ldr	r3, [pc, #64]	; (800d8d0 <tcp_input+0x280>)
 800d88e:	22fc      	movs	r2, #252	; 0xfc
 800d890:	4920      	ldr	r1, [pc, #128]	; (800d914 <tcp_input+0x2c4>)
 800d892:	4811      	ldr	r0, [pc, #68]	; (800d8d8 <tcp_input+0x288>)
 800d894:	f009 faec 	bl	8016e70 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	7d1b      	ldrb	r3, [r3, #20]
 800d89c:	2b01      	cmp	r3, #1
 800d89e:	d105      	bne.n	800d8ac <tcp_input+0x25c>
 800d8a0:	4b0b      	ldr	r3, [pc, #44]	; (800d8d0 <tcp_input+0x280>)
 800d8a2:	22fd      	movs	r2, #253	; 0xfd
 800d8a4:	491c      	ldr	r1, [pc, #112]	; (800d918 <tcp_input+0x2c8>)
 800d8a6:	480c      	ldr	r0, [pc, #48]	; (800d8d8 <tcp_input+0x288>)
 800d8a8:	f009 fae2 	bl	8016e70 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8ac:	69fb      	ldr	r3, [r7, #28]
 800d8ae:	7a1b      	ldrb	r3, [r3, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d033      	beq.n	800d91c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d8b4:	69fb      	ldr	r3, [r7, #28]
 800d8b6:	7a1a      	ldrb	r2, [r3, #8]
 800d8b8:	4b09      	ldr	r3, [pc, #36]	; (800d8e0 <tcp_input+0x290>)
 800d8ba:	685b      	ldr	r3, [r3, #4]
 800d8bc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d8c4:	429a      	cmp	r2, r3
 800d8c6:	d029      	beq.n	800d91c <tcp_input+0x2cc>
      prev = pcb;
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	61bb      	str	r3, [r7, #24]
      continue;
 800d8cc:	e06b      	b.n	800d9a6 <tcp_input+0x356>
 800d8ce:	bf00      	nop
 800d8d0:	0801a114 	.word	0x0801a114
 800d8d4:	0801a148 	.word	0x0801a148
 800d8d8:	0801a160 	.word	0x0801a160
 800d8dc:	200085bc 	.word	0x200085bc
 800d8e0:	2000b908 	.word	0x2000b908
 800d8e4:	200085c0 	.word	0x200085c0
 800d8e8:	200085c4 	.word	0x200085c4
 800d8ec:	200085c2 	.word	0x200085c2
 800d8f0:	0801a188 	.word	0x0801a188
 800d8f4:	0801a198 	.word	0x0801a198
 800d8f8:	0801a1a4 	.word	0x0801a1a4
 800d8fc:	200085cc 	.word	0x200085cc
 800d900:	200085d0 	.word	0x200085d0
 800d904:	200085d8 	.word	0x200085d8
 800d908:	200085d6 	.word	0x200085d6
 800d90c:	2000f03c 	.word	0x2000f03c
 800d910:	0801a1c4 	.word	0x0801a1c4
 800d914:	0801a1ec 	.word	0x0801a1ec
 800d918:	0801a218 	.word	0x0801a218
    }

    if (pcb->remote_port == tcphdr->src &&
 800d91c:	69fb      	ldr	r3, [r7, #28]
 800d91e:	8b1a      	ldrh	r2, [r3, #24]
 800d920:	4b94      	ldr	r3, [pc, #592]	; (800db74 <tcp_input+0x524>)
 800d922:	681b      	ldr	r3, [r3, #0]
 800d924:	881b      	ldrh	r3, [r3, #0]
 800d926:	b29b      	uxth	r3, r3
 800d928:	429a      	cmp	r2, r3
 800d92a:	d13a      	bne.n	800d9a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	8ada      	ldrh	r2, [r3, #22]
 800d930:	4b90      	ldr	r3, [pc, #576]	; (800db74 <tcp_input+0x524>)
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	885b      	ldrh	r3, [r3, #2]
 800d936:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d938:	429a      	cmp	r2, r3
 800d93a:	d132      	bne.n	800d9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d93c:	69fb      	ldr	r3, [r7, #28]
 800d93e:	685a      	ldr	r2, [r3, #4]
 800d940:	4b8d      	ldr	r3, [pc, #564]	; (800db78 <tcp_input+0x528>)
 800d942:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d944:	429a      	cmp	r2, r3
 800d946:	d12c      	bne.n	800d9a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	681a      	ldr	r2, [r3, #0]
 800d94c:	4b8a      	ldr	r3, [pc, #552]	; (800db78 <tcp_input+0x528>)
 800d94e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d950:	429a      	cmp	r2, r3
 800d952:	d126      	bne.n	800d9a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d954:	69fb      	ldr	r3, [r7, #28]
 800d956:	68db      	ldr	r3, [r3, #12]
 800d958:	69fa      	ldr	r2, [r7, #28]
 800d95a:	429a      	cmp	r2, r3
 800d95c:	d106      	bne.n	800d96c <tcp_input+0x31c>
 800d95e:	4b87      	ldr	r3, [pc, #540]	; (800db7c <tcp_input+0x52c>)
 800d960:	f240 120d 	movw	r2, #269	; 0x10d
 800d964:	4986      	ldr	r1, [pc, #536]	; (800db80 <tcp_input+0x530>)
 800d966:	4887      	ldr	r0, [pc, #540]	; (800db84 <tcp_input+0x534>)
 800d968:	f009 fa82 	bl	8016e70 <iprintf>
      if (prev != NULL) {
 800d96c:	69bb      	ldr	r3, [r7, #24]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d00a      	beq.n	800d988 <tcp_input+0x338>
        prev->next = pcb->next;
 800d972:	69fb      	ldr	r3, [r7, #28]
 800d974:	68da      	ldr	r2, [r3, #12]
 800d976:	69bb      	ldr	r3, [r7, #24]
 800d978:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d97a:	4b83      	ldr	r3, [pc, #524]	; (800db88 <tcp_input+0x538>)
 800d97c:	681a      	ldr	r2, [r3, #0]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d982:	4a81      	ldr	r2, [pc, #516]	; (800db88 <tcp_input+0x538>)
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d988:	69fb      	ldr	r3, [r7, #28]
 800d98a:	68db      	ldr	r3, [r3, #12]
 800d98c:	69fa      	ldr	r2, [r7, #28]
 800d98e:	429a      	cmp	r2, r3
 800d990:	d111      	bne.n	800d9b6 <tcp_input+0x366>
 800d992:	4b7a      	ldr	r3, [pc, #488]	; (800db7c <tcp_input+0x52c>)
 800d994:	f240 1215 	movw	r2, #277	; 0x115
 800d998:	497c      	ldr	r1, [pc, #496]	; (800db8c <tcp_input+0x53c>)
 800d99a:	487a      	ldr	r0, [pc, #488]	; (800db84 <tcp_input+0x534>)
 800d99c:	f009 fa68 	bl	8016e70 <iprintf>
      break;
 800d9a0:	e009      	b.n	800d9b6 <tcp_input+0x366>
    }
    prev = pcb;
 800d9a2:	69fb      	ldr	r3, [r7, #28]
 800d9a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	68db      	ldr	r3, [r3, #12]
 800d9aa:	61fb      	str	r3, [r7, #28]
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	f47f af5e 	bne.w	800d870 <tcp_input+0x220>
 800d9b4:	e000      	b.n	800d9b8 <tcp_input+0x368>
      break;
 800d9b6:	bf00      	nop
  }

  if (pcb == NULL) {
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f040 8095 	bne.w	800daea <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9c0:	4b73      	ldr	r3, [pc, #460]	; (800db90 <tcp_input+0x540>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	61fb      	str	r3, [r7, #28]
 800d9c6:	e03f      	b.n	800da48 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d9c8:	69fb      	ldr	r3, [r7, #28]
 800d9ca:	7d1b      	ldrb	r3, [r3, #20]
 800d9cc:	2b0a      	cmp	r3, #10
 800d9ce:	d006      	beq.n	800d9de <tcp_input+0x38e>
 800d9d0:	4b6a      	ldr	r3, [pc, #424]	; (800db7c <tcp_input+0x52c>)
 800d9d2:	f240 121f 	movw	r2, #287	; 0x11f
 800d9d6:	496f      	ldr	r1, [pc, #444]	; (800db94 <tcp_input+0x544>)
 800d9d8:	486a      	ldr	r0, [pc, #424]	; (800db84 <tcp_input+0x534>)
 800d9da:	f009 fa49 	bl	8016e70 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9de:	69fb      	ldr	r3, [r7, #28]
 800d9e0:	7a1b      	ldrb	r3, [r3, #8]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d009      	beq.n	800d9fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d9e6:	69fb      	ldr	r3, [r7, #28]
 800d9e8:	7a1a      	ldrb	r2, [r3, #8]
 800d9ea:	4b63      	ldr	r3, [pc, #396]	; (800db78 <tcp_input+0x528>)
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d9f2:	3301      	adds	r3, #1
 800d9f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d9f6:	429a      	cmp	r2, r3
 800d9f8:	d122      	bne.n	800da40 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d9fa:	69fb      	ldr	r3, [r7, #28]
 800d9fc:	8b1a      	ldrh	r2, [r3, #24]
 800d9fe:	4b5d      	ldr	r3, [pc, #372]	; (800db74 <tcp_input+0x524>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	881b      	ldrh	r3, [r3, #0]
 800da04:	b29b      	uxth	r3, r3
 800da06:	429a      	cmp	r2, r3
 800da08:	d11b      	bne.n	800da42 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800da0a:	69fb      	ldr	r3, [r7, #28]
 800da0c:	8ada      	ldrh	r2, [r3, #22]
 800da0e:	4b59      	ldr	r3, [pc, #356]	; (800db74 <tcp_input+0x524>)
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	885b      	ldrh	r3, [r3, #2]
 800da14:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800da16:	429a      	cmp	r2, r3
 800da18:	d113      	bne.n	800da42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	685a      	ldr	r2, [r3, #4]
 800da1e:	4b56      	ldr	r3, [pc, #344]	; (800db78 <tcp_input+0x528>)
 800da20:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800da22:	429a      	cmp	r2, r3
 800da24:	d10d      	bne.n	800da42 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	681a      	ldr	r2, [r3, #0]
 800da2a:	4b53      	ldr	r3, [pc, #332]	; (800db78 <tcp_input+0x528>)
 800da2c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800da2e:	429a      	cmp	r2, r3
 800da30:	d107      	bne.n	800da42 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800da32:	69f8      	ldr	r0, [r7, #28]
 800da34:	f000 fb54 	bl	800e0e0 <tcp_timewait_input>
        }
        pbuf_free(p);
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7fd fcf3 	bl	800b424 <pbuf_free>
        return;
 800da3e:	e1f0      	b.n	800de22 <tcp_input+0x7d2>
        continue;
 800da40:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800da42:	69fb      	ldr	r3, [r7, #28]
 800da44:	68db      	ldr	r3, [r3, #12]
 800da46:	61fb      	str	r3, [r7, #28]
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d1bc      	bne.n	800d9c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800da4e:	2300      	movs	r3, #0
 800da50:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800da52:	4b51      	ldr	r3, [pc, #324]	; (800db98 <tcp_input+0x548>)
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	617b      	str	r3, [r7, #20]
 800da58:	e02a      	b.n	800dab0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da5a:	697b      	ldr	r3, [r7, #20]
 800da5c:	7a1b      	ldrb	r3, [r3, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da62:	697b      	ldr	r3, [r7, #20]
 800da64:	7a1a      	ldrb	r2, [r3, #8]
 800da66:	4b44      	ldr	r3, [pc, #272]	; (800db78 <tcp_input+0x528>)
 800da68:	685b      	ldr	r3, [r3, #4]
 800da6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da6e:	3301      	adds	r3, #1
 800da70:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800da72:	429a      	cmp	r2, r3
 800da74:	d002      	beq.n	800da7c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	61bb      	str	r3, [r7, #24]
        continue;
 800da7a:	e016      	b.n	800daaa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	8ada      	ldrh	r2, [r3, #22]
 800da80:	4b3c      	ldr	r3, [pc, #240]	; (800db74 <tcp_input+0x524>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	885b      	ldrh	r3, [r3, #2]
 800da86:	b29b      	uxth	r3, r3
 800da88:	429a      	cmp	r2, r3
 800da8a:	d10c      	bne.n	800daa6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	681a      	ldr	r2, [r3, #0]
 800da90:	4b39      	ldr	r3, [pc, #228]	; (800db78 <tcp_input+0x528>)
 800da92:	695b      	ldr	r3, [r3, #20]
 800da94:	429a      	cmp	r2, r3
 800da96:	d00f      	beq.n	800dab8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800da98:	697b      	ldr	r3, [r7, #20]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d00d      	beq.n	800daba <tcp_input+0x46a>
 800da9e:	697b      	ldr	r3, [r7, #20]
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d009      	beq.n	800daba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800daa6:	697b      	ldr	r3, [r7, #20]
 800daa8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800daaa:	697b      	ldr	r3, [r7, #20]
 800daac:	68db      	ldr	r3, [r3, #12]
 800daae:	617b      	str	r3, [r7, #20]
 800dab0:	697b      	ldr	r3, [r7, #20]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d1d1      	bne.n	800da5a <tcp_input+0x40a>
 800dab6:	e000      	b.n	800daba <tcp_input+0x46a>
            break;
 800dab8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800daba:	697b      	ldr	r3, [r7, #20]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d014      	beq.n	800daea <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dac0:	69bb      	ldr	r3, [r7, #24]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dac6:	697b      	ldr	r3, [r7, #20]
 800dac8:	68da      	ldr	r2, [r3, #12]
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dace:	4b32      	ldr	r3, [pc, #200]	; (800db98 <tcp_input+0x548>)
 800dad0:	681a      	ldr	r2, [r3, #0]
 800dad2:	697b      	ldr	r3, [r7, #20]
 800dad4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dad6:	4a30      	ldr	r2, [pc, #192]	; (800db98 <tcp_input+0x548>)
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dadc:	6978      	ldr	r0, [r7, #20]
 800dade:	f000 fa01 	bl	800dee4 <tcp_listen_input>
      }
      pbuf_free(p);
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f7fd fc9e 	bl	800b424 <pbuf_free>
      return;
 800dae8:	e19b      	b.n	800de22 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800daea:	69fb      	ldr	r3, [r7, #28]
 800daec:	2b00      	cmp	r3, #0
 800daee:	f000 8160 	beq.w	800ddb2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800daf2:	4b2a      	ldr	r3, [pc, #168]	; (800db9c <tcp_input+0x54c>)
 800daf4:	2200      	movs	r2, #0
 800daf6:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	891a      	ldrh	r2, [r3, #8]
 800dafc:	4b27      	ldr	r3, [pc, #156]	; (800db9c <tcp_input+0x54c>)
 800dafe:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800db00:	4a26      	ldr	r2, [pc, #152]	; (800db9c <tcp_input+0x54c>)
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800db06:	4b1b      	ldr	r3, [pc, #108]	; (800db74 <tcp_input+0x524>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	4a24      	ldr	r2, [pc, #144]	; (800db9c <tcp_input+0x54c>)
 800db0c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800db0e:	4b24      	ldr	r3, [pc, #144]	; (800dba0 <tcp_input+0x550>)
 800db10:	2200      	movs	r2, #0
 800db12:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800db14:	4b23      	ldr	r3, [pc, #140]	; (800dba4 <tcp_input+0x554>)
 800db16:	2200      	movs	r2, #0
 800db18:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800db1a:	4b23      	ldr	r3, [pc, #140]	; (800dba8 <tcp_input+0x558>)
 800db1c:	2200      	movs	r2, #0
 800db1e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800db20:	4b22      	ldr	r3, [pc, #136]	; (800dbac <tcp_input+0x55c>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	f003 0308 	and.w	r3, r3, #8
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d006      	beq.n	800db3a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	7b5b      	ldrb	r3, [r3, #13]
 800db30:	f043 0301 	orr.w	r3, r3, #1
 800db34:	b2da      	uxtb	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800db3a:	69fb      	ldr	r3, [r7, #28]
 800db3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d038      	beq.n	800dbb4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db42:	69f8      	ldr	r0, [r7, #28]
 800db44:	f7ff f870 	bl	800cc28 <tcp_process_refused_data>
 800db48:	4603      	mov	r3, r0
 800db4a:	f113 0f0d 	cmn.w	r3, #13
 800db4e:	d007      	beq.n	800db60 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db50:	69fb      	ldr	r3, [r7, #28]
 800db52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800db54:	2b00      	cmp	r3, #0
 800db56:	d02d      	beq.n	800dbb4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800db58:	4b15      	ldr	r3, [pc, #84]	; (800dbb0 <tcp_input+0x560>)
 800db5a:	881b      	ldrh	r3, [r3, #0]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d029      	beq.n	800dbb4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800db60:	69fb      	ldr	r3, [r7, #28]
 800db62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800db64:	2b00      	cmp	r3, #0
 800db66:	f040 8104 	bne.w	800dd72 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800db6a:	69f8      	ldr	r0, [r7, #28]
 800db6c:	f003 fe16 	bl	801179c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800db70:	e0ff      	b.n	800dd72 <tcp_input+0x722>
 800db72:	bf00      	nop
 800db74:	200085bc 	.word	0x200085bc
 800db78:	2000b908 	.word	0x2000b908
 800db7c:	0801a114 	.word	0x0801a114
 800db80:	0801a240 	.word	0x0801a240
 800db84:	0801a160 	.word	0x0801a160
 800db88:	2000f03c 	.word	0x2000f03c
 800db8c:	0801a26c 	.word	0x0801a26c
 800db90:	2000f04c 	.word	0x2000f04c
 800db94:	0801a298 	.word	0x0801a298
 800db98:	2000f044 	.word	0x2000f044
 800db9c:	200085ac 	.word	0x200085ac
 800dba0:	200085dc 	.word	0x200085dc
 800dba4:	200085d9 	.word	0x200085d9
 800dba8:	200085d4 	.word	0x200085d4
 800dbac:	200085d8 	.word	0x200085d8
 800dbb0:	200085d6 	.word	0x200085d6
      }
    }
    tcp_input_pcb = pcb;
 800dbb4:	4a9c      	ldr	r2, [pc, #624]	; (800de28 <tcp_input+0x7d8>)
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dbba:	69f8      	ldr	r0, [r7, #28]
 800dbbc:	f000 fb0a 	bl	800e1d4 <tcp_process>
 800dbc0:	4603      	mov	r3, r0
 800dbc2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dbc4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dbc8:	f113 0f0d 	cmn.w	r3, #13
 800dbcc:	f000 80d3 	beq.w	800dd76 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800dbd0:	4b96      	ldr	r3, [pc, #600]	; (800de2c <tcp_input+0x7dc>)
 800dbd2:	781b      	ldrb	r3, [r3, #0]
 800dbd4:	f003 0308 	and.w	r3, r3, #8
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d015      	beq.n	800dc08 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dbdc:	69fb      	ldr	r3, [r7, #28]
 800dbde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d008      	beq.n	800dbf8 <tcp_input+0x5a8>
 800dbe6:	69fb      	ldr	r3, [r7, #28]
 800dbe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	6912      	ldr	r2, [r2, #16]
 800dbf0:	f06f 010d 	mvn.w	r1, #13
 800dbf4:	4610      	mov	r0, r2
 800dbf6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dbf8:	69f9      	ldr	r1, [r7, #28]
 800dbfa:	488d      	ldr	r0, [pc, #564]	; (800de30 <tcp_input+0x7e0>)
 800dbfc:	f7ff fbb0 	bl	800d360 <tcp_pcb_remove>
        tcp_free(pcb);
 800dc00:	69f8      	ldr	r0, [r7, #28]
 800dc02:	f7fd fecb 	bl	800b99c <tcp_free>
 800dc06:	e0c1      	b.n	800dd8c <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800dc08:	2300      	movs	r3, #0
 800dc0a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dc0c:	4b89      	ldr	r3, [pc, #548]	; (800de34 <tcp_input+0x7e4>)
 800dc0e:	881b      	ldrh	r3, [r3, #0]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d01d      	beq.n	800dc50 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dc14:	4b87      	ldr	r3, [pc, #540]	; (800de34 <tcp_input+0x7e4>)
 800dc16:	881b      	ldrh	r3, [r3, #0]
 800dc18:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dc1a:	69fb      	ldr	r3, [r7, #28]
 800dc1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d00a      	beq.n	800dc3a <tcp_input+0x5ea>
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dc2a:	69fa      	ldr	r2, [r7, #28]
 800dc2c:	6910      	ldr	r0, [r2, #16]
 800dc2e:	89fa      	ldrh	r2, [r7, #14]
 800dc30:	69f9      	ldr	r1, [r7, #28]
 800dc32:	4798      	blx	r3
 800dc34:	4603      	mov	r3, r0
 800dc36:	74fb      	strb	r3, [r7, #19]
 800dc38:	e001      	b.n	800dc3e <tcp_input+0x5ee>
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dc3e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dc42:	f113 0f0d 	cmn.w	r3, #13
 800dc46:	f000 8098 	beq.w	800dd7a <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dc4a:	4b7a      	ldr	r3, [pc, #488]	; (800de34 <tcp_input+0x7e4>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800dc50:	69f8      	ldr	r0, [r7, #28]
 800dc52:	f000 f907 	bl	800de64 <tcp_input_delayed_close>
 800dc56:	4603      	mov	r3, r0
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	f040 8090 	bne.w	800dd7e <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800dc5e:	4b76      	ldr	r3, [pc, #472]	; (800de38 <tcp_input+0x7e8>)
 800dc60:	681b      	ldr	r3, [r3, #0]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d041      	beq.n	800dcea <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d006      	beq.n	800dc7c <tcp_input+0x62c>
 800dc6e:	4b73      	ldr	r3, [pc, #460]	; (800de3c <tcp_input+0x7ec>)
 800dc70:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dc74:	4972      	ldr	r1, [pc, #456]	; (800de40 <tcp_input+0x7f0>)
 800dc76:	4873      	ldr	r0, [pc, #460]	; (800de44 <tcp_input+0x7f4>)
 800dc78:	f009 f8fa 	bl	8016e70 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800dc7c:	69fb      	ldr	r3, [r7, #28]
 800dc7e:	8b5b      	ldrh	r3, [r3, #26]
 800dc80:	f003 0310 	and.w	r3, r3, #16
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d008      	beq.n	800dc9a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dc88:	4b6b      	ldr	r3, [pc, #428]	; (800de38 <tcp_input+0x7e8>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	4618      	mov	r0, r3
 800dc8e:	f7fd fbc9 	bl	800b424 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800dc92:	69f8      	ldr	r0, [r7, #28]
 800dc94:	f7fe f9c6 	bl	800c024 <tcp_abort>
            goto aborted;
 800dc98:	e078      	b.n	800dd8c <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00c      	beq.n	800dcbe <tcp_input+0x66e>
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dcaa:	69fb      	ldr	r3, [r7, #28]
 800dcac:	6918      	ldr	r0, [r3, #16]
 800dcae:	4b62      	ldr	r3, [pc, #392]	; (800de38 <tcp_input+0x7e8>)
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	69f9      	ldr	r1, [r7, #28]
 800dcb6:	47a0      	blx	r4
 800dcb8:	4603      	mov	r3, r0
 800dcba:	74fb      	strb	r3, [r7, #19]
 800dcbc:	e008      	b.n	800dcd0 <tcp_input+0x680>
 800dcbe:	4b5e      	ldr	r3, [pc, #376]	; (800de38 <tcp_input+0x7e8>)
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	69f9      	ldr	r1, [r7, #28]
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	f7ff f884 	bl	800cdd4 <tcp_recv_null>
 800dccc:	4603      	mov	r3, r0
 800dcce:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dcd0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcd4:	f113 0f0d 	cmn.w	r3, #13
 800dcd8:	d053      	beq.n	800dd82 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dcda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d003      	beq.n	800dcea <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dce2:	4b55      	ldr	r3, [pc, #340]	; (800de38 <tcp_input+0x7e8>)
 800dce4:	681a      	ldr	r2, [r3, #0]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dcea:	4b50      	ldr	r3, [pc, #320]	; (800de2c <tcp_input+0x7dc>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	f003 0320 	and.w	r3, r3, #32
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d030      	beq.n	800dd58 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800dcf6:	69fb      	ldr	r3, [r7, #28]
 800dcf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d009      	beq.n	800dd12 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd02:	7b5a      	ldrb	r2, [r3, #13]
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd08:	f042 0220 	orr.w	r2, r2, #32
 800dd0c:	b2d2      	uxtb	r2, r2
 800dd0e:	735a      	strb	r2, [r3, #13]
 800dd10:	e022      	b.n	800dd58 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd1a:	d005      	beq.n	800dd28 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800dd1c:	69fb      	ldr	r3, [r7, #28]
 800dd1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd20:	3301      	adds	r3, #1
 800dd22:	b29a      	uxth	r2, r3
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d00b      	beq.n	800dd4a <tcp_input+0x6fa>
 800dd32:	69fb      	ldr	r3, [r7, #28]
 800dd34:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	6918      	ldr	r0, [r3, #16]
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	2200      	movs	r2, #0
 800dd40:	69f9      	ldr	r1, [r7, #28]
 800dd42:	47a0      	blx	r4
 800dd44:	4603      	mov	r3, r0
 800dd46:	74fb      	strb	r3, [r7, #19]
 800dd48:	e001      	b.n	800dd4e <tcp_input+0x6fe>
 800dd4a:	2300      	movs	r3, #0
 800dd4c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd4e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd52:	f113 0f0d 	cmn.w	r3, #13
 800dd56:	d016      	beq.n	800dd86 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800dd58:	4b33      	ldr	r3, [pc, #204]	; (800de28 <tcp_input+0x7d8>)
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800dd5e:	69f8      	ldr	r0, [r7, #28]
 800dd60:	f000 f880 	bl	800de64 <tcp_input_delayed_close>
 800dd64:	4603      	mov	r3, r0
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d10f      	bne.n	800dd8a <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dd6a:	69f8      	ldr	r0, [r7, #28]
 800dd6c:	f002 ff10 	bl	8010b90 <tcp_output>
 800dd70:	e00c      	b.n	800dd8c <tcp_input+0x73c>
        goto aborted;
 800dd72:	bf00      	nop
 800dd74:	e00a      	b.n	800dd8c <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800dd76:	bf00      	nop
 800dd78:	e008      	b.n	800dd8c <tcp_input+0x73c>
              goto aborted;
 800dd7a:	bf00      	nop
 800dd7c:	e006      	b.n	800dd8c <tcp_input+0x73c>
          goto aborted;
 800dd7e:	bf00      	nop
 800dd80:	e004      	b.n	800dd8c <tcp_input+0x73c>
            goto aborted;
 800dd82:	bf00      	nop
 800dd84:	e002      	b.n	800dd8c <tcp_input+0x73c>
              goto aborted;
 800dd86:	bf00      	nop
 800dd88:	e000      	b.n	800dd8c <tcp_input+0x73c>
          goto aborted;
 800dd8a:	bf00      	nop
    tcp_input_pcb = NULL;
 800dd8c:	4b26      	ldr	r3, [pc, #152]	; (800de28 <tcp_input+0x7d8>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800dd92:	4b29      	ldr	r3, [pc, #164]	; (800de38 <tcp_input+0x7e8>)
 800dd94:	2200      	movs	r2, #0
 800dd96:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800dd98:	4b2b      	ldr	r3, [pc, #172]	; (800de48 <tcp_input+0x7f8>)
 800dd9a:	685b      	ldr	r3, [r3, #4]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d03f      	beq.n	800de20 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800dda0:	4b29      	ldr	r3, [pc, #164]	; (800de48 <tcp_input+0x7f8>)
 800dda2:	685b      	ldr	r3, [r3, #4]
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fd fb3d 	bl	800b424 <pbuf_free>
      inseg.p = NULL;
 800ddaa:	4b27      	ldr	r3, [pc, #156]	; (800de48 <tcp_input+0x7f8>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ddb0:	e036      	b.n	800de20 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ddb2:	4b26      	ldr	r3, [pc, #152]	; (800de4c <tcp_input+0x7fc>)
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	899b      	ldrh	r3, [r3, #12]
 800ddb8:	b29b      	uxth	r3, r3
 800ddba:	4618      	mov	r0, r3
 800ddbc:	f7fb ff7a 	bl	8009cb4 <lwip_htons>
 800ddc0:	4603      	mov	r3, r0
 800ddc2:	b2db      	uxtb	r3, r3
 800ddc4:	f003 0304 	and.w	r3, r3, #4
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d118      	bne.n	800ddfe <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ddcc:	4b20      	ldr	r3, [pc, #128]	; (800de50 <tcp_input+0x800>)
 800ddce:	6819      	ldr	r1, [r3, #0]
 800ddd0:	4b20      	ldr	r3, [pc, #128]	; (800de54 <tcp_input+0x804>)
 800ddd2:	881b      	ldrh	r3, [r3, #0]
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4b20      	ldr	r3, [pc, #128]	; (800de58 <tcp_input+0x808>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dddc:	4b1b      	ldr	r3, [pc, #108]	; (800de4c <tcp_input+0x7fc>)
 800ddde:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dde0:	885b      	ldrh	r3, [r3, #2]
 800dde2:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dde4:	4a19      	ldr	r2, [pc, #100]	; (800de4c <tcp_input+0x7fc>)
 800dde6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dde8:	8812      	ldrh	r2, [r2, #0]
 800ddea:	b292      	uxth	r2, r2
 800ddec:	9202      	str	r2, [sp, #8]
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	4b1a      	ldr	r3, [pc, #104]	; (800de5c <tcp_input+0x80c>)
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	4b1a      	ldr	r3, [pc, #104]	; (800de60 <tcp_input+0x810>)
 800ddf6:	4602      	mov	r2, r0
 800ddf8:	2000      	movs	r0, #0
 800ddfa:	f003 fc7d 	bl	80116f8 <tcp_rst>
    pbuf_free(p);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fd fb10 	bl	800b424 <pbuf_free>
  return;
 800de04:	e00c      	b.n	800de20 <tcp_input+0x7d0>
    goto dropped;
 800de06:	bf00      	nop
 800de08:	e006      	b.n	800de18 <tcp_input+0x7c8>
    goto dropped;
 800de0a:	bf00      	nop
 800de0c:	e004      	b.n	800de18 <tcp_input+0x7c8>
    goto dropped;
 800de0e:	bf00      	nop
 800de10:	e002      	b.n	800de18 <tcp_input+0x7c8>
      goto dropped;
 800de12:	bf00      	nop
 800de14:	e000      	b.n	800de18 <tcp_input+0x7c8>
      goto dropped;
 800de16:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f7fd fb03 	bl	800b424 <pbuf_free>
 800de1e:	e000      	b.n	800de22 <tcp_input+0x7d2>
  return;
 800de20:	bf00      	nop
}
 800de22:	3724      	adds	r7, #36	; 0x24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd90      	pop	{r4, r7, pc}
 800de28:	2000f050 	.word	0x2000f050
 800de2c:	200085d9 	.word	0x200085d9
 800de30:	2000f03c 	.word	0x2000f03c
 800de34:	200085d4 	.word	0x200085d4
 800de38:	200085dc 	.word	0x200085dc
 800de3c:	0801a114 	.word	0x0801a114
 800de40:	0801a2c8 	.word	0x0801a2c8
 800de44:	0801a160 	.word	0x0801a160
 800de48:	200085ac 	.word	0x200085ac
 800de4c:	200085bc 	.word	0x200085bc
 800de50:	200085d0 	.word	0x200085d0
 800de54:	200085d6 	.word	0x200085d6
 800de58:	200085cc 	.word	0x200085cc
 800de5c:	2000b918 	.word	0x2000b918
 800de60:	2000b91c 	.word	0x2000b91c

0800de64 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b082      	sub	sp, #8
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d106      	bne.n	800de80 <tcp_input_delayed_close+0x1c>
 800de72:	4b17      	ldr	r3, [pc, #92]	; (800ded0 <tcp_input_delayed_close+0x6c>)
 800de74:	f240 225a 	movw	r2, #602	; 0x25a
 800de78:	4916      	ldr	r1, [pc, #88]	; (800ded4 <tcp_input_delayed_close+0x70>)
 800de7a:	4817      	ldr	r0, [pc, #92]	; (800ded8 <tcp_input_delayed_close+0x74>)
 800de7c:	f008 fff8 	bl	8016e70 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800de80:	4b16      	ldr	r3, [pc, #88]	; (800dedc <tcp_input_delayed_close+0x78>)
 800de82:	781b      	ldrb	r3, [r3, #0]
 800de84:	f003 0310 	and.w	r3, r3, #16
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d01c      	beq.n	800dec6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	8b5b      	ldrh	r3, [r3, #26]
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	d10d      	bne.n	800deb4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d008      	beq.n	800deb4 <tcp_input_delayed_close+0x50>
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dea8:	687a      	ldr	r2, [r7, #4]
 800deaa:	6912      	ldr	r2, [r2, #16]
 800deac:	f06f 010e 	mvn.w	r1, #14
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800deb4:	6879      	ldr	r1, [r7, #4]
 800deb6:	480a      	ldr	r0, [pc, #40]	; (800dee0 <tcp_input_delayed_close+0x7c>)
 800deb8:	f7ff fa52 	bl	800d360 <tcp_pcb_remove>
    tcp_free(pcb);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7fd fd6d 	bl	800b99c <tcp_free>
    return 1;
 800dec2:	2301      	movs	r3, #1
 800dec4:	e000      	b.n	800dec8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800dec6:	2300      	movs	r3, #0
}
 800dec8:	4618      	mov	r0, r3
 800deca:	3708      	adds	r7, #8
 800decc:	46bd      	mov	sp, r7
 800dece:	bd80      	pop	{r7, pc}
 800ded0:	0801a114 	.word	0x0801a114
 800ded4:	0801a2e4 	.word	0x0801a2e4
 800ded8:	0801a160 	.word	0x0801a160
 800dedc:	200085d9 	.word	0x200085d9
 800dee0:	2000f03c 	.word	0x2000f03c

0800dee4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800dee4:	b590      	push	{r4, r7, lr}
 800dee6:	b08b      	sub	sp, #44	; 0x2c
 800dee8:	af04      	add	r7, sp, #16
 800deea:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800deec:	4b6f      	ldr	r3, [pc, #444]	; (800e0ac <tcp_listen_input+0x1c8>)
 800deee:	781b      	ldrb	r3, [r3, #0]
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b00      	cmp	r3, #0
 800def6:	f040 80d2 	bne.w	800e09e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d106      	bne.n	800df0e <tcp_listen_input+0x2a>
 800df00:	4b6b      	ldr	r3, [pc, #428]	; (800e0b0 <tcp_listen_input+0x1cc>)
 800df02:	f240 2281 	movw	r2, #641	; 0x281
 800df06:	496b      	ldr	r1, [pc, #428]	; (800e0b4 <tcp_listen_input+0x1d0>)
 800df08:	486b      	ldr	r0, [pc, #428]	; (800e0b8 <tcp_listen_input+0x1d4>)
 800df0a:	f008 ffb1 	bl	8016e70 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800df0e:	4b67      	ldr	r3, [pc, #412]	; (800e0ac <tcp_listen_input+0x1c8>)
 800df10:	781b      	ldrb	r3, [r3, #0]
 800df12:	f003 0310 	and.w	r3, r3, #16
 800df16:	2b00      	cmp	r3, #0
 800df18:	d019      	beq.n	800df4e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df1a:	4b68      	ldr	r3, [pc, #416]	; (800e0bc <tcp_listen_input+0x1d8>)
 800df1c:	6819      	ldr	r1, [r3, #0]
 800df1e:	4b68      	ldr	r3, [pc, #416]	; (800e0c0 <tcp_listen_input+0x1dc>)
 800df20:	881b      	ldrh	r3, [r3, #0]
 800df22:	461a      	mov	r2, r3
 800df24:	4b67      	ldr	r3, [pc, #412]	; (800e0c4 <tcp_listen_input+0x1e0>)
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df2a:	4b67      	ldr	r3, [pc, #412]	; (800e0c8 <tcp_listen_input+0x1e4>)
 800df2c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df2e:	885b      	ldrh	r3, [r3, #2]
 800df30:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df32:	4a65      	ldr	r2, [pc, #404]	; (800e0c8 <tcp_listen_input+0x1e4>)
 800df34:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df36:	8812      	ldrh	r2, [r2, #0]
 800df38:	b292      	uxth	r2, r2
 800df3a:	9202      	str	r2, [sp, #8]
 800df3c:	9301      	str	r3, [sp, #4]
 800df3e:	4b63      	ldr	r3, [pc, #396]	; (800e0cc <tcp_listen_input+0x1e8>)
 800df40:	9300      	str	r3, [sp, #0]
 800df42:	4b63      	ldr	r3, [pc, #396]	; (800e0d0 <tcp_listen_input+0x1ec>)
 800df44:	4602      	mov	r2, r0
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f003 fbd6 	bl	80116f8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800df4c:	e0a9      	b.n	800e0a2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800df4e:	4b57      	ldr	r3, [pc, #348]	; (800e0ac <tcp_listen_input+0x1c8>)
 800df50:	781b      	ldrb	r3, [r3, #0]
 800df52:	f003 0302 	and.w	r3, r3, #2
 800df56:	2b00      	cmp	r3, #0
 800df58:	f000 80a3 	beq.w	800e0a2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	7d5b      	ldrb	r3, [r3, #21]
 800df60:	4618      	mov	r0, r3
 800df62:	f7ff f85b 	bl	800d01c <tcp_alloc>
 800df66:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800df68:	697b      	ldr	r3, [r7, #20]
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d111      	bne.n	800df92 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	699b      	ldr	r3, [r3, #24]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d00a      	beq.n	800df8c <tcp_listen_input+0xa8>
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	699b      	ldr	r3, [r3, #24]
 800df7a:	687a      	ldr	r2, [r7, #4]
 800df7c:	6910      	ldr	r0, [r2, #16]
 800df7e:	f04f 32ff 	mov.w	r2, #4294967295
 800df82:	2100      	movs	r1, #0
 800df84:	4798      	blx	r3
 800df86:	4603      	mov	r3, r0
 800df88:	73bb      	strb	r3, [r7, #14]
      return;
 800df8a:	e08b      	b.n	800e0a4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800df8c:	23f0      	movs	r3, #240	; 0xf0
 800df8e:	73bb      	strb	r3, [r7, #14]
      return;
 800df90:	e088      	b.n	800e0a4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800df92:	4b50      	ldr	r3, [pc, #320]	; (800e0d4 <tcp_listen_input+0x1f0>)
 800df94:	695a      	ldr	r2, [r3, #20]
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800df9a:	4b4e      	ldr	r3, [pc, #312]	; (800e0d4 <tcp_listen_input+0x1f0>)
 800df9c:	691a      	ldr	r2, [r3, #16]
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	8ada      	ldrh	r2, [r3, #22]
 800dfa6:	697b      	ldr	r3, [r7, #20]
 800dfa8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800dfaa:	4b47      	ldr	r3, [pc, #284]	; (800e0c8 <tcp_listen_input+0x1e4>)
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	b29a      	uxth	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800dfb6:	697b      	ldr	r3, [r7, #20]
 800dfb8:	2203      	movs	r2, #3
 800dfba:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800dfbc:	4b41      	ldr	r3, [pc, #260]	; (800e0c4 <tcp_listen_input+0x1e0>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	1c5a      	adds	r2, r3, #1
 800dfc2:	697b      	ldr	r3, [r7, #20]
 800dfc4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800dfc6:	697b      	ldr	r3, [r7, #20]
 800dfc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dfca:	697b      	ldr	r3, [r7, #20]
 800dfcc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800dfce:	6978      	ldr	r0, [r7, #20]
 800dfd0:	f7ff fa5a 	bl	800d488 <tcp_next_iss>
 800dfd4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800dfd6:	697b      	ldr	r3, [r7, #20]
 800dfd8:	693a      	ldr	r2, [r7, #16]
 800dfda:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800dfdc:	697b      	ldr	r3, [r7, #20]
 800dfde:	693a      	ldr	r2, [r7, #16]
 800dfe0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	693a      	ldr	r2, [r7, #16]
 800dfe6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800dfe8:	697b      	ldr	r3, [r7, #20]
 800dfea:	693a      	ldr	r2, [r7, #16]
 800dfec:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800dfee:	4b35      	ldr	r3, [pc, #212]	; (800e0c4 <tcp_listen_input+0x1e0>)
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	1e5a      	subs	r2, r3, #1
 800dff4:	697b      	ldr	r3, [r7, #20]
 800dff6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	691a      	ldr	r2, [r3, #16]
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e000:	697b      	ldr	r3, [r7, #20]
 800e002:	687a      	ldr	r2, [r7, #4]
 800e004:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	7a5b      	ldrb	r3, [r3, #9]
 800e00a:	f003 030c 	and.w	r3, r3, #12
 800e00e:	b2da      	uxtb	r2, r3
 800e010:	697b      	ldr	r3, [r7, #20]
 800e012:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	7a1a      	ldrb	r2, [r3, #8]
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e01c:	4b2e      	ldr	r3, [pc, #184]	; (800e0d8 <tcp_listen_input+0x1f4>)
 800e01e:	681a      	ldr	r2, [r3, #0]
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	60da      	str	r2, [r3, #12]
 800e024:	4a2c      	ldr	r2, [pc, #176]	; (800e0d8 <tcp_listen_input+0x1f4>)
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	6013      	str	r3, [r2, #0]
 800e02a:	f003 fd27 	bl	8011a7c <tcp_timer_needed>
 800e02e:	4b2b      	ldr	r3, [pc, #172]	; (800e0dc <tcp_listen_input+0x1f8>)
 800e030:	2201      	movs	r2, #1
 800e032:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e034:	6978      	ldr	r0, [r7, #20]
 800e036:	f001 fd8d 	bl	800fb54 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e03a:	4b23      	ldr	r3, [pc, #140]	; (800e0c8 <tcp_listen_input+0x1e4>)
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	89db      	ldrh	r3, [r3, #14]
 800e040:	b29a      	uxth	r2, r3
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e054:	697b      	ldr	r3, [r7, #20]
 800e056:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e058:	697b      	ldr	r3, [r7, #20]
 800e05a:	3304      	adds	r3, #4
 800e05c:	4618      	mov	r0, r3
 800e05e:	f007 fabf 	bl	80155e0 <ip4_route>
 800e062:	4601      	mov	r1, r0
 800e064:	697b      	ldr	r3, [r7, #20]
 800e066:	3304      	adds	r3, #4
 800e068:	461a      	mov	r2, r3
 800e06a:	4620      	mov	r0, r4
 800e06c:	f7ff fa32 	bl	800d4d4 <tcp_eff_send_mss_netif>
 800e070:	4603      	mov	r3, r0
 800e072:	461a      	mov	r2, r3
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e078:	2112      	movs	r1, #18
 800e07a:	6978      	ldr	r0, [r7, #20]
 800e07c:	f002 fc9a 	bl	80109b4 <tcp_enqueue_flags>
 800e080:	4603      	mov	r3, r0
 800e082:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e084:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d004      	beq.n	800e096 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e08c:	2100      	movs	r1, #0
 800e08e:	6978      	ldr	r0, [r7, #20]
 800e090:	f7fd ff0a 	bl	800bea8 <tcp_abandon>
      return;
 800e094:	e006      	b.n	800e0a4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e096:	6978      	ldr	r0, [r7, #20]
 800e098:	f002 fd7a 	bl	8010b90 <tcp_output>
  return;
 800e09c:	e001      	b.n	800e0a2 <tcp_listen_input+0x1be>
    return;
 800e09e:	bf00      	nop
 800e0a0:	e000      	b.n	800e0a4 <tcp_listen_input+0x1c0>
  return;
 800e0a2:	bf00      	nop
}
 800e0a4:	371c      	adds	r7, #28
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd90      	pop	{r4, r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	200085d8 	.word	0x200085d8
 800e0b0:	0801a114 	.word	0x0801a114
 800e0b4:	0801a30c 	.word	0x0801a30c
 800e0b8:	0801a160 	.word	0x0801a160
 800e0bc:	200085d0 	.word	0x200085d0
 800e0c0:	200085d6 	.word	0x200085d6
 800e0c4:	200085cc 	.word	0x200085cc
 800e0c8:	200085bc 	.word	0x200085bc
 800e0cc:	2000b918 	.word	0x2000b918
 800e0d0:	2000b91c 	.word	0x2000b91c
 800e0d4:	2000b908 	.word	0x2000b908
 800e0d8:	2000f03c 	.word	0x2000f03c
 800e0dc:	2000f038 	.word	0x2000f038

0800e0e0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b086      	sub	sp, #24
 800e0e4:	af04      	add	r7, sp, #16
 800e0e6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e0e8:	4b2f      	ldr	r3, [pc, #188]	; (800e1a8 <tcp_timewait_input+0xc8>)
 800e0ea:	781b      	ldrb	r3, [r3, #0]
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d153      	bne.n	800e19c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d106      	bne.n	800e108 <tcp_timewait_input+0x28>
 800e0fa:	4b2c      	ldr	r3, [pc, #176]	; (800e1ac <tcp_timewait_input+0xcc>)
 800e0fc:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e100:	492b      	ldr	r1, [pc, #172]	; (800e1b0 <tcp_timewait_input+0xd0>)
 800e102:	482c      	ldr	r0, [pc, #176]	; (800e1b4 <tcp_timewait_input+0xd4>)
 800e104:	f008 feb4 	bl	8016e70 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e108:	4b27      	ldr	r3, [pc, #156]	; (800e1a8 <tcp_timewait_input+0xc8>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 0302 	and.w	r3, r3, #2
 800e110:	2b00      	cmp	r3, #0
 800e112:	d02a      	beq.n	800e16a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e114:	4b28      	ldr	r3, [pc, #160]	; (800e1b8 <tcp_timewait_input+0xd8>)
 800e116:	681a      	ldr	r2, [r3, #0]
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e11c:	1ad3      	subs	r3, r2, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	db2d      	blt.n	800e17e <tcp_timewait_input+0x9e>
 800e122:	4b25      	ldr	r3, [pc, #148]	; (800e1b8 <tcp_timewait_input+0xd8>)
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e12a:	6879      	ldr	r1, [r7, #4]
 800e12c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e12e:	440b      	add	r3, r1
 800e130:	1ad3      	subs	r3, r2, r3
 800e132:	2b00      	cmp	r3, #0
 800e134:	dc23      	bgt.n	800e17e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e136:	4b21      	ldr	r3, [pc, #132]	; (800e1bc <tcp_timewait_input+0xdc>)
 800e138:	6819      	ldr	r1, [r3, #0]
 800e13a:	4b21      	ldr	r3, [pc, #132]	; (800e1c0 <tcp_timewait_input+0xe0>)
 800e13c:	881b      	ldrh	r3, [r3, #0]
 800e13e:	461a      	mov	r2, r3
 800e140:	4b1d      	ldr	r3, [pc, #116]	; (800e1b8 <tcp_timewait_input+0xd8>)
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e146:	4b1f      	ldr	r3, [pc, #124]	; (800e1c4 <tcp_timewait_input+0xe4>)
 800e148:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e14a:	885b      	ldrh	r3, [r3, #2]
 800e14c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e14e:	4a1d      	ldr	r2, [pc, #116]	; (800e1c4 <tcp_timewait_input+0xe4>)
 800e150:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e152:	8812      	ldrh	r2, [r2, #0]
 800e154:	b292      	uxth	r2, r2
 800e156:	9202      	str	r2, [sp, #8]
 800e158:	9301      	str	r3, [sp, #4]
 800e15a:	4b1b      	ldr	r3, [pc, #108]	; (800e1c8 <tcp_timewait_input+0xe8>)
 800e15c:	9300      	str	r3, [sp, #0]
 800e15e:	4b1b      	ldr	r3, [pc, #108]	; (800e1cc <tcp_timewait_input+0xec>)
 800e160:	4602      	mov	r2, r0
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f003 fac8 	bl	80116f8 <tcp_rst>
      return;
 800e168:	e01b      	b.n	800e1a2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e16a:	4b0f      	ldr	r3, [pc, #60]	; (800e1a8 <tcp_timewait_input+0xc8>)
 800e16c:	781b      	ldrb	r3, [r3, #0]
 800e16e:	f003 0301 	and.w	r3, r3, #1
 800e172:	2b00      	cmp	r3, #0
 800e174:	d003      	beq.n	800e17e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e176:	4b16      	ldr	r3, [pc, #88]	; (800e1d0 <tcp_timewait_input+0xf0>)
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e17e:	4b10      	ldr	r3, [pc, #64]	; (800e1c0 <tcp_timewait_input+0xe0>)
 800e180:	881b      	ldrh	r3, [r3, #0]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d00c      	beq.n	800e1a0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8b5b      	ldrh	r3, [r3, #26]
 800e18a:	f043 0302 	orr.w	r3, r3, #2
 800e18e:	b29a      	uxth	r2, r3
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f002 fcfb 	bl	8010b90 <tcp_output>
  }
  return;
 800e19a:	e001      	b.n	800e1a0 <tcp_timewait_input+0xc0>
    return;
 800e19c:	bf00      	nop
 800e19e:	e000      	b.n	800e1a2 <tcp_timewait_input+0xc2>
  return;
 800e1a0:	bf00      	nop
}
 800e1a2:	3708      	adds	r7, #8
 800e1a4:	46bd      	mov	sp, r7
 800e1a6:	bd80      	pop	{r7, pc}
 800e1a8:	200085d8 	.word	0x200085d8
 800e1ac:	0801a114 	.word	0x0801a114
 800e1b0:	0801a32c 	.word	0x0801a32c
 800e1b4:	0801a160 	.word	0x0801a160
 800e1b8:	200085cc 	.word	0x200085cc
 800e1bc:	200085d0 	.word	0x200085d0
 800e1c0:	200085d6 	.word	0x200085d6
 800e1c4:	200085bc 	.word	0x200085bc
 800e1c8:	2000b918 	.word	0x2000b918
 800e1cc:	2000b91c 	.word	0x2000b91c
 800e1d0:	2000f040 	.word	0x2000f040

0800e1d4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e1d4:	b590      	push	{r4, r7, lr}
 800e1d6:	b08d      	sub	sp, #52	; 0x34
 800e1d8:	af04      	add	r7, sp, #16
 800e1da:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e1dc:	2300      	movs	r3, #0
 800e1de:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e1e0:	2300      	movs	r3, #0
 800e1e2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d106      	bne.n	800e1f8 <tcp_process+0x24>
 800e1ea:	4ba5      	ldr	r3, [pc, #660]	; (800e480 <tcp_process+0x2ac>)
 800e1ec:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e1f0:	49a4      	ldr	r1, [pc, #656]	; (800e484 <tcp_process+0x2b0>)
 800e1f2:	48a5      	ldr	r0, [pc, #660]	; (800e488 <tcp_process+0x2b4>)
 800e1f4:	f008 fe3c 	bl	8016e70 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e1f8:	4ba4      	ldr	r3, [pc, #656]	; (800e48c <tcp_process+0x2b8>)
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	f003 0304 	and.w	r3, r3, #4
 800e200:	2b00      	cmp	r3, #0
 800e202:	d04e      	beq.n	800e2a2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	7d1b      	ldrb	r3, [r3, #20]
 800e208:	2b02      	cmp	r3, #2
 800e20a:	d108      	bne.n	800e21e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e210:	4b9f      	ldr	r3, [pc, #636]	; (800e490 <tcp_process+0x2bc>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	429a      	cmp	r2, r3
 800e216:	d123      	bne.n	800e260 <tcp_process+0x8c>
        acceptable = 1;
 800e218:	2301      	movs	r3, #1
 800e21a:	76fb      	strb	r3, [r7, #27]
 800e21c:	e020      	b.n	800e260 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e222:	4b9c      	ldr	r3, [pc, #624]	; (800e494 <tcp_process+0x2c0>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	429a      	cmp	r2, r3
 800e228:	d102      	bne.n	800e230 <tcp_process+0x5c>
        acceptable = 1;
 800e22a:	2301      	movs	r3, #1
 800e22c:	76fb      	strb	r3, [r7, #27]
 800e22e:	e017      	b.n	800e260 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e230:	4b98      	ldr	r3, [pc, #608]	; (800e494 <tcp_process+0x2c0>)
 800e232:	681a      	ldr	r2, [r3, #0]
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e238:	1ad3      	subs	r3, r2, r3
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	db10      	blt.n	800e260 <tcp_process+0x8c>
 800e23e:	4b95      	ldr	r3, [pc, #596]	; (800e494 <tcp_process+0x2c0>)
 800e240:	681a      	ldr	r2, [r3, #0]
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e246:	6879      	ldr	r1, [r7, #4]
 800e248:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e24a:	440b      	add	r3, r1
 800e24c:	1ad3      	subs	r3, r2, r3
 800e24e:	2b00      	cmp	r3, #0
 800e250:	dc06      	bgt.n	800e260 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	8b5b      	ldrh	r3, [r3, #26]
 800e256:	f043 0302 	orr.w	r3, r3, #2
 800e25a:	b29a      	uxth	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e260:	7efb      	ldrb	r3, [r7, #27]
 800e262:	2b00      	cmp	r3, #0
 800e264:	d01b      	beq.n	800e29e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	7d1b      	ldrb	r3, [r3, #20]
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	d106      	bne.n	800e27c <tcp_process+0xa8>
 800e26e:	4b84      	ldr	r3, [pc, #528]	; (800e480 <tcp_process+0x2ac>)
 800e270:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e274:	4988      	ldr	r1, [pc, #544]	; (800e498 <tcp_process+0x2c4>)
 800e276:	4884      	ldr	r0, [pc, #528]	; (800e488 <tcp_process+0x2b4>)
 800e278:	f008 fdfa 	bl	8016e70 <iprintf>
      recv_flags |= TF_RESET;
 800e27c:	4b87      	ldr	r3, [pc, #540]	; (800e49c <tcp_process+0x2c8>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	f043 0308 	orr.w	r3, r3, #8
 800e284:	b2da      	uxtb	r2, r3
 800e286:	4b85      	ldr	r3, [pc, #532]	; (800e49c <tcp_process+0x2c8>)
 800e288:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	8b5b      	ldrh	r3, [r3, #26]
 800e28e:	f023 0301 	bic.w	r3, r3, #1
 800e292:	b29a      	uxth	r2, r3
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e298:	f06f 030d 	mvn.w	r3, #13
 800e29c:	e37a      	b.n	800e994 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e29e:	2300      	movs	r3, #0
 800e2a0:	e378      	b.n	800e994 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e2a2:	4b7a      	ldr	r3, [pc, #488]	; (800e48c <tcp_process+0x2b8>)
 800e2a4:	781b      	ldrb	r3, [r3, #0]
 800e2a6:	f003 0302 	and.w	r3, r3, #2
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d010      	beq.n	800e2d0 <tcp_process+0xfc>
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	7d1b      	ldrb	r3, [r3, #20]
 800e2b2:	2b02      	cmp	r3, #2
 800e2b4:	d00c      	beq.n	800e2d0 <tcp_process+0xfc>
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	7d1b      	ldrb	r3, [r3, #20]
 800e2ba:	2b03      	cmp	r3, #3
 800e2bc:	d008      	beq.n	800e2d0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	8b5b      	ldrh	r3, [r3, #26]
 800e2c2:	f043 0302 	orr.w	r3, r3, #2
 800e2c6:	b29a      	uxth	r2, r3
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	e361      	b.n	800e994 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	8b5b      	ldrh	r3, [r3, #26]
 800e2d4:	f003 0310 	and.w	r3, r3, #16
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d103      	bne.n	800e2e4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e2dc:	4b70      	ldr	r3, [pc, #448]	; (800e4a0 <tcp_process+0x2cc>)
 800e2de:	681a      	ldr	r2, [r3, #0]
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2200      	movs	r2, #0
 800e2f0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e2f4:	6878      	ldr	r0, [r7, #4]
 800e2f6:	f001 fc2d 	bl	800fb54 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	7d1b      	ldrb	r3, [r3, #20]
 800e2fe:	3b02      	subs	r3, #2
 800e300:	2b07      	cmp	r3, #7
 800e302:	f200 8337 	bhi.w	800e974 <tcp_process+0x7a0>
 800e306:	a201      	add	r2, pc, #4	; (adr r2, 800e30c <tcp_process+0x138>)
 800e308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e30c:	0800e32d 	.word	0x0800e32d
 800e310:	0800e55d 	.word	0x0800e55d
 800e314:	0800e6d5 	.word	0x0800e6d5
 800e318:	0800e6ff 	.word	0x0800e6ff
 800e31c:	0800e823 	.word	0x0800e823
 800e320:	0800e6d5 	.word	0x0800e6d5
 800e324:	0800e8af 	.word	0x0800e8af
 800e328:	0800e93f 	.word	0x0800e93f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e32c:	4b57      	ldr	r3, [pc, #348]	; (800e48c <tcp_process+0x2b8>)
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	f003 0310 	and.w	r3, r3, #16
 800e334:	2b00      	cmp	r3, #0
 800e336:	f000 80e4 	beq.w	800e502 <tcp_process+0x32e>
 800e33a:	4b54      	ldr	r3, [pc, #336]	; (800e48c <tcp_process+0x2b8>)
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	f003 0302 	and.w	r3, r3, #2
 800e342:	2b00      	cmp	r3, #0
 800e344:	f000 80dd 	beq.w	800e502 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e34c:	1c5a      	adds	r2, r3, #1
 800e34e:	4b50      	ldr	r3, [pc, #320]	; (800e490 <tcp_process+0x2bc>)
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	429a      	cmp	r2, r3
 800e354:	f040 80d5 	bne.w	800e502 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e358:	4b4e      	ldr	r3, [pc, #312]	; (800e494 <tcp_process+0x2c0>)
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e36a:	4b49      	ldr	r3, [pc, #292]	; (800e490 <tcp_process+0x2bc>)
 800e36c:	681a      	ldr	r2, [r3, #0]
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e372:	4b4c      	ldr	r3, [pc, #304]	; (800e4a4 <tcp_process+0x2d0>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	89db      	ldrh	r3, [r3, #14]
 800e378:	b29a      	uxth	r2, r3
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e38c:	4b41      	ldr	r3, [pc, #260]	; (800e494 <tcp_process+0x2c0>)
 800e38e:	681b      	ldr	r3, [r3, #0]
 800e390:	1e5a      	subs	r2, r3, #1
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	2204      	movs	r2, #4
 800e39a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	f007 f91b 	bl	80155e0 <ip4_route>
 800e3aa:	4601      	mov	r1, r0
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	3304      	adds	r3, #4
 800e3b0:	461a      	mov	r2, r3
 800e3b2:	4620      	mov	r0, r4
 800e3b4:	f7ff f88e 	bl	800d4d4 <tcp_eff_send_mss_netif>
 800e3b8:	4603      	mov	r3, r0
 800e3ba:	461a      	mov	r2, r3
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3c4:	009a      	lsls	r2, r3, #2
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3ca:	005b      	lsls	r3, r3, #1
 800e3cc:	f241 111c 	movw	r1, #4380	; 0x111c
 800e3d0:	428b      	cmp	r3, r1
 800e3d2:	bf38      	it	cc
 800e3d4:	460b      	movcc	r3, r1
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d204      	bcs.n	800e3e4 <tcp_process+0x210>
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3de:	009b      	lsls	r3, r3, #2
 800e3e0:	b29b      	uxth	r3, r3
 800e3e2:	e00d      	b.n	800e400 <tcp_process+0x22c>
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3e8:	005b      	lsls	r3, r3, #1
 800e3ea:	f241 121c 	movw	r2, #4380	; 0x111c
 800e3ee:	4293      	cmp	r3, r2
 800e3f0:	d904      	bls.n	800e3fc <tcp_process+0x228>
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3f6:	005b      	lsls	r3, r3, #1
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	e001      	b.n	800e400 <tcp_process+0x22c>
 800e3fc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e400:	687a      	ldr	r2, [r7, #4]
 800e402:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d106      	bne.n	800e41e <tcp_process+0x24a>
 800e410:	4b1b      	ldr	r3, [pc, #108]	; (800e480 <tcp_process+0x2ac>)
 800e412:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e416:	4924      	ldr	r1, [pc, #144]	; (800e4a8 <tcp_process+0x2d4>)
 800e418:	481b      	ldr	r0, [pc, #108]	; (800e488 <tcp_process+0x2b4>)
 800e41a:	f008 fd29 	bl	8016e70 <iprintf>
        --pcb->snd_queuelen;
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e424:	3b01      	subs	r3, #1
 800e426:	b29a      	uxth	r2, r3
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e432:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d111      	bne.n	800e45e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e43e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d106      	bne.n	800e454 <tcp_process+0x280>
 800e446:	4b0e      	ldr	r3, [pc, #56]	; (800e480 <tcp_process+0x2ac>)
 800e448:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e44c:	4917      	ldr	r1, [pc, #92]	; (800e4ac <tcp_process+0x2d8>)
 800e44e:	480e      	ldr	r0, [pc, #56]	; (800e488 <tcp_process+0x2b4>)
 800e450:	f008 fd0e 	bl	8016e70 <iprintf>
          pcb->unsent = rseg->next;
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e45c:	e003      	b.n	800e466 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800e45e:	69fb      	ldr	r3, [r7, #28]
 800e460:	681a      	ldr	r2, [r3, #0]
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e466:	69f8      	ldr	r0, [r7, #28]
 800e468:	f7fe fc6f 	bl	800cd4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e470:	2b00      	cmp	r3, #0
 800e472:	d11d      	bne.n	800e4b0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e47a:	861a      	strh	r2, [r3, #48]	; 0x30
 800e47c:	e01f      	b.n	800e4be <tcp_process+0x2ea>
 800e47e:	bf00      	nop
 800e480:	0801a114 	.word	0x0801a114
 800e484:	0801a34c 	.word	0x0801a34c
 800e488:	0801a160 	.word	0x0801a160
 800e48c:	200085d8 	.word	0x200085d8
 800e490:	200085d0 	.word	0x200085d0
 800e494:	200085cc 	.word	0x200085cc
 800e498:	0801a368 	.word	0x0801a368
 800e49c:	200085d9 	.word	0x200085d9
 800e4a0:	2000f040 	.word	0x2000f040
 800e4a4:	200085bc 	.word	0x200085bc
 800e4a8:	0801a388 	.word	0x0801a388
 800e4ac:	0801a3a0 	.word	0x0801a3a0
        } else {
          pcb->rtime = 0;
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	2200      	movs	r2, #0
 800e4ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d00a      	beq.n	800e4de <tcp_process+0x30a>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	6910      	ldr	r0, [r2, #16]
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	6879      	ldr	r1, [r7, #4]
 800e4d6:	4798      	blx	r3
 800e4d8:	4603      	mov	r3, r0
 800e4da:	76bb      	strb	r3, [r7, #26]
 800e4dc:	e001      	b.n	800e4e2 <tcp_process+0x30e>
 800e4de:	2300      	movs	r3, #0
 800e4e0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e4e2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e4e6:	f113 0f0d 	cmn.w	r3, #13
 800e4ea:	d102      	bne.n	800e4f2 <tcp_process+0x31e>
          return ERR_ABRT;
 800e4ec:	f06f 030c 	mvn.w	r3, #12
 800e4f0:	e250      	b.n	800e994 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	8b5b      	ldrh	r3, [r3, #26]
 800e4f6:	f043 0302 	orr.w	r3, r3, #2
 800e4fa:	b29a      	uxth	r2, r3
 800e4fc:	687b      	ldr	r3, [r7, #4]
 800e4fe:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e500:	e23a      	b.n	800e978 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e502:	4b9d      	ldr	r3, [pc, #628]	; (800e778 <tcp_process+0x5a4>)
 800e504:	781b      	ldrb	r3, [r3, #0]
 800e506:	f003 0310 	and.w	r3, r3, #16
 800e50a:	2b00      	cmp	r3, #0
 800e50c:	f000 8234 	beq.w	800e978 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e510:	4b9a      	ldr	r3, [pc, #616]	; (800e77c <tcp_process+0x5a8>)
 800e512:	6819      	ldr	r1, [r3, #0]
 800e514:	4b9a      	ldr	r3, [pc, #616]	; (800e780 <tcp_process+0x5ac>)
 800e516:	881b      	ldrh	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	4b9a      	ldr	r3, [pc, #616]	; (800e784 <tcp_process+0x5b0>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e520:	4b99      	ldr	r3, [pc, #612]	; (800e788 <tcp_process+0x5b4>)
 800e522:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e524:	885b      	ldrh	r3, [r3, #2]
 800e526:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e528:	4a97      	ldr	r2, [pc, #604]	; (800e788 <tcp_process+0x5b4>)
 800e52a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e52c:	8812      	ldrh	r2, [r2, #0]
 800e52e:	b292      	uxth	r2, r2
 800e530:	9202      	str	r2, [sp, #8]
 800e532:	9301      	str	r3, [sp, #4]
 800e534:	4b95      	ldr	r3, [pc, #596]	; (800e78c <tcp_process+0x5b8>)
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	4b95      	ldr	r3, [pc, #596]	; (800e790 <tcp_process+0x5bc>)
 800e53a:	4602      	mov	r2, r0
 800e53c:	6878      	ldr	r0, [r7, #4]
 800e53e:	f003 f8db 	bl	80116f8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e548:	2b05      	cmp	r3, #5
 800e54a:	f200 8215 	bhi.w	800e978 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e554:	6878      	ldr	r0, [r7, #4]
 800e556:	f002 fea5 	bl	80112a4 <tcp_rexmit_rto>
      break;
 800e55a:	e20d      	b.n	800e978 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e55c:	4b86      	ldr	r3, [pc, #536]	; (800e778 <tcp_process+0x5a4>)
 800e55e:	781b      	ldrb	r3, [r3, #0]
 800e560:	f003 0310 	and.w	r3, r3, #16
 800e564:	2b00      	cmp	r3, #0
 800e566:	f000 80a1 	beq.w	800e6ac <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e56a:	4b84      	ldr	r3, [pc, #528]	; (800e77c <tcp_process+0x5a8>)
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e572:	1ad3      	subs	r3, r2, r3
 800e574:	3b01      	subs	r3, #1
 800e576:	2b00      	cmp	r3, #0
 800e578:	db7e      	blt.n	800e678 <tcp_process+0x4a4>
 800e57a:	4b80      	ldr	r3, [pc, #512]	; (800e77c <tcp_process+0x5a8>)
 800e57c:	681a      	ldr	r2, [r3, #0]
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e582:	1ad3      	subs	r3, r2, r3
 800e584:	2b00      	cmp	r3, #0
 800e586:	dc77      	bgt.n	800e678 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	2204      	movs	r2, #4
 800e58c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d102      	bne.n	800e59c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e596:	23fa      	movs	r3, #250	; 0xfa
 800e598:	76bb      	strb	r3, [r7, #26]
 800e59a:	e01d      	b.n	800e5d8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5a0:	699b      	ldr	r3, [r3, #24]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d106      	bne.n	800e5b4 <tcp_process+0x3e0>
 800e5a6:	4b7b      	ldr	r3, [pc, #492]	; (800e794 <tcp_process+0x5c0>)
 800e5a8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e5ac:	497a      	ldr	r1, [pc, #488]	; (800e798 <tcp_process+0x5c4>)
 800e5ae:	487b      	ldr	r0, [pc, #492]	; (800e79c <tcp_process+0x5c8>)
 800e5b0:	f008 fc5e 	bl	8016e70 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5b8:	699b      	ldr	r3, [r3, #24]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00a      	beq.n	800e5d4 <tcp_process+0x400>
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e5c2:	699b      	ldr	r3, [r3, #24]
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	6910      	ldr	r0, [r2, #16]
 800e5c8:	2200      	movs	r2, #0
 800e5ca:	6879      	ldr	r1, [r7, #4]
 800e5cc:	4798      	blx	r3
 800e5ce:	4603      	mov	r3, r0
 800e5d0:	76bb      	strb	r3, [r7, #26]
 800e5d2:	e001      	b.n	800e5d8 <tcp_process+0x404>
 800e5d4:	23f0      	movs	r3, #240	; 0xf0
 800e5d6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e5d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5dc:	2b00      	cmp	r3, #0
 800e5de:	d00a      	beq.n	800e5f6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e5e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e5e4:	f113 0f0d 	cmn.w	r3, #13
 800e5e8:	d002      	beq.n	800e5f0 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e5ea:	6878      	ldr	r0, [r7, #4]
 800e5ec:	f7fd fd1a 	bl	800c024 <tcp_abort>
            }
            return ERR_ABRT;
 800e5f0:	f06f 030c 	mvn.w	r3, #12
 800e5f4:	e1ce      	b.n	800e994 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e5f6:	6878      	ldr	r0, [r7, #4]
 800e5f8:	f000 fae0 	bl	800ebbc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e5fc:	4b68      	ldr	r3, [pc, #416]	; (800e7a0 <tcp_process+0x5cc>)
 800e5fe:	881b      	ldrh	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d005      	beq.n	800e610 <tcp_process+0x43c>
            recv_acked--;
 800e604:	4b66      	ldr	r3, [pc, #408]	; (800e7a0 <tcp_process+0x5cc>)
 800e606:	881b      	ldrh	r3, [r3, #0]
 800e608:	3b01      	subs	r3, #1
 800e60a:	b29a      	uxth	r2, r3
 800e60c:	4b64      	ldr	r3, [pc, #400]	; (800e7a0 <tcp_process+0x5cc>)
 800e60e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e614:	009a      	lsls	r2, r3, #2
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e61a:	005b      	lsls	r3, r3, #1
 800e61c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e620:	428b      	cmp	r3, r1
 800e622:	bf38      	it	cc
 800e624:	460b      	movcc	r3, r1
 800e626:	429a      	cmp	r2, r3
 800e628:	d204      	bcs.n	800e634 <tcp_process+0x460>
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	b29b      	uxth	r3, r3
 800e632:	e00d      	b.n	800e650 <tcp_process+0x47c>
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e638:	005b      	lsls	r3, r3, #1
 800e63a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e63e:	4293      	cmp	r3, r2
 800e640:	d904      	bls.n	800e64c <tcp_process+0x478>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e646:	005b      	lsls	r3, r3, #1
 800e648:	b29b      	uxth	r3, r3
 800e64a:	e001      	b.n	800e650 <tcp_process+0x47c>
 800e64c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e650:	687a      	ldr	r2, [r7, #4]
 800e652:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e656:	4b53      	ldr	r3, [pc, #332]	; (800e7a4 <tcp_process+0x5d0>)
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	f003 0320 	and.w	r3, r3, #32
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d037      	beq.n	800e6d2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	8b5b      	ldrh	r3, [r3, #26]
 800e666:	f043 0302 	orr.w	r3, r3, #2
 800e66a:	b29a      	uxth	r2, r3
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	2207      	movs	r2, #7
 800e674:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e676:	e02c      	b.n	800e6d2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e678:	4b40      	ldr	r3, [pc, #256]	; (800e77c <tcp_process+0x5a8>)
 800e67a:	6819      	ldr	r1, [r3, #0]
 800e67c:	4b40      	ldr	r3, [pc, #256]	; (800e780 <tcp_process+0x5ac>)
 800e67e:	881b      	ldrh	r3, [r3, #0]
 800e680:	461a      	mov	r2, r3
 800e682:	4b40      	ldr	r3, [pc, #256]	; (800e784 <tcp_process+0x5b0>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e688:	4b3f      	ldr	r3, [pc, #252]	; (800e788 <tcp_process+0x5b4>)
 800e68a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e68c:	885b      	ldrh	r3, [r3, #2]
 800e68e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e690:	4a3d      	ldr	r2, [pc, #244]	; (800e788 <tcp_process+0x5b4>)
 800e692:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e694:	8812      	ldrh	r2, [r2, #0]
 800e696:	b292      	uxth	r2, r2
 800e698:	9202      	str	r2, [sp, #8]
 800e69a:	9301      	str	r3, [sp, #4]
 800e69c:	4b3b      	ldr	r3, [pc, #236]	; (800e78c <tcp_process+0x5b8>)
 800e69e:	9300      	str	r3, [sp, #0]
 800e6a0:	4b3b      	ldr	r3, [pc, #236]	; (800e790 <tcp_process+0x5bc>)
 800e6a2:	4602      	mov	r2, r0
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f003 f827 	bl	80116f8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e6aa:	e167      	b.n	800e97c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e6ac:	4b32      	ldr	r3, [pc, #200]	; (800e778 <tcp_process+0x5a4>)
 800e6ae:	781b      	ldrb	r3, [r3, #0]
 800e6b0:	f003 0302 	and.w	r3, r3, #2
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 8161 	beq.w	800e97c <tcp_process+0x7a8>
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6be:	1e5a      	subs	r2, r3, #1
 800e6c0:	4b30      	ldr	r3, [pc, #192]	; (800e784 <tcp_process+0x5b0>)
 800e6c2:	681b      	ldr	r3, [r3, #0]
 800e6c4:	429a      	cmp	r2, r3
 800e6c6:	f040 8159 	bne.w	800e97c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f002 fe0c 	bl	80112e8 <tcp_rexmit>
      break;
 800e6d0:	e154      	b.n	800e97c <tcp_process+0x7a8>
 800e6d2:	e153      	b.n	800e97c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e6d4:	6878      	ldr	r0, [r7, #4]
 800e6d6:	f000 fa71 	bl	800ebbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e6da:	4b32      	ldr	r3, [pc, #200]	; (800e7a4 <tcp_process+0x5d0>)
 800e6dc:	781b      	ldrb	r3, [r3, #0]
 800e6de:	f003 0320 	and.w	r3, r3, #32
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	f000 814c 	beq.w	800e980 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	8b5b      	ldrh	r3, [r3, #26]
 800e6ec:	f043 0302 	orr.w	r3, r3, #2
 800e6f0:	b29a      	uxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	2207      	movs	r2, #7
 800e6fa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e6fc:	e140      	b.n	800e980 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e6fe:	6878      	ldr	r0, [r7, #4]
 800e700:	f000 fa5c 	bl	800ebbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e704:	4b27      	ldr	r3, [pc, #156]	; (800e7a4 <tcp_process+0x5d0>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	f003 0320 	and.w	r3, r3, #32
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d071      	beq.n	800e7f4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e710:	4b19      	ldr	r3, [pc, #100]	; (800e778 <tcp_process+0x5a4>)
 800e712:	781b      	ldrb	r3, [r3, #0]
 800e714:	f003 0310 	and.w	r3, r3, #16
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d060      	beq.n	800e7de <tcp_process+0x60a>
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e720:	4b16      	ldr	r3, [pc, #88]	; (800e77c <tcp_process+0x5a8>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	429a      	cmp	r2, r3
 800e726:	d15a      	bne.n	800e7de <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d156      	bne.n	800e7de <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	8b5b      	ldrh	r3, [r3, #26]
 800e734:	f043 0302 	orr.w	r3, r3, #2
 800e738:	b29a      	uxth	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f7fe fdbe 	bl	800d2c0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e744:	4b18      	ldr	r3, [pc, #96]	; (800e7a8 <tcp_process+0x5d4>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	687a      	ldr	r2, [r7, #4]
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d105      	bne.n	800e75a <tcp_process+0x586>
 800e74e:	4b16      	ldr	r3, [pc, #88]	; (800e7a8 <tcp_process+0x5d4>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	4a14      	ldr	r2, [pc, #80]	; (800e7a8 <tcp_process+0x5d4>)
 800e756:	6013      	str	r3, [r2, #0]
 800e758:	e02e      	b.n	800e7b8 <tcp_process+0x5e4>
 800e75a:	4b13      	ldr	r3, [pc, #76]	; (800e7a8 <tcp_process+0x5d4>)
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	617b      	str	r3, [r7, #20]
 800e760:	e027      	b.n	800e7b2 <tcp_process+0x5de>
 800e762:	697b      	ldr	r3, [r7, #20]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	687a      	ldr	r2, [r7, #4]
 800e768:	429a      	cmp	r2, r3
 800e76a:	d11f      	bne.n	800e7ac <tcp_process+0x5d8>
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	68da      	ldr	r2, [r3, #12]
 800e770:	697b      	ldr	r3, [r7, #20]
 800e772:	60da      	str	r2, [r3, #12]
 800e774:	e020      	b.n	800e7b8 <tcp_process+0x5e4>
 800e776:	bf00      	nop
 800e778:	200085d8 	.word	0x200085d8
 800e77c:	200085d0 	.word	0x200085d0
 800e780:	200085d6 	.word	0x200085d6
 800e784:	200085cc 	.word	0x200085cc
 800e788:	200085bc 	.word	0x200085bc
 800e78c:	2000b918 	.word	0x2000b918
 800e790:	2000b91c 	.word	0x2000b91c
 800e794:	0801a114 	.word	0x0801a114
 800e798:	0801a3b4 	.word	0x0801a3b4
 800e79c:	0801a160 	.word	0x0801a160
 800e7a0:	200085d4 	.word	0x200085d4
 800e7a4:	200085d9 	.word	0x200085d9
 800e7a8:	2000f03c 	.word	0x2000f03c
 800e7ac:	697b      	ldr	r3, [r7, #20]
 800e7ae:	68db      	ldr	r3, [r3, #12]
 800e7b0:	617b      	str	r3, [r7, #20]
 800e7b2:	697b      	ldr	r3, [r7, #20]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d1d4      	bne.n	800e762 <tcp_process+0x58e>
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	2200      	movs	r2, #0
 800e7bc:	60da      	str	r2, [r3, #12]
 800e7be:	4b77      	ldr	r3, [pc, #476]	; (800e99c <tcp_process+0x7c8>)
 800e7c0:	2201      	movs	r2, #1
 800e7c2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	220a      	movs	r2, #10
 800e7c8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e7ca:	4b75      	ldr	r3, [pc, #468]	; (800e9a0 <tcp_process+0x7cc>)
 800e7cc:	681a      	ldr	r2, [r3, #0]
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	60da      	str	r2, [r3, #12]
 800e7d2:	4a73      	ldr	r2, [pc, #460]	; (800e9a0 <tcp_process+0x7cc>)
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6013      	str	r3, [r2, #0]
 800e7d8:	f003 f950 	bl	8011a7c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e7dc:	e0d2      	b.n	800e984 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	8b5b      	ldrh	r3, [r3, #26]
 800e7e2:	f043 0302 	orr.w	r3, r3, #2
 800e7e6:	b29a      	uxth	r2, r3
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	2208      	movs	r2, #8
 800e7f0:	751a      	strb	r2, [r3, #20]
      break;
 800e7f2:	e0c7      	b.n	800e984 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e7f4:	4b6b      	ldr	r3, [pc, #428]	; (800e9a4 <tcp_process+0x7d0>)
 800e7f6:	781b      	ldrb	r3, [r3, #0]
 800e7f8:	f003 0310 	and.w	r3, r3, #16
 800e7fc:	2b00      	cmp	r3, #0
 800e7fe:	f000 80c1 	beq.w	800e984 <tcp_process+0x7b0>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e806:	4b68      	ldr	r3, [pc, #416]	; (800e9a8 <tcp_process+0x7d4>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	429a      	cmp	r2, r3
 800e80c:	f040 80ba 	bne.w	800e984 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e814:	2b00      	cmp	r3, #0
 800e816:	f040 80b5 	bne.w	800e984 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	2206      	movs	r2, #6
 800e81e:	751a      	strb	r2, [r3, #20]
      break;
 800e820:	e0b0      	b.n	800e984 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 f9ca 	bl	800ebbc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e828:	4b60      	ldr	r3, [pc, #384]	; (800e9ac <tcp_process+0x7d8>)
 800e82a:	781b      	ldrb	r3, [r3, #0]
 800e82c:	f003 0320 	and.w	r3, r3, #32
 800e830:	2b00      	cmp	r3, #0
 800e832:	f000 80a9 	beq.w	800e988 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	8b5b      	ldrh	r3, [r3, #26]
 800e83a:	f043 0302 	orr.w	r3, r3, #2
 800e83e:	b29a      	uxth	r2, r3
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f7fe fd3b 	bl	800d2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e84a:	4b59      	ldr	r3, [pc, #356]	; (800e9b0 <tcp_process+0x7dc>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	687a      	ldr	r2, [r7, #4]
 800e850:	429a      	cmp	r2, r3
 800e852:	d105      	bne.n	800e860 <tcp_process+0x68c>
 800e854:	4b56      	ldr	r3, [pc, #344]	; (800e9b0 <tcp_process+0x7dc>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	68db      	ldr	r3, [r3, #12]
 800e85a:	4a55      	ldr	r2, [pc, #340]	; (800e9b0 <tcp_process+0x7dc>)
 800e85c:	6013      	str	r3, [r2, #0]
 800e85e:	e013      	b.n	800e888 <tcp_process+0x6b4>
 800e860:	4b53      	ldr	r3, [pc, #332]	; (800e9b0 <tcp_process+0x7dc>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	613b      	str	r3, [r7, #16]
 800e866:	e00c      	b.n	800e882 <tcp_process+0x6ae>
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	68db      	ldr	r3, [r3, #12]
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d104      	bne.n	800e87c <tcp_process+0x6a8>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	68da      	ldr	r2, [r3, #12]
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	60da      	str	r2, [r3, #12]
 800e87a:	e005      	b.n	800e888 <tcp_process+0x6b4>
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	613b      	str	r3, [r7, #16]
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	2b00      	cmp	r3, #0
 800e886:	d1ef      	bne.n	800e868 <tcp_process+0x694>
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2200      	movs	r2, #0
 800e88c:	60da      	str	r2, [r3, #12]
 800e88e:	4b43      	ldr	r3, [pc, #268]	; (800e99c <tcp_process+0x7c8>)
 800e890:	2201      	movs	r2, #1
 800e892:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	220a      	movs	r2, #10
 800e898:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e89a:	4b41      	ldr	r3, [pc, #260]	; (800e9a0 <tcp_process+0x7cc>)
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	60da      	str	r2, [r3, #12]
 800e8a2:	4a3f      	ldr	r2, [pc, #252]	; (800e9a0 <tcp_process+0x7cc>)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6013      	str	r3, [r2, #0]
 800e8a8:	f003 f8e8 	bl	8011a7c <tcp_timer_needed>
      }
      break;
 800e8ac:	e06c      	b.n	800e988 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e8ae:	6878      	ldr	r0, [r7, #4]
 800e8b0:	f000 f984 	bl	800ebbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e8b4:	4b3b      	ldr	r3, [pc, #236]	; (800e9a4 <tcp_process+0x7d0>)
 800e8b6:	781b      	ldrb	r3, [r3, #0]
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d065      	beq.n	800e98c <tcp_process+0x7b8>
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e8c4:	4b38      	ldr	r3, [pc, #224]	; (800e9a8 <tcp_process+0x7d4>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	429a      	cmp	r2, r3
 800e8ca:	d15f      	bne.n	800e98c <tcp_process+0x7b8>
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d15b      	bne.n	800e98c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e8d4:	6878      	ldr	r0, [r7, #4]
 800e8d6:	f7fe fcf3 	bl	800d2c0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e8da:	4b35      	ldr	r3, [pc, #212]	; (800e9b0 <tcp_process+0x7dc>)
 800e8dc:	681b      	ldr	r3, [r3, #0]
 800e8de:	687a      	ldr	r2, [r7, #4]
 800e8e0:	429a      	cmp	r2, r3
 800e8e2:	d105      	bne.n	800e8f0 <tcp_process+0x71c>
 800e8e4:	4b32      	ldr	r3, [pc, #200]	; (800e9b0 <tcp_process+0x7dc>)
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	4a31      	ldr	r2, [pc, #196]	; (800e9b0 <tcp_process+0x7dc>)
 800e8ec:	6013      	str	r3, [r2, #0]
 800e8ee:	e013      	b.n	800e918 <tcp_process+0x744>
 800e8f0:	4b2f      	ldr	r3, [pc, #188]	; (800e9b0 <tcp_process+0x7dc>)
 800e8f2:	681b      	ldr	r3, [r3, #0]
 800e8f4:	60fb      	str	r3, [r7, #12]
 800e8f6:	e00c      	b.n	800e912 <tcp_process+0x73e>
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	687a      	ldr	r2, [r7, #4]
 800e8fe:	429a      	cmp	r2, r3
 800e900:	d104      	bne.n	800e90c <tcp_process+0x738>
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	68da      	ldr	r2, [r3, #12]
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	60da      	str	r2, [r3, #12]
 800e90a:	e005      	b.n	800e918 <tcp_process+0x744>
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	68db      	ldr	r3, [r3, #12]
 800e910:	60fb      	str	r3, [r7, #12]
 800e912:	68fb      	ldr	r3, [r7, #12]
 800e914:	2b00      	cmp	r3, #0
 800e916:	d1ef      	bne.n	800e8f8 <tcp_process+0x724>
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2200      	movs	r2, #0
 800e91c:	60da      	str	r2, [r3, #12]
 800e91e:	4b1f      	ldr	r3, [pc, #124]	; (800e99c <tcp_process+0x7c8>)
 800e920:	2201      	movs	r2, #1
 800e922:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	220a      	movs	r2, #10
 800e928:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e92a:	4b1d      	ldr	r3, [pc, #116]	; (800e9a0 <tcp_process+0x7cc>)
 800e92c:	681a      	ldr	r2, [r3, #0]
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	60da      	str	r2, [r3, #12]
 800e932:	4a1b      	ldr	r2, [pc, #108]	; (800e9a0 <tcp_process+0x7cc>)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	6013      	str	r3, [r2, #0]
 800e938:	f003 f8a0 	bl	8011a7c <tcp_timer_needed>
      }
      break;
 800e93c:	e026      	b.n	800e98c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f000 f93c 	bl	800ebbc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e944:	4b17      	ldr	r3, [pc, #92]	; (800e9a4 <tcp_process+0x7d0>)
 800e946:	781b      	ldrb	r3, [r3, #0]
 800e948:	f003 0310 	and.w	r3, r3, #16
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d01f      	beq.n	800e990 <tcp_process+0x7bc>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e954:	4b14      	ldr	r3, [pc, #80]	; (800e9a8 <tcp_process+0x7d4>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	429a      	cmp	r2, r3
 800e95a:	d119      	bne.n	800e990 <tcp_process+0x7bc>
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e960:	2b00      	cmp	r3, #0
 800e962:	d115      	bne.n	800e990 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e964:	4b11      	ldr	r3, [pc, #68]	; (800e9ac <tcp_process+0x7d8>)
 800e966:	781b      	ldrb	r3, [r3, #0]
 800e968:	f043 0310 	orr.w	r3, r3, #16
 800e96c:	b2da      	uxtb	r2, r3
 800e96e:	4b0f      	ldr	r3, [pc, #60]	; (800e9ac <tcp_process+0x7d8>)
 800e970:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e972:	e00d      	b.n	800e990 <tcp_process+0x7bc>
    default:
      break;
 800e974:	bf00      	nop
 800e976:	e00c      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e978:	bf00      	nop
 800e97a:	e00a      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e97c:	bf00      	nop
 800e97e:	e008      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e980:	bf00      	nop
 800e982:	e006      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e984:	bf00      	nop
 800e986:	e004      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e988:	bf00      	nop
 800e98a:	e002      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e98c:	bf00      	nop
 800e98e:	e000      	b.n	800e992 <tcp_process+0x7be>
      break;
 800e990:	bf00      	nop
  }
  return ERR_OK;
 800e992:	2300      	movs	r3, #0
}
 800e994:	4618      	mov	r0, r3
 800e996:	3724      	adds	r7, #36	; 0x24
 800e998:	46bd      	mov	sp, r7
 800e99a:	bd90      	pop	{r4, r7, pc}
 800e99c:	2000f038 	.word	0x2000f038
 800e9a0:	2000f04c 	.word	0x2000f04c
 800e9a4:	200085d8 	.word	0x200085d8
 800e9a8:	200085d0 	.word	0x200085d0
 800e9ac:	200085d9 	.word	0x200085d9
 800e9b0:	2000f03c 	.word	0x2000f03c

0800e9b4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e9b4:	b590      	push	{r4, r7, lr}
 800e9b6:	b085      	sub	sp, #20
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	6078      	str	r0, [r7, #4]
 800e9bc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d106      	bne.n	800e9d2 <tcp_oos_insert_segment+0x1e>
 800e9c4:	4b3b      	ldr	r3, [pc, #236]	; (800eab4 <tcp_oos_insert_segment+0x100>)
 800e9c6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e9ca:	493b      	ldr	r1, [pc, #236]	; (800eab8 <tcp_oos_insert_segment+0x104>)
 800e9cc:	483b      	ldr	r0, [pc, #236]	; (800eabc <tcp_oos_insert_segment+0x108>)
 800e9ce:	f008 fa4f 	bl	8016e70 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	68db      	ldr	r3, [r3, #12]
 800e9d6:	899b      	ldrh	r3, [r3, #12]
 800e9d8:	b29b      	uxth	r3, r3
 800e9da:	4618      	mov	r0, r3
 800e9dc:	f7fb f96a 	bl	8009cb4 <lwip_htons>
 800e9e0:	4603      	mov	r3, r0
 800e9e2:	b2db      	uxtb	r3, r3
 800e9e4:	f003 0301 	and.w	r3, r3, #1
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d028      	beq.n	800ea3e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e9ec:	6838      	ldr	r0, [r7, #0]
 800e9ee:	f7fe f997 	bl	800cd20 <tcp_segs_free>
    next = NULL;
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	603b      	str	r3, [r7, #0]
 800e9f6:	e056      	b.n	800eaa6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	68db      	ldr	r3, [r3, #12]
 800e9fc:	899b      	ldrh	r3, [r3, #12]
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	4618      	mov	r0, r3
 800ea02:	f7fb f957 	bl	8009cb4 <lwip_htons>
 800ea06:	4603      	mov	r3, r0
 800ea08:	b2db      	uxtb	r3, r3
 800ea0a:	f003 0301 	and.w	r3, r3, #1
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	d00d      	beq.n	800ea2e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	68db      	ldr	r3, [r3, #12]
 800ea16:	899b      	ldrh	r3, [r3, #12]
 800ea18:	b29c      	uxth	r4, r3
 800ea1a:	2001      	movs	r0, #1
 800ea1c:	f7fb f94a 	bl	8009cb4 <lwip_htons>
 800ea20:	4603      	mov	r3, r0
 800ea22:	461a      	mov	r2, r3
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	68db      	ldr	r3, [r3, #12]
 800ea28:	4322      	orrs	r2, r4
 800ea2a:	b292      	uxth	r2, r2
 800ea2c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ea2e:	683b      	ldr	r3, [r7, #0]
 800ea30:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	681b      	ldr	r3, [r3, #0]
 800ea36:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ea38:	68f8      	ldr	r0, [r7, #12]
 800ea3a:	f7fe f986 	bl	800cd4a <tcp_seg_free>
    while (next &&
 800ea3e:	683b      	ldr	r3, [r7, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00e      	beq.n	800ea62 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	891b      	ldrh	r3, [r3, #8]
 800ea48:	461a      	mov	r2, r3
 800ea4a:	4b1d      	ldr	r3, [pc, #116]	; (800eac0 <tcp_oos_insert_segment+0x10c>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	441a      	add	r2, r3
 800ea50:	683b      	ldr	r3, [r7, #0]
 800ea52:	68db      	ldr	r3, [r3, #12]
 800ea54:	685b      	ldr	r3, [r3, #4]
 800ea56:	6839      	ldr	r1, [r7, #0]
 800ea58:	8909      	ldrh	r1, [r1, #8]
 800ea5a:	440b      	add	r3, r1
 800ea5c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	daca      	bge.n	800e9f8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01e      	beq.n	800eaa6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	891b      	ldrh	r3, [r3, #8]
 800ea6c:	461a      	mov	r2, r3
 800ea6e:	4b14      	ldr	r3, [pc, #80]	; (800eac0 <tcp_oos_insert_segment+0x10c>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	441a      	add	r2, r3
 800ea74:	683b      	ldr	r3, [r7, #0]
 800ea76:	68db      	ldr	r3, [r3, #12]
 800ea78:	685b      	ldr	r3, [r3, #4]
 800ea7a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dd12      	ble.n	800eaa6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	68db      	ldr	r3, [r3, #12]
 800ea84:	685b      	ldr	r3, [r3, #4]
 800ea86:	b29a      	uxth	r2, r3
 800ea88:	4b0d      	ldr	r3, [pc, #52]	; (800eac0 <tcp_oos_insert_segment+0x10c>)
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	b29b      	uxth	r3, r3
 800ea8e:	1ad3      	subs	r3, r2, r3
 800ea90:	b29a      	uxth	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	685a      	ldr	r2, [r3, #4]
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	891b      	ldrh	r3, [r3, #8]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	4610      	mov	r0, r2
 800eaa2:	f7fc fb39 	bl	800b118 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	683a      	ldr	r2, [r7, #0]
 800eaaa:	601a      	str	r2, [r3, #0]
}
 800eaac:	bf00      	nop
 800eaae:	3714      	adds	r7, #20
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd90      	pop	{r4, r7, pc}
 800eab4:	0801a114 	.word	0x0801a114
 800eab8:	0801a3d4 	.word	0x0801a3d4
 800eabc:	0801a160 	.word	0x0801a160
 800eac0:	200085cc 	.word	0x200085cc

0800eac4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800eac4:	b5b0      	push	{r4, r5, r7, lr}
 800eac6:	b086      	sub	sp, #24
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	60f8      	str	r0, [r7, #12]
 800eacc:	60b9      	str	r1, [r7, #8]
 800eace:	607a      	str	r2, [r7, #4]
 800ead0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ead2:	e03e      	b.n	800eb52 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ead4:	68bb      	ldr	r3, [r7, #8]
 800ead6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ead8:	68bb      	ldr	r3, [r7, #8]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	685b      	ldr	r3, [r3, #4]
 800eae2:	4618      	mov	r0, r3
 800eae4:	f7fc fd2c 	bl	800b540 <pbuf_clen>
 800eae8:	4603      	mov	r3, r0
 800eaea:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eaf2:	8a7a      	ldrh	r2, [r7, #18]
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d906      	bls.n	800eb06 <tcp_free_acked_segments+0x42>
 800eaf8:	4b2a      	ldr	r3, [pc, #168]	; (800eba4 <tcp_free_acked_segments+0xe0>)
 800eafa:	f240 4257 	movw	r2, #1111	; 0x457
 800eafe:	492a      	ldr	r1, [pc, #168]	; (800eba8 <tcp_free_acked_segments+0xe4>)
 800eb00:	482a      	ldr	r0, [pc, #168]	; (800ebac <tcp_free_acked_segments+0xe8>)
 800eb02:	f008 f9b5 	bl	8016e70 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800eb0c:	8a7b      	ldrh	r3, [r7, #18]
 800eb0e:	1ad3      	subs	r3, r2, r3
 800eb10:	b29a      	uxth	r2, r3
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800eb18:	697b      	ldr	r3, [r7, #20]
 800eb1a:	891a      	ldrh	r2, [r3, #8]
 800eb1c:	4b24      	ldr	r3, [pc, #144]	; (800ebb0 <tcp_free_acked_segments+0xec>)
 800eb1e:	881b      	ldrh	r3, [r3, #0]
 800eb20:	4413      	add	r3, r2
 800eb22:	b29a      	uxth	r2, r3
 800eb24:	4b22      	ldr	r3, [pc, #136]	; (800ebb0 <tcp_free_acked_segments+0xec>)
 800eb26:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eb28:	6978      	ldr	r0, [r7, #20]
 800eb2a:	f7fe f90e 	bl	800cd4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d00c      	beq.n	800eb52 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d109      	bne.n	800eb52 <tcp_free_acked_segments+0x8e>
 800eb3e:	683b      	ldr	r3, [r7, #0]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d106      	bne.n	800eb52 <tcp_free_acked_segments+0x8e>
 800eb44:	4b17      	ldr	r3, [pc, #92]	; (800eba4 <tcp_free_acked_segments+0xe0>)
 800eb46:	f240 4261 	movw	r2, #1121	; 0x461
 800eb4a:	491a      	ldr	r1, [pc, #104]	; (800ebb4 <tcp_free_acked_segments+0xf0>)
 800eb4c:	4817      	ldr	r0, [pc, #92]	; (800ebac <tcp_free_acked_segments+0xe8>)
 800eb4e:	f008 f98f 	bl	8016e70 <iprintf>
  while (seg_list != NULL &&
 800eb52:	68bb      	ldr	r3, [r7, #8]
 800eb54:	2b00      	cmp	r3, #0
 800eb56:	d020      	beq.n	800eb9a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	68db      	ldr	r3, [r3, #12]
 800eb5c:	685b      	ldr	r3, [r3, #4]
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7fb f8bd 	bl	8009cde <lwip_htonl>
 800eb64:	4604      	mov	r4, r0
 800eb66:	68bb      	ldr	r3, [r7, #8]
 800eb68:	891b      	ldrh	r3, [r3, #8]
 800eb6a:	461d      	mov	r5, r3
 800eb6c:	68bb      	ldr	r3, [r7, #8]
 800eb6e:	68db      	ldr	r3, [r3, #12]
 800eb70:	899b      	ldrh	r3, [r3, #12]
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7fb f89d 	bl	8009cb4 <lwip_htons>
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0303 	and.w	r3, r3, #3
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d001      	beq.n	800eb8a <tcp_free_acked_segments+0xc6>
 800eb86:	2301      	movs	r3, #1
 800eb88:	e000      	b.n	800eb8c <tcp_free_acked_segments+0xc8>
 800eb8a:	2300      	movs	r3, #0
 800eb8c:	442b      	add	r3, r5
 800eb8e:	18e2      	adds	r2, r4, r3
 800eb90:	4b09      	ldr	r3, [pc, #36]	; (800ebb8 <tcp_free_acked_segments+0xf4>)
 800eb92:	681b      	ldr	r3, [r3, #0]
 800eb94:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	dd9c      	ble.n	800ead4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eb9a:	68bb      	ldr	r3, [r7, #8]
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	3718      	adds	r7, #24
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bdb0      	pop	{r4, r5, r7, pc}
 800eba4:	0801a114 	.word	0x0801a114
 800eba8:	0801a3fc 	.word	0x0801a3fc
 800ebac:	0801a160 	.word	0x0801a160
 800ebb0:	200085d4 	.word	0x200085d4
 800ebb4:	0801a424 	.word	0x0801a424
 800ebb8:	200085d0 	.word	0x200085d0

0800ebbc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ebbc:	b5b0      	push	{r4, r5, r7, lr}
 800ebbe:	b094      	sub	sp, #80	; 0x50
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ebc4:	2300      	movs	r3, #0
 800ebc6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d106      	bne.n	800ebdc <tcp_receive+0x20>
 800ebce:	4ba6      	ldr	r3, [pc, #664]	; (800ee68 <tcp_receive+0x2ac>)
 800ebd0:	f240 427b 	movw	r2, #1147	; 0x47b
 800ebd4:	49a5      	ldr	r1, [pc, #660]	; (800ee6c <tcp_receive+0x2b0>)
 800ebd6:	48a6      	ldr	r0, [pc, #664]	; (800ee70 <tcp_receive+0x2b4>)
 800ebd8:	f008 f94a 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	7d1b      	ldrb	r3, [r3, #20]
 800ebe0:	2b03      	cmp	r3, #3
 800ebe2:	d806      	bhi.n	800ebf2 <tcp_receive+0x36>
 800ebe4:	4ba0      	ldr	r3, [pc, #640]	; (800ee68 <tcp_receive+0x2ac>)
 800ebe6:	f240 427c 	movw	r2, #1148	; 0x47c
 800ebea:	49a2      	ldr	r1, [pc, #648]	; (800ee74 <tcp_receive+0x2b8>)
 800ebec:	48a0      	ldr	r0, [pc, #640]	; (800ee70 <tcp_receive+0x2b4>)
 800ebee:	f008 f93f 	bl	8016e70 <iprintf>

  if (flags & TCP_ACK) {
 800ebf2:	4ba1      	ldr	r3, [pc, #644]	; (800ee78 <tcp_receive+0x2bc>)
 800ebf4:	781b      	ldrb	r3, [r3, #0]
 800ebf6:	f003 0310 	and.w	r3, r3, #16
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	f000 8263 	beq.w	800f0c6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec06:	461a      	mov	r2, r3
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ec0c:	4413      	add	r3, r2
 800ec0e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec14:	4b99      	ldr	r3, [pc, #612]	; (800ee7c <tcp_receive+0x2c0>)
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	1ad3      	subs	r3, r2, r3
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	db1b      	blt.n	800ec56 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ec22:	4b96      	ldr	r3, [pc, #600]	; (800ee7c <tcp_receive+0x2c0>)
 800ec24:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ec26:	429a      	cmp	r2, r3
 800ec28:	d106      	bne.n	800ec38 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec2e:	4b94      	ldr	r3, [pc, #592]	; (800ee80 <tcp_receive+0x2c4>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	1ad3      	subs	r3, r2, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	db0e      	blt.n	800ec56 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ec3c:	4b90      	ldr	r3, [pc, #576]	; (800ee80 <tcp_receive+0x2c4>)
 800ec3e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d125      	bne.n	800ec90 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ec44:	4b8f      	ldr	r3, [pc, #572]	; (800ee84 <tcp_receive+0x2c8>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	89db      	ldrh	r3, [r3, #14]
 800ec4a:	b29a      	uxth	r2, r3
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec52:	429a      	cmp	r2, r3
 800ec54:	d91c      	bls.n	800ec90 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ec56:	4b8b      	ldr	r3, [pc, #556]	; (800ee84 <tcp_receive+0x2c8>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	89db      	ldrh	r3, [r3, #14]
 800ec5c:	b29a      	uxth	r2, r3
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ec6a:	687b      	ldr	r3, [r7, #4]
 800ec6c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d205      	bcs.n	800ec80 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800ec80:	4b7e      	ldr	r3, [pc, #504]	; (800ee7c <tcp_receive+0x2c0>)
 800ec82:	681a      	ldr	r2, [r3, #0]
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ec88:	4b7d      	ldr	r3, [pc, #500]	; (800ee80 <tcp_receive+0x2c4>)
 800ec8a:	681a      	ldr	r2, [r3, #0]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ec90:	4b7b      	ldr	r3, [pc, #492]	; (800ee80 <tcp_receive+0x2c4>)
 800ec92:	681a      	ldr	r2, [r3, #0]
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	dc58      	bgt.n	800ed50 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ec9e:	4b7a      	ldr	r3, [pc, #488]	; (800ee88 <tcp_receive+0x2cc>)
 800eca0:	881b      	ldrh	r3, [r3, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d14b      	bne.n	800ed3e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ecaa:	687a      	ldr	r2, [r7, #4]
 800ecac:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ecb0:	4413      	add	r3, r2
 800ecb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d142      	bne.n	800ed3e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ecb8:	687b      	ldr	r3, [r7, #4]
 800ecba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	db3d      	blt.n	800ed3e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ecc6:	4b6e      	ldr	r3, [pc, #440]	; (800ee80 <tcp_receive+0x2c4>)
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	429a      	cmp	r2, r3
 800eccc:	d137      	bne.n	800ed3e <tcp_receive+0x182>
              found_dupack = 1;
 800ecce:	2301      	movs	r3, #1
 800ecd0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecd8:	2bff      	cmp	r3, #255	; 0xff
 800ecda:	d007      	beq.n	800ecec <tcp_receive+0x130>
                ++pcb->dupacks;
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ece2:	3301      	adds	r3, #1
 800ece4:	b2da      	uxtb	r2, r3
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ecf2:	2b03      	cmp	r3, #3
 800ecf4:	d91b      	bls.n	800ed2e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed00:	4413      	add	r3, r2
 800ed02:	b29a      	uxth	r2, r3
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d30a      	bcc.n	800ed24 <tcp_receive+0x168>
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ed18:	4413      	add	r3, r2
 800ed1a:	b29a      	uxth	r2, r3
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ed22:	e004      	b.n	800ed2e <tcp_receive+0x172>
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ed34:	2b02      	cmp	r3, #2
 800ed36:	d902      	bls.n	800ed3e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800ed38:	6878      	ldr	r0, [r7, #4]
 800ed3a:	f002 fb41 	bl	80113c0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800ed3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	f040 8160 	bne.w	800f006 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	2200      	movs	r2, #0
 800ed4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ed4e:	e15a      	b.n	800f006 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ed50:	4b4b      	ldr	r3, [pc, #300]	; (800ee80 <tcp_receive+0x2c4>)
 800ed52:	681a      	ldr	r2, [r3, #0]
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	3b01      	subs	r3, #1
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f2c0 814d 	blt.w	800effc <tcp_receive+0x440>
 800ed62:	4b47      	ldr	r3, [pc, #284]	; (800ee80 <tcp_receive+0x2c4>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f300 8145 	bgt.w	800effc <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	8b5b      	ldrh	r3, [r3, #26]
 800ed76:	f003 0304 	and.w	r3, r3, #4
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d010      	beq.n	800eda0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	8b5b      	ldrh	r3, [r3, #26]
 800ed82:	f023 0304 	bic.w	r3, r3, #4
 800ed86:	b29a      	uxth	r2, r3
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2200      	movs	r2, #0
 800eda4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800edae:	10db      	asrs	r3, r3, #3
 800edb0:	b21b      	sxth	r3, r3
 800edb2:	b29a      	uxth	r2, r3
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800edba:	b29b      	uxth	r3, r3
 800edbc:	4413      	add	r3, r2
 800edbe:	b29b      	uxth	r3, r3
 800edc0:	b21a      	sxth	r2, r3
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800edc8:	4b2d      	ldr	r3, [pc, #180]	; (800ee80 <tcp_receive+0x2c4>)
 800edca:	681b      	ldr	r3, [r3, #0]
 800edcc:	b29a      	uxth	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	1ad3      	subs	r3, r2, r3
 800edd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	2200      	movs	r2, #0
 800eddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ede0:	4b27      	ldr	r3, [pc, #156]	; (800ee80 <tcp_receive+0x2c4>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	7d1b      	ldrb	r3, [r3, #20]
 800edec:	2b03      	cmp	r3, #3
 800edee:	f240 8096 	bls.w	800ef1e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d244      	bcs.n	800ee8c <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	8b5b      	ldrh	r3, [r3, #26]
 800ee06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d001      	beq.n	800ee12 <tcp_receive+0x256>
 800ee0e:	2301      	movs	r3, #1
 800ee10:	e000      	b.n	800ee14 <tcp_receive+0x258>
 800ee12:	2302      	movs	r3, #2
 800ee14:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ee18:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee22:	fb12 f303 	smulbb	r3, r2, r3
 800ee26:	b29b      	uxth	r3, r3
 800ee28:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	bf28      	it	cs
 800ee2e:	4613      	movcs	r3, r2
 800ee30:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee3a:	4413      	add	r3, r2
 800ee3c:	b29a      	uxth	r2, r3
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee44:	429a      	cmp	r2, r3
 800ee46:	d309      	bcc.n	800ee5c <tcp_receive+0x2a0>
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee4e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ee50:	4413      	add	r3, r2
 800ee52:	b29a      	uxth	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee5a:	e060      	b.n	800ef1e <tcp_receive+0x362>
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee62:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee66:	e05a      	b.n	800ef1e <tcp_receive+0x362>
 800ee68:	0801a114 	.word	0x0801a114
 800ee6c:	0801a444 	.word	0x0801a444
 800ee70:	0801a160 	.word	0x0801a160
 800ee74:	0801a460 	.word	0x0801a460
 800ee78:	200085d8 	.word	0x200085d8
 800ee7c:	200085cc 	.word	0x200085cc
 800ee80:	200085d0 	.word	0x200085d0
 800ee84:	200085bc 	.word	0x200085bc
 800ee88:	200085d6 	.word	0x200085d6
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ee92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ee94:	4413      	add	r3, r2
 800ee96:	b29a      	uxth	r2, r3
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d309      	bcc.n	800eeb6 <tcp_receive+0x2fa>
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eea8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800eeaa:	4413      	add	r3, r2
 800eeac:	b29a      	uxth	r2, r3
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800eeb4:	e004      	b.n	800eec0 <tcp_receive+0x304>
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eebc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eecc:	429a      	cmp	r2, r3
 800eece:	d326      	bcc.n	800ef1e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eedc:	1ad3      	subs	r3, r2, r3
 800eede:	b29a      	uxth	r2, r3
 800eee0:	687b      	ldr	r3, [r7, #4]
 800eee2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eef0:	4413      	add	r3, r2
 800eef2:	b29a      	uxth	r2, r3
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800eefa:	429a      	cmp	r2, r3
 800eefc:	d30a      	bcc.n	800ef14 <tcp_receive+0x358>
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ef08:	4413      	add	r3, r2
 800ef0a:	b29a      	uxth	r2, r3
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ef12:	e004      	b.n	800ef1e <tcp_receive+0x362>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef26:	4a98      	ldr	r2, [pc, #608]	; (800f188 <tcp_receive+0x5cc>)
 800ef28:	6878      	ldr	r0, [r7, #4]
 800ef2a:	f7ff fdcb 	bl	800eac4 <tcp_free_acked_segments>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3c:	4a93      	ldr	r2, [pc, #588]	; (800f18c <tcp_receive+0x5d0>)
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f7ff fdc0 	bl	800eac4 <tcp_free_acked_segments>
 800ef44:	4602      	mov	r2, r0
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d104      	bne.n	800ef5c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef58:	861a      	strh	r2, [r3, #48]	; 0x30
 800ef5a:	e002      	b.n	800ef62 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	2200      	movs	r2, #0
 800ef60:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	2200      	movs	r2, #0
 800ef66:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d103      	bne.n	800ef78 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2200      	movs	r2, #0
 800ef74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800ef7e:	4b84      	ldr	r3, [pc, #528]	; (800f190 <tcp_receive+0x5d4>)
 800ef80:	881b      	ldrh	r3, [r3, #0]
 800ef82:	4413      	add	r3, r2
 800ef84:	b29a      	uxth	r2, r3
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800ef8c:	687b      	ldr	r3, [r7, #4]
 800ef8e:	8b5b      	ldrh	r3, [r3, #26]
 800ef90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d035      	beq.n	800f004 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	d118      	bne.n	800efd2 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d00c      	beq.n	800efc2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800efb0:	68db      	ldr	r3, [r3, #12]
 800efb2:	685b      	ldr	r3, [r3, #4]
 800efb4:	4618      	mov	r0, r3
 800efb6:	f7fa fe92 	bl	8009cde <lwip_htonl>
 800efba:	4603      	mov	r3, r0
 800efbc:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	dc20      	bgt.n	800f004 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	8b5b      	ldrh	r3, [r3, #26]
 800efc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800efca:	b29a      	uxth	r2, r3
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800efd0:	e018      	b.n	800f004 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800efda:	68db      	ldr	r3, [r3, #12]
 800efdc:	685b      	ldr	r3, [r3, #4]
 800efde:	4618      	mov	r0, r3
 800efe0:	f7fa fe7d 	bl	8009cde <lwip_htonl>
 800efe4:	4603      	mov	r3, r0
 800efe6:	1ae3      	subs	r3, r4, r3
 800efe8:	2b00      	cmp	r3, #0
 800efea:	dc0b      	bgt.n	800f004 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8b5b      	ldrh	r3, [r3, #26]
 800eff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eff4:	b29a      	uxth	r2, r3
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800effa:	e003      	b.n	800f004 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f002 fbcd 	bl	801179c <tcp_send_empty_ack>
 800f002:	e000      	b.n	800f006 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f004:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d05b      	beq.n	800f0c6 <tcp_receive+0x50a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f012:	4b60      	ldr	r3, [pc, #384]	; (800f194 <tcp_receive+0x5d8>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	1ad3      	subs	r3, r2, r3
 800f018:	2b00      	cmp	r3, #0
 800f01a:	da54      	bge.n	800f0c6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f01c:	4b5e      	ldr	r3, [pc, #376]	; (800f198 <tcp_receive+0x5dc>)
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	b29a      	uxth	r2, r3
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f026:	b29b      	uxth	r3, r3
 800f028:	1ad3      	subs	r3, r2, r3
 800f02a:	b29b      	uxth	r3, r3
 800f02c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f030:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f03a:	10db      	asrs	r3, r3, #3
 800f03c:	b21b      	sxth	r3, r3
 800f03e:	b29b      	uxth	r3, r3
 800f040:	1ad3      	subs	r3, r2, r3
 800f042:	b29b      	uxth	r3, r3
 800f044:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f04e:	b29a      	uxth	r2, r3
 800f050:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f054:	4413      	add	r3, r2
 800f056:	b29b      	uxth	r3, r3
 800f058:	b21a      	sxth	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f05e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f062:	2b00      	cmp	r3, #0
 800f064:	da05      	bge.n	800f072 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800f066:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f06a:	425b      	negs	r3, r3
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f072:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f07c:	109b      	asrs	r3, r3, #2
 800f07e:	b21b      	sxth	r3, r3
 800f080:	b29b      	uxth	r3, r3
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	b29b      	uxth	r3, r3
 800f086:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f090:	b29a      	uxth	r2, r3
 800f092:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f096:	4413      	add	r3, r2
 800f098:	b29b      	uxth	r3, r3
 800f09a:	b21a      	sxth	r2, r3
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0a6:	10db      	asrs	r3, r3, #3
 800f0a8:	b21b      	sxth	r3, r3
 800f0aa:	b29a      	uxth	r2, r3
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	4413      	add	r3, r2
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	b21a      	sxth	r2, r3
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f0c6:	4b35      	ldr	r3, [pc, #212]	; (800f19c <tcp_receive+0x5e0>)
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	f000 84e1 	beq.w	800fa92 <tcp_receive+0xed6>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	7d1b      	ldrb	r3, [r3, #20]
 800f0d4:	2b06      	cmp	r3, #6
 800f0d6:	f200 84dc 	bhi.w	800fa92 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0de:	4b30      	ldr	r3, [pc, #192]	; (800f1a0 <tcp_receive+0x5e4>)
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	1ad3      	subs	r3, r2, r3
 800f0e4:	3b01      	subs	r3, #1
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	f2c0 808e 	blt.w	800f208 <tcp_receive+0x64c>
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0f0:	4b2a      	ldr	r3, [pc, #168]	; (800f19c <tcp_receive+0x5e0>)
 800f0f2:	881b      	ldrh	r3, [r3, #0]
 800f0f4:	4619      	mov	r1, r3
 800f0f6:	4b2a      	ldr	r3, [pc, #168]	; (800f1a0 <tcp_receive+0x5e4>)
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	440b      	add	r3, r1
 800f0fc:	1ad3      	subs	r3, r2, r3
 800f0fe:	3301      	adds	r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	f300 8081 	bgt.w	800f208 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f106:	4b27      	ldr	r3, [pc, #156]	; (800f1a4 <tcp_receive+0x5e8>)
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f110:	4b23      	ldr	r3, [pc, #140]	; (800f1a0 <tcp_receive+0x5e4>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	1ad3      	subs	r3, r2, r3
 800f116:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f118:	4b22      	ldr	r3, [pc, #136]	; (800f1a4 <tcp_receive+0x5e8>)
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d106      	bne.n	800f12e <tcp_receive+0x572>
 800f120:	4b21      	ldr	r3, [pc, #132]	; (800f1a8 <tcp_receive+0x5ec>)
 800f122:	f240 5294 	movw	r2, #1428	; 0x594
 800f126:	4921      	ldr	r1, [pc, #132]	; (800f1ac <tcp_receive+0x5f0>)
 800f128:	4821      	ldr	r0, [pc, #132]	; (800f1b0 <tcp_receive+0x5f4>)
 800f12a:	f007 fea1 	bl	8016e70 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f12e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f134:	4293      	cmp	r3, r2
 800f136:	d906      	bls.n	800f146 <tcp_receive+0x58a>
 800f138:	4b1b      	ldr	r3, [pc, #108]	; (800f1a8 <tcp_receive+0x5ec>)
 800f13a:	f240 5295 	movw	r2, #1429	; 0x595
 800f13e:	491d      	ldr	r1, [pc, #116]	; (800f1b4 <tcp_receive+0x5f8>)
 800f140:	481b      	ldr	r0, [pc, #108]	; (800f1b0 <tcp_receive+0x5f4>)
 800f142:	f007 fe95 	bl	8016e70 <iprintf>
      off = (u16_t)off32;
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f14c:	4b15      	ldr	r3, [pc, #84]	; (800f1a4 <tcp_receive+0x5e8>)
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	891b      	ldrh	r3, [r3, #8]
 800f152:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f156:	429a      	cmp	r2, r3
 800f158:	d906      	bls.n	800f168 <tcp_receive+0x5ac>
 800f15a:	4b13      	ldr	r3, [pc, #76]	; (800f1a8 <tcp_receive+0x5ec>)
 800f15c:	f240 5297 	movw	r2, #1431	; 0x597
 800f160:	4915      	ldr	r1, [pc, #84]	; (800f1b8 <tcp_receive+0x5fc>)
 800f162:	4813      	ldr	r0, [pc, #76]	; (800f1b0 <tcp_receive+0x5f4>)
 800f164:	f007 fe84 	bl	8016e70 <iprintf>
      inseg.len -= off;
 800f168:	4b0e      	ldr	r3, [pc, #56]	; (800f1a4 <tcp_receive+0x5e8>)
 800f16a:	891a      	ldrh	r2, [r3, #8]
 800f16c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f170:	1ad3      	subs	r3, r2, r3
 800f172:	b29a      	uxth	r2, r3
 800f174:	4b0b      	ldr	r3, [pc, #44]	; (800f1a4 <tcp_receive+0x5e8>)
 800f176:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f178:	4b0a      	ldr	r3, [pc, #40]	; (800f1a4 <tcp_receive+0x5e8>)
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	891a      	ldrh	r2, [r3, #8]
 800f17e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f186:	e029      	b.n	800f1dc <tcp_receive+0x620>
 800f188:	0801a47c 	.word	0x0801a47c
 800f18c:	0801a484 	.word	0x0801a484
 800f190:	200085d4 	.word	0x200085d4
 800f194:	200085d0 	.word	0x200085d0
 800f198:	2000f040 	.word	0x2000f040
 800f19c:	200085d6 	.word	0x200085d6
 800f1a0:	200085cc 	.word	0x200085cc
 800f1a4:	200085ac 	.word	0x200085ac
 800f1a8:	0801a114 	.word	0x0801a114
 800f1ac:	0801a48c 	.word	0x0801a48c
 800f1b0:	0801a160 	.word	0x0801a160
 800f1b4:	0801a49c 	.word	0x0801a49c
 800f1b8:	0801a4ac 	.word	0x0801a4ac
        off -= p->len;
 800f1bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1be:	895b      	ldrh	r3, [r3, #10]
 800f1c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1c4:	1ad3      	subs	r3, r2, r3
 800f1c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f1ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1cc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f1ce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f1d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f1d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1d8:	681b      	ldr	r3, [r3, #0]
 800f1da:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f1dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1de:	895b      	ldrh	r3, [r3, #10]
 800f1e0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d8e9      	bhi.n	800f1bc <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f1e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f1ec:	4619      	mov	r1, r3
 800f1ee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f1f0:	f7fc f892 	bl	800b318 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f8:	4a91      	ldr	r2, [pc, #580]	; (800f440 <tcp_receive+0x884>)
 800f1fa:	6013      	str	r3, [r2, #0]
 800f1fc:	4b91      	ldr	r3, [pc, #580]	; (800f444 <tcp_receive+0x888>)
 800f1fe:	68db      	ldr	r3, [r3, #12]
 800f200:	4a8f      	ldr	r2, [pc, #572]	; (800f440 <tcp_receive+0x884>)
 800f202:	6812      	ldr	r2, [r2, #0]
 800f204:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f206:	e00d      	b.n	800f224 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f208:	4b8d      	ldr	r3, [pc, #564]	; (800f440 <tcp_receive+0x884>)
 800f20a:	681a      	ldr	r2, [r3, #0]
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f210:	1ad3      	subs	r3, r2, r3
 800f212:	2b00      	cmp	r3, #0
 800f214:	da06      	bge.n	800f224 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	8b5b      	ldrh	r3, [r3, #26]
 800f21a:	f043 0302 	orr.w	r3, r3, #2
 800f21e:	b29a      	uxth	r2, r3
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f224:	4b86      	ldr	r3, [pc, #536]	; (800f440 <tcp_receive+0x884>)
 800f226:	681a      	ldr	r2, [r3, #0]
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f22c:	1ad3      	subs	r3, r2, r3
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f2c0 842a 	blt.w	800fa88 <tcp_receive+0xecc>
 800f234:	4b82      	ldr	r3, [pc, #520]	; (800f440 <tcp_receive+0x884>)
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f23c:	6879      	ldr	r1, [r7, #4]
 800f23e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f240:	440b      	add	r3, r1
 800f242:	1ad3      	subs	r3, r2, r3
 800f244:	3301      	adds	r3, #1
 800f246:	2b00      	cmp	r3, #0
 800f248:	f300 841e 	bgt.w	800fa88 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f250:	4b7b      	ldr	r3, [pc, #492]	; (800f440 <tcp_receive+0x884>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	429a      	cmp	r2, r3
 800f256:	f040 829a 	bne.w	800f78e <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f25a:	4b7a      	ldr	r3, [pc, #488]	; (800f444 <tcp_receive+0x888>)
 800f25c:	891c      	ldrh	r4, [r3, #8]
 800f25e:	4b79      	ldr	r3, [pc, #484]	; (800f444 <tcp_receive+0x888>)
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	899b      	ldrh	r3, [r3, #12]
 800f264:	b29b      	uxth	r3, r3
 800f266:	4618      	mov	r0, r3
 800f268:	f7fa fd24 	bl	8009cb4 <lwip_htons>
 800f26c:	4603      	mov	r3, r0
 800f26e:	b2db      	uxtb	r3, r3
 800f270:	f003 0303 	and.w	r3, r3, #3
 800f274:	2b00      	cmp	r3, #0
 800f276:	d001      	beq.n	800f27c <tcp_receive+0x6c0>
 800f278:	2301      	movs	r3, #1
 800f27a:	e000      	b.n	800f27e <tcp_receive+0x6c2>
 800f27c:	2300      	movs	r3, #0
 800f27e:	4423      	add	r3, r4
 800f280:	b29a      	uxth	r2, r3
 800f282:	4b71      	ldr	r3, [pc, #452]	; (800f448 <tcp_receive+0x88c>)
 800f284:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f28a:	4b6f      	ldr	r3, [pc, #444]	; (800f448 <tcp_receive+0x88c>)
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	429a      	cmp	r2, r3
 800f290:	d275      	bcs.n	800f37e <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f292:	4b6c      	ldr	r3, [pc, #432]	; (800f444 <tcp_receive+0x888>)
 800f294:	68db      	ldr	r3, [r3, #12]
 800f296:	899b      	ldrh	r3, [r3, #12]
 800f298:	b29b      	uxth	r3, r3
 800f29a:	4618      	mov	r0, r3
 800f29c:	f7fa fd0a 	bl	8009cb4 <lwip_htons>
 800f2a0:	4603      	mov	r3, r0
 800f2a2:	b2db      	uxtb	r3, r3
 800f2a4:	f003 0301 	and.w	r3, r3, #1
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d01f      	beq.n	800f2ec <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f2ac:	4b65      	ldr	r3, [pc, #404]	; (800f444 <tcp_receive+0x888>)
 800f2ae:	68db      	ldr	r3, [r3, #12]
 800f2b0:	899b      	ldrh	r3, [r3, #12]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	b21b      	sxth	r3, r3
 800f2b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2ba:	b21c      	sxth	r4, r3
 800f2bc:	4b61      	ldr	r3, [pc, #388]	; (800f444 <tcp_receive+0x888>)
 800f2be:	68db      	ldr	r3, [r3, #12]
 800f2c0:	899b      	ldrh	r3, [r3, #12]
 800f2c2:	b29b      	uxth	r3, r3
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	f7fa fcf5 	bl	8009cb4 <lwip_htons>
 800f2ca:	4603      	mov	r3, r0
 800f2cc:	b2db      	uxtb	r3, r3
 800f2ce:	b29b      	uxth	r3, r3
 800f2d0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f2d4:	b29b      	uxth	r3, r3
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fa fcec 	bl	8009cb4 <lwip_htons>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	b21b      	sxth	r3, r3
 800f2e0:	4323      	orrs	r3, r4
 800f2e2:	b21a      	sxth	r2, r3
 800f2e4:	4b57      	ldr	r3, [pc, #348]	; (800f444 <tcp_receive+0x888>)
 800f2e6:	68db      	ldr	r3, [r3, #12]
 800f2e8:	b292      	uxth	r2, r2
 800f2ea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f2f0:	4b54      	ldr	r3, [pc, #336]	; (800f444 <tcp_receive+0x888>)
 800f2f2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f2f4:	4b53      	ldr	r3, [pc, #332]	; (800f444 <tcp_receive+0x888>)
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	899b      	ldrh	r3, [r3, #12]
 800f2fa:	b29b      	uxth	r3, r3
 800f2fc:	4618      	mov	r0, r3
 800f2fe:	f7fa fcd9 	bl	8009cb4 <lwip_htons>
 800f302:	4603      	mov	r3, r0
 800f304:	b2db      	uxtb	r3, r3
 800f306:	f003 0302 	and.w	r3, r3, #2
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d005      	beq.n	800f31a <tcp_receive+0x75e>
            inseg.len -= 1;
 800f30e:	4b4d      	ldr	r3, [pc, #308]	; (800f444 <tcp_receive+0x888>)
 800f310:	891b      	ldrh	r3, [r3, #8]
 800f312:	3b01      	subs	r3, #1
 800f314:	b29a      	uxth	r2, r3
 800f316:	4b4b      	ldr	r3, [pc, #300]	; (800f444 <tcp_receive+0x888>)
 800f318:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f31a:	4b4a      	ldr	r3, [pc, #296]	; (800f444 <tcp_receive+0x888>)
 800f31c:	685b      	ldr	r3, [r3, #4]
 800f31e:	4a49      	ldr	r2, [pc, #292]	; (800f444 <tcp_receive+0x888>)
 800f320:	8912      	ldrh	r2, [r2, #8]
 800f322:	4611      	mov	r1, r2
 800f324:	4618      	mov	r0, r3
 800f326:	f7fb fef7 	bl	800b118 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f32a:	4b46      	ldr	r3, [pc, #280]	; (800f444 <tcp_receive+0x888>)
 800f32c:	891c      	ldrh	r4, [r3, #8]
 800f32e:	4b45      	ldr	r3, [pc, #276]	; (800f444 <tcp_receive+0x888>)
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	899b      	ldrh	r3, [r3, #12]
 800f334:	b29b      	uxth	r3, r3
 800f336:	4618      	mov	r0, r3
 800f338:	f7fa fcbc 	bl	8009cb4 <lwip_htons>
 800f33c:	4603      	mov	r3, r0
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	f003 0303 	and.w	r3, r3, #3
 800f344:	2b00      	cmp	r3, #0
 800f346:	d001      	beq.n	800f34c <tcp_receive+0x790>
 800f348:	2301      	movs	r3, #1
 800f34a:	e000      	b.n	800f34e <tcp_receive+0x792>
 800f34c:	2300      	movs	r3, #0
 800f34e:	4423      	add	r3, r4
 800f350:	b29a      	uxth	r2, r3
 800f352:	4b3d      	ldr	r3, [pc, #244]	; (800f448 <tcp_receive+0x88c>)
 800f354:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f356:	4b3c      	ldr	r3, [pc, #240]	; (800f448 <tcp_receive+0x88c>)
 800f358:	881b      	ldrh	r3, [r3, #0]
 800f35a:	461a      	mov	r2, r3
 800f35c:	4b38      	ldr	r3, [pc, #224]	; (800f440 <tcp_receive+0x884>)
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	441a      	add	r2, r3
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f366:	6879      	ldr	r1, [r7, #4]
 800f368:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f36a:	440b      	add	r3, r1
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d006      	beq.n	800f37e <tcp_receive+0x7c2>
 800f370:	4b36      	ldr	r3, [pc, #216]	; (800f44c <tcp_receive+0x890>)
 800f372:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f376:	4936      	ldr	r1, [pc, #216]	; (800f450 <tcp_receive+0x894>)
 800f378:	4836      	ldr	r0, [pc, #216]	; (800f454 <tcp_receive+0x898>)
 800f37a:	f007 fd79 	bl	8016e70 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f382:	2b00      	cmp	r3, #0
 800f384:	f000 80e7 	beq.w	800f556 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f388:	4b2e      	ldr	r3, [pc, #184]	; (800f444 <tcp_receive+0x888>)
 800f38a:	68db      	ldr	r3, [r3, #12]
 800f38c:	899b      	ldrh	r3, [r3, #12]
 800f38e:	b29b      	uxth	r3, r3
 800f390:	4618      	mov	r0, r3
 800f392:	f7fa fc8f 	bl	8009cb4 <lwip_htons>
 800f396:	4603      	mov	r3, r0
 800f398:	b2db      	uxtb	r3, r3
 800f39a:	f003 0301 	and.w	r3, r3, #1
 800f39e:	2b00      	cmp	r3, #0
 800f3a0:	d010      	beq.n	800f3c4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f3a2:	e00a      	b.n	800f3ba <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3a8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3ae:	681a      	ldr	r2, [r3, #0]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f3b4:	68f8      	ldr	r0, [r7, #12]
 800f3b6:	f7fd fcc8 	bl	800cd4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d1f0      	bne.n	800f3a4 <tcp_receive+0x7e8>
 800f3c2:	e0c8      	b.n	800f556 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f3ca:	e052      	b.n	800f472 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ce:	68db      	ldr	r3, [r3, #12]
 800f3d0:	899b      	ldrh	r3, [r3, #12]
 800f3d2:	b29b      	uxth	r3, r3
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fa fc6d 	bl	8009cb4 <lwip_htons>
 800f3da:	4603      	mov	r3, r0
 800f3dc:	b2db      	uxtb	r3, r3
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d03d      	beq.n	800f462 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f3e6:	4b17      	ldr	r3, [pc, #92]	; (800f444 <tcp_receive+0x888>)
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	899b      	ldrh	r3, [r3, #12]
 800f3ec:	b29b      	uxth	r3, r3
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	f7fa fc60 	bl	8009cb4 <lwip_htons>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	b2db      	uxtb	r3, r3
 800f3f8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d130      	bne.n	800f462 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f400:	4b10      	ldr	r3, [pc, #64]	; (800f444 <tcp_receive+0x888>)
 800f402:	68db      	ldr	r3, [r3, #12]
 800f404:	899b      	ldrh	r3, [r3, #12]
 800f406:	b29c      	uxth	r4, r3
 800f408:	2001      	movs	r0, #1
 800f40a:	f7fa fc53 	bl	8009cb4 <lwip_htons>
 800f40e:	4603      	mov	r3, r0
 800f410:	461a      	mov	r2, r3
 800f412:	4b0c      	ldr	r3, [pc, #48]	; (800f444 <tcp_receive+0x888>)
 800f414:	68db      	ldr	r3, [r3, #12]
 800f416:	4322      	orrs	r2, r4
 800f418:	b292      	uxth	r2, r2
 800f41a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f41c:	4b09      	ldr	r3, [pc, #36]	; (800f444 <tcp_receive+0x888>)
 800f41e:	891c      	ldrh	r4, [r3, #8]
 800f420:	4b08      	ldr	r3, [pc, #32]	; (800f444 <tcp_receive+0x888>)
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	899b      	ldrh	r3, [r3, #12]
 800f426:	b29b      	uxth	r3, r3
 800f428:	4618      	mov	r0, r3
 800f42a:	f7fa fc43 	bl	8009cb4 <lwip_htons>
 800f42e:	4603      	mov	r3, r0
 800f430:	b2db      	uxtb	r3, r3
 800f432:	f003 0303 	and.w	r3, r3, #3
 800f436:	2b00      	cmp	r3, #0
 800f438:	d00e      	beq.n	800f458 <tcp_receive+0x89c>
 800f43a:	2301      	movs	r3, #1
 800f43c:	e00d      	b.n	800f45a <tcp_receive+0x89e>
 800f43e:	bf00      	nop
 800f440:	200085cc 	.word	0x200085cc
 800f444:	200085ac 	.word	0x200085ac
 800f448:	200085d6 	.word	0x200085d6
 800f44c:	0801a114 	.word	0x0801a114
 800f450:	0801a4bc 	.word	0x0801a4bc
 800f454:	0801a160 	.word	0x0801a160
 800f458:	2300      	movs	r3, #0
 800f45a:	4423      	add	r3, r4
 800f45c:	b29a      	uxth	r2, r3
 800f45e:	4b98      	ldr	r3, [pc, #608]	; (800f6c0 <tcp_receive+0xb04>)
 800f460:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f464:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f466:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f468:	681b      	ldr	r3, [r3, #0]
 800f46a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f46c:	6938      	ldr	r0, [r7, #16]
 800f46e:	f7fd fc6c 	bl	800cd4a <tcp_seg_free>
            while (next &&
 800f472:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00e      	beq.n	800f496 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f478:	4b91      	ldr	r3, [pc, #580]	; (800f6c0 <tcp_receive+0xb04>)
 800f47a:	881b      	ldrh	r3, [r3, #0]
 800f47c:	461a      	mov	r2, r3
 800f47e:	4b91      	ldr	r3, [pc, #580]	; (800f6c4 <tcp_receive+0xb08>)
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	441a      	add	r2, r3
 800f484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f486:	68db      	ldr	r3, [r3, #12]
 800f488:	685b      	ldr	r3, [r3, #4]
 800f48a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f48c:	8909      	ldrh	r1, [r1, #8]
 800f48e:	440b      	add	r3, r1
 800f490:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f492:	2b00      	cmp	r3, #0
 800f494:	da9a      	bge.n	800f3cc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d059      	beq.n	800f550 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f49c:	4b88      	ldr	r3, [pc, #544]	; (800f6c0 <tcp_receive+0xb04>)
 800f49e:	881b      	ldrh	r3, [r3, #0]
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	4b88      	ldr	r3, [pc, #544]	; (800f6c4 <tcp_receive+0xb08>)
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	441a      	add	r2, r3
 800f4a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4aa:	68db      	ldr	r3, [r3, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f4b0:	2b00      	cmp	r3, #0
 800f4b2:	dd4d      	ble.n	800f550 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f4b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f4b6:	68db      	ldr	r3, [r3, #12]
 800f4b8:	685b      	ldr	r3, [r3, #4]
 800f4ba:	b29a      	uxth	r2, r3
 800f4bc:	4b81      	ldr	r3, [pc, #516]	; (800f6c4 <tcp_receive+0xb08>)
 800f4be:	681b      	ldr	r3, [r3, #0]
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	b29a      	uxth	r2, r3
 800f4c6:	4b80      	ldr	r3, [pc, #512]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4c8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f4ca:	4b7f      	ldr	r3, [pc, #508]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4cc:	68db      	ldr	r3, [r3, #12]
 800f4ce:	899b      	ldrh	r3, [r3, #12]
 800f4d0:	b29b      	uxth	r3, r3
 800f4d2:	4618      	mov	r0, r3
 800f4d4:	f7fa fbee 	bl	8009cb4 <lwip_htons>
 800f4d8:	4603      	mov	r3, r0
 800f4da:	b2db      	uxtb	r3, r3
 800f4dc:	f003 0302 	and.w	r3, r3, #2
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d005      	beq.n	800f4f0 <tcp_receive+0x934>
                inseg.len -= 1;
 800f4e4:	4b78      	ldr	r3, [pc, #480]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4e6:	891b      	ldrh	r3, [r3, #8]
 800f4e8:	3b01      	subs	r3, #1
 800f4ea:	b29a      	uxth	r2, r3
 800f4ec:	4b76      	ldr	r3, [pc, #472]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4ee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f4f0:	4b75      	ldr	r3, [pc, #468]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4f2:	685b      	ldr	r3, [r3, #4]
 800f4f4:	4a74      	ldr	r2, [pc, #464]	; (800f6c8 <tcp_receive+0xb0c>)
 800f4f6:	8912      	ldrh	r2, [r2, #8]
 800f4f8:	4611      	mov	r1, r2
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7fb fe0c 	bl	800b118 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f500:	4b71      	ldr	r3, [pc, #452]	; (800f6c8 <tcp_receive+0xb0c>)
 800f502:	891c      	ldrh	r4, [r3, #8]
 800f504:	4b70      	ldr	r3, [pc, #448]	; (800f6c8 <tcp_receive+0xb0c>)
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fa fbd1 	bl	8009cb4 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	b2db      	uxtb	r3, r3
 800f516:	f003 0303 	and.w	r3, r3, #3
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <tcp_receive+0x966>
 800f51e:	2301      	movs	r3, #1
 800f520:	e000      	b.n	800f524 <tcp_receive+0x968>
 800f522:	2300      	movs	r3, #0
 800f524:	4423      	add	r3, r4
 800f526:	b29a      	uxth	r2, r3
 800f528:	4b65      	ldr	r3, [pc, #404]	; (800f6c0 <tcp_receive+0xb04>)
 800f52a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f52c:	4b64      	ldr	r3, [pc, #400]	; (800f6c0 <tcp_receive+0xb04>)
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	461a      	mov	r2, r3
 800f532:	4b64      	ldr	r3, [pc, #400]	; (800f6c4 <tcp_receive+0xb08>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	441a      	add	r2, r3
 800f538:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f53a:	68db      	ldr	r3, [r3, #12]
 800f53c:	685b      	ldr	r3, [r3, #4]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d006      	beq.n	800f550 <tcp_receive+0x994>
 800f542:	4b62      	ldr	r3, [pc, #392]	; (800f6cc <tcp_receive+0xb10>)
 800f544:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f548:	4961      	ldr	r1, [pc, #388]	; (800f6d0 <tcp_receive+0xb14>)
 800f54a:	4862      	ldr	r0, [pc, #392]	; (800f6d4 <tcp_receive+0xb18>)
 800f54c:	f007 fc90 	bl	8016e70 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f554:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f556:	4b5a      	ldr	r3, [pc, #360]	; (800f6c0 <tcp_receive+0xb04>)
 800f558:	881b      	ldrh	r3, [r3, #0]
 800f55a:	461a      	mov	r2, r3
 800f55c:	4b59      	ldr	r3, [pc, #356]	; (800f6c4 <tcp_receive+0xb08>)
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	441a      	add	r2, r3
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f56a:	4b55      	ldr	r3, [pc, #340]	; (800f6c0 <tcp_receive+0xb04>)
 800f56c:	881b      	ldrh	r3, [r3, #0]
 800f56e:	429a      	cmp	r2, r3
 800f570:	d206      	bcs.n	800f580 <tcp_receive+0x9c4>
 800f572:	4b56      	ldr	r3, [pc, #344]	; (800f6cc <tcp_receive+0xb10>)
 800f574:	f240 6207 	movw	r2, #1543	; 0x607
 800f578:	4957      	ldr	r1, [pc, #348]	; (800f6d8 <tcp_receive+0xb1c>)
 800f57a:	4856      	ldr	r0, [pc, #344]	; (800f6d4 <tcp_receive+0xb18>)
 800f57c:	f007 fc78 	bl	8016e70 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f584:	4b4e      	ldr	r3, [pc, #312]	; (800f6c0 <tcp_receive+0xb04>)
 800f586:	881b      	ldrh	r3, [r3, #0]
 800f588:	1ad3      	subs	r3, r2, r3
 800f58a:	b29a      	uxth	r2, r3
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f590:	6878      	ldr	r0, [r7, #4]
 800f592:	f7fc feb5 	bl	800c300 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f596:	4b4c      	ldr	r3, [pc, #304]	; (800f6c8 <tcp_receive+0xb0c>)
 800f598:	685b      	ldr	r3, [r3, #4]
 800f59a:	891b      	ldrh	r3, [r3, #8]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d006      	beq.n	800f5ae <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f5a0:	4b49      	ldr	r3, [pc, #292]	; (800f6c8 <tcp_receive+0xb0c>)
 800f5a2:	685b      	ldr	r3, [r3, #4]
 800f5a4:	4a4d      	ldr	r2, [pc, #308]	; (800f6dc <tcp_receive+0xb20>)
 800f5a6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f5a8:	4b47      	ldr	r3, [pc, #284]	; (800f6c8 <tcp_receive+0xb0c>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5ae:	4b46      	ldr	r3, [pc, #280]	; (800f6c8 <tcp_receive+0xb0c>)
 800f5b0:	68db      	ldr	r3, [r3, #12]
 800f5b2:	899b      	ldrh	r3, [r3, #12]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	f7fa fb7c 	bl	8009cb4 <lwip_htons>
 800f5bc:	4603      	mov	r3, r0
 800f5be:	b2db      	uxtb	r3, r3
 800f5c0:	f003 0301 	and.w	r3, r3, #1
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	f000 80b8 	beq.w	800f73a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f5ca:	4b45      	ldr	r3, [pc, #276]	; (800f6e0 <tcp_receive+0xb24>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f043 0320 	orr.w	r3, r3, #32
 800f5d2:	b2da      	uxtb	r2, r3
 800f5d4:	4b42      	ldr	r3, [pc, #264]	; (800f6e0 <tcp_receive+0xb24>)
 800f5d6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f5d8:	e0af      	b.n	800f73a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5de:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5e4:	68db      	ldr	r3, [r3, #12]
 800f5e6:	685b      	ldr	r3, [r3, #4]
 800f5e8:	4a36      	ldr	r2, [pc, #216]	; (800f6c4 <tcp_receive+0xb08>)
 800f5ea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f5ec:	68bb      	ldr	r3, [r7, #8]
 800f5ee:	891b      	ldrh	r3, [r3, #8]
 800f5f0:	461c      	mov	r4, r3
 800f5f2:	68bb      	ldr	r3, [r7, #8]
 800f5f4:	68db      	ldr	r3, [r3, #12]
 800f5f6:	899b      	ldrh	r3, [r3, #12]
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fa fb5a 	bl	8009cb4 <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0303 	and.w	r3, r3, #3
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d001      	beq.n	800f610 <tcp_receive+0xa54>
 800f60c:	2301      	movs	r3, #1
 800f60e:	e000      	b.n	800f612 <tcp_receive+0xa56>
 800f610:	2300      	movs	r3, #0
 800f612:	191a      	adds	r2, r3, r4
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	441a      	add	r2, r3
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f622:	461c      	mov	r4, r3
 800f624:	68bb      	ldr	r3, [r7, #8]
 800f626:	891b      	ldrh	r3, [r3, #8]
 800f628:	461d      	mov	r5, r3
 800f62a:	68bb      	ldr	r3, [r7, #8]
 800f62c:	68db      	ldr	r3, [r3, #12]
 800f62e:	899b      	ldrh	r3, [r3, #12]
 800f630:	b29b      	uxth	r3, r3
 800f632:	4618      	mov	r0, r3
 800f634:	f7fa fb3e 	bl	8009cb4 <lwip_htons>
 800f638:	4603      	mov	r3, r0
 800f63a:	b2db      	uxtb	r3, r3
 800f63c:	f003 0303 	and.w	r3, r3, #3
 800f640:	2b00      	cmp	r3, #0
 800f642:	d001      	beq.n	800f648 <tcp_receive+0xa8c>
 800f644:	2301      	movs	r3, #1
 800f646:	e000      	b.n	800f64a <tcp_receive+0xa8e>
 800f648:	2300      	movs	r3, #0
 800f64a:	442b      	add	r3, r5
 800f64c:	429c      	cmp	r4, r3
 800f64e:	d206      	bcs.n	800f65e <tcp_receive+0xaa2>
 800f650:	4b1e      	ldr	r3, [pc, #120]	; (800f6cc <tcp_receive+0xb10>)
 800f652:	f240 622b 	movw	r2, #1579	; 0x62b
 800f656:	4923      	ldr	r1, [pc, #140]	; (800f6e4 <tcp_receive+0xb28>)
 800f658:	481e      	ldr	r0, [pc, #120]	; (800f6d4 <tcp_receive+0xb18>)
 800f65a:	f007 fc09 	bl	8016e70 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f65e:	68bb      	ldr	r3, [r7, #8]
 800f660:	891b      	ldrh	r3, [r3, #8]
 800f662:	461c      	mov	r4, r3
 800f664:	68bb      	ldr	r3, [r7, #8]
 800f666:	68db      	ldr	r3, [r3, #12]
 800f668:	899b      	ldrh	r3, [r3, #12]
 800f66a:	b29b      	uxth	r3, r3
 800f66c:	4618      	mov	r0, r3
 800f66e:	f7fa fb21 	bl	8009cb4 <lwip_htons>
 800f672:	4603      	mov	r3, r0
 800f674:	b2db      	uxtb	r3, r3
 800f676:	f003 0303 	and.w	r3, r3, #3
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d001      	beq.n	800f682 <tcp_receive+0xac6>
 800f67e:	2301      	movs	r3, #1
 800f680:	e000      	b.n	800f684 <tcp_receive+0xac8>
 800f682:	2300      	movs	r3, #0
 800f684:	1919      	adds	r1, r3, r4
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f68a:	b28b      	uxth	r3, r1
 800f68c:	1ad3      	subs	r3, r2, r3
 800f68e:	b29a      	uxth	r2, r3
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f694:	6878      	ldr	r0, [r7, #4]
 800f696:	f7fc fe33 	bl	800c300 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	891b      	ldrh	r3, [r3, #8]
 800f6a0:	2b00      	cmp	r3, #0
 800f6a2:	d028      	beq.n	800f6f6 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f6a4:	4b0d      	ldr	r3, [pc, #52]	; (800f6dc <tcp_receive+0xb20>)
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d01d      	beq.n	800f6e8 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f6ac:	4b0b      	ldr	r3, [pc, #44]	; (800f6dc <tcp_receive+0xb20>)
 800f6ae:	681a      	ldr	r2, [r3, #0]
 800f6b0:	68bb      	ldr	r3, [r7, #8]
 800f6b2:	685b      	ldr	r3, [r3, #4]
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	4610      	mov	r0, r2
 800f6b8:	f7fb ff82 	bl	800b5c0 <pbuf_cat>
 800f6bc:	e018      	b.n	800f6f0 <tcp_receive+0xb34>
 800f6be:	bf00      	nop
 800f6c0:	200085d6 	.word	0x200085d6
 800f6c4:	200085cc 	.word	0x200085cc
 800f6c8:	200085ac 	.word	0x200085ac
 800f6cc:	0801a114 	.word	0x0801a114
 800f6d0:	0801a4f4 	.word	0x0801a4f4
 800f6d4:	0801a160 	.word	0x0801a160
 800f6d8:	0801a530 	.word	0x0801a530
 800f6dc:	200085dc 	.word	0x200085dc
 800f6e0:	200085d9 	.word	0x200085d9
 800f6e4:	0801a550 	.word	0x0801a550
            } else {
              recv_data = cseg->p;
 800f6e8:	68bb      	ldr	r3, [r7, #8]
 800f6ea:	685b      	ldr	r3, [r3, #4]
 800f6ec:	4a70      	ldr	r2, [pc, #448]	; (800f8b0 <tcp_receive+0xcf4>)
 800f6ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f6f0:	68bb      	ldr	r3, [r7, #8]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f6f6:	68bb      	ldr	r3, [r7, #8]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	899b      	ldrh	r3, [r3, #12]
 800f6fc:	b29b      	uxth	r3, r3
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7fa fad8 	bl	8009cb4 <lwip_htons>
 800f704:	4603      	mov	r3, r0
 800f706:	b2db      	uxtb	r3, r3
 800f708:	f003 0301 	and.w	r3, r3, #1
 800f70c:	2b00      	cmp	r3, #0
 800f70e:	d00d      	beq.n	800f72c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f710:	4b68      	ldr	r3, [pc, #416]	; (800f8b4 <tcp_receive+0xcf8>)
 800f712:	781b      	ldrb	r3, [r3, #0]
 800f714:	f043 0320 	orr.w	r3, r3, #32
 800f718:	b2da      	uxtb	r2, r3
 800f71a:	4b66      	ldr	r3, [pc, #408]	; (800f8b4 <tcp_receive+0xcf8>)
 800f71c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	7d1b      	ldrb	r3, [r3, #20]
 800f722:	2b04      	cmp	r3, #4
 800f724:	d102      	bne.n	800f72c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	2207      	movs	r2, #7
 800f72a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	681a      	ldr	r2, [r3, #0]
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f734:	68b8      	ldr	r0, [r7, #8]
 800f736:	f7fd fb08 	bl	800cd4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f73e:	2b00      	cmp	r3, #0
 800f740:	d008      	beq.n	800f754 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	685a      	ldr	r2, [r3, #4]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f74e:	429a      	cmp	r2, r3
 800f750:	f43f af43 	beq.w	800f5da <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	8b5b      	ldrh	r3, [r3, #26]
 800f758:	f003 0301 	and.w	r3, r3, #1
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d00e      	beq.n	800f77e <tcp_receive+0xbc2>
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	8b5b      	ldrh	r3, [r3, #26]
 800f764:	f023 0301 	bic.w	r3, r3, #1
 800f768:	b29a      	uxth	r2, r3
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	835a      	strh	r2, [r3, #26]
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8b5b      	ldrh	r3, [r3, #26]
 800f772:	f043 0302 	orr.w	r3, r3, #2
 800f776:	b29a      	uxth	r2, r3
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f77c:	e188      	b.n	800fa90 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	8b5b      	ldrh	r3, [r3, #26]
 800f782:	f043 0301 	orr.w	r3, r3, #1
 800f786:	b29a      	uxth	r2, r3
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f78c:	e180      	b.n	800fa90 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f792:	2b00      	cmp	r3, #0
 800f794:	d106      	bne.n	800f7a4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f796:	4848      	ldr	r0, [pc, #288]	; (800f8b8 <tcp_receive+0xcfc>)
 800f798:	f7fd faf0 	bl	800cd7c <tcp_seg_copy>
 800f79c:	4602      	mov	r2, r0
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	675a      	str	r2, [r3, #116]	; 0x74
 800f7a2:	e16d      	b.n	800fa80 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f7a4:	2300      	movs	r3, #0
 800f7a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f7ac:	63bb      	str	r3, [r7, #56]	; 0x38
 800f7ae:	e157      	b.n	800fa60 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f7b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7b2:	68db      	ldr	r3, [r3, #12]
 800f7b4:	685a      	ldr	r2, [r3, #4]
 800f7b6:	4b41      	ldr	r3, [pc, #260]	; (800f8bc <tcp_receive+0xd00>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d11d      	bne.n	800f7fa <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f7be:	4b3e      	ldr	r3, [pc, #248]	; (800f8b8 <tcp_receive+0xcfc>)
 800f7c0:	891a      	ldrh	r2, [r3, #8]
 800f7c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c4:	891b      	ldrh	r3, [r3, #8]
 800f7c6:	429a      	cmp	r2, r3
 800f7c8:	f240 814f 	bls.w	800fa6a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f7cc:	483a      	ldr	r0, [pc, #232]	; (800f8b8 <tcp_receive+0xcfc>)
 800f7ce:	f7fd fad5 	bl	800cd7c <tcp_seg_copy>
 800f7d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	f000 8149 	beq.w	800fa6e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d003      	beq.n	800f7ea <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f7e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7e4:	697a      	ldr	r2, [r7, #20]
 800f7e6:	601a      	str	r2, [r3, #0]
 800f7e8:	e002      	b.n	800f7f0 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f7f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f7f2:	6978      	ldr	r0, [r7, #20]
 800f7f4:	f7ff f8de 	bl	800e9b4 <tcp_oos_insert_segment>
                }
                break;
 800f7f8:	e139      	b.n	800fa6e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d117      	bne.n	800f830 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f800:	4b2e      	ldr	r3, [pc, #184]	; (800f8bc <tcp_receive+0xd00>)
 800f802:	681a      	ldr	r2, [r3, #0]
 800f804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f806:	68db      	ldr	r3, [r3, #12]
 800f808:	685b      	ldr	r3, [r3, #4]
 800f80a:	1ad3      	subs	r3, r2, r3
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	da57      	bge.n	800f8c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f810:	4829      	ldr	r0, [pc, #164]	; (800f8b8 <tcp_receive+0xcfc>)
 800f812:	f7fd fab3 	bl	800cd7c <tcp_seg_copy>
 800f816:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f818:	69bb      	ldr	r3, [r7, #24]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	f000 8129 	beq.w	800fa72 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	69ba      	ldr	r2, [r7, #24]
 800f824:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f826:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f828:	69b8      	ldr	r0, [r7, #24]
 800f82a:	f7ff f8c3 	bl	800e9b4 <tcp_oos_insert_segment>
                  }
                  break;
 800f82e:	e120      	b.n	800fa72 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f830:	4b22      	ldr	r3, [pc, #136]	; (800f8bc <tcp_receive+0xd00>)
 800f832:	681a      	ldr	r2, [r3, #0]
 800f834:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f836:	68db      	ldr	r3, [r3, #12]
 800f838:	685b      	ldr	r3, [r3, #4]
 800f83a:	1ad3      	subs	r3, r2, r3
 800f83c:	3b01      	subs	r3, #1
 800f83e:	2b00      	cmp	r3, #0
 800f840:	db3e      	blt.n	800f8c0 <tcp_receive+0xd04>
 800f842:	4b1e      	ldr	r3, [pc, #120]	; (800f8bc <tcp_receive+0xd00>)
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f848:	68db      	ldr	r3, [r3, #12]
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	1ad3      	subs	r3, r2, r3
 800f84e:	3301      	adds	r3, #1
 800f850:	2b00      	cmp	r3, #0
 800f852:	dc35      	bgt.n	800f8c0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f854:	4818      	ldr	r0, [pc, #96]	; (800f8b8 <tcp_receive+0xcfc>)
 800f856:	f7fd fa91 	bl	800cd7c <tcp_seg_copy>
 800f85a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f000 8109 	beq.w	800fa76 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f866:	68db      	ldr	r3, [r3, #12]
 800f868:	685b      	ldr	r3, [r3, #4]
 800f86a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f86c:	8912      	ldrh	r2, [r2, #8]
 800f86e:	441a      	add	r2, r3
 800f870:	4b12      	ldr	r3, [pc, #72]	; (800f8bc <tcp_receive+0xd00>)
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	1ad3      	subs	r3, r2, r3
 800f876:	2b00      	cmp	r3, #0
 800f878:	dd12      	ble.n	800f8a0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f87a:	4b10      	ldr	r3, [pc, #64]	; (800f8bc <tcp_receive+0xd00>)
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	b29a      	uxth	r2, r3
 800f880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f882:	68db      	ldr	r3, [r3, #12]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	b29b      	uxth	r3, r3
 800f888:	1ad3      	subs	r3, r2, r3
 800f88a:	b29a      	uxth	r2, r3
 800f88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f88e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f890:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f892:	685a      	ldr	r2, [r3, #4]
 800f894:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f896:	891b      	ldrh	r3, [r3, #8]
 800f898:	4619      	mov	r1, r3
 800f89a:	4610      	mov	r0, r2
 800f89c:	f7fb fc3c 	bl	800b118 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f8a2:	69fa      	ldr	r2, [r7, #28]
 800f8a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f8a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f8a8:	69f8      	ldr	r0, [r7, #28]
 800f8aa:	f7ff f883 	bl	800e9b4 <tcp_oos_insert_segment>
                  }
                  break;
 800f8ae:	e0e2      	b.n	800fa76 <tcp_receive+0xeba>
 800f8b0:	200085dc 	.word	0x200085dc
 800f8b4:	200085d9 	.word	0x200085d9
 800f8b8:	200085ac 	.word	0x200085ac
 800f8bc:	200085cc 	.word	0x200085cc
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f8c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	f040 80c6 	bne.w	800fa5a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f8ce:	4b80      	ldr	r3, [pc, #512]	; (800fad0 <tcp_receive+0xf14>)
 800f8d0:	681a      	ldr	r2, [r3, #0]
 800f8d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	685b      	ldr	r3, [r3, #4]
 800f8d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f8da:	2b00      	cmp	r3, #0
 800f8dc:	f340 80bd 	ble.w	800fa5a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e2:	68db      	ldr	r3, [r3, #12]
 800f8e4:	899b      	ldrh	r3, [r3, #12]
 800f8e6:	b29b      	uxth	r3, r3
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fa f9e3 	bl	8009cb4 <lwip_htons>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	b2db      	uxtb	r3, r3
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	f040 80bf 	bne.w	800fa7a <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f8fc:	4875      	ldr	r0, [pc, #468]	; (800fad4 <tcp_receive+0xf18>)
 800f8fe:	f7fd fa3d 	bl	800cd7c <tcp_seg_copy>
 800f902:	4602      	mov	r2, r0
 800f904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f906:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	f000 80b6 	beq.w	800fa7e <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f914:	68db      	ldr	r3, [r3, #12]
 800f916:	685b      	ldr	r3, [r3, #4]
 800f918:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f91a:	8912      	ldrh	r2, [r2, #8]
 800f91c:	441a      	add	r2, r3
 800f91e:	4b6c      	ldr	r3, [pc, #432]	; (800fad0 <tcp_receive+0xf14>)
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	2b00      	cmp	r3, #0
 800f926:	dd12      	ble.n	800f94e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f928:	4b69      	ldr	r3, [pc, #420]	; (800fad0 <tcp_receive+0xf14>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	b29a      	uxth	r2, r3
 800f92e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f930:	68db      	ldr	r3, [r3, #12]
 800f932:	685b      	ldr	r3, [r3, #4]
 800f934:	b29b      	uxth	r3, r3
 800f936:	1ad3      	subs	r3, r2, r3
 800f938:	b29a      	uxth	r2, r3
 800f93a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f93c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f940:	685a      	ldr	r2, [r3, #4]
 800f942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f944:	891b      	ldrh	r3, [r3, #8]
 800f946:	4619      	mov	r1, r3
 800f948:	4610      	mov	r0, r2
 800f94a:	f7fb fbe5 	bl	800b118 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f94e:	4b62      	ldr	r3, [pc, #392]	; (800fad8 <tcp_receive+0xf1c>)
 800f950:	881b      	ldrh	r3, [r3, #0]
 800f952:	461a      	mov	r2, r3
 800f954:	4b5e      	ldr	r3, [pc, #376]	; (800fad0 <tcp_receive+0xf14>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	441a      	add	r2, r3
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f95e:	6879      	ldr	r1, [r7, #4]
 800f960:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f962:	440b      	add	r3, r1
 800f964:	1ad3      	subs	r3, r2, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	f340 8089 	ble.w	800fa7e <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f96c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f96e:	681b      	ldr	r3, [r3, #0]
 800f970:	68db      	ldr	r3, [r3, #12]
 800f972:	899b      	ldrh	r3, [r3, #12]
 800f974:	b29b      	uxth	r3, r3
 800f976:	4618      	mov	r0, r3
 800f978:	f7fa f99c 	bl	8009cb4 <lwip_htons>
 800f97c:	4603      	mov	r3, r0
 800f97e:	b2db      	uxtb	r3, r3
 800f980:	f003 0301 	and.w	r3, r3, #1
 800f984:	2b00      	cmp	r3, #0
 800f986:	d022      	beq.n	800f9ce <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	68db      	ldr	r3, [r3, #12]
 800f98e:	899b      	ldrh	r3, [r3, #12]
 800f990:	b29b      	uxth	r3, r3
 800f992:	b21b      	sxth	r3, r3
 800f994:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f998:	b21c      	sxth	r4, r3
 800f99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	68db      	ldr	r3, [r3, #12]
 800f9a0:	899b      	ldrh	r3, [r3, #12]
 800f9a2:	b29b      	uxth	r3, r3
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	f7fa f985 	bl	8009cb4 <lwip_htons>
 800f9aa:	4603      	mov	r3, r0
 800f9ac:	b2db      	uxtb	r3, r3
 800f9ae:	b29b      	uxth	r3, r3
 800f9b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f9b4:	b29b      	uxth	r3, r3
 800f9b6:	4618      	mov	r0, r3
 800f9b8:	f7fa f97c 	bl	8009cb4 <lwip_htons>
 800f9bc:	4603      	mov	r3, r0
 800f9be:	b21b      	sxth	r3, r3
 800f9c0:	4323      	orrs	r3, r4
 800f9c2:	b21a      	sxth	r2, r3
 800f9c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c6:	681b      	ldr	r3, [r3, #0]
 800f9c8:	68db      	ldr	r3, [r3, #12]
 800f9ca:	b292      	uxth	r2, r2
 800f9cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9d2:	b29a      	uxth	r2, r3
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f9d8:	4413      	add	r3, r2
 800f9da:	b299      	uxth	r1, r3
 800f9dc:	4b3c      	ldr	r3, [pc, #240]	; (800fad0 <tcp_receive+0xf14>)
 800f9de:	681b      	ldr	r3, [r3, #0]
 800f9e0:	b29a      	uxth	r2, r3
 800f9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e4:	681b      	ldr	r3, [r3, #0]
 800f9e6:	1a8a      	subs	r2, r1, r2
 800f9e8:	b292      	uxth	r2, r2
 800f9ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	685a      	ldr	r2, [r3, #4]
 800f9f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9f4:	681b      	ldr	r3, [r3, #0]
 800f9f6:	891b      	ldrh	r3, [r3, #8]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	f7fb fb8c 	bl	800b118 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fa00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	891c      	ldrh	r4, [r3, #8]
 800fa06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa08:	681b      	ldr	r3, [r3, #0]
 800fa0a:	68db      	ldr	r3, [r3, #12]
 800fa0c:	899b      	ldrh	r3, [r3, #12]
 800fa0e:	b29b      	uxth	r3, r3
 800fa10:	4618      	mov	r0, r3
 800fa12:	f7fa f94f 	bl	8009cb4 <lwip_htons>
 800fa16:	4603      	mov	r3, r0
 800fa18:	b2db      	uxtb	r3, r3
 800fa1a:	f003 0303 	and.w	r3, r3, #3
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d001      	beq.n	800fa26 <tcp_receive+0xe6a>
 800fa22:	2301      	movs	r3, #1
 800fa24:	e000      	b.n	800fa28 <tcp_receive+0xe6c>
 800fa26:	2300      	movs	r3, #0
 800fa28:	4423      	add	r3, r4
 800fa2a:	b29a      	uxth	r2, r3
 800fa2c:	4b2a      	ldr	r3, [pc, #168]	; (800fad8 <tcp_receive+0xf1c>)
 800fa2e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fa30:	4b29      	ldr	r3, [pc, #164]	; (800fad8 <tcp_receive+0xf1c>)
 800fa32:	881b      	ldrh	r3, [r3, #0]
 800fa34:	461a      	mov	r2, r3
 800fa36:	4b26      	ldr	r3, [pc, #152]	; (800fad0 <tcp_receive+0xf14>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	441a      	add	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa40:	6879      	ldr	r1, [r7, #4]
 800fa42:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa44:	440b      	add	r3, r1
 800fa46:	429a      	cmp	r2, r3
 800fa48:	d019      	beq.n	800fa7e <tcp_receive+0xec2>
 800fa4a:	4b24      	ldr	r3, [pc, #144]	; (800fadc <tcp_receive+0xf20>)
 800fa4c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fa50:	4923      	ldr	r1, [pc, #140]	; (800fae0 <tcp_receive+0xf24>)
 800fa52:	4824      	ldr	r0, [pc, #144]	; (800fae4 <tcp_receive+0xf28>)
 800fa54:	f007 fa0c 	bl	8016e70 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fa58:	e011      	b.n	800fa7e <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	63bb      	str	r3, [r7, #56]	; 0x38
 800fa60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	f47f aea4 	bne.w	800f7b0 <tcp_receive+0xbf4>
 800fa68:	e00a      	b.n	800fa80 <tcp_receive+0xec4>
                break;
 800fa6a:	bf00      	nop
 800fa6c:	e008      	b.n	800fa80 <tcp_receive+0xec4>
                break;
 800fa6e:	bf00      	nop
 800fa70:	e006      	b.n	800fa80 <tcp_receive+0xec4>
                  break;
 800fa72:	bf00      	nop
 800fa74:	e004      	b.n	800fa80 <tcp_receive+0xec4>
                  break;
 800fa76:	bf00      	nop
 800fa78:	e002      	b.n	800fa80 <tcp_receive+0xec4>
                  break;
 800fa7a:	bf00      	nop
 800fa7c:	e000      	b.n	800fa80 <tcp_receive+0xec4>
                break;
 800fa7e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f001 fe8b 	bl	801179c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fa86:	e003      	b.n	800fa90 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f001 fe87 	bl	801179c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fa8e:	e01a      	b.n	800fac6 <tcp_receive+0xf0a>
 800fa90:	e019      	b.n	800fac6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fa92:	4b0f      	ldr	r3, [pc, #60]	; (800fad0 <tcp_receive+0xf14>)
 800fa94:	681a      	ldr	r2, [r3, #0]
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	db0a      	blt.n	800fab6 <tcp_receive+0xefa>
 800faa0:	4b0b      	ldr	r3, [pc, #44]	; (800fad0 <tcp_receive+0xf14>)
 800faa2:	681a      	ldr	r2, [r3, #0]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faa8:	6879      	ldr	r1, [r7, #4]
 800faaa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800faac:	440b      	add	r3, r1
 800faae:	1ad3      	subs	r3, r2, r3
 800fab0:	3301      	adds	r3, #1
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	dd07      	ble.n	800fac6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	8b5b      	ldrh	r3, [r3, #26]
 800faba:	f043 0302 	orr.w	r3, r3, #2
 800fabe:	b29a      	uxth	r2, r3
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fac4:	e7ff      	b.n	800fac6 <tcp_receive+0xf0a>
 800fac6:	bf00      	nop
 800fac8:	3750      	adds	r7, #80	; 0x50
 800faca:	46bd      	mov	sp, r7
 800facc:	bdb0      	pop	{r4, r5, r7, pc}
 800face:	bf00      	nop
 800fad0:	200085cc 	.word	0x200085cc
 800fad4:	200085ac 	.word	0x200085ac
 800fad8:	200085d6 	.word	0x200085d6
 800fadc:	0801a114 	.word	0x0801a114
 800fae0:	0801a4bc 	.word	0x0801a4bc
 800fae4:	0801a160 	.word	0x0801a160

0800fae8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fae8:	b480      	push	{r7}
 800faea:	b083      	sub	sp, #12
 800faec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800faee:	4b15      	ldr	r3, [pc, #84]	; (800fb44 <tcp_get_next_optbyte+0x5c>)
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	1c5a      	adds	r2, r3, #1
 800faf4:	b291      	uxth	r1, r2
 800faf6:	4a13      	ldr	r2, [pc, #76]	; (800fb44 <tcp_get_next_optbyte+0x5c>)
 800faf8:	8011      	strh	r1, [r2, #0]
 800fafa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fafc:	4b12      	ldr	r3, [pc, #72]	; (800fb48 <tcp_get_next_optbyte+0x60>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d004      	beq.n	800fb0e <tcp_get_next_optbyte+0x26>
 800fb04:	4b11      	ldr	r3, [pc, #68]	; (800fb4c <tcp_get_next_optbyte+0x64>)
 800fb06:	881b      	ldrh	r3, [r3, #0]
 800fb08:	88fa      	ldrh	r2, [r7, #6]
 800fb0a:	429a      	cmp	r2, r3
 800fb0c:	d208      	bcs.n	800fb20 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fb0e:	4b10      	ldr	r3, [pc, #64]	; (800fb50 <tcp_get_next_optbyte+0x68>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	3314      	adds	r3, #20
 800fb14:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fb16:	88fb      	ldrh	r3, [r7, #6]
 800fb18:	683a      	ldr	r2, [r7, #0]
 800fb1a:	4413      	add	r3, r2
 800fb1c:	781b      	ldrb	r3, [r3, #0]
 800fb1e:	e00b      	b.n	800fb38 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fb20:	88fb      	ldrh	r3, [r7, #6]
 800fb22:	b2da      	uxtb	r2, r3
 800fb24:	4b09      	ldr	r3, [pc, #36]	; (800fb4c <tcp_get_next_optbyte+0x64>)
 800fb26:	881b      	ldrh	r3, [r3, #0]
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	1ad3      	subs	r3, r2, r3
 800fb2c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fb2e:	4b06      	ldr	r3, [pc, #24]	; (800fb48 <tcp_get_next_optbyte+0x60>)
 800fb30:	681a      	ldr	r2, [r3, #0]
 800fb32:	797b      	ldrb	r3, [r7, #5]
 800fb34:	4413      	add	r3, r2
 800fb36:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fb38:	4618      	mov	r0, r3
 800fb3a:	370c      	adds	r7, #12
 800fb3c:	46bd      	mov	sp, r7
 800fb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb42:	4770      	bx	lr
 800fb44:	200085c8 	.word	0x200085c8
 800fb48:	200085c4 	.word	0x200085c4
 800fb4c:	200085c2 	.word	0x200085c2
 800fb50:	200085bc 	.word	0x200085bc

0800fb54 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fb54:	b580      	push	{r7, lr}
 800fb56:	b084      	sub	sp, #16
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d106      	bne.n	800fb70 <tcp_parseopt+0x1c>
 800fb62:	4b32      	ldr	r3, [pc, #200]	; (800fc2c <tcp_parseopt+0xd8>)
 800fb64:	f240 727d 	movw	r2, #1917	; 0x77d
 800fb68:	4931      	ldr	r1, [pc, #196]	; (800fc30 <tcp_parseopt+0xdc>)
 800fb6a:	4832      	ldr	r0, [pc, #200]	; (800fc34 <tcp_parseopt+0xe0>)
 800fb6c:	f007 f980 	bl	8016e70 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fb70:	4b31      	ldr	r3, [pc, #196]	; (800fc38 <tcp_parseopt+0xe4>)
 800fb72:	881b      	ldrh	r3, [r3, #0]
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	d055      	beq.n	800fc24 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fb78:	4b30      	ldr	r3, [pc, #192]	; (800fc3c <tcp_parseopt+0xe8>)
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	801a      	strh	r2, [r3, #0]
 800fb7e:	e045      	b.n	800fc0c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fb80:	f7ff ffb2 	bl	800fae8 <tcp_get_next_optbyte>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fb88:	7bfb      	ldrb	r3, [r7, #15]
 800fb8a:	2b02      	cmp	r3, #2
 800fb8c:	d006      	beq.n	800fb9c <tcp_parseopt+0x48>
 800fb8e:	2b02      	cmp	r3, #2
 800fb90:	dc2b      	bgt.n	800fbea <tcp_parseopt+0x96>
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d041      	beq.n	800fc1a <tcp_parseopt+0xc6>
 800fb96:	2b01      	cmp	r3, #1
 800fb98:	d127      	bne.n	800fbea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fb9a:	e037      	b.n	800fc0c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fb9c:	f7ff ffa4 	bl	800fae8 <tcp_get_next_optbyte>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b04      	cmp	r3, #4
 800fba4:	d13b      	bne.n	800fc1e <tcp_parseopt+0xca>
 800fba6:	4b25      	ldr	r3, [pc, #148]	; (800fc3c <tcp_parseopt+0xe8>)
 800fba8:	881b      	ldrh	r3, [r3, #0]
 800fbaa:	3301      	adds	r3, #1
 800fbac:	4a22      	ldr	r2, [pc, #136]	; (800fc38 <tcp_parseopt+0xe4>)
 800fbae:	8812      	ldrh	r2, [r2, #0]
 800fbb0:	4293      	cmp	r3, r2
 800fbb2:	da34      	bge.n	800fc1e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fbb4:	f7ff ff98 	bl	800fae8 <tcp_get_next_optbyte>
 800fbb8:	4603      	mov	r3, r0
 800fbba:	b29b      	uxth	r3, r3
 800fbbc:	021b      	lsls	r3, r3, #8
 800fbbe:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fbc0:	f7ff ff92 	bl	800fae8 <tcp_get_next_optbyte>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	b29a      	uxth	r2, r3
 800fbc8:	89bb      	ldrh	r3, [r7, #12]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fbce:	89bb      	ldrh	r3, [r7, #12]
 800fbd0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fbd4:	d804      	bhi.n	800fbe0 <tcp_parseopt+0x8c>
 800fbd6:	89bb      	ldrh	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d001      	beq.n	800fbe0 <tcp_parseopt+0x8c>
 800fbdc:	89ba      	ldrh	r2, [r7, #12]
 800fbde:	e001      	b.n	800fbe4 <tcp_parseopt+0x90>
 800fbe0:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fbe8:	e010      	b.n	800fc0c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fbea:	f7ff ff7d 	bl	800fae8 <tcp_get_next_optbyte>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fbf2:	7afb      	ldrb	r3, [r7, #11]
 800fbf4:	2b01      	cmp	r3, #1
 800fbf6:	d914      	bls.n	800fc22 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fbf8:	7afb      	ldrb	r3, [r7, #11]
 800fbfa:	b29a      	uxth	r2, r3
 800fbfc:	4b0f      	ldr	r3, [pc, #60]	; (800fc3c <tcp_parseopt+0xe8>)
 800fbfe:	881b      	ldrh	r3, [r3, #0]
 800fc00:	4413      	add	r3, r2
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	3b02      	subs	r3, #2
 800fc06:	b29a      	uxth	r2, r3
 800fc08:	4b0c      	ldr	r3, [pc, #48]	; (800fc3c <tcp_parseopt+0xe8>)
 800fc0a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fc0c:	4b0b      	ldr	r3, [pc, #44]	; (800fc3c <tcp_parseopt+0xe8>)
 800fc0e:	881a      	ldrh	r2, [r3, #0]
 800fc10:	4b09      	ldr	r3, [pc, #36]	; (800fc38 <tcp_parseopt+0xe4>)
 800fc12:	881b      	ldrh	r3, [r3, #0]
 800fc14:	429a      	cmp	r2, r3
 800fc16:	d3b3      	bcc.n	800fb80 <tcp_parseopt+0x2c>
 800fc18:	e004      	b.n	800fc24 <tcp_parseopt+0xd0>
          return;
 800fc1a:	bf00      	nop
 800fc1c:	e002      	b.n	800fc24 <tcp_parseopt+0xd0>
            return;
 800fc1e:	bf00      	nop
 800fc20:	e000      	b.n	800fc24 <tcp_parseopt+0xd0>
            return;
 800fc22:	bf00      	nop
      }
    }
  }
}
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	0801a114 	.word	0x0801a114
 800fc30:	0801a578 	.word	0x0801a578
 800fc34:	0801a160 	.word	0x0801a160
 800fc38:	200085c0 	.word	0x200085c0
 800fc3c:	200085c8 	.word	0x200085c8

0800fc40 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fc40:	b480      	push	{r7}
 800fc42:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fc44:	4b05      	ldr	r3, [pc, #20]	; (800fc5c <tcp_trigger_input_pcb_close+0x1c>)
 800fc46:	781b      	ldrb	r3, [r3, #0]
 800fc48:	f043 0310 	orr.w	r3, r3, #16
 800fc4c:	b2da      	uxtb	r2, r3
 800fc4e:	4b03      	ldr	r3, [pc, #12]	; (800fc5c <tcp_trigger_input_pcb_close+0x1c>)
 800fc50:	701a      	strb	r2, [r3, #0]
}
 800fc52:	bf00      	nop
 800fc54:	46bd      	mov	sp, r7
 800fc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5a:	4770      	bx	lr
 800fc5c:	200085d9 	.word	0x200085d9

0800fc60 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fc6c:	68fb      	ldr	r3, [r7, #12]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d00a      	beq.n	800fc88 <tcp_route+0x28>
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	7a1b      	ldrb	r3, [r3, #8]
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d006      	beq.n	800fc88 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fc7a:	68fb      	ldr	r3, [r7, #12]
 800fc7c:	7a1b      	ldrb	r3, [r3, #8]
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fb f842 	bl	800ad08 <netif_get_by_index>
 800fc84:	4603      	mov	r3, r0
 800fc86:	e003      	b.n	800fc90 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f005 fca9 	bl	80155e0 <ip4_route>
 800fc8e:	4603      	mov	r3, r0
  }
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3710      	adds	r7, #16
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fc98:	b590      	push	{r4, r7, lr}
 800fc9a:	b087      	sub	sp, #28
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	60f8      	str	r0, [r7, #12]
 800fca0:	60b9      	str	r1, [r7, #8]
 800fca2:	603b      	str	r3, [r7, #0]
 800fca4:	4613      	mov	r3, r2
 800fca6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d105      	bne.n	800fcba <tcp_create_segment+0x22>
 800fcae:	4b44      	ldr	r3, [pc, #272]	; (800fdc0 <tcp_create_segment+0x128>)
 800fcb0:	22a3      	movs	r2, #163	; 0xa3
 800fcb2:	4944      	ldr	r1, [pc, #272]	; (800fdc4 <tcp_create_segment+0x12c>)
 800fcb4:	4844      	ldr	r0, [pc, #272]	; (800fdc8 <tcp_create_segment+0x130>)
 800fcb6:	f007 f8db 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d105      	bne.n	800fccc <tcp_create_segment+0x34>
 800fcc0:	4b3f      	ldr	r3, [pc, #252]	; (800fdc0 <tcp_create_segment+0x128>)
 800fcc2:	22a4      	movs	r2, #164	; 0xa4
 800fcc4:	4941      	ldr	r1, [pc, #260]	; (800fdcc <tcp_create_segment+0x134>)
 800fcc6:	4840      	ldr	r0, [pc, #256]	; (800fdc8 <tcp_create_segment+0x130>)
 800fcc8:	f007 f8d2 	bl	8016e70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fccc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	b2db      	uxtb	r3, r3
 800fcd4:	f003 0304 	and.w	r3, r3, #4
 800fcd8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fcda:	2003      	movs	r0, #3
 800fcdc:	f7fa fca0 	bl	800a620 <memp_malloc>
 800fce0:	6138      	str	r0, [r7, #16]
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d104      	bne.n	800fcf2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fce8:	68b8      	ldr	r0, [r7, #8]
 800fcea:	f7fb fb9b 	bl	800b424 <pbuf_free>
    return NULL;
 800fcee:	2300      	movs	r3, #0
 800fcf0:	e061      	b.n	800fdb6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fcf8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fd00:	693b      	ldr	r3, [r7, #16]
 800fd02:	68ba      	ldr	r2, [r7, #8]
 800fd04:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	891a      	ldrh	r2, [r3, #8]
 800fd0a:	7dfb      	ldrb	r3, [r7, #23]
 800fd0c:	b29b      	uxth	r3, r3
 800fd0e:	429a      	cmp	r2, r3
 800fd10:	d205      	bcs.n	800fd1e <tcp_create_segment+0x86>
 800fd12:	4b2b      	ldr	r3, [pc, #172]	; (800fdc0 <tcp_create_segment+0x128>)
 800fd14:	22b0      	movs	r2, #176	; 0xb0
 800fd16:	492e      	ldr	r1, [pc, #184]	; (800fdd0 <tcp_create_segment+0x138>)
 800fd18:	482b      	ldr	r0, [pc, #172]	; (800fdc8 <tcp_create_segment+0x130>)
 800fd1a:	f007 f8a9 	bl	8016e70 <iprintf>
  seg->len = p->tot_len - optlen;
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	891a      	ldrh	r2, [r3, #8]
 800fd22:	7dfb      	ldrb	r3, [r7, #23]
 800fd24:	b29b      	uxth	r3, r3
 800fd26:	1ad3      	subs	r3, r2, r3
 800fd28:	b29a      	uxth	r2, r3
 800fd2a:	693b      	ldr	r3, [r7, #16]
 800fd2c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800fd2e:	2114      	movs	r1, #20
 800fd30:	68b8      	ldr	r0, [r7, #8]
 800fd32:	f7fb fae1 	bl	800b2f8 <pbuf_add_header>
 800fd36:	4603      	mov	r3, r0
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	d004      	beq.n	800fd46 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800fd3c:	6938      	ldr	r0, [r7, #16]
 800fd3e:	f7fd f804 	bl	800cd4a <tcp_seg_free>
    return NULL;
 800fd42:	2300      	movs	r3, #0
 800fd44:	e037      	b.n	800fdb6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	685b      	ldr	r3, [r3, #4]
 800fd4a:	685a      	ldr	r2, [r3, #4]
 800fd4c:	693b      	ldr	r3, [r7, #16]
 800fd4e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fd50:	68fb      	ldr	r3, [r7, #12]
 800fd52:	8ada      	ldrh	r2, [r3, #22]
 800fd54:	693b      	ldr	r3, [r7, #16]
 800fd56:	68dc      	ldr	r4, [r3, #12]
 800fd58:	4610      	mov	r0, r2
 800fd5a:	f7f9 ffab 	bl	8009cb4 <lwip_htons>
 800fd5e:	4603      	mov	r3, r0
 800fd60:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	8b1a      	ldrh	r2, [r3, #24]
 800fd66:	693b      	ldr	r3, [r7, #16]
 800fd68:	68dc      	ldr	r4, [r3, #12]
 800fd6a:	4610      	mov	r0, r2
 800fd6c:	f7f9 ffa2 	bl	8009cb4 <lwip_htons>
 800fd70:	4603      	mov	r3, r0
 800fd72:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	68dc      	ldr	r4, [r3, #12]
 800fd78:	6838      	ldr	r0, [r7, #0]
 800fd7a:	f7f9 ffb0 	bl	8009cde <lwip_htonl>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
 800fd84:	089b      	lsrs	r3, r3, #2
 800fd86:	b2db      	uxtb	r3, r3
 800fd88:	b29b      	uxth	r3, r3
 800fd8a:	3305      	adds	r3, #5
 800fd8c:	b29b      	uxth	r3, r3
 800fd8e:	031b      	lsls	r3, r3, #12
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	79fb      	ldrb	r3, [r7, #7]
 800fd94:	b29b      	uxth	r3, r3
 800fd96:	4313      	orrs	r3, r2
 800fd98:	b29a      	uxth	r2, r3
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	68dc      	ldr	r4, [r3, #12]
 800fd9e:	4610      	mov	r0, r2
 800fda0:	f7f9 ff88 	bl	8009cb4 <lwip_htons>
 800fda4:	4603      	mov	r3, r0
 800fda6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	68db      	ldr	r3, [r3, #12]
 800fdac:	2200      	movs	r2, #0
 800fdae:	749a      	strb	r2, [r3, #18]
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	74da      	strb	r2, [r3, #19]
  return seg;
 800fdb4:	693b      	ldr	r3, [r7, #16]
}
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	371c      	adds	r7, #28
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd90      	pop	{r4, r7, pc}
 800fdbe:	bf00      	nop
 800fdc0:	0801a594 	.word	0x0801a594
 800fdc4:	0801a5c8 	.word	0x0801a5c8
 800fdc8:	0801a5e8 	.word	0x0801a5e8
 800fdcc:	0801a610 	.word	0x0801a610
 800fdd0:	0801a634 	.word	0x0801a634

0800fdd4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b086      	sub	sp, #24
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	607b      	str	r3, [r7, #4]
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]
 800fde0:	460b      	mov	r3, r1
 800fde2:	81bb      	strh	r3, [r7, #12]
 800fde4:	4613      	mov	r3, r2
 800fde6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 800fde8:	89bb      	ldrh	r3, [r7, #12]
 800fdea:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d105      	bne.n	800fdfe <tcp_pbuf_prealloc+0x2a>
 800fdf2:	4b30      	ldr	r3, [pc, #192]	; (800feb4 <tcp_pbuf_prealloc+0xe0>)
 800fdf4:	22e8      	movs	r2, #232	; 0xe8
 800fdf6:	4930      	ldr	r1, [pc, #192]	; (800feb8 <tcp_pbuf_prealloc+0xe4>)
 800fdf8:	4830      	ldr	r0, [pc, #192]	; (800febc <tcp_pbuf_prealloc+0xe8>)
 800fdfa:	f007 f839 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 800fdfe:	6a3b      	ldr	r3, [r7, #32]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d105      	bne.n	800fe10 <tcp_pbuf_prealloc+0x3c>
 800fe04:	4b2b      	ldr	r3, [pc, #172]	; (800feb4 <tcp_pbuf_prealloc+0xe0>)
 800fe06:	22e9      	movs	r2, #233	; 0xe9
 800fe08:	492d      	ldr	r1, [pc, #180]	; (800fec0 <tcp_pbuf_prealloc+0xec>)
 800fe0a:	482c      	ldr	r0, [pc, #176]	; (800febc <tcp_pbuf_prealloc+0xe8>)
 800fe0c:	f007 f830 	bl	8016e70 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 800fe10:	89ba      	ldrh	r2, [r7, #12]
 800fe12:	897b      	ldrh	r3, [r7, #10]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d221      	bcs.n	800fe5c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fe18:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800fe1c:	f003 0302 	and.w	r3, r3, #2
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d111      	bne.n	800fe48 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 800fe24:	6a3b      	ldr	r3, [r7, #32]
 800fe26:	8b5b      	ldrh	r3, [r3, #26]
 800fe28:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d115      	bne.n	800fe5c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 800fe30:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d007      	beq.n	800fe48 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 800fe38:	6a3b      	ldr	r3, [r7, #32]
 800fe3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d103      	bne.n	800fe48 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d009      	beq.n	800fe5c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 800fe48:	89bb      	ldrh	r3, [r7, #12]
 800fe4a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 800fe4e:	f023 0203 	bic.w	r2, r3, #3
 800fe52:	897b      	ldrh	r3, [r7, #10]
 800fe54:	4293      	cmp	r3, r2
 800fe56:	bf28      	it	cs
 800fe58:	4613      	movcs	r3, r2
 800fe5a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 800fe5c:	8af9      	ldrh	r1, [r7, #22]
 800fe5e:	7bfb      	ldrb	r3, [r7, #15]
 800fe60:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fe64:	4618      	mov	r0, r3
 800fe66:	f7fa fff9 	bl	800ae5c <pbuf_alloc>
 800fe6a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d101      	bne.n	800fe76 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 800fe72:	2300      	movs	r3, #0
 800fe74:	e019      	b.n	800feaa <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d006      	beq.n	800fe8c <tcp_pbuf_prealloc+0xb8>
 800fe7e:	4b0d      	ldr	r3, [pc, #52]	; (800feb4 <tcp_pbuf_prealloc+0xe0>)
 800fe80:	f240 120b 	movw	r2, #267	; 0x10b
 800fe84:	490f      	ldr	r1, [pc, #60]	; (800fec4 <tcp_pbuf_prealloc+0xf0>)
 800fe86:	480d      	ldr	r0, [pc, #52]	; (800febc <tcp_pbuf_prealloc+0xe8>)
 800fe88:	f006 fff2 	bl	8016e70 <iprintf>
  *oversize = p->len - length;
 800fe8c:	693b      	ldr	r3, [r7, #16]
 800fe8e:	895a      	ldrh	r2, [r3, #10]
 800fe90:	89bb      	ldrh	r3, [r7, #12]
 800fe92:	1ad3      	subs	r3, r2, r3
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 800fe9a:	693b      	ldr	r3, [r7, #16]
 800fe9c:	89ba      	ldrh	r2, [r7, #12]
 800fe9e:	811a      	strh	r2, [r3, #8]
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	891a      	ldrh	r2, [r3, #8]
 800fea4:	693b      	ldr	r3, [r7, #16]
 800fea6:	815a      	strh	r2, [r3, #10]
  return p;
 800fea8:	693b      	ldr	r3, [r7, #16]
}
 800feaa:	4618      	mov	r0, r3
 800feac:	3718      	adds	r7, #24
 800feae:	46bd      	mov	sp, r7
 800feb0:	bd80      	pop	{r7, pc}
 800feb2:	bf00      	nop
 800feb4:	0801a594 	.word	0x0801a594
 800feb8:	0801a64c 	.word	0x0801a64c
 800febc:	0801a5e8 	.word	0x0801a5e8
 800fec0:	0801a670 	.word	0x0801a670
 800fec4:	0801a690 	.word	0x0801a690

0800fec8 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b082      	sub	sp, #8
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	460b      	mov	r3, r1
 800fed2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d106      	bne.n	800fee8 <tcp_write_checks+0x20>
 800feda:	4b33      	ldr	r3, [pc, #204]	; (800ffa8 <tcp_write_checks+0xe0>)
 800fedc:	f240 1233 	movw	r2, #307	; 0x133
 800fee0:	4932      	ldr	r1, [pc, #200]	; (800ffac <tcp_write_checks+0xe4>)
 800fee2:	4833      	ldr	r0, [pc, #204]	; (800ffb0 <tcp_write_checks+0xe8>)
 800fee4:	f006 ffc4 	bl	8016e70 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	7d1b      	ldrb	r3, [r3, #20]
 800feec:	2b04      	cmp	r3, #4
 800feee:	d00e      	beq.n	800ff0e <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 800fef4:	2b07      	cmp	r3, #7
 800fef6:	d00a      	beq.n	800ff0e <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d006      	beq.n	800ff0e <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 800ff04:	2b03      	cmp	r3, #3
 800ff06:	d002      	beq.n	800ff0e <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 800ff08:	f06f 030a 	mvn.w	r3, #10
 800ff0c:	e048      	b.n	800ffa0 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 800ff0e:	887b      	ldrh	r3, [r7, #2]
 800ff10:	2b00      	cmp	r3, #0
 800ff12:	d101      	bne.n	800ff18 <tcp_write_checks+0x50>
    return ERR_OK;
 800ff14:	2300      	movs	r3, #0
 800ff16:	e043      	b.n	800ffa0 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ff1e:	887a      	ldrh	r2, [r7, #2]
 800ff20:	429a      	cmp	r2, r3
 800ff22:	d909      	bls.n	800ff38 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	8b5b      	ldrh	r3, [r3, #26]
 800ff28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff2c:	b29a      	uxth	r2, r3
 800ff2e:	687b      	ldr	r3, [r7, #4]
 800ff30:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ff32:	f04f 33ff 	mov.w	r3, #4294967295
 800ff36:	e033      	b.n	800ffa0 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff3e:	2b08      	cmp	r3, #8
 800ff40:	d909      	bls.n	800ff56 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	8b5b      	ldrh	r3, [r3, #26]
 800ff46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff4a:	b29a      	uxth	r2, r3
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 800ff50:	f04f 33ff 	mov.w	r3, #4294967295
 800ff54:	e024      	b.n	800ffa0 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d00f      	beq.n	800ff80 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d11a      	bne.n	800ff9e <tcp_write_checks+0xd6>
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d116      	bne.n	800ff9e <tcp_write_checks+0xd6>
 800ff70:	4b0d      	ldr	r3, [pc, #52]	; (800ffa8 <tcp_write_checks+0xe0>)
 800ff72:	f240 1255 	movw	r2, #341	; 0x155
 800ff76:	490f      	ldr	r1, [pc, #60]	; (800ffb4 <tcp_write_checks+0xec>)
 800ff78:	480d      	ldr	r0, [pc, #52]	; (800ffb0 <tcp_write_checks+0xe8>)
 800ff7a:	f006 ff79 	bl	8016e70 <iprintf>
 800ff7e:	e00e      	b.n	800ff9e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d103      	bne.n	800ff90 <tcp_write_checks+0xc8>
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d006      	beq.n	800ff9e <tcp_write_checks+0xd6>
 800ff90:	4b05      	ldr	r3, [pc, #20]	; (800ffa8 <tcp_write_checks+0xe0>)
 800ff92:	f44f 72ac 	mov.w	r2, #344	; 0x158
 800ff96:	4908      	ldr	r1, [pc, #32]	; (800ffb8 <tcp_write_checks+0xf0>)
 800ff98:	4805      	ldr	r0, [pc, #20]	; (800ffb0 <tcp_write_checks+0xe8>)
 800ff9a:	f006 ff69 	bl	8016e70 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 800ff9e:	2300      	movs	r3, #0
}
 800ffa0:	4618      	mov	r0, r3
 800ffa2:	3708      	adds	r7, #8
 800ffa4:	46bd      	mov	sp, r7
 800ffa6:	bd80      	pop	{r7, pc}
 800ffa8:	0801a594 	.word	0x0801a594
 800ffac:	0801a6a4 	.word	0x0801a6a4
 800ffb0:	0801a5e8 	.word	0x0801a5e8
 800ffb4:	0801a6c4 	.word	0x0801a6c4
 800ffb8:	0801a700 	.word	0x0801a700

0800ffbc <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b09b      	sub	sp, #108	; 0x6c
 800ffc0:	af04      	add	r7, sp, #16
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	4611      	mov	r1, r2
 800ffc8:	461a      	mov	r2, r3
 800ffca:	460b      	mov	r3, r1
 800ffcc:	80fb      	strh	r3, [r7, #6]
 800ffce:	4613      	mov	r3, r2
 800ffd0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 800ffd6:	2300      	movs	r3, #0
 800ffd8:	653b      	str	r3, [r7, #80]	; 0x50
 800ffda:	2300      	movs	r3, #0
 800ffdc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ffde:	2300      	movs	r3, #0
 800ffe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800ffe2:	2300      	movs	r3, #0
 800ffe4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 800ffe6:	2300      	movs	r3, #0
 800ffe8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 800ffec:	2300      	movs	r3, #0
 800ffee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 800fff2:	2300      	movs	r3, #0
 800fff4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 800fff6:	2300      	movs	r3, #0
 800fff8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 800fffa:	2300      	movs	r3, #0
 800fffc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 800fffe:	68fb      	ldr	r3, [r7, #12]
 8010000:	2b00      	cmp	r3, #0
 8010002:	d109      	bne.n	8010018 <tcp_write+0x5c>
 8010004:	4ba4      	ldr	r3, [pc, #656]	; (8010298 <tcp_write+0x2dc>)
 8010006:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801000a:	49a4      	ldr	r1, [pc, #656]	; (801029c <tcp_write+0x2e0>)
 801000c:	48a4      	ldr	r0, [pc, #656]	; (80102a0 <tcp_write+0x2e4>)
 801000e:	f006 ff2f 	bl	8016e70 <iprintf>
 8010012:	f06f 030f 	mvn.w	r3, #15
 8010016:	e32a      	b.n	801066e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801001e:	085b      	lsrs	r3, r3, #1
 8010020:	b29a      	uxth	r2, r3
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010026:	4293      	cmp	r3, r2
 8010028:	bf28      	it	cs
 801002a:	4613      	movcs	r3, r2
 801002c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801002e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010030:	2b00      	cmp	r3, #0
 8010032:	d102      	bne.n	801003a <tcp_write+0x7e>
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010038:	e000      	b.n	801003c <tcp_write+0x80>
 801003a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801003c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801003e:	68bb      	ldr	r3, [r7, #8]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d109      	bne.n	8010058 <tcp_write+0x9c>
 8010044:	4b94      	ldr	r3, [pc, #592]	; (8010298 <tcp_write+0x2dc>)
 8010046:	f240 12ad 	movw	r2, #429	; 0x1ad
 801004a:	4996      	ldr	r1, [pc, #600]	; (80102a4 <tcp_write+0x2e8>)
 801004c:	4894      	ldr	r0, [pc, #592]	; (80102a0 <tcp_write+0x2e4>)
 801004e:	f006 ff0f 	bl	8016e70 <iprintf>
 8010052:	f06f 030f 	mvn.w	r3, #15
 8010056:	e30a      	b.n	801066e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010058:	88fb      	ldrh	r3, [r7, #6]
 801005a:	4619      	mov	r1, r3
 801005c:	68f8      	ldr	r0, [r7, #12]
 801005e:	f7ff ff33 	bl	800fec8 <tcp_write_checks>
 8010062:	4603      	mov	r3, r0
 8010064:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010068:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <tcp_write+0xba>
    return err;
 8010070:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010074:	e2fb      	b.n	801066e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8010076:	68fb      	ldr	r3, [r7, #12]
 8010078:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801007c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010080:	2300      	movs	r3, #0
 8010082:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801008a:	2b00      	cmp	r3, #0
 801008c:	f000 80f6 	beq.w	801027c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010094:	653b      	str	r3, [r7, #80]	; 0x50
 8010096:	e002      	b.n	801009e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8010098:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801009a:	681b      	ldr	r3, [r3, #0]
 801009c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801009e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	2b00      	cmp	r3, #0
 80100a4:	d1f8      	bne.n	8010098 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80100a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100a8:	7a9b      	ldrb	r3, [r3, #10]
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	f003 0304 	and.w	r3, r3, #4
 80100b2:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80100b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80100b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	4619      	mov	r1, r3
 80100bc:	8c3b      	ldrh	r3, [r7, #32]
 80100be:	440b      	add	r3, r1
 80100c0:	429a      	cmp	r2, r3
 80100c2:	da06      	bge.n	80100d2 <tcp_write+0x116>
 80100c4:	4b74      	ldr	r3, [pc, #464]	; (8010298 <tcp_write+0x2dc>)
 80100c6:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80100ca:	4977      	ldr	r1, [pc, #476]	; (80102a8 <tcp_write+0x2ec>)
 80100cc:	4874      	ldr	r0, [pc, #464]	; (80102a0 <tcp_write+0x2e4>)
 80100ce:	f006 fecf 	bl	8016e70 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80100d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80100d4:	891a      	ldrh	r2, [r3, #8]
 80100d6:	8c3b      	ldrh	r3, [r7, #32]
 80100d8:	4413      	add	r3, r2
 80100da:	b29b      	uxth	r3, r3
 80100dc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80100de:	1ad3      	subs	r3, r2, r3
 80100e0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80100e8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80100ea:	8a7b      	ldrh	r3, [r7, #18]
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d026      	beq.n	801013e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80100f0:	8a7b      	ldrh	r3, [r7, #18]
 80100f2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80100f4:	429a      	cmp	r2, r3
 80100f6:	d206      	bcs.n	8010106 <tcp_write+0x14a>
 80100f8:	4b67      	ldr	r3, [pc, #412]	; (8010298 <tcp_write+0x2dc>)
 80100fa:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80100fe:	496b      	ldr	r1, [pc, #428]	; (80102ac <tcp_write+0x2f0>)
 8010100:	4867      	ldr	r0, [pc, #412]	; (80102a0 <tcp_write+0x2e4>)
 8010102:	f006 feb5 	bl	8016e70 <iprintf>
      seg = last_unsent;
 8010106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010108:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801010a:	8a7b      	ldrh	r3, [r7, #18]
 801010c:	88fa      	ldrh	r2, [r7, #6]
 801010e:	4293      	cmp	r3, r2
 8010110:	bf28      	it	cs
 8010112:	4613      	movcs	r3, r2
 8010114:	b29b      	uxth	r3, r3
 8010116:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010118:	4293      	cmp	r3, r2
 801011a:	bf28      	it	cs
 801011c:	4613      	movcs	r3, r2
 801011e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010120:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010124:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010126:	4413      	add	r3, r2
 8010128:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801012c:	8a7a      	ldrh	r2, [r7, #18]
 801012e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010130:	1ad3      	subs	r3, r2, r3
 8010132:	b29b      	uxth	r3, r3
 8010134:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010136:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010138:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801013a:	1ad3      	subs	r3, r2, r3
 801013c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801013e:	8a7b      	ldrh	r3, [r7, #18]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d00b      	beq.n	801015c <tcp_write+0x1a0>
 8010144:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010148:	88fb      	ldrh	r3, [r7, #6]
 801014a:	429a      	cmp	r2, r3
 801014c:	d006      	beq.n	801015c <tcp_write+0x1a0>
 801014e:	4b52      	ldr	r3, [pc, #328]	; (8010298 <tcp_write+0x2dc>)
 8010150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010154:	4956      	ldr	r1, [pc, #344]	; (80102b0 <tcp_write+0x2f4>)
 8010156:	4852      	ldr	r0, [pc, #328]	; (80102a0 <tcp_write+0x2e4>)
 8010158:	f006 fe8a 	bl	8016e70 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801015c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010160:	88fb      	ldrh	r3, [r7, #6]
 8010162:	429a      	cmp	r2, r3
 8010164:	f080 8167 	bcs.w	8010436 <tcp_write+0x47a>
 8010168:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801016a:	2b00      	cmp	r3, #0
 801016c:	f000 8163 	beq.w	8010436 <tcp_write+0x47a>
 8010170:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010172:	891b      	ldrh	r3, [r3, #8]
 8010174:	2b00      	cmp	r3, #0
 8010176:	f000 815e 	beq.w	8010436 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801017a:	88fa      	ldrh	r2, [r7, #6]
 801017c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010180:	1ad2      	subs	r2, r2, r3
 8010182:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010184:	4293      	cmp	r3, r2
 8010186:	bfa8      	it	ge
 8010188:	4613      	movge	r3, r2
 801018a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801018c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801018e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010190:	797b      	ldrb	r3, [r7, #5]
 8010192:	f003 0301 	and.w	r3, r3, #1
 8010196:	2b00      	cmp	r3, #0
 8010198:	d027      	beq.n	80101ea <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801019a:	f107 0012 	add.w	r0, r7, #18
 801019e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80101a0:	8bf9      	ldrh	r1, [r7, #30]
 80101a2:	2301      	movs	r3, #1
 80101a4:	9302      	str	r3, [sp, #8]
 80101a6:	797b      	ldrb	r3, [r7, #5]
 80101a8:	9301      	str	r3, [sp, #4]
 80101aa:	68fb      	ldr	r3, [r7, #12]
 80101ac:	9300      	str	r3, [sp, #0]
 80101ae:	4603      	mov	r3, r0
 80101b0:	2000      	movs	r0, #0
 80101b2:	f7ff fe0f 	bl	800fdd4 <tcp_pbuf_prealloc>
 80101b6:	6578      	str	r0, [r7, #84]	; 0x54
 80101b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f000 8225 	beq.w	801060a <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80101c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80101c2:	6858      	ldr	r0, [r3, #4]
 80101c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80101c8:	68ba      	ldr	r2, [r7, #8]
 80101ca:	4413      	add	r3, r2
 80101cc:	8bfa      	ldrh	r2, [r7, #30]
 80101ce:	4619      	mov	r1, r3
 80101d0:	f006 fe1e 	bl	8016e10 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80101d4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80101d6:	f7fb f9b3 	bl	800b540 <pbuf_clen>
 80101da:	4603      	mov	r3, r0
 80101dc:	461a      	mov	r2, r3
 80101de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80101e2:	4413      	add	r3, r2
 80101e4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80101e8:	e041      	b.n	801026e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80101ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101ec:	685b      	ldr	r3, [r3, #4]
 80101ee:	637b      	str	r3, [r7, #52]	; 0x34
 80101f0:	e002      	b.n	80101f8 <tcp_write+0x23c>
 80101f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	637b      	str	r3, [r7, #52]	; 0x34
 80101f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d1f8      	bne.n	80101f2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010200:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010202:	7b1b      	ldrb	r3, [r3, #12]
 8010204:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8010208:	2b00      	cmp	r3, #0
 801020a:	d115      	bne.n	8010238 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801020c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801020e:	685b      	ldr	r3, [r3, #4]
 8010210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010212:	8952      	ldrh	r2, [r2, #10]
 8010214:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8010216:	68ba      	ldr	r2, [r7, #8]
 8010218:	429a      	cmp	r2, r3
 801021a:	d10d      	bne.n	8010238 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801021c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010220:	2b00      	cmp	r3, #0
 8010222:	d006      	beq.n	8010232 <tcp_write+0x276>
 8010224:	4b1c      	ldr	r3, [pc, #112]	; (8010298 <tcp_write+0x2dc>)
 8010226:	f240 2231 	movw	r2, #561	; 0x231
 801022a:	4922      	ldr	r1, [pc, #136]	; (80102b4 <tcp_write+0x2f8>)
 801022c:	481c      	ldr	r0, [pc, #112]	; (80102a0 <tcp_write+0x2e4>)
 801022e:	f006 fe1f 	bl	8016e70 <iprintf>
          extendlen = seglen;
 8010232:	8bfb      	ldrh	r3, [r7, #30]
 8010234:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010236:	e01a      	b.n	801026e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010238:	8bfb      	ldrh	r3, [r7, #30]
 801023a:	2201      	movs	r2, #1
 801023c:	4619      	mov	r1, r3
 801023e:	2000      	movs	r0, #0
 8010240:	f7fa fe0c 	bl	800ae5c <pbuf_alloc>
 8010244:	6578      	str	r0, [r7, #84]	; 0x54
 8010246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010248:	2b00      	cmp	r3, #0
 801024a:	f000 81e0 	beq.w	801060e <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801024e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010252:	68ba      	ldr	r2, [r7, #8]
 8010254:	441a      	add	r2, r3
 8010256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010258:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801025a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801025c:	f7fb f970 	bl	800b540 <pbuf_clen>
 8010260:	4603      	mov	r3, r0
 8010262:	461a      	mov	r2, r3
 8010264:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010268:	4413      	add	r3, r2
 801026a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801026e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010272:	8bfb      	ldrh	r3, [r7, #30]
 8010274:	4413      	add	r3, r2
 8010276:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801027a:	e0dc      	b.n	8010436 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8010282:	2b00      	cmp	r3, #0
 8010284:	f000 80d7 	beq.w	8010436 <tcp_write+0x47a>
 8010288:	4b03      	ldr	r3, [pc, #12]	; (8010298 <tcp_write+0x2dc>)
 801028a:	f240 224a 	movw	r2, #586	; 0x24a
 801028e:	490a      	ldr	r1, [pc, #40]	; (80102b8 <tcp_write+0x2fc>)
 8010290:	4803      	ldr	r0, [pc, #12]	; (80102a0 <tcp_write+0x2e4>)
 8010292:	f006 fded 	bl	8016e70 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010296:	e0ce      	b.n	8010436 <tcp_write+0x47a>
 8010298:	0801a594 	.word	0x0801a594
 801029c:	0801a734 	.word	0x0801a734
 80102a0:	0801a5e8 	.word	0x0801a5e8
 80102a4:	0801a74c 	.word	0x0801a74c
 80102a8:	0801a780 	.word	0x0801a780
 80102ac:	0801a798 	.word	0x0801a798
 80102b0:	0801a7b8 	.word	0x0801a7b8
 80102b4:	0801a7d8 	.word	0x0801a7d8
 80102b8:	0801a804 	.word	0x0801a804
    struct pbuf *p;
    u16_t left = len - pos;
 80102bc:	88fa      	ldrh	r2, [r7, #6]
 80102be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102c2:	1ad3      	subs	r3, r2, r3
 80102c4:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80102c6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80102ca:	b29b      	uxth	r3, r3
 80102cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80102d2:	8b7a      	ldrh	r2, [r7, #26]
 80102d4:	8bbb      	ldrh	r3, [r7, #28]
 80102d6:	4293      	cmp	r3, r2
 80102d8:	bf28      	it	cs
 80102da:	4613      	movcs	r3, r2
 80102dc:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80102de:	797b      	ldrb	r3, [r7, #5]
 80102e0:	f003 0301 	and.w	r3, r3, #1
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d036      	beq.n	8010356 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80102e8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80102ec:	b29a      	uxth	r2, r3
 80102ee:	8b3b      	ldrh	r3, [r7, #24]
 80102f0:	4413      	add	r3, r2
 80102f2:	b299      	uxth	r1, r3
 80102f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	bf0c      	ite	eq
 80102fa:	2301      	moveq	r3, #1
 80102fc:	2300      	movne	r3, #0
 80102fe:	b2db      	uxtb	r3, r3
 8010300:	f107 0012 	add.w	r0, r7, #18
 8010304:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010306:	9302      	str	r3, [sp, #8]
 8010308:	797b      	ldrb	r3, [r7, #5]
 801030a:	9301      	str	r3, [sp, #4]
 801030c:	68fb      	ldr	r3, [r7, #12]
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	4603      	mov	r3, r0
 8010312:	2036      	movs	r0, #54	; 0x36
 8010314:	f7ff fd5e 	bl	800fdd4 <tcp_pbuf_prealloc>
 8010318:	6338      	str	r0, [r7, #48]	; 0x30
 801031a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801031c:	2b00      	cmp	r3, #0
 801031e:	f000 8178 	beq.w	8010612 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010324:	895b      	ldrh	r3, [r3, #10]
 8010326:	8b3a      	ldrh	r2, [r7, #24]
 8010328:	429a      	cmp	r2, r3
 801032a:	d906      	bls.n	801033a <tcp_write+0x37e>
 801032c:	4b8c      	ldr	r3, [pc, #560]	; (8010560 <tcp_write+0x5a4>)
 801032e:	f240 2266 	movw	r2, #614	; 0x266
 8010332:	498c      	ldr	r1, [pc, #560]	; (8010564 <tcp_write+0x5a8>)
 8010334:	488c      	ldr	r0, [pc, #560]	; (8010568 <tcp_write+0x5ac>)
 8010336:	f006 fd9b 	bl	8016e70 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801033a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801033c:	685a      	ldr	r2, [r3, #4]
 801033e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010342:	18d0      	adds	r0, r2, r3
 8010344:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010348:	68ba      	ldr	r2, [r7, #8]
 801034a:	4413      	add	r3, r2
 801034c:	8b3a      	ldrh	r2, [r7, #24]
 801034e:	4619      	mov	r1, r3
 8010350:	f006 fd5e 	bl	8016e10 <memcpy>
 8010354:	e02f      	b.n	80103b6 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010356:	8a7b      	ldrh	r3, [r7, #18]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <tcp_write+0x3ae>
 801035c:	4b80      	ldr	r3, [pc, #512]	; (8010560 <tcp_write+0x5a4>)
 801035e:	f240 2271 	movw	r2, #625	; 0x271
 8010362:	4982      	ldr	r1, [pc, #520]	; (801056c <tcp_write+0x5b0>)
 8010364:	4880      	ldr	r0, [pc, #512]	; (8010568 <tcp_write+0x5ac>)
 8010366:	f006 fd83 	bl	8016e70 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801036a:	8b3b      	ldrh	r3, [r7, #24]
 801036c:	2201      	movs	r2, #1
 801036e:	4619      	mov	r1, r3
 8010370:	2036      	movs	r0, #54	; 0x36
 8010372:	f7fa fd73 	bl	800ae5c <pbuf_alloc>
 8010376:	6178      	str	r0, [r7, #20]
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	2b00      	cmp	r3, #0
 801037c:	f000 814b 	beq.w	8010616 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8010380:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010384:	68ba      	ldr	r2, [r7, #8]
 8010386:	441a      	add	r2, r3
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801038c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8010390:	b29b      	uxth	r3, r3
 8010392:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010396:	4619      	mov	r1, r3
 8010398:	2036      	movs	r0, #54	; 0x36
 801039a:	f7fa fd5f 	bl	800ae5c <pbuf_alloc>
 801039e:	6338      	str	r0, [r7, #48]	; 0x30
 80103a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d103      	bne.n	80103ae <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80103a6:	6978      	ldr	r0, [r7, #20]
 80103a8:	f7fb f83c 	bl	800b424 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80103ac:	e136      	b.n	801061c <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80103ae:	6979      	ldr	r1, [r7, #20]
 80103b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103b2:	f7fb f905 	bl	800b5c0 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80103b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103b8:	f7fb f8c2 	bl	800b540 <pbuf_clen>
 80103bc:	4603      	mov	r3, r0
 80103be:	461a      	mov	r2, r3
 80103c0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80103c4:	4413      	add	r3, r2
 80103c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80103ca:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80103ce:	2b09      	cmp	r3, #9
 80103d0:	d903      	bls.n	80103da <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80103d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80103d4:	f7fb f826 	bl	800b424 <pbuf_free>
      goto memerr;
 80103d8:	e120      	b.n	801061c <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80103da:	68fb      	ldr	r3, [r7, #12]
 80103dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80103de:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80103e2:	441a      	add	r2, r3
 80103e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103e8:	9300      	str	r3, [sp, #0]
 80103ea:	4613      	mov	r3, r2
 80103ec:	2200      	movs	r2, #0
 80103ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80103f0:	68f8      	ldr	r0, [r7, #12]
 80103f2:	f7ff fc51 	bl	800fc98 <tcp_create_segment>
 80103f6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80103f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	f000 810d 	beq.w	801061a <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8010400:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010402:	2b00      	cmp	r3, #0
 8010404:	d102      	bne.n	801040c <tcp_write+0x450>
      queue = seg;
 8010406:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010408:	647b      	str	r3, [r7, #68]	; 0x44
 801040a:	e00c      	b.n	8010426 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801040c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801040e:	2b00      	cmp	r3, #0
 8010410:	d106      	bne.n	8010420 <tcp_write+0x464>
 8010412:	4b53      	ldr	r3, [pc, #332]	; (8010560 <tcp_write+0x5a4>)
 8010414:	f240 22ab 	movw	r2, #683	; 0x2ab
 8010418:	4955      	ldr	r1, [pc, #340]	; (8010570 <tcp_write+0x5b4>)
 801041a:	4853      	ldr	r0, [pc, #332]	; (8010568 <tcp_write+0x5ac>)
 801041c:	f006 fd28 	bl	8016e70 <iprintf>
      prev_seg->next = seg;
 8010420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010422:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010424:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8010426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010428:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801042a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801042e:	8b3b      	ldrh	r3, [r7, #24]
 8010430:	4413      	add	r3, r2
 8010432:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8010436:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801043a:	88fb      	ldrh	r3, [r7, #6]
 801043c:	429a      	cmp	r2, r3
 801043e:	f4ff af3d 	bcc.w	80102bc <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8010442:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010444:	2b00      	cmp	r3, #0
 8010446:	d02c      	beq.n	80104a2 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8010448:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801044e:	e01e      	b.n	801048e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8010450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010452:	891a      	ldrh	r2, [r3, #8]
 8010454:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010456:	4413      	add	r3, r2
 8010458:	b29a      	uxth	r2, r3
 801045a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801045e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010460:	681b      	ldr	r3, [r3, #0]
 8010462:	2b00      	cmp	r3, #0
 8010464:	d110      	bne.n	8010488 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8010466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010468:	685b      	ldr	r3, [r3, #4]
 801046a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801046c:	8952      	ldrh	r2, [r2, #10]
 801046e:	4413      	add	r3, r2
 8010470:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8010472:	68b9      	ldr	r1, [r7, #8]
 8010474:	4618      	mov	r0, r3
 8010476:	f006 fccb 	bl	8016e10 <memcpy>
        p->len += oversize_used;
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	895a      	ldrh	r2, [r3, #10]
 801047e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010480:	4413      	add	r3, r2
 8010482:	b29a      	uxth	r2, r3
 8010484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010486:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8010488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048a:	681b      	ldr	r3, [r3, #0]
 801048c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801048e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010490:	2b00      	cmp	r3, #0
 8010492:	d1dd      	bne.n	8010450 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8010494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010496:	891a      	ldrh	r2, [r3, #8]
 8010498:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801049a:	4413      	add	r3, r2
 801049c:	b29a      	uxth	r2, r3
 801049e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104a0:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80104a2:	8a7a      	ldrh	r2, [r7, #18]
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80104aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d018      	beq.n	80104e2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80104b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d106      	bne.n	80104c4 <tcp_write+0x508>
 80104b6:	4b2a      	ldr	r3, [pc, #168]	; (8010560 <tcp_write+0x5a4>)
 80104b8:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80104bc:	492d      	ldr	r1, [pc, #180]	; (8010574 <tcp_write+0x5b8>)
 80104be:	482a      	ldr	r0, [pc, #168]	; (8010568 <tcp_write+0x5ac>)
 80104c0:	f006 fcd6 	bl	8016e70 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80104c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104c6:	685b      	ldr	r3, [r3, #4]
 80104c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104ca:	4618      	mov	r0, r3
 80104cc:	f7fb f878 	bl	800b5c0 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80104d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104d2:	891a      	ldrh	r2, [r3, #8]
 80104d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80104d6:	891b      	ldrh	r3, [r3, #8]
 80104d8:	4413      	add	r3, r2
 80104da:	b29a      	uxth	r2, r3
 80104dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104de:	811a      	strh	r2, [r3, #8]
 80104e0:	e037      	b.n	8010552 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80104e2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d034      	beq.n	8010552 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80104e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d003      	beq.n	80104f6 <tcp_write+0x53a>
 80104ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104f0:	685b      	ldr	r3, [r3, #4]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	d106      	bne.n	8010504 <tcp_write+0x548>
 80104f6:	4b1a      	ldr	r3, [pc, #104]	; (8010560 <tcp_write+0x5a4>)
 80104f8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80104fc:	491e      	ldr	r1, [pc, #120]	; (8010578 <tcp_write+0x5bc>)
 80104fe:	481a      	ldr	r0, [pc, #104]	; (8010568 <tcp_write+0x5ac>)
 8010500:	f006 fcb6 	bl	8016e70 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8010504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010506:	685b      	ldr	r3, [r3, #4]
 8010508:	62bb      	str	r3, [r7, #40]	; 0x28
 801050a:	e009      	b.n	8010520 <tcp_write+0x564>
      p->tot_len += extendlen;
 801050c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801050e:	891a      	ldrh	r2, [r3, #8]
 8010510:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8010512:	4413      	add	r3, r2
 8010514:	b29a      	uxth	r2, r3
 8010516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010518:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801051a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051c:	681b      	ldr	r3, [r3, #0]
 801051e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	2b00      	cmp	r3, #0
 8010526:	d1f1      	bne.n	801050c <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8010528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052a:	891a      	ldrh	r2, [r3, #8]
 801052c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801052e:	4413      	add	r3, r2
 8010530:	b29a      	uxth	r2, r3
 8010532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010534:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8010536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010538:	895a      	ldrh	r2, [r3, #10]
 801053a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801053c:	4413      	add	r3, r2
 801053e:	b29a      	uxth	r2, r3
 8010540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010542:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8010544:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010546:	891a      	ldrh	r2, [r3, #8]
 8010548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801054a:	4413      	add	r3, r2
 801054c:	b29a      	uxth	r2, r3
 801054e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010550:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8010552:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010554:	2b00      	cmp	r3, #0
 8010556:	d111      	bne.n	801057c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801055c:	66da      	str	r2, [r3, #108]	; 0x6c
 801055e:	e010      	b.n	8010582 <tcp_write+0x5c6>
 8010560:	0801a594 	.word	0x0801a594
 8010564:	0801a834 	.word	0x0801a834
 8010568:	0801a5e8 	.word	0x0801a5e8
 801056c:	0801a874 	.word	0x0801a874
 8010570:	0801a884 	.word	0x0801a884
 8010574:	0801a898 	.word	0x0801a898
 8010578:	0801a8d0 	.word	0x0801a8d0
  } else {
    last_unsent->next = queue;
 801057c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010580:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010586:	88fb      	ldrh	r3, [r7, #6]
 8010588:	441a      	add	r2, r3
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010594:	88fb      	ldrh	r3, [r7, #6]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	b29a      	uxth	r2, r3
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80105a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105aa:	68fb      	ldr	r3, [r7, #12]
 80105ac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	d00e      	beq.n	80105d2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10a      	bne.n	80105d2 <tcp_write+0x616>
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d106      	bne.n	80105d2 <tcp_write+0x616>
 80105c4:	4b2c      	ldr	r3, [pc, #176]	; (8010678 <tcp_write+0x6bc>)
 80105c6:	f240 3212 	movw	r2, #786	; 0x312
 80105ca:	492c      	ldr	r1, [pc, #176]	; (801067c <tcp_write+0x6c0>)
 80105cc:	482c      	ldr	r0, [pc, #176]	; (8010680 <tcp_write+0x6c4>)
 80105ce:	f006 fc4f 	bl	8016e70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80105d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d016      	beq.n	8010606 <tcp_write+0x64a>
 80105d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105da:	68db      	ldr	r3, [r3, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d012      	beq.n	8010606 <tcp_write+0x64a>
 80105e0:	797b      	ldrb	r3, [r7, #5]
 80105e2:	f003 0302 	and.w	r3, r3, #2
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d10d      	bne.n	8010606 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80105ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105ec:	68db      	ldr	r3, [r3, #12]
 80105ee:	899b      	ldrh	r3, [r3, #12]
 80105f0:	b29c      	uxth	r4, r3
 80105f2:	2008      	movs	r0, #8
 80105f4:	f7f9 fb5e 	bl	8009cb4 <lwip_htons>
 80105f8:	4603      	mov	r3, r0
 80105fa:	461a      	mov	r2, r3
 80105fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105fe:	68db      	ldr	r3, [r3, #12]
 8010600:	4322      	orrs	r2, r4
 8010602:	b292      	uxth	r2, r2
 8010604:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8010606:	2300      	movs	r3, #0
 8010608:	e031      	b.n	801066e <tcp_write+0x6b2>
          goto memerr;
 801060a:	bf00      	nop
 801060c:	e006      	b.n	801061c <tcp_write+0x660>
            goto memerr;
 801060e:	bf00      	nop
 8010610:	e004      	b.n	801061c <tcp_write+0x660>
        goto memerr;
 8010612:	bf00      	nop
 8010614:	e002      	b.n	801061c <tcp_write+0x660>
        goto memerr;
 8010616:	bf00      	nop
 8010618:	e000      	b.n	801061c <tcp_write+0x660>
      goto memerr;
 801061a:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	8b5b      	ldrh	r3, [r3, #26]
 8010620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010624:	b29a      	uxth	r2, r3
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801062a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801062c:	2b00      	cmp	r3, #0
 801062e:	d002      	beq.n	8010636 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8010630:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010632:	f7fa fef7 	bl	800b424 <pbuf_free>
  }
  if (queue != NULL) {
 8010636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010638:	2b00      	cmp	r3, #0
 801063a:	d002      	beq.n	8010642 <tcp_write+0x686>
    tcp_segs_free(queue);
 801063c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801063e:	f7fc fb6f 	bl	800cd20 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010648:	2b00      	cmp	r3, #0
 801064a:	d00e      	beq.n	801066a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010650:	2b00      	cmp	r3, #0
 8010652:	d10a      	bne.n	801066a <tcp_write+0x6ae>
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010658:	2b00      	cmp	r3, #0
 801065a:	d106      	bne.n	801066a <tcp_write+0x6ae>
 801065c:	4b06      	ldr	r3, [pc, #24]	; (8010678 <tcp_write+0x6bc>)
 801065e:	f240 3227 	movw	r2, #807	; 0x327
 8010662:	4906      	ldr	r1, [pc, #24]	; (801067c <tcp_write+0x6c0>)
 8010664:	4806      	ldr	r0, [pc, #24]	; (8010680 <tcp_write+0x6c4>)
 8010666:	f006 fc03 	bl	8016e70 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801066a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801066e:	4618      	mov	r0, r3
 8010670:	375c      	adds	r7, #92	; 0x5c
 8010672:	46bd      	mov	sp, r7
 8010674:	bd90      	pop	{r4, r7, pc}
 8010676:	bf00      	nop
 8010678:	0801a594 	.word	0x0801a594
 801067c:	0801a908 	.word	0x0801a908
 8010680:	0801a5e8 	.word	0x0801a5e8

08010684 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8010684:	b590      	push	{r4, r7, lr}
 8010686:	b08b      	sub	sp, #44	; 0x2c
 8010688:	af02      	add	r7, sp, #8
 801068a:	6078      	str	r0, [r7, #4]
 801068c:	460b      	mov	r3, r1
 801068e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010690:	2300      	movs	r3, #0
 8010692:	61fb      	str	r3, [r7, #28]
 8010694:	2300      	movs	r3, #0
 8010696:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8010698:	2300      	movs	r3, #0
 801069a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d106      	bne.n	80106b0 <tcp_split_unsent_seg+0x2c>
 80106a2:	4b95      	ldr	r3, [pc, #596]	; (80108f8 <tcp_split_unsent_seg+0x274>)
 80106a4:	f240 324b 	movw	r2, #843	; 0x34b
 80106a8:	4994      	ldr	r1, [pc, #592]	; (80108fc <tcp_split_unsent_seg+0x278>)
 80106aa:	4895      	ldr	r0, [pc, #596]	; (8010900 <tcp_split_unsent_seg+0x27c>)
 80106ac:	f006 fbe0 	bl	8016e70 <iprintf>

  useg = pcb->unsent;
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106b4:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d102      	bne.n	80106c2 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80106bc:	f04f 33ff 	mov.w	r3, #4294967295
 80106c0:	e116      	b.n	80108f0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80106c2:	887b      	ldrh	r3, [r7, #2]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d109      	bne.n	80106dc <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80106c8:	4b8b      	ldr	r3, [pc, #556]	; (80108f8 <tcp_split_unsent_seg+0x274>)
 80106ca:	f240 3253 	movw	r2, #851	; 0x353
 80106ce:	498d      	ldr	r1, [pc, #564]	; (8010904 <tcp_split_unsent_seg+0x280>)
 80106d0:	488b      	ldr	r0, [pc, #556]	; (8010900 <tcp_split_unsent_seg+0x27c>)
 80106d2:	f006 fbcd 	bl	8016e70 <iprintf>
    return ERR_VAL;
 80106d6:	f06f 0305 	mvn.w	r3, #5
 80106da:	e109      	b.n	80108f0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80106dc:	697b      	ldr	r3, [r7, #20]
 80106de:	891b      	ldrh	r3, [r3, #8]
 80106e0:	887a      	ldrh	r2, [r7, #2]
 80106e2:	429a      	cmp	r2, r3
 80106e4:	d301      	bcc.n	80106ea <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80106e6:	2300      	movs	r3, #0
 80106e8:	e102      	b.n	80108f0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ee:	887a      	ldrh	r2, [r7, #2]
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d906      	bls.n	8010702 <tcp_split_unsent_seg+0x7e>
 80106f4:	4b80      	ldr	r3, [pc, #512]	; (80108f8 <tcp_split_unsent_seg+0x274>)
 80106f6:	f240 325b 	movw	r2, #859	; 0x35b
 80106fa:	4983      	ldr	r1, [pc, #524]	; (8010908 <tcp_split_unsent_seg+0x284>)
 80106fc:	4880      	ldr	r0, [pc, #512]	; (8010900 <tcp_split_unsent_seg+0x27c>)
 80106fe:	f006 fbb7 	bl	8016e70 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010702:	697b      	ldr	r3, [r7, #20]
 8010704:	891b      	ldrh	r3, [r3, #8]
 8010706:	2b00      	cmp	r3, #0
 8010708:	d106      	bne.n	8010718 <tcp_split_unsent_seg+0x94>
 801070a:	4b7b      	ldr	r3, [pc, #492]	; (80108f8 <tcp_split_unsent_seg+0x274>)
 801070c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010710:	497e      	ldr	r1, [pc, #504]	; (801090c <tcp_split_unsent_seg+0x288>)
 8010712:	487b      	ldr	r0, [pc, #492]	; (8010900 <tcp_split_unsent_seg+0x27c>)
 8010714:	f006 fbac 	bl	8016e70 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	7a9b      	ldrb	r3, [r3, #10]
 801071c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801071e:	7bfb      	ldrb	r3, [r7, #15]
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	b2db      	uxtb	r3, r3
 8010724:	f003 0304 	and.w	r3, r3, #4
 8010728:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801072a:	697b      	ldr	r3, [r7, #20]
 801072c:	891a      	ldrh	r2, [r3, #8]
 801072e:	887b      	ldrh	r3, [r7, #2]
 8010730:	1ad3      	subs	r3, r2, r3
 8010732:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010734:	7bbb      	ldrb	r3, [r7, #14]
 8010736:	b29a      	uxth	r2, r3
 8010738:	89bb      	ldrh	r3, [r7, #12]
 801073a:	4413      	add	r3, r2
 801073c:	b29b      	uxth	r3, r3
 801073e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010742:	4619      	mov	r1, r3
 8010744:	2036      	movs	r0, #54	; 0x36
 8010746:	f7fa fb89 	bl	800ae5c <pbuf_alloc>
 801074a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	2b00      	cmp	r3, #0
 8010750:	f000 80b7 	beq.w	80108c2 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010754:	697b      	ldr	r3, [r7, #20]
 8010756:	685b      	ldr	r3, [r3, #4]
 8010758:	891a      	ldrh	r2, [r3, #8]
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	891b      	ldrh	r3, [r3, #8]
 801075e:	1ad3      	subs	r3, r2, r3
 8010760:	b29a      	uxth	r2, r3
 8010762:	887b      	ldrh	r3, [r7, #2]
 8010764:	4413      	add	r3, r2
 8010766:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	6858      	ldr	r0, [r3, #4]
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	685a      	ldr	r2, [r3, #4]
 8010770:	7bbb      	ldrb	r3, [r7, #14]
 8010772:	18d1      	adds	r1, r2, r3
 8010774:	897b      	ldrh	r3, [r7, #10]
 8010776:	89ba      	ldrh	r2, [r7, #12]
 8010778:	f7fb f85a 	bl	800b830 <pbuf_copy_partial>
 801077c:	4603      	mov	r3, r0
 801077e:	461a      	mov	r2, r3
 8010780:	89bb      	ldrh	r3, [r7, #12]
 8010782:	4293      	cmp	r3, r2
 8010784:	f040 809f 	bne.w	80108c6 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010788:	697b      	ldr	r3, [r7, #20]
 801078a:	68db      	ldr	r3, [r3, #12]
 801078c:	899b      	ldrh	r3, [r3, #12]
 801078e:	b29b      	uxth	r3, r3
 8010790:	4618      	mov	r0, r3
 8010792:	f7f9 fa8f 	bl	8009cb4 <lwip_htons>
 8010796:	4603      	mov	r3, r0
 8010798:	b2db      	uxtb	r3, r3
 801079a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801079e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80107a0:	2300      	movs	r3, #0
 80107a2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80107a4:	7efb      	ldrb	r3, [r7, #27]
 80107a6:	f003 0308 	and.w	r3, r3, #8
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d007      	beq.n	80107be <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80107ae:	7efb      	ldrb	r3, [r7, #27]
 80107b0:	f023 0308 	bic.w	r3, r3, #8
 80107b4:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80107b6:	7ebb      	ldrb	r3, [r7, #26]
 80107b8:	f043 0308 	orr.w	r3, r3, #8
 80107bc:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80107be:	7efb      	ldrb	r3, [r7, #27]
 80107c0:	f003 0301 	and.w	r3, r3, #1
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d007      	beq.n	80107d8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80107c8:	7efb      	ldrb	r3, [r7, #27]
 80107ca:	f023 0301 	bic.w	r3, r3, #1
 80107ce:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80107d0:	7ebb      	ldrb	r3, [r7, #26]
 80107d2:	f043 0301 	orr.w	r3, r3, #1
 80107d6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80107d8:	697b      	ldr	r3, [r7, #20]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	685b      	ldr	r3, [r3, #4]
 80107de:	4618      	mov	r0, r3
 80107e0:	f7f9 fa7d 	bl	8009cde <lwip_htonl>
 80107e4:	4602      	mov	r2, r0
 80107e6:	887b      	ldrh	r3, [r7, #2]
 80107e8:	18d1      	adds	r1, r2, r3
 80107ea:	7eba      	ldrb	r2, [r7, #26]
 80107ec:	7bfb      	ldrb	r3, [r7, #15]
 80107ee:	9300      	str	r3, [sp, #0]
 80107f0:	460b      	mov	r3, r1
 80107f2:	6939      	ldr	r1, [r7, #16]
 80107f4:	6878      	ldr	r0, [r7, #4]
 80107f6:	f7ff fa4f 	bl	800fc98 <tcp_create_segment>
 80107fa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80107fc:	69fb      	ldr	r3, [r7, #28]
 80107fe:	2b00      	cmp	r3, #0
 8010800:	d063      	beq.n	80108ca <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010802:	697b      	ldr	r3, [r7, #20]
 8010804:	685b      	ldr	r3, [r3, #4]
 8010806:	4618      	mov	r0, r3
 8010808:	f7fa fe9a 	bl	800b540 <pbuf_clen>
 801080c:	4603      	mov	r3, r0
 801080e:	461a      	mov	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010816:	1a9b      	subs	r3, r3, r2
 8010818:	b29a      	uxth	r2, r3
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010820:	697b      	ldr	r3, [r7, #20]
 8010822:	6858      	ldr	r0, [r3, #4]
 8010824:	697b      	ldr	r3, [r7, #20]
 8010826:	685b      	ldr	r3, [r3, #4]
 8010828:	891a      	ldrh	r2, [r3, #8]
 801082a:	89bb      	ldrh	r3, [r7, #12]
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	b29b      	uxth	r3, r3
 8010830:	4619      	mov	r1, r3
 8010832:	f7fa fc71 	bl	800b118 <pbuf_realloc>
  useg->len -= remainder;
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	891a      	ldrh	r2, [r3, #8]
 801083a:	89bb      	ldrh	r3, [r7, #12]
 801083c:	1ad3      	subs	r3, r2, r3
 801083e:	b29a      	uxth	r2, r3
 8010840:	697b      	ldr	r3, [r7, #20]
 8010842:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010844:	697b      	ldr	r3, [r7, #20]
 8010846:	68db      	ldr	r3, [r3, #12]
 8010848:	899b      	ldrh	r3, [r3, #12]
 801084a:	b29c      	uxth	r4, r3
 801084c:	7efb      	ldrb	r3, [r7, #27]
 801084e:	b29b      	uxth	r3, r3
 8010850:	4618      	mov	r0, r3
 8010852:	f7f9 fa2f 	bl	8009cb4 <lwip_htons>
 8010856:	4603      	mov	r3, r0
 8010858:	461a      	mov	r2, r3
 801085a:	697b      	ldr	r3, [r7, #20]
 801085c:	68db      	ldr	r3, [r3, #12]
 801085e:	4322      	orrs	r2, r4
 8010860:	b292      	uxth	r2, r2
 8010862:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010864:	697b      	ldr	r3, [r7, #20]
 8010866:	685b      	ldr	r3, [r3, #4]
 8010868:	4618      	mov	r0, r3
 801086a:	f7fa fe69 	bl	800b540 <pbuf_clen>
 801086e:	4603      	mov	r3, r0
 8010870:	461a      	mov	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010878:	4413      	add	r3, r2
 801087a:	b29a      	uxth	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010882:	69fb      	ldr	r3, [r7, #28]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	4618      	mov	r0, r3
 8010888:	f7fa fe5a 	bl	800b540 <pbuf_clen>
 801088c:	4603      	mov	r3, r0
 801088e:	461a      	mov	r2, r3
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010896:	4413      	add	r3, r2
 8010898:	b29a      	uxth	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	681a      	ldr	r2, [r3, #0]
 80108a4:	69fb      	ldr	r3, [r7, #28]
 80108a6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80108a8:	697b      	ldr	r3, [r7, #20]
 80108aa:	69fa      	ldr	r2, [r7, #28]
 80108ac:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80108ae:	69fb      	ldr	r3, [r7, #28]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d103      	bne.n	80108be <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	2200      	movs	r2, #0
 80108ba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80108be:	2300      	movs	r3, #0
 80108c0:	e016      	b.n	80108f0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80108c2:	bf00      	nop
 80108c4:	e002      	b.n	80108cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108c6:	bf00      	nop
 80108c8:	e000      	b.n	80108cc <tcp_split_unsent_seg+0x248>
    goto memerr;
 80108ca:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80108cc:	69fb      	ldr	r3, [r7, #28]
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	d006      	beq.n	80108e0 <tcp_split_unsent_seg+0x25c>
 80108d2:	4b09      	ldr	r3, [pc, #36]	; (80108f8 <tcp_split_unsent_seg+0x274>)
 80108d4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80108d8:	490d      	ldr	r1, [pc, #52]	; (8010910 <tcp_split_unsent_seg+0x28c>)
 80108da:	4809      	ldr	r0, [pc, #36]	; (8010900 <tcp_split_unsent_seg+0x27c>)
 80108dc:	f006 fac8 	bl	8016e70 <iprintf>
  if (p != NULL) {
 80108e0:	693b      	ldr	r3, [r7, #16]
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d002      	beq.n	80108ec <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80108e6:	6938      	ldr	r0, [r7, #16]
 80108e8:	f7fa fd9c 	bl	800b424 <pbuf_free>
  }

  return ERR_MEM;
 80108ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80108f0:	4618      	mov	r0, r3
 80108f2:	3724      	adds	r7, #36	; 0x24
 80108f4:	46bd      	mov	sp, r7
 80108f6:	bd90      	pop	{r4, r7, pc}
 80108f8:	0801a594 	.word	0x0801a594
 80108fc:	0801a928 	.word	0x0801a928
 8010900:	0801a5e8 	.word	0x0801a5e8
 8010904:	0801a94c 	.word	0x0801a94c
 8010908:	0801a970 	.word	0x0801a970
 801090c:	0801a980 	.word	0x0801a980
 8010910:	0801a990 	.word	0x0801a990

08010914 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010914:	b590      	push	{r4, r7, lr}
 8010916:	b085      	sub	sp, #20
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d106      	bne.n	8010930 <tcp_send_fin+0x1c>
 8010922:	4b21      	ldr	r3, [pc, #132]	; (80109a8 <tcp_send_fin+0x94>)
 8010924:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010928:	4920      	ldr	r1, [pc, #128]	; (80109ac <tcp_send_fin+0x98>)
 801092a:	4821      	ldr	r0, [pc, #132]	; (80109b0 <tcp_send_fin+0x9c>)
 801092c:	f006 faa0 	bl	8016e70 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010934:	2b00      	cmp	r3, #0
 8010936:	d02e      	beq.n	8010996 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801093c:	60fb      	str	r3, [r7, #12]
 801093e:	e002      	b.n	8010946 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010940:	68fb      	ldr	r3, [r7, #12]
 8010942:	681b      	ldr	r3, [r3, #0]
 8010944:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010946:	68fb      	ldr	r3, [r7, #12]
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1f8      	bne.n	8010940 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	68db      	ldr	r3, [r3, #12]
 8010952:	899b      	ldrh	r3, [r3, #12]
 8010954:	b29b      	uxth	r3, r3
 8010956:	4618      	mov	r0, r3
 8010958:	f7f9 f9ac 	bl	8009cb4 <lwip_htons>
 801095c:	4603      	mov	r3, r0
 801095e:	b2db      	uxtb	r3, r3
 8010960:	f003 0307 	and.w	r3, r3, #7
 8010964:	2b00      	cmp	r3, #0
 8010966:	d116      	bne.n	8010996 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010968:	68fb      	ldr	r3, [r7, #12]
 801096a:	68db      	ldr	r3, [r3, #12]
 801096c:	899b      	ldrh	r3, [r3, #12]
 801096e:	b29c      	uxth	r4, r3
 8010970:	2001      	movs	r0, #1
 8010972:	f7f9 f99f 	bl	8009cb4 <lwip_htons>
 8010976:	4603      	mov	r3, r0
 8010978:	461a      	mov	r2, r3
 801097a:	68fb      	ldr	r3, [r7, #12]
 801097c:	68db      	ldr	r3, [r3, #12]
 801097e:	4322      	orrs	r2, r4
 8010980:	b292      	uxth	r2, r2
 8010982:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	8b5b      	ldrh	r3, [r3, #26]
 8010988:	f043 0320 	orr.w	r3, r3, #32
 801098c:	b29a      	uxth	r2, r3
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010992:	2300      	movs	r3, #0
 8010994:	e004      	b.n	80109a0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010996:	2101      	movs	r1, #1
 8010998:	6878      	ldr	r0, [r7, #4]
 801099a:	f000 f80b 	bl	80109b4 <tcp_enqueue_flags>
 801099e:	4603      	mov	r3, r0
}
 80109a0:	4618      	mov	r0, r3
 80109a2:	3714      	adds	r7, #20
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd90      	pop	{r4, r7, pc}
 80109a8:	0801a594 	.word	0x0801a594
 80109ac:	0801a99c 	.word	0x0801a99c
 80109b0:	0801a5e8 	.word	0x0801a5e8

080109b4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80109b4:	b580      	push	{r7, lr}
 80109b6:	b08a      	sub	sp, #40	; 0x28
 80109b8:	af02      	add	r7, sp, #8
 80109ba:	6078      	str	r0, [r7, #4]
 80109bc:	460b      	mov	r3, r1
 80109be:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80109c0:	2300      	movs	r3, #0
 80109c2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80109c4:	2300      	movs	r3, #0
 80109c6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80109c8:	78fb      	ldrb	r3, [r7, #3]
 80109ca:	f003 0303 	and.w	r3, r3, #3
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d106      	bne.n	80109e0 <tcp_enqueue_flags+0x2c>
 80109d2:	4b67      	ldr	r3, [pc, #412]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 80109d4:	f240 4211 	movw	r2, #1041	; 0x411
 80109d8:	4966      	ldr	r1, [pc, #408]	; (8010b74 <tcp_enqueue_flags+0x1c0>)
 80109da:	4867      	ldr	r0, [pc, #412]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 80109dc:	f006 fa48 	bl	8016e70 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d106      	bne.n	80109f4 <tcp_enqueue_flags+0x40>
 80109e6:	4b62      	ldr	r3, [pc, #392]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 80109e8:	f240 4213 	movw	r2, #1043	; 0x413
 80109ec:	4963      	ldr	r1, [pc, #396]	; (8010b7c <tcp_enqueue_flags+0x1c8>)
 80109ee:	4862      	ldr	r0, [pc, #392]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 80109f0:	f006 fa3e 	bl	8016e70 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80109f4:	78fb      	ldrb	r3, [r7, #3]
 80109f6:	f003 0302 	and.w	r3, r3, #2
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d001      	beq.n	8010a02 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80109fe:	2301      	movs	r3, #1
 8010a00:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a02:	7ffb      	ldrb	r3, [r7, #31]
 8010a04:	009b      	lsls	r3, r3, #2
 8010a06:	b2db      	uxtb	r3, r3
 8010a08:	f003 0304 	and.w	r3, r3, #4
 8010a0c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010a0e:	7dfb      	ldrb	r3, [r7, #23]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010a16:	4619      	mov	r1, r3
 8010a18:	2036      	movs	r0, #54	; 0x36
 8010a1a:	f7fa fa1f 	bl	800ae5c <pbuf_alloc>
 8010a1e:	6138      	str	r0, [r7, #16]
 8010a20:	693b      	ldr	r3, [r7, #16]
 8010a22:	2b00      	cmp	r3, #0
 8010a24:	d109      	bne.n	8010a3a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	8b5b      	ldrh	r3, [r3, #26]
 8010a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a34:	f04f 33ff 	mov.w	r3, #4294967295
 8010a38:	e095      	b.n	8010b66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010a3a:	693b      	ldr	r3, [r7, #16]
 8010a3c:	895a      	ldrh	r2, [r3, #10]
 8010a3e:	7dfb      	ldrb	r3, [r7, #23]
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	429a      	cmp	r2, r3
 8010a44:	d206      	bcs.n	8010a54 <tcp_enqueue_flags+0xa0>
 8010a46:	4b4a      	ldr	r3, [pc, #296]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 8010a48:	f240 4239 	movw	r2, #1081	; 0x439
 8010a4c:	494c      	ldr	r1, [pc, #304]	; (8010b80 <tcp_enqueue_flags+0x1cc>)
 8010a4e:	484a      	ldr	r0, [pc, #296]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 8010a50:	f006 fa0e 	bl	8016e70 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010a58:	78fa      	ldrb	r2, [r7, #3]
 8010a5a:	7ffb      	ldrb	r3, [r7, #31]
 8010a5c:	9300      	str	r3, [sp, #0]
 8010a5e:	460b      	mov	r3, r1
 8010a60:	6939      	ldr	r1, [r7, #16]
 8010a62:	6878      	ldr	r0, [r7, #4]
 8010a64:	f7ff f918 	bl	800fc98 <tcp_create_segment>
 8010a68:	60f8      	str	r0, [r7, #12]
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d109      	bne.n	8010a84 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	8b5b      	ldrh	r3, [r3, #26]
 8010a74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010a78:	b29a      	uxth	r2, r3
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8010a82:	e070      	b.n	8010b66 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	68db      	ldr	r3, [r3, #12]
 8010a88:	f003 0303 	and.w	r3, r3, #3
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d006      	beq.n	8010a9e <tcp_enqueue_flags+0xea>
 8010a90:	4b37      	ldr	r3, [pc, #220]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 8010a92:	f240 4242 	movw	r2, #1090	; 0x442
 8010a96:	493b      	ldr	r1, [pc, #236]	; (8010b84 <tcp_enqueue_flags+0x1d0>)
 8010a98:	4837      	ldr	r0, [pc, #220]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 8010a9a:	f006 f9e9 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	891b      	ldrh	r3, [r3, #8]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d006      	beq.n	8010ab4 <tcp_enqueue_flags+0x100>
 8010aa6:	4b32      	ldr	r3, [pc, #200]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 8010aa8:	f240 4243 	movw	r2, #1091	; 0x443
 8010aac:	4936      	ldr	r1, [pc, #216]	; (8010b88 <tcp_enqueue_flags+0x1d4>)
 8010aae:	4832      	ldr	r0, [pc, #200]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 8010ab0:	f006 f9de 	bl	8016e70 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	d103      	bne.n	8010ac4 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	68fa      	ldr	r2, [r7, #12]
 8010ac0:	66da      	str	r2, [r3, #108]	; 0x6c
 8010ac2:	e00d      	b.n	8010ae0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ac8:	61bb      	str	r3, [r7, #24]
 8010aca:	e002      	b.n	8010ad2 <tcp_enqueue_flags+0x11e>
 8010acc:	69bb      	ldr	r3, [r7, #24]
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	61bb      	str	r3, [r7, #24]
 8010ad2:	69bb      	ldr	r3, [r7, #24]
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d1f8      	bne.n	8010acc <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010ada:	69bb      	ldr	r3, [r7, #24]
 8010adc:	68fa      	ldr	r2, [r7, #12]
 8010ade:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010ae0:	687b      	ldr	r3, [r7, #4]
 8010ae2:	2200      	movs	r2, #0
 8010ae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010ae8:	78fb      	ldrb	r3, [r7, #3]
 8010aea:	f003 0302 	and.w	r3, r3, #2
 8010aee:	2b00      	cmp	r3, #0
 8010af0:	d104      	bne.n	8010afc <tcp_enqueue_flags+0x148>
 8010af2:	78fb      	ldrb	r3, [r7, #3]
 8010af4:	f003 0301 	and.w	r3, r3, #1
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d004      	beq.n	8010b06 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b00:	1c5a      	adds	r2, r3, #1
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	f003 0301 	and.w	r3, r3, #1
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d006      	beq.n	8010b1e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	8b5b      	ldrh	r3, [r3, #26]
 8010b14:	f043 0320 	orr.w	r3, r3, #32
 8010b18:	b29a      	uxth	r2, r3
 8010b1a:	687b      	ldr	r3, [r7, #4]
 8010b1c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7fa fd0c 	bl	800b540 <pbuf_clen>
 8010b28:	4603      	mov	r3, r0
 8010b2a:	461a      	mov	r2, r3
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b32:	4413      	add	r3, r2
 8010b34:	b29a      	uxth	r2, r3
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00e      	beq.n	8010b64 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d10a      	bne.n	8010b64 <tcp_enqueue_flags+0x1b0>
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d106      	bne.n	8010b64 <tcp_enqueue_flags+0x1b0>
 8010b56:	4b06      	ldr	r3, [pc, #24]	; (8010b70 <tcp_enqueue_flags+0x1bc>)
 8010b58:	f240 4265 	movw	r2, #1125	; 0x465
 8010b5c:	490b      	ldr	r1, [pc, #44]	; (8010b8c <tcp_enqueue_flags+0x1d8>)
 8010b5e:	4806      	ldr	r0, [pc, #24]	; (8010b78 <tcp_enqueue_flags+0x1c4>)
 8010b60:	f006 f986 	bl	8016e70 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010b64:	2300      	movs	r3, #0
}
 8010b66:	4618      	mov	r0, r3
 8010b68:	3720      	adds	r7, #32
 8010b6a:	46bd      	mov	sp, r7
 8010b6c:	bd80      	pop	{r7, pc}
 8010b6e:	bf00      	nop
 8010b70:	0801a594 	.word	0x0801a594
 8010b74:	0801a9b8 	.word	0x0801a9b8
 8010b78:	0801a5e8 	.word	0x0801a5e8
 8010b7c:	0801aa10 	.word	0x0801aa10
 8010b80:	0801aa30 	.word	0x0801aa30
 8010b84:	0801aa6c 	.word	0x0801aa6c
 8010b88:	0801aa84 	.word	0x0801aa84
 8010b8c:	0801aab0 	.word	0x0801aab0

08010b90 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010b90:	b5b0      	push	{r4, r5, r7, lr}
 8010b92:	b08a      	sub	sp, #40	; 0x28
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d106      	bne.n	8010bac <tcp_output+0x1c>
 8010b9e:	4b9e      	ldr	r3, [pc, #632]	; (8010e18 <tcp_output+0x288>)
 8010ba0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010ba4:	499d      	ldr	r1, [pc, #628]	; (8010e1c <tcp_output+0x28c>)
 8010ba6:	489e      	ldr	r0, [pc, #632]	; (8010e20 <tcp_output+0x290>)
 8010ba8:	f006 f962 	bl	8016e70 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010bac:	687b      	ldr	r3, [r7, #4]
 8010bae:	7d1b      	ldrb	r3, [r3, #20]
 8010bb0:	2b01      	cmp	r3, #1
 8010bb2:	d106      	bne.n	8010bc2 <tcp_output+0x32>
 8010bb4:	4b98      	ldr	r3, [pc, #608]	; (8010e18 <tcp_output+0x288>)
 8010bb6:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010bba:	499a      	ldr	r1, [pc, #616]	; (8010e24 <tcp_output+0x294>)
 8010bbc:	4898      	ldr	r0, [pc, #608]	; (8010e20 <tcp_output+0x290>)
 8010bbe:	f006 f957 	bl	8016e70 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010bc2:	4b99      	ldr	r3, [pc, #612]	; (8010e28 <tcp_output+0x298>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d101      	bne.n	8010bd0 <tcp_output+0x40>
    return ERR_OK;
 8010bcc:	2300      	movs	r3, #0
 8010bce:	e1ce      	b.n	8010f6e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010bdc:	4293      	cmp	r3, r2
 8010bde:	bf28      	it	cs
 8010be0:	4613      	movcs	r3, r2
 8010be2:	b29b      	uxth	r3, r3
 8010be4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bea:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bee:	2b00      	cmp	r3, #0
 8010bf0:	d10b      	bne.n	8010c0a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	8b5b      	ldrh	r3, [r3, #26]
 8010bf6:	f003 0302 	and.w	r3, r3, #2
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	f000 81aa 	beq.w	8010f54 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f000 fdcb 	bl	801179c <tcp_send_empty_ack>
 8010c06:	4603      	mov	r3, r0
 8010c08:	e1b1      	b.n	8010f6e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010c0a:	6879      	ldr	r1, [r7, #4]
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	3304      	adds	r3, #4
 8010c10:	461a      	mov	r2, r3
 8010c12:	6878      	ldr	r0, [r7, #4]
 8010c14:	f7ff f824 	bl	800fc60 <tcp_route>
 8010c18:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010c1a:	697b      	ldr	r3, [r7, #20]
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d102      	bne.n	8010c26 <tcp_output+0x96>
    return ERR_RTE;
 8010c20:	f06f 0303 	mvn.w	r3, #3
 8010c24:	e1a3      	b.n	8010f6e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d003      	beq.n	8010c34 <tcp_output+0xa4>
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d111      	bne.n	8010c58 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010c34:	697b      	ldr	r3, [r7, #20]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d002      	beq.n	8010c40 <tcp_output+0xb0>
 8010c3a:	697b      	ldr	r3, [r7, #20]
 8010c3c:	3304      	adds	r3, #4
 8010c3e:	e000      	b.n	8010c42 <tcp_output+0xb2>
 8010c40:	2300      	movs	r3, #0
 8010c42:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010c44:	693b      	ldr	r3, [r7, #16]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d102      	bne.n	8010c50 <tcp_output+0xc0>
      return ERR_RTE;
 8010c4a:	f06f 0303 	mvn.w	r3, #3
 8010c4e:	e18e      	b.n	8010f6e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	681a      	ldr	r2, [r3, #0]
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	685b      	ldr	r3, [r3, #4]
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7f9 f83d 	bl	8009cde <lwip_htonl>
 8010c64:	4602      	mov	r2, r0
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c6a:	1ad3      	subs	r3, r2, r3
 8010c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010c6e:	8912      	ldrh	r2, [r2, #8]
 8010c70:	4413      	add	r3, r2
 8010c72:	69ba      	ldr	r2, [r7, #24]
 8010c74:	429a      	cmp	r2, r3
 8010c76:	d227      	bcs.n	8010cc8 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010c7e:	461a      	mov	r2, r3
 8010c80:	69bb      	ldr	r3, [r7, #24]
 8010c82:	4293      	cmp	r3, r2
 8010c84:	d114      	bne.n	8010cb0 <tcp_output+0x120>
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d110      	bne.n	8010cb0 <tcp_output+0x120>
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d10b      	bne.n	8010cb0 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	2200      	movs	r2, #0
 8010c9c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2201      	movs	r2, #1
 8010ca4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	2200      	movs	r2, #0
 8010cac:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	8b5b      	ldrh	r3, [r3, #26]
 8010cb4:	f003 0302 	and.w	r3, r3, #2
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	f000 814d 	beq.w	8010f58 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fd6c 	bl	801179c <tcp_send_empty_ack>
 8010cc4:	4603      	mov	r3, r0
 8010cc6:	e152      	b.n	8010f6e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	2200      	movs	r2, #0
 8010ccc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cd4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010cd6:	6a3b      	ldr	r3, [r7, #32]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	f000 811c 	beq.w	8010f16 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010cde:	e002      	b.n	8010ce6 <tcp_output+0x156>
 8010ce0:	6a3b      	ldr	r3, [r7, #32]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	623b      	str	r3, [r7, #32]
 8010ce6:	6a3b      	ldr	r3, [r7, #32]
 8010ce8:	681b      	ldr	r3, [r3, #0]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d1f8      	bne.n	8010ce0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010cee:	e112      	b.n	8010f16 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf2:	68db      	ldr	r3, [r3, #12]
 8010cf4:	899b      	ldrh	r3, [r3, #12]
 8010cf6:	b29b      	uxth	r3, r3
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7f8 ffdb 	bl	8009cb4 <lwip_htons>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	b2db      	uxtb	r3, r3
 8010d02:	f003 0304 	and.w	r3, r3, #4
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d006      	beq.n	8010d18 <tcp_output+0x188>
 8010d0a:	4b43      	ldr	r3, [pc, #268]	; (8010e18 <tcp_output+0x288>)
 8010d0c:	f240 5236 	movw	r2, #1334	; 0x536
 8010d10:	4946      	ldr	r1, [pc, #280]	; (8010e2c <tcp_output+0x29c>)
 8010d12:	4843      	ldr	r0, [pc, #268]	; (8010e20 <tcp_output+0x290>)
 8010d14:	f006 f8ac 	bl	8016e70 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d1c:	2b00      	cmp	r3, #0
 8010d1e:	d01f      	beq.n	8010d60 <tcp_output+0x1d0>
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	8b5b      	ldrh	r3, [r3, #26]
 8010d24:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d119      	bne.n	8010d60 <tcp_output+0x1d0>
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d00b      	beq.n	8010d4c <tcp_output+0x1bc>
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d110      	bne.n	8010d60 <tcp_output+0x1d0>
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d42:	891a      	ldrh	r2, [r3, #8]
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d48:	429a      	cmp	r2, r3
 8010d4a:	d209      	bcs.n	8010d60 <tcp_output+0x1d0>
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d004      	beq.n	8010d60 <tcp_output+0x1d0>
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010d5c:	2b08      	cmp	r3, #8
 8010d5e:	d901      	bls.n	8010d64 <tcp_output+0x1d4>
 8010d60:	2301      	movs	r3, #1
 8010d62:	e000      	b.n	8010d66 <tcp_output+0x1d6>
 8010d64:	2300      	movs	r3, #0
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	8b5b      	ldrh	r3, [r3, #26]
 8010d6e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	f000 80e4 	beq.w	8010f40 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	7d1b      	ldrb	r3, [r3, #20]
 8010d7c:	2b02      	cmp	r3, #2
 8010d7e:	d00d      	beq.n	8010d9c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d82:	68db      	ldr	r3, [r3, #12]
 8010d84:	899b      	ldrh	r3, [r3, #12]
 8010d86:	b29c      	uxth	r4, r3
 8010d88:	2010      	movs	r0, #16
 8010d8a:	f7f8 ff93 	bl	8009cb4 <lwip_htons>
 8010d8e:	4603      	mov	r3, r0
 8010d90:	461a      	mov	r2, r3
 8010d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	4322      	orrs	r2, r4
 8010d98:	b292      	uxth	r2, r2
 8010d9a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010d9c:	697a      	ldr	r2, [r7, #20]
 8010d9e:	6879      	ldr	r1, [r7, #4]
 8010da0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010da2:	f000 f909 	bl	8010fb8 <tcp_output_segment>
 8010da6:	4603      	mov	r3, r0
 8010da8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d009      	beq.n	8010dc6 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	8b5b      	ldrh	r3, [r3, #26]
 8010db6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	835a      	strh	r2, [r3, #26]
      return err;
 8010dc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010dc4:	e0d3      	b.n	8010f6e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc8:	681a      	ldr	r2, [r3, #0]
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	7d1b      	ldrb	r3, [r3, #20]
 8010dd2:	2b02      	cmp	r3, #2
 8010dd4:	d006      	beq.n	8010de4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	8b5b      	ldrh	r3, [r3, #26]
 8010dda:	f023 0303 	bic.w	r3, r3, #3
 8010dde:	b29a      	uxth	r2, r3
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010de6:	68db      	ldr	r3, [r3, #12]
 8010de8:	685b      	ldr	r3, [r3, #4]
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7f8 ff77 	bl	8009cde <lwip_htonl>
 8010df0:	4604      	mov	r4, r0
 8010df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df4:	891b      	ldrh	r3, [r3, #8]
 8010df6:	461d      	mov	r5, r3
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	899b      	ldrh	r3, [r3, #12]
 8010dfe:	b29b      	uxth	r3, r3
 8010e00:	4618      	mov	r0, r3
 8010e02:	f7f8 ff57 	bl	8009cb4 <lwip_htons>
 8010e06:	4603      	mov	r3, r0
 8010e08:	b2db      	uxtb	r3, r3
 8010e0a:	f003 0303 	and.w	r3, r3, #3
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d00e      	beq.n	8010e30 <tcp_output+0x2a0>
 8010e12:	2301      	movs	r3, #1
 8010e14:	e00d      	b.n	8010e32 <tcp_output+0x2a2>
 8010e16:	bf00      	nop
 8010e18:	0801a594 	.word	0x0801a594
 8010e1c:	0801aad8 	.word	0x0801aad8
 8010e20:	0801a5e8 	.word	0x0801a5e8
 8010e24:	0801aaf0 	.word	0x0801aaf0
 8010e28:	2000f050 	.word	0x2000f050
 8010e2c:	0801ab18 	.word	0x0801ab18
 8010e30:	2300      	movs	r3, #0
 8010e32:	442b      	add	r3, r5
 8010e34:	4423      	add	r3, r4
 8010e36:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	1ad3      	subs	r3, r2, r3
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	da02      	bge.n	8010e4a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	68ba      	ldr	r2, [r7, #8]
 8010e48:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e4c:	891b      	ldrh	r3, [r3, #8]
 8010e4e:	461c      	mov	r4, r3
 8010e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e52:	68db      	ldr	r3, [r3, #12]
 8010e54:	899b      	ldrh	r3, [r3, #12]
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f7f8 ff2b 	bl	8009cb4 <lwip_htons>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	b2db      	uxtb	r3, r3
 8010e62:	f003 0303 	and.w	r3, r3, #3
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d001      	beq.n	8010e6e <tcp_output+0x2de>
 8010e6a:	2301      	movs	r3, #1
 8010e6c:	e000      	b.n	8010e70 <tcp_output+0x2e0>
 8010e6e:	2300      	movs	r3, #0
 8010e70:	4423      	add	r3, r4
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d049      	beq.n	8010f0a <tcp_output+0x37a>
      seg->next = NULL;
 8010e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e78:	2200      	movs	r2, #0
 8010e7a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d105      	bne.n	8010e90 <tcp_output+0x300>
        pcb->unacked = seg;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e88:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e8c:	623b      	str	r3, [r7, #32]
 8010e8e:	e03f      	b.n	8010f10 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e92:	68db      	ldr	r3, [r3, #12]
 8010e94:	685b      	ldr	r3, [r3, #4]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7f8 ff21 	bl	8009cde <lwip_htonl>
 8010e9c:	4604      	mov	r4, r0
 8010e9e:	6a3b      	ldr	r3, [r7, #32]
 8010ea0:	68db      	ldr	r3, [r3, #12]
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7f8 ff1a 	bl	8009cde <lwip_htonl>
 8010eaa:	4603      	mov	r3, r0
 8010eac:	1ae3      	subs	r3, r4, r3
 8010eae:	2b00      	cmp	r3, #0
 8010eb0:	da24      	bge.n	8010efc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010eb2:	687b      	ldr	r3, [r7, #4]
 8010eb4:	3370      	adds	r3, #112	; 0x70
 8010eb6:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010eb8:	e002      	b.n	8010ec0 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010eba:	69fb      	ldr	r3, [r7, #28]
 8010ebc:	681b      	ldr	r3, [r3, #0]
 8010ebe:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010ec0:	69fb      	ldr	r3, [r7, #28]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d011      	beq.n	8010eec <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010ec8:	69fb      	ldr	r3, [r7, #28]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	68db      	ldr	r3, [r3, #12]
 8010ece:	685b      	ldr	r3, [r3, #4]
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	f7f8 ff04 	bl	8009cde <lwip_htonl>
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eda:	68db      	ldr	r3, [r3, #12]
 8010edc:	685b      	ldr	r3, [r3, #4]
 8010ede:	4618      	mov	r0, r3
 8010ee0:	f7f8 fefd 	bl	8009cde <lwip_htonl>
 8010ee4:	4603      	mov	r3, r0
 8010ee6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	dbe6      	blt.n	8010eba <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010eec:	69fb      	ldr	r3, [r7, #28]
 8010eee:	681a      	ldr	r2, [r3, #0]
 8010ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ef2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010ef4:	69fb      	ldr	r3, [r7, #28]
 8010ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ef8:	601a      	str	r2, [r3, #0]
 8010efa:	e009      	b.n	8010f10 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010efc:	6a3b      	ldr	r3, [r7, #32]
 8010efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f00:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010f02:	6a3b      	ldr	r3, [r7, #32]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	623b      	str	r3, [r7, #32]
 8010f08:	e002      	b.n	8010f10 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8010f0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f0c:	f7fb ff1d 	bl	800cd4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f14:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8010f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d012      	beq.n	8010f42 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f1e:	68db      	ldr	r3, [r3, #12]
 8010f20:	685b      	ldr	r3, [r3, #4]
 8010f22:	4618      	mov	r0, r3
 8010f24:	f7f8 fedb 	bl	8009cde <lwip_htonl>
 8010f28:	4602      	mov	r2, r0
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f2e:	1ad3      	subs	r3, r2, r3
 8010f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010f32:	8912      	ldrh	r2, [r2, #8]
 8010f34:	4413      	add	r3, r2
  while (seg != NULL &&
 8010f36:	69ba      	ldr	r2, [r7, #24]
 8010f38:	429a      	cmp	r2, r3
 8010f3a:	f4bf aed9 	bcs.w	8010cf0 <tcp_output+0x160>
 8010f3e:	e000      	b.n	8010f42 <tcp_output+0x3b2>
      break;
 8010f40:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010f42:	687b      	ldr	r3, [r7, #4]
 8010f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d108      	bne.n	8010f5c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010f52:	e004      	b.n	8010f5e <tcp_output+0x3ce>
    goto output_done;
 8010f54:	bf00      	nop
 8010f56:	e002      	b.n	8010f5e <tcp_output+0x3ce>
    goto output_done;
 8010f58:	bf00      	nop
 8010f5a:	e000      	b.n	8010f5e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010f5c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	8b5b      	ldrh	r3, [r3, #26]
 8010f62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f66:	b29a      	uxth	r2, r3
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010f6c:	2300      	movs	r3, #0
}
 8010f6e:	4618      	mov	r0, r3
 8010f70:	3728      	adds	r7, #40	; 0x28
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bdb0      	pop	{r4, r5, r7, pc}
 8010f76:	bf00      	nop

08010f78 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010f78:	b580      	push	{r7, lr}
 8010f7a:	b082      	sub	sp, #8
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d106      	bne.n	8010f94 <tcp_output_segment_busy+0x1c>
 8010f86:	4b09      	ldr	r3, [pc, #36]	; (8010fac <tcp_output_segment_busy+0x34>)
 8010f88:	f240 529a 	movw	r2, #1434	; 0x59a
 8010f8c:	4908      	ldr	r1, [pc, #32]	; (8010fb0 <tcp_output_segment_busy+0x38>)
 8010f8e:	4809      	ldr	r0, [pc, #36]	; (8010fb4 <tcp_output_segment_busy+0x3c>)
 8010f90:	f005 ff6e 	bl	8016e70 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	685b      	ldr	r3, [r3, #4]
 8010f98:	7b9b      	ldrb	r3, [r3, #14]
 8010f9a:	2b01      	cmp	r3, #1
 8010f9c:	d001      	beq.n	8010fa2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010f9e:	2301      	movs	r3, #1
 8010fa0:	e000      	b.n	8010fa4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010fa2:	2300      	movs	r3, #0
}
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	3708      	adds	r7, #8
 8010fa8:	46bd      	mov	sp, r7
 8010faa:	bd80      	pop	{r7, pc}
 8010fac:	0801a594 	.word	0x0801a594
 8010fb0:	0801ab30 	.word	0x0801ab30
 8010fb4:	0801a5e8 	.word	0x0801a5e8

08010fb8 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010fb8:	b5b0      	push	{r4, r5, r7, lr}
 8010fba:	b08c      	sub	sp, #48	; 0x30
 8010fbc:	af04      	add	r7, sp, #16
 8010fbe:	60f8      	str	r0, [r7, #12]
 8010fc0:	60b9      	str	r1, [r7, #8]
 8010fc2:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	2b00      	cmp	r3, #0
 8010fc8:	d106      	bne.n	8010fd8 <tcp_output_segment+0x20>
 8010fca:	4b63      	ldr	r3, [pc, #396]	; (8011158 <tcp_output_segment+0x1a0>)
 8010fcc:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010fd0:	4962      	ldr	r1, [pc, #392]	; (801115c <tcp_output_segment+0x1a4>)
 8010fd2:	4863      	ldr	r0, [pc, #396]	; (8011160 <tcp_output_segment+0x1a8>)
 8010fd4:	f005 ff4c 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010fd8:	68bb      	ldr	r3, [r7, #8]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d106      	bne.n	8010fec <tcp_output_segment+0x34>
 8010fde:	4b5e      	ldr	r3, [pc, #376]	; (8011158 <tcp_output_segment+0x1a0>)
 8010fe0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010fe4:	495f      	ldr	r1, [pc, #380]	; (8011164 <tcp_output_segment+0x1ac>)
 8010fe6:	485e      	ldr	r0, [pc, #376]	; (8011160 <tcp_output_segment+0x1a8>)
 8010fe8:	f005 ff42 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d106      	bne.n	8011000 <tcp_output_segment+0x48>
 8010ff2:	4b59      	ldr	r3, [pc, #356]	; (8011158 <tcp_output_segment+0x1a0>)
 8010ff4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010ff8:	495b      	ldr	r1, [pc, #364]	; (8011168 <tcp_output_segment+0x1b0>)
 8010ffa:	4859      	ldr	r0, [pc, #356]	; (8011160 <tcp_output_segment+0x1a8>)
 8010ffc:	f005 ff38 	bl	8016e70 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011000:	68f8      	ldr	r0, [r7, #12]
 8011002:	f7ff ffb9 	bl	8010f78 <tcp_output_segment_busy>
 8011006:	4603      	mov	r3, r0
 8011008:	2b00      	cmp	r3, #0
 801100a:	d001      	beq.n	8011010 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801100c:	2300      	movs	r3, #0
 801100e:	e09f      	b.n	8011150 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	68dc      	ldr	r4, [r3, #12]
 8011018:	4610      	mov	r0, r2
 801101a:	f7f8 fe60 	bl	8009cde <lwip_htonl>
 801101e:	4603      	mov	r3, r0
 8011020:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011022:	68bb      	ldr	r3, [r7, #8]
 8011024:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011026:	68fb      	ldr	r3, [r7, #12]
 8011028:	68dc      	ldr	r4, [r3, #12]
 801102a:	4610      	mov	r0, r2
 801102c:	f7f8 fe42 	bl	8009cb4 <lwip_htons>
 8011030:	4603      	mov	r3, r0
 8011032:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011038:	68ba      	ldr	r2, [r7, #8]
 801103a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801103c:	441a      	add	r2, r3
 801103e:	68bb      	ldr	r3, [r7, #8]
 8011040:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	68db      	ldr	r3, [r3, #12]
 8011046:	3314      	adds	r3, #20
 8011048:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801104a:	68fb      	ldr	r3, [r7, #12]
 801104c:	7a9b      	ldrb	r3, [r3, #10]
 801104e:	f003 0301 	and.w	r3, r3, #1
 8011052:	2b00      	cmp	r3, #0
 8011054:	d015      	beq.n	8011082 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8011056:	68bb      	ldr	r3, [r7, #8]
 8011058:	3304      	adds	r3, #4
 801105a:	461a      	mov	r2, r3
 801105c:	6879      	ldr	r1, [r7, #4]
 801105e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011062:	f7fc fa37 	bl	800d4d4 <tcp_eff_send_mss_netif>
 8011066:	4603      	mov	r3, r0
 8011068:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801106a:	8b7b      	ldrh	r3, [r7, #26]
 801106c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011070:	4618      	mov	r0, r3
 8011072:	f7f8 fe34 	bl	8009cde <lwip_htonl>
 8011076:	4602      	mov	r2, r0
 8011078:	69fb      	ldr	r3, [r7, #28]
 801107a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801107c:	69fb      	ldr	r3, [r7, #28]
 801107e:	3304      	adds	r3, #4
 8011080:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011082:	68bb      	ldr	r3, [r7, #8]
 8011084:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011088:	2b00      	cmp	r3, #0
 801108a:	da02      	bge.n	8011092 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801108c:	68bb      	ldr	r3, [r7, #8]
 801108e:	2200      	movs	r2, #0
 8011090:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011092:	68bb      	ldr	r3, [r7, #8]
 8011094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011096:	2b00      	cmp	r3, #0
 8011098:	d10c      	bne.n	80110b4 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801109a:	4b34      	ldr	r3, [pc, #208]	; (801116c <tcp_output_segment+0x1b4>)
 801109c:	681a      	ldr	r2, [r3, #0]
 801109e:	68bb      	ldr	r3, [r7, #8]
 80110a0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	68db      	ldr	r3, [r3, #12]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7f8 fe18 	bl	8009cde <lwip_htonl>
 80110ae:	4602      	mov	r2, r0
 80110b0:	68bb      	ldr	r3, [r7, #8]
 80110b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80110b4:	68fb      	ldr	r3, [r7, #12]
 80110b6:	68da      	ldr	r2, [r3, #12]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	685b      	ldr	r3, [r3, #4]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	1ad3      	subs	r3, r2, r3
 80110c0:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	685b      	ldr	r3, [r3, #4]
 80110c6:	8959      	ldrh	r1, [r3, #10]
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	685b      	ldr	r3, [r3, #4]
 80110cc:	8b3a      	ldrh	r2, [r7, #24]
 80110ce:	1a8a      	subs	r2, r1, r2
 80110d0:	b292      	uxth	r2, r2
 80110d2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	685b      	ldr	r3, [r3, #4]
 80110d8:	8919      	ldrh	r1, [r3, #8]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	8b3a      	ldrh	r2, [r7, #24]
 80110e0:	1a8a      	subs	r2, r1, r2
 80110e2:	b292      	uxth	r2, r2
 80110e4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80110e6:	68fb      	ldr	r3, [r7, #12]
 80110e8:	685b      	ldr	r3, [r3, #4]
 80110ea:	68fa      	ldr	r2, [r7, #12]
 80110ec:	68d2      	ldr	r2, [r2, #12]
 80110ee:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	2200      	movs	r2, #0
 80110f6:	741a      	strb	r2, [r3, #16]
 80110f8:	2200      	movs	r2, #0
 80110fa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	68db      	ldr	r3, [r3, #12]
 8011100:	f103 0214 	add.w	r2, r3, #20
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	7a9b      	ldrb	r3, [r3, #10]
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	f003 0304 	and.w	r3, r3, #4
 801110e:	4413      	add	r3, r2
 8011110:	69fa      	ldr	r2, [r7, #28]
 8011112:	429a      	cmp	r2, r3
 8011114:	d006      	beq.n	8011124 <tcp_output_segment+0x16c>
 8011116:	4b10      	ldr	r3, [pc, #64]	; (8011158 <tcp_output_segment+0x1a0>)
 8011118:	f240 621c 	movw	r2, #1564	; 0x61c
 801111c:	4914      	ldr	r1, [pc, #80]	; (8011170 <tcp_output_segment+0x1b8>)
 801111e:	4810      	ldr	r0, [pc, #64]	; (8011160 <tcp_output_segment+0x1a8>)
 8011120:	f005 fea6 	bl	8016e70 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	6858      	ldr	r0, [r3, #4]
 8011128:	68b9      	ldr	r1, [r7, #8]
 801112a:	68bb      	ldr	r3, [r7, #8]
 801112c:	1d1c      	adds	r4, r3, #4
 801112e:	68bb      	ldr	r3, [r7, #8]
 8011130:	7add      	ldrb	r5, [r3, #11]
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	7a9b      	ldrb	r3, [r3, #10]
 8011136:	687a      	ldr	r2, [r7, #4]
 8011138:	9202      	str	r2, [sp, #8]
 801113a:	2206      	movs	r2, #6
 801113c:	9201      	str	r2, [sp, #4]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	462b      	mov	r3, r5
 8011142:	4622      	mov	r2, r4
 8011144:	f004 fc28 	bl	8015998 <ip4_output_if>
 8011148:	4603      	mov	r3, r0
 801114a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801114c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011150:	4618      	mov	r0, r3
 8011152:	3720      	adds	r7, #32
 8011154:	46bd      	mov	sp, r7
 8011156:	bdb0      	pop	{r4, r5, r7, pc}
 8011158:	0801a594 	.word	0x0801a594
 801115c:	0801ab58 	.word	0x0801ab58
 8011160:	0801a5e8 	.word	0x0801a5e8
 8011164:	0801ab78 	.word	0x0801ab78
 8011168:	0801ab98 	.word	0x0801ab98
 801116c:	2000f040 	.word	0x2000f040
 8011170:	0801abbc 	.word	0x0801abbc

08011174 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8011174:	b5b0      	push	{r4, r5, r7, lr}
 8011176:	b084      	sub	sp, #16
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801117c:	687b      	ldr	r3, [r7, #4]
 801117e:	2b00      	cmp	r3, #0
 8011180:	d106      	bne.n	8011190 <tcp_rexmit_rto_prepare+0x1c>
 8011182:	4b31      	ldr	r3, [pc, #196]	; (8011248 <tcp_rexmit_rto_prepare+0xd4>)
 8011184:	f240 6263 	movw	r2, #1635	; 0x663
 8011188:	4930      	ldr	r1, [pc, #192]	; (801124c <tcp_rexmit_rto_prepare+0xd8>)
 801118a:	4831      	ldr	r0, [pc, #196]	; (8011250 <tcp_rexmit_rto_prepare+0xdc>)
 801118c:	f005 fe70 	bl	8016e70 <iprintf>

  if (pcb->unacked == NULL) {
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011194:	2b00      	cmp	r3, #0
 8011196:	d102      	bne.n	801119e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8011198:	f06f 0305 	mvn.w	r3, #5
 801119c:	e050      	b.n	8011240 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801119e:	687b      	ldr	r3, [r7, #4]
 80111a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a2:	60fb      	str	r3, [r7, #12]
 80111a4:	e00b      	b.n	80111be <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80111a6:	68f8      	ldr	r0, [r7, #12]
 80111a8:	f7ff fee6 	bl	8010f78 <tcp_output_segment_busy>
 80111ac:	4603      	mov	r3, r0
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d002      	beq.n	80111b8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80111b2:	f06f 0305 	mvn.w	r3, #5
 80111b6:	e043      	b.n	8011240 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80111b8:	68fb      	ldr	r3, [r7, #12]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	60fb      	str	r3, [r7, #12]
 80111be:	68fb      	ldr	r3, [r7, #12]
 80111c0:	681b      	ldr	r3, [r3, #0]
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d1ef      	bne.n	80111a6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80111c6:	68f8      	ldr	r0, [r7, #12]
 80111c8:	f7ff fed6 	bl	8010f78 <tcp_output_segment_busy>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d002      	beq.n	80111d8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80111d2:	f06f 0305 	mvn.w	r3, #5
 80111d6:	e033      	b.n	8011240 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	8b5b      	ldrh	r3, [r3, #26]
 80111f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80111f6:	b29a      	uxth	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80111fc:	68fb      	ldr	r3, [r7, #12]
 80111fe:	68db      	ldr	r3, [r3, #12]
 8011200:	685b      	ldr	r3, [r3, #4]
 8011202:	4618      	mov	r0, r3
 8011204:	f7f8 fd6b 	bl	8009cde <lwip_htonl>
 8011208:	4604      	mov	r4, r0
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	891b      	ldrh	r3, [r3, #8]
 801120e:	461d      	mov	r5, r3
 8011210:	68fb      	ldr	r3, [r7, #12]
 8011212:	68db      	ldr	r3, [r3, #12]
 8011214:	899b      	ldrh	r3, [r3, #12]
 8011216:	b29b      	uxth	r3, r3
 8011218:	4618      	mov	r0, r3
 801121a:	f7f8 fd4b 	bl	8009cb4 <lwip_htons>
 801121e:	4603      	mov	r3, r0
 8011220:	b2db      	uxtb	r3, r3
 8011222:	f003 0303 	and.w	r3, r3, #3
 8011226:	2b00      	cmp	r3, #0
 8011228:	d001      	beq.n	801122e <tcp_rexmit_rto_prepare+0xba>
 801122a:	2301      	movs	r3, #1
 801122c:	e000      	b.n	8011230 <tcp_rexmit_rto_prepare+0xbc>
 801122e:	2300      	movs	r3, #0
 8011230:	442b      	add	r3, r5
 8011232:	18e2      	adds	r2, r4, r3
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	2200      	movs	r2, #0
 801123c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801123e:	2300      	movs	r3, #0
}
 8011240:	4618      	mov	r0, r3
 8011242:	3710      	adds	r7, #16
 8011244:	46bd      	mov	sp, r7
 8011246:	bdb0      	pop	{r4, r5, r7, pc}
 8011248:	0801a594 	.word	0x0801a594
 801124c:	0801abd0 	.word	0x0801abd0
 8011250:	0801a5e8 	.word	0x0801a5e8

08011254 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8011254:	b580      	push	{r7, lr}
 8011256:	b082      	sub	sp, #8
 8011258:	af00      	add	r7, sp, #0
 801125a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d106      	bne.n	8011270 <tcp_rexmit_rto_commit+0x1c>
 8011262:	4b0d      	ldr	r3, [pc, #52]	; (8011298 <tcp_rexmit_rto_commit+0x44>)
 8011264:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8011268:	490c      	ldr	r1, [pc, #48]	; (801129c <tcp_rexmit_rto_commit+0x48>)
 801126a:	480d      	ldr	r0, [pc, #52]	; (80112a0 <tcp_rexmit_rto_commit+0x4c>)
 801126c:	f005 fe00 	bl	8016e70 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011276:	2bff      	cmp	r3, #255	; 0xff
 8011278:	d007      	beq.n	801128a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011280:	3301      	adds	r3, #1
 8011282:	b2da      	uxtb	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff fc80 	bl	8010b90 <tcp_output>
}
 8011290:	bf00      	nop
 8011292:	3708      	adds	r7, #8
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}
 8011298:	0801a594 	.word	0x0801a594
 801129c:	0801abf4 	.word	0x0801abf4
 80112a0:	0801a5e8 	.word	0x0801a5e8

080112a4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80112a4:	b580      	push	{r7, lr}
 80112a6:	b082      	sub	sp, #8
 80112a8:	af00      	add	r7, sp, #0
 80112aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d106      	bne.n	80112c0 <tcp_rexmit_rto+0x1c>
 80112b2:	4b0a      	ldr	r3, [pc, #40]	; (80112dc <tcp_rexmit_rto+0x38>)
 80112b4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80112b8:	4909      	ldr	r1, [pc, #36]	; (80112e0 <tcp_rexmit_rto+0x3c>)
 80112ba:	480a      	ldr	r0, [pc, #40]	; (80112e4 <tcp_rexmit_rto+0x40>)
 80112bc:	f005 fdd8 	bl	8016e70 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f7ff ff57 	bl	8011174 <tcp_rexmit_rto_prepare>
 80112c6:	4603      	mov	r3, r0
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d102      	bne.n	80112d2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff ffc1 	bl	8011254 <tcp_rexmit_rto_commit>
  }
}
 80112d2:	bf00      	nop
 80112d4:	3708      	adds	r7, #8
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	0801a594 	.word	0x0801a594
 80112e0:	0801ac18 	.word	0x0801ac18
 80112e4:	0801a5e8 	.word	0x0801a5e8

080112e8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80112e8:	b590      	push	{r4, r7, lr}
 80112ea:	b085      	sub	sp, #20
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d106      	bne.n	8011304 <tcp_rexmit+0x1c>
 80112f6:	4b2f      	ldr	r3, [pc, #188]	; (80113b4 <tcp_rexmit+0xcc>)
 80112f8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80112fc:	492e      	ldr	r1, [pc, #184]	; (80113b8 <tcp_rexmit+0xd0>)
 80112fe:	482f      	ldr	r0, [pc, #188]	; (80113bc <tcp_rexmit+0xd4>)
 8011300:	f005 fdb6 	bl	8016e70 <iprintf>

  if (pcb->unacked == NULL) {
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011308:	2b00      	cmp	r3, #0
 801130a:	d102      	bne.n	8011312 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801130c:	f06f 0305 	mvn.w	r3, #5
 8011310:	e04c      	b.n	80113ac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011316:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011318:	68b8      	ldr	r0, [r7, #8]
 801131a:	f7ff fe2d 	bl	8010f78 <tcp_output_segment_busy>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d002      	beq.n	801132a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011324:	f06f 0305 	mvn.w	r3, #5
 8011328:	e040      	b.n	80113ac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801132a:	68bb      	ldr	r3, [r7, #8]
 801132c:	681a      	ldr	r2, [r3, #0]
 801132e:	687b      	ldr	r3, [r7, #4]
 8011330:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	336c      	adds	r3, #108	; 0x6c
 8011336:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011338:	e002      	b.n	8011340 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	681b      	ldr	r3, [r3, #0]
 801133e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d011      	beq.n	801136c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	68db      	ldr	r3, [r3, #12]
 801134e:	685b      	ldr	r3, [r3, #4]
 8011350:	4618      	mov	r0, r3
 8011352:	f7f8 fcc4 	bl	8009cde <lwip_htonl>
 8011356:	4604      	mov	r4, r0
 8011358:	68bb      	ldr	r3, [r7, #8]
 801135a:	68db      	ldr	r3, [r3, #12]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	4618      	mov	r0, r3
 8011360:	f7f8 fcbd 	bl	8009cde <lwip_htonl>
 8011364:	4603      	mov	r3, r0
 8011366:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011368:	2b00      	cmp	r3, #0
 801136a:	dbe6      	blt.n	801133a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801136c:	68fb      	ldr	r3, [r7, #12]
 801136e:	681a      	ldr	r2, [r3, #0]
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011374:	68fb      	ldr	r3, [r7, #12]
 8011376:	68ba      	ldr	r2, [r7, #8]
 8011378:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d103      	bne.n	801138a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011382:	687b      	ldr	r3, [r7, #4]
 8011384:	2200      	movs	r2, #0
 8011386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011390:	2bff      	cmp	r3, #255	; 0xff
 8011392:	d007      	beq.n	80113a4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801139a:	3301      	adds	r3, #1
 801139c:	b2da      	uxtb	r2, r3
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2200      	movs	r2, #0
 80113a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80113aa:	2300      	movs	r3, #0
}
 80113ac:	4618      	mov	r0, r3
 80113ae:	3714      	adds	r7, #20
 80113b0:	46bd      	mov	sp, r7
 80113b2:	bd90      	pop	{r4, r7, pc}
 80113b4:	0801a594 	.word	0x0801a594
 80113b8:	0801ac34 	.word	0x0801ac34
 80113bc:	0801a5e8 	.word	0x0801a5e8

080113c0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80113c0:	b580      	push	{r7, lr}
 80113c2:	b082      	sub	sp, #8
 80113c4:	af00      	add	r7, sp, #0
 80113c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80113c8:	687b      	ldr	r3, [r7, #4]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d106      	bne.n	80113dc <tcp_rexmit_fast+0x1c>
 80113ce:	4b2a      	ldr	r3, [pc, #168]	; (8011478 <tcp_rexmit_fast+0xb8>)
 80113d0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80113d4:	4929      	ldr	r1, [pc, #164]	; (801147c <tcp_rexmit_fast+0xbc>)
 80113d6:	482a      	ldr	r0, [pc, #168]	; (8011480 <tcp_rexmit_fast+0xc0>)
 80113d8:	f005 fd4a 	bl	8016e70 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d044      	beq.n	801146e <tcp_rexmit_fast+0xae>
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	8b5b      	ldrh	r3, [r3, #26]
 80113e8:	f003 0304 	and.w	r3, r3, #4
 80113ec:	2b00      	cmp	r3, #0
 80113ee:	d13e      	bne.n	801146e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80113f0:	6878      	ldr	r0, [r7, #4]
 80113f2:	f7ff ff79 	bl	80112e8 <tcp_rexmit>
 80113f6:	4603      	mov	r3, r0
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d138      	bne.n	801146e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011408:	4293      	cmp	r3, r2
 801140a:	bf28      	it	cs
 801140c:	4613      	movcs	r3, r2
 801140e:	b29b      	uxth	r3, r3
 8011410:	0fda      	lsrs	r2, r3, #31
 8011412:	4413      	add	r3, r2
 8011414:	105b      	asrs	r3, r3, #1
 8011416:	b29a      	uxth	r2, r3
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011424:	461a      	mov	r2, r3
 8011426:	687b      	ldr	r3, [r7, #4]
 8011428:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801142a:	005b      	lsls	r3, r3, #1
 801142c:	429a      	cmp	r2, r3
 801142e:	d206      	bcs.n	801143e <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011434:	005b      	lsls	r3, r3, #1
 8011436:	b29a      	uxth	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011448:	4619      	mov	r1, r3
 801144a:	0049      	lsls	r1, r1, #1
 801144c:	440b      	add	r3, r1
 801144e:	b29b      	uxth	r3, r3
 8011450:	4413      	add	r3, r2
 8011452:	b29a      	uxth	r2, r3
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	8b5b      	ldrh	r3, [r3, #26]
 801145e:	f043 0304 	orr.w	r3, r3, #4
 8011462:	b29a      	uxth	r2, r3
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	2200      	movs	r2, #0
 801146c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801146e:	bf00      	nop
 8011470:	3708      	adds	r7, #8
 8011472:	46bd      	mov	sp, r7
 8011474:	bd80      	pop	{r7, pc}
 8011476:	bf00      	nop
 8011478:	0801a594 	.word	0x0801a594
 801147c:	0801ac4c 	.word	0x0801ac4c
 8011480:	0801a5e8 	.word	0x0801a5e8

08011484 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b086      	sub	sp, #24
 8011488:	af00      	add	r7, sp, #0
 801148a:	60f8      	str	r0, [r7, #12]
 801148c:	607b      	str	r3, [r7, #4]
 801148e:	460b      	mov	r3, r1
 8011490:	817b      	strh	r3, [r7, #10]
 8011492:	4613      	mov	r3, r2
 8011494:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8011496:	897a      	ldrh	r2, [r7, #10]
 8011498:	893b      	ldrh	r3, [r7, #8]
 801149a:	4413      	add	r3, r2
 801149c:	b29b      	uxth	r3, r3
 801149e:	3314      	adds	r3, #20
 80114a0:	b29b      	uxth	r3, r3
 80114a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80114a6:	4619      	mov	r1, r3
 80114a8:	2022      	movs	r0, #34	; 0x22
 80114aa:	f7f9 fcd7 	bl	800ae5c <pbuf_alloc>
 80114ae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80114b0:	697b      	ldr	r3, [r7, #20]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d04d      	beq.n	8011552 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80114b6:	897b      	ldrh	r3, [r7, #10]
 80114b8:	3313      	adds	r3, #19
 80114ba:	697a      	ldr	r2, [r7, #20]
 80114bc:	8952      	ldrh	r2, [r2, #10]
 80114be:	4293      	cmp	r3, r2
 80114c0:	db06      	blt.n	80114d0 <tcp_output_alloc_header_common+0x4c>
 80114c2:	4b26      	ldr	r3, [pc, #152]	; (801155c <tcp_output_alloc_header_common+0xd8>)
 80114c4:	f240 7223 	movw	r2, #1827	; 0x723
 80114c8:	4925      	ldr	r1, [pc, #148]	; (8011560 <tcp_output_alloc_header_common+0xdc>)
 80114ca:	4826      	ldr	r0, [pc, #152]	; (8011564 <tcp_output_alloc_header_common+0xe0>)
 80114cc:	f005 fcd0 	bl	8016e70 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80114d0:	697b      	ldr	r3, [r7, #20]
 80114d2:	685b      	ldr	r3, [r3, #4]
 80114d4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80114d6:	8c3b      	ldrh	r3, [r7, #32]
 80114d8:	4618      	mov	r0, r3
 80114da:	f7f8 fbeb 	bl	8009cb4 <lwip_htons>
 80114de:	4603      	mov	r3, r0
 80114e0:	461a      	mov	r2, r3
 80114e2:	693b      	ldr	r3, [r7, #16]
 80114e4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80114e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80114e8:	4618      	mov	r0, r3
 80114ea:	f7f8 fbe3 	bl	8009cb4 <lwip_htons>
 80114ee:	4603      	mov	r3, r0
 80114f0:	461a      	mov	r2, r3
 80114f2:	693b      	ldr	r3, [r7, #16]
 80114f4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114f6:	693b      	ldr	r3, [r7, #16]
 80114f8:	687a      	ldr	r2, [r7, #4]
 80114fa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80114fc:	68f8      	ldr	r0, [r7, #12]
 80114fe:	f7f8 fbee 	bl	8009cde <lwip_htonl>
 8011502:	4602      	mov	r2, r0
 8011504:	693b      	ldr	r3, [r7, #16]
 8011506:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011508:	897b      	ldrh	r3, [r7, #10]
 801150a:	089b      	lsrs	r3, r3, #2
 801150c:	b29b      	uxth	r3, r3
 801150e:	3305      	adds	r3, #5
 8011510:	b29b      	uxth	r3, r3
 8011512:	031b      	lsls	r3, r3, #12
 8011514:	b29a      	uxth	r2, r3
 8011516:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801151a:	b29b      	uxth	r3, r3
 801151c:	4313      	orrs	r3, r2
 801151e:	b29b      	uxth	r3, r3
 8011520:	4618      	mov	r0, r3
 8011522:	f7f8 fbc7 	bl	8009cb4 <lwip_htons>
 8011526:	4603      	mov	r3, r0
 8011528:	461a      	mov	r2, r3
 801152a:	693b      	ldr	r3, [r7, #16]
 801152c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801152e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011530:	4618      	mov	r0, r3
 8011532:	f7f8 fbbf 	bl	8009cb4 <lwip_htons>
 8011536:	4603      	mov	r3, r0
 8011538:	461a      	mov	r2, r3
 801153a:	693b      	ldr	r3, [r7, #16]
 801153c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801153e:	693b      	ldr	r3, [r7, #16]
 8011540:	2200      	movs	r2, #0
 8011542:	741a      	strb	r2, [r3, #16]
 8011544:	2200      	movs	r2, #0
 8011546:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	2200      	movs	r2, #0
 801154c:	749a      	strb	r2, [r3, #18]
 801154e:	2200      	movs	r2, #0
 8011550:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8011552:	697b      	ldr	r3, [r7, #20]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3718      	adds	r7, #24
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	0801a594 	.word	0x0801a594
 8011560:	0801ac6c 	.word	0x0801ac6c
 8011564:	0801a5e8 	.word	0x0801a5e8

08011568 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8011568:	b5b0      	push	{r4, r5, r7, lr}
 801156a:	b08a      	sub	sp, #40	; 0x28
 801156c:	af04      	add	r7, sp, #16
 801156e:	60f8      	str	r0, [r7, #12]
 8011570:	607b      	str	r3, [r7, #4]
 8011572:	460b      	mov	r3, r1
 8011574:	817b      	strh	r3, [r7, #10]
 8011576:	4613      	mov	r3, r2
 8011578:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	2b00      	cmp	r3, #0
 801157e:	d106      	bne.n	801158e <tcp_output_alloc_header+0x26>
 8011580:	4b15      	ldr	r3, [pc, #84]	; (80115d8 <tcp_output_alloc_header+0x70>)
 8011582:	f240 7242 	movw	r2, #1858	; 0x742
 8011586:	4915      	ldr	r1, [pc, #84]	; (80115dc <tcp_output_alloc_header+0x74>)
 8011588:	4815      	ldr	r0, [pc, #84]	; (80115e0 <tcp_output_alloc_header+0x78>)
 801158a:	f005 fc71 	bl	8016e70 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	8adb      	ldrh	r3, [r3, #22]
 8011596:	68fa      	ldr	r2, [r7, #12]
 8011598:	8b12      	ldrh	r2, [r2, #24]
 801159a:	68f9      	ldr	r1, [r7, #12]
 801159c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801159e:	893d      	ldrh	r5, [r7, #8]
 80115a0:	897c      	ldrh	r4, [r7, #10]
 80115a2:	9103      	str	r1, [sp, #12]
 80115a4:	2110      	movs	r1, #16
 80115a6:	9102      	str	r1, [sp, #8]
 80115a8:	9201      	str	r2, [sp, #4]
 80115aa:	9300      	str	r3, [sp, #0]
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	462a      	mov	r2, r5
 80115b0:	4621      	mov	r1, r4
 80115b2:	f7ff ff67 	bl	8011484 <tcp_output_alloc_header_common>
 80115b6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80115b8:	697b      	ldr	r3, [r7, #20]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d006      	beq.n	80115cc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115c2:	68fa      	ldr	r2, [r7, #12]
 80115c4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80115c6:	441a      	add	r2, r3
 80115c8:	68fb      	ldr	r3, [r7, #12]
 80115ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80115cc:	697b      	ldr	r3, [r7, #20]
}
 80115ce:	4618      	mov	r0, r3
 80115d0:	3718      	adds	r7, #24
 80115d2:	46bd      	mov	sp, r7
 80115d4:	bdb0      	pop	{r4, r5, r7, pc}
 80115d6:	bf00      	nop
 80115d8:	0801a594 	.word	0x0801a594
 80115dc:	0801ac9c 	.word	0x0801ac9c
 80115e0:	0801a5e8 	.word	0x0801a5e8

080115e4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	4611      	mov	r1, r2
 80115f0:	461a      	mov	r2, r3
 80115f2:	460b      	mov	r3, r1
 80115f4:	71fb      	strb	r3, [r7, #7]
 80115f6:	4613      	mov	r3, r2
 80115f8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80115fe:	68bb      	ldr	r3, [r7, #8]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d106      	bne.n	8011612 <tcp_output_fill_options+0x2e>
 8011604:	4b13      	ldr	r3, [pc, #76]	; (8011654 <tcp_output_fill_options+0x70>)
 8011606:	f240 7256 	movw	r2, #1878	; 0x756
 801160a:	4913      	ldr	r1, [pc, #76]	; (8011658 <tcp_output_fill_options+0x74>)
 801160c:	4813      	ldr	r0, [pc, #76]	; (801165c <tcp_output_fill_options+0x78>)
 801160e:	f005 fc2f 	bl	8016e70 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	685b      	ldr	r3, [r3, #4]
 8011616:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011618:	69bb      	ldr	r3, [r7, #24]
 801161a:	3314      	adds	r3, #20
 801161c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801161e:	69bb      	ldr	r3, [r7, #24]
 8011620:	f103 0214 	add.w	r2, r3, #20
 8011624:	8bfb      	ldrh	r3, [r7, #30]
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	4619      	mov	r1, r3
 801162a:	79fb      	ldrb	r3, [r7, #7]
 801162c:	009b      	lsls	r3, r3, #2
 801162e:	f003 0304 	and.w	r3, r3, #4
 8011632:	440b      	add	r3, r1
 8011634:	4413      	add	r3, r2
 8011636:	697a      	ldr	r2, [r7, #20]
 8011638:	429a      	cmp	r2, r3
 801163a:	d006      	beq.n	801164a <tcp_output_fill_options+0x66>
 801163c:	4b05      	ldr	r3, [pc, #20]	; (8011654 <tcp_output_fill_options+0x70>)
 801163e:	f240 7275 	movw	r2, #1909	; 0x775
 8011642:	4907      	ldr	r1, [pc, #28]	; (8011660 <tcp_output_fill_options+0x7c>)
 8011644:	4805      	ldr	r0, [pc, #20]	; (801165c <tcp_output_fill_options+0x78>)
 8011646:	f005 fc13 	bl	8016e70 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801164a:	bf00      	nop
 801164c:	3720      	adds	r7, #32
 801164e:	46bd      	mov	sp, r7
 8011650:	bd80      	pop	{r7, pc}
 8011652:	bf00      	nop
 8011654:	0801a594 	.word	0x0801a594
 8011658:	0801acc4 	.word	0x0801acc4
 801165c:	0801a5e8 	.word	0x0801a5e8
 8011660:	0801abbc 	.word	0x0801abbc

08011664 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b08a      	sub	sp, #40	; 0x28
 8011668:	af04      	add	r7, sp, #16
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	607a      	str	r2, [r7, #4]
 8011670:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d106      	bne.n	8011686 <tcp_output_control_segment+0x22>
 8011678:	4b1c      	ldr	r3, [pc, #112]	; (80116ec <tcp_output_control_segment+0x88>)
 801167a:	f240 7287 	movw	r2, #1927	; 0x787
 801167e:	491c      	ldr	r1, [pc, #112]	; (80116f0 <tcp_output_control_segment+0x8c>)
 8011680:	481c      	ldr	r0, [pc, #112]	; (80116f4 <tcp_output_control_segment+0x90>)
 8011682:	f005 fbf5 	bl	8016e70 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8011686:	683a      	ldr	r2, [r7, #0]
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f7fe fae8 	bl	800fc60 <tcp_route>
 8011690:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011692:	693b      	ldr	r3, [r7, #16]
 8011694:	2b00      	cmp	r3, #0
 8011696:	d102      	bne.n	801169e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8011698:	23fc      	movs	r3, #252	; 0xfc
 801169a:	75fb      	strb	r3, [r7, #23]
 801169c:	e01c      	b.n	80116d8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d006      	beq.n	80116b2 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80116a4:	68fb      	ldr	r3, [r7, #12]
 80116a6:	7adb      	ldrb	r3, [r3, #11]
 80116a8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	7a9b      	ldrb	r3, [r3, #10]
 80116ae:	757b      	strb	r3, [r7, #21]
 80116b0:	e003      	b.n	80116ba <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80116b2:	23ff      	movs	r3, #255	; 0xff
 80116b4:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80116b6:	2300      	movs	r3, #0
 80116b8:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80116ba:	7dba      	ldrb	r2, [r7, #22]
 80116bc:	693b      	ldr	r3, [r7, #16]
 80116be:	9302      	str	r3, [sp, #8]
 80116c0:	2306      	movs	r3, #6
 80116c2:	9301      	str	r3, [sp, #4]
 80116c4:	7d7b      	ldrb	r3, [r7, #21]
 80116c6:	9300      	str	r3, [sp, #0]
 80116c8:	4613      	mov	r3, r2
 80116ca:	683a      	ldr	r2, [r7, #0]
 80116cc:	6879      	ldr	r1, [r7, #4]
 80116ce:	68b8      	ldr	r0, [r7, #8]
 80116d0:	f004 f962 	bl	8015998 <ip4_output_if>
 80116d4:	4603      	mov	r3, r0
 80116d6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80116d8:	68b8      	ldr	r0, [r7, #8]
 80116da:	f7f9 fea3 	bl	800b424 <pbuf_free>
  return err;
 80116de:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80116e2:	4618      	mov	r0, r3
 80116e4:	3718      	adds	r7, #24
 80116e6:	46bd      	mov	sp, r7
 80116e8:	bd80      	pop	{r7, pc}
 80116ea:	bf00      	nop
 80116ec:	0801a594 	.word	0x0801a594
 80116f0:	0801acec 	.word	0x0801acec
 80116f4:	0801a5e8 	.word	0x0801a5e8

080116f8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80116f8:	b590      	push	{r4, r7, lr}
 80116fa:	b08b      	sub	sp, #44	; 0x2c
 80116fc:	af04      	add	r7, sp, #16
 80116fe:	60f8      	str	r0, [r7, #12]
 8011700:	60b9      	str	r1, [r7, #8]
 8011702:	607a      	str	r2, [r7, #4]
 8011704:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011706:	683b      	ldr	r3, [r7, #0]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d106      	bne.n	801171a <tcp_rst+0x22>
 801170c:	4b1f      	ldr	r3, [pc, #124]	; (801178c <tcp_rst+0x94>)
 801170e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011712:	491f      	ldr	r1, [pc, #124]	; (8011790 <tcp_rst+0x98>)
 8011714:	481f      	ldr	r0, [pc, #124]	; (8011794 <tcp_rst+0x9c>)
 8011716:	f005 fbab 	bl	8016e70 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801171a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801171c:	2b00      	cmp	r3, #0
 801171e:	d106      	bne.n	801172e <tcp_rst+0x36>
 8011720:	4b1a      	ldr	r3, [pc, #104]	; (801178c <tcp_rst+0x94>)
 8011722:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011726:	491c      	ldr	r1, [pc, #112]	; (8011798 <tcp_rst+0xa0>)
 8011728:	481a      	ldr	r0, [pc, #104]	; (8011794 <tcp_rst+0x9c>)
 801172a:	f005 fba1 	bl	8016e70 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801172e:	2300      	movs	r3, #0
 8011730:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011732:	f246 0308 	movw	r3, #24584	; 0x6008
 8011736:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011738:	7dfb      	ldrb	r3, [r7, #23]
 801173a:	b29c      	uxth	r4, r3
 801173c:	68b8      	ldr	r0, [r7, #8]
 801173e:	f7f8 face 	bl	8009cde <lwip_htonl>
 8011742:	4602      	mov	r2, r0
 8011744:	8abb      	ldrh	r3, [r7, #20]
 8011746:	9303      	str	r3, [sp, #12]
 8011748:	2314      	movs	r3, #20
 801174a:	9302      	str	r3, [sp, #8]
 801174c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801174e:	9301      	str	r3, [sp, #4]
 8011750:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011752:	9300      	str	r3, [sp, #0]
 8011754:	4613      	mov	r3, r2
 8011756:	2200      	movs	r2, #0
 8011758:	4621      	mov	r1, r4
 801175a:	6878      	ldr	r0, [r7, #4]
 801175c:	f7ff fe92 	bl	8011484 <tcp_output_alloc_header_common>
 8011760:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8011762:	693b      	ldr	r3, [r7, #16]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d00c      	beq.n	8011782 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011768:	7dfb      	ldrb	r3, [r7, #23]
 801176a:	2200      	movs	r2, #0
 801176c:	6939      	ldr	r1, [r7, #16]
 801176e:	68f8      	ldr	r0, [r7, #12]
 8011770:	f7ff ff38 	bl	80115e4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011776:	683a      	ldr	r2, [r7, #0]
 8011778:	6939      	ldr	r1, [r7, #16]
 801177a:	68f8      	ldr	r0, [r7, #12]
 801177c:	f7ff ff72 	bl	8011664 <tcp_output_control_segment>
 8011780:	e000      	b.n	8011784 <tcp_rst+0x8c>
    return;
 8011782:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011784:	371c      	adds	r7, #28
 8011786:	46bd      	mov	sp, r7
 8011788:	bd90      	pop	{r4, r7, pc}
 801178a:	bf00      	nop
 801178c:	0801a594 	.word	0x0801a594
 8011790:	0801ad18 	.word	0x0801ad18
 8011794:	0801a5e8 	.word	0x0801a5e8
 8011798:	0801ad34 	.word	0x0801ad34

0801179c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801179c:	b590      	push	{r4, r7, lr}
 801179e:	b087      	sub	sp, #28
 80117a0:	af00      	add	r7, sp, #0
 80117a2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80117a8:	2300      	movs	r3, #0
 80117aa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d106      	bne.n	80117c0 <tcp_send_empty_ack+0x24>
 80117b2:	4b28      	ldr	r3, [pc, #160]	; (8011854 <tcp_send_empty_ack+0xb8>)
 80117b4:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80117b8:	4927      	ldr	r1, [pc, #156]	; (8011858 <tcp_send_empty_ack+0xbc>)
 80117ba:	4828      	ldr	r0, [pc, #160]	; (801185c <tcp_send_empty_ack+0xc0>)
 80117bc:	f005 fb58 	bl	8016e70 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	b2db      	uxtb	r3, r3
 80117c6:	f003 0304 	and.w	r3, r3, #4
 80117ca:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80117cc:	7d7b      	ldrb	r3, [r7, #21]
 80117ce:	b29c      	uxth	r4, r3
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f8 fa82 	bl	8009cde <lwip_htonl>
 80117da:	4603      	mov	r3, r0
 80117dc:	2200      	movs	r2, #0
 80117de:	4621      	mov	r1, r4
 80117e0:	6878      	ldr	r0, [r7, #4]
 80117e2:	f7ff fec1 	bl	8011568 <tcp_output_alloc_header>
 80117e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117e8:	693b      	ldr	r3, [r7, #16]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d109      	bne.n	8011802 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80117ee:	687b      	ldr	r3, [r7, #4]
 80117f0:	8b5b      	ldrh	r3, [r3, #26]
 80117f2:	f043 0303 	orr.w	r3, r3, #3
 80117f6:	b29a      	uxth	r2, r3
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80117fc:	f06f 0301 	mvn.w	r3, #1
 8011800:	e023      	b.n	801184a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011802:	7dbb      	ldrb	r3, [r7, #22]
 8011804:	7dfa      	ldrb	r2, [r7, #23]
 8011806:	6939      	ldr	r1, [r7, #16]
 8011808:	6878      	ldr	r0, [r7, #4]
 801180a:	f7ff feeb 	bl	80115e4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	3304      	adds	r3, #4
 8011814:	6939      	ldr	r1, [r7, #16]
 8011816:	6878      	ldr	r0, [r7, #4]
 8011818:	f7ff ff24 	bl	8011664 <tcp_output_control_segment>
 801181c:	4603      	mov	r3, r0
 801181e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011820:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d007      	beq.n	8011838 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	8b5b      	ldrh	r3, [r3, #26]
 801182c:	f043 0303 	orr.w	r3, r3, #3
 8011830:	b29a      	uxth	r2, r3
 8011832:	687b      	ldr	r3, [r7, #4]
 8011834:	835a      	strh	r2, [r3, #26]
 8011836:	e006      	b.n	8011846 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	8b5b      	ldrh	r3, [r3, #26]
 801183c:	f023 0303 	bic.w	r3, r3, #3
 8011840:	b29a      	uxth	r2, r3
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011846:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801184a:	4618      	mov	r0, r3
 801184c:	371c      	adds	r7, #28
 801184e:	46bd      	mov	sp, r7
 8011850:	bd90      	pop	{r4, r7, pc}
 8011852:	bf00      	nop
 8011854:	0801a594 	.word	0x0801a594
 8011858:	0801ad50 	.word	0x0801ad50
 801185c:	0801a5e8 	.word	0x0801a5e8

08011860 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011860:	b590      	push	{r4, r7, lr}
 8011862:	b087      	sub	sp, #28
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011868:	2300      	movs	r3, #0
 801186a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2b00      	cmp	r3, #0
 8011870:	d106      	bne.n	8011880 <tcp_keepalive+0x20>
 8011872:	4b18      	ldr	r3, [pc, #96]	; (80118d4 <tcp_keepalive+0x74>)
 8011874:	f640 0224 	movw	r2, #2084	; 0x824
 8011878:	4917      	ldr	r1, [pc, #92]	; (80118d8 <tcp_keepalive+0x78>)
 801187a:	4818      	ldr	r0, [pc, #96]	; (80118dc <tcp_keepalive+0x7c>)
 801187c:	f005 faf8 	bl	8016e70 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011880:	7dfb      	ldrb	r3, [r7, #23]
 8011882:	b29c      	uxth	r4, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011888:	3b01      	subs	r3, #1
 801188a:	4618      	mov	r0, r3
 801188c:	f7f8 fa27 	bl	8009cde <lwip_htonl>
 8011890:	4603      	mov	r3, r0
 8011892:	2200      	movs	r2, #0
 8011894:	4621      	mov	r1, r4
 8011896:	6878      	ldr	r0, [r7, #4]
 8011898:	f7ff fe66 	bl	8011568 <tcp_output_alloc_header>
 801189c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801189e:	693b      	ldr	r3, [r7, #16]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	d102      	bne.n	80118aa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80118a4:	f04f 33ff 	mov.w	r3, #4294967295
 80118a8:	e010      	b.n	80118cc <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118aa:	7dfb      	ldrb	r3, [r7, #23]
 80118ac:	2200      	movs	r2, #0
 80118ae:	6939      	ldr	r1, [r7, #16]
 80118b0:	6878      	ldr	r0, [r7, #4]
 80118b2:	f7ff fe97 	bl	80115e4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80118b6:	687a      	ldr	r2, [r7, #4]
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	3304      	adds	r3, #4
 80118bc:	6939      	ldr	r1, [r7, #16]
 80118be:	6878      	ldr	r0, [r7, #4]
 80118c0:	f7ff fed0 	bl	8011664 <tcp_output_control_segment>
 80118c4:	4603      	mov	r3, r0
 80118c6:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80118c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80118cc:	4618      	mov	r0, r3
 80118ce:	371c      	adds	r7, #28
 80118d0:	46bd      	mov	sp, r7
 80118d2:	bd90      	pop	{r4, r7, pc}
 80118d4:	0801a594 	.word	0x0801a594
 80118d8:	0801ad70 	.word	0x0801ad70
 80118dc:	0801a5e8 	.word	0x0801a5e8

080118e0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80118e0:	b590      	push	{r4, r7, lr}
 80118e2:	b08b      	sub	sp, #44	; 0x2c
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80118e8:	2300      	movs	r3, #0
 80118ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d106      	bne.n	8011902 <tcp_zero_window_probe+0x22>
 80118f4:	4b4c      	ldr	r3, [pc, #304]	; (8011a28 <tcp_zero_window_probe+0x148>)
 80118f6:	f640 024f 	movw	r2, #2127	; 0x84f
 80118fa:	494c      	ldr	r1, [pc, #304]	; (8011a2c <tcp_zero_window_probe+0x14c>)
 80118fc:	484c      	ldr	r0, [pc, #304]	; (8011a30 <tcp_zero_window_probe+0x150>)
 80118fe:	f005 fab7 	bl	8016e70 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011906:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011908:	6a3b      	ldr	r3, [r7, #32]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d101      	bne.n	8011912 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801190e:	2300      	movs	r3, #0
 8011910:	e086      	b.n	8011a20 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011918:	2bff      	cmp	r3, #255	; 0xff
 801191a:	d007      	beq.n	801192c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011922:	3301      	adds	r3, #1
 8011924:	b2da      	uxtb	r2, r3
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801192c:	6a3b      	ldr	r3, [r7, #32]
 801192e:	68db      	ldr	r3, [r3, #12]
 8011930:	899b      	ldrh	r3, [r3, #12]
 8011932:	b29b      	uxth	r3, r3
 8011934:	4618      	mov	r0, r3
 8011936:	f7f8 f9bd 	bl	8009cb4 <lwip_htons>
 801193a:	4603      	mov	r3, r0
 801193c:	b2db      	uxtb	r3, r3
 801193e:	f003 0301 	and.w	r3, r3, #1
 8011942:	2b00      	cmp	r3, #0
 8011944:	d005      	beq.n	8011952 <tcp_zero_window_probe+0x72>
 8011946:	6a3b      	ldr	r3, [r7, #32]
 8011948:	891b      	ldrh	r3, [r3, #8]
 801194a:	2b00      	cmp	r3, #0
 801194c:	d101      	bne.n	8011952 <tcp_zero_window_probe+0x72>
 801194e:	2301      	movs	r3, #1
 8011950:	e000      	b.n	8011954 <tcp_zero_window_probe+0x74>
 8011952:	2300      	movs	r3, #0
 8011954:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011956:	7ffb      	ldrb	r3, [r7, #31]
 8011958:	2b00      	cmp	r3, #0
 801195a:	bf0c      	ite	eq
 801195c:	2301      	moveq	r3, #1
 801195e:	2300      	movne	r3, #0
 8011960:	b2db      	uxtb	r3, r3
 8011962:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011964:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011968:	b299      	uxth	r1, r3
 801196a:	6a3b      	ldr	r3, [r7, #32]
 801196c:	68db      	ldr	r3, [r3, #12]
 801196e:	685b      	ldr	r3, [r3, #4]
 8011970:	8bba      	ldrh	r2, [r7, #28]
 8011972:	6878      	ldr	r0, [r7, #4]
 8011974:	f7ff fdf8 	bl	8011568 <tcp_output_alloc_header>
 8011978:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801197a:	69bb      	ldr	r3, [r7, #24]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011980:	f04f 33ff 	mov.w	r3, #4294967295
 8011984:	e04c      	b.n	8011a20 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011986:	69bb      	ldr	r3, [r7, #24]
 8011988:	685b      	ldr	r3, [r3, #4]
 801198a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801198c:	7ffb      	ldrb	r3, [r7, #31]
 801198e:	2b00      	cmp	r3, #0
 8011990:	d011      	beq.n	80119b6 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	899b      	ldrh	r3, [r3, #12]
 8011996:	b29b      	uxth	r3, r3
 8011998:	b21b      	sxth	r3, r3
 801199a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801199e:	b21c      	sxth	r4, r3
 80119a0:	2011      	movs	r0, #17
 80119a2:	f7f8 f987 	bl	8009cb4 <lwip_htons>
 80119a6:	4603      	mov	r3, r0
 80119a8:	b21b      	sxth	r3, r3
 80119aa:	4323      	orrs	r3, r4
 80119ac:	b21b      	sxth	r3, r3
 80119ae:	b29a      	uxth	r2, r3
 80119b0:	697b      	ldr	r3, [r7, #20]
 80119b2:	819a      	strh	r2, [r3, #12]
 80119b4:	e010      	b.n	80119d8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80119b6:	69bb      	ldr	r3, [r7, #24]
 80119b8:	685b      	ldr	r3, [r3, #4]
 80119ba:	3314      	adds	r3, #20
 80119bc:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80119be:	6a3b      	ldr	r3, [r7, #32]
 80119c0:	6858      	ldr	r0, [r3, #4]
 80119c2:	6a3b      	ldr	r3, [r7, #32]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	891a      	ldrh	r2, [r3, #8]
 80119c8:	6a3b      	ldr	r3, [r7, #32]
 80119ca:	891b      	ldrh	r3, [r3, #8]
 80119cc:	1ad3      	subs	r3, r2, r3
 80119ce:	b29b      	uxth	r3, r3
 80119d0:	2201      	movs	r2, #1
 80119d2:	6939      	ldr	r1, [r7, #16]
 80119d4:	f7f9 ff2c 	bl	800b830 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80119d8:	6a3b      	ldr	r3, [r7, #32]
 80119da:	68db      	ldr	r3, [r3, #12]
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	4618      	mov	r0, r3
 80119e0:	f7f8 f97d 	bl	8009cde <lwip_htonl>
 80119e4:	4603      	mov	r3, r0
 80119e6:	3301      	adds	r3, #1
 80119e8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80119ee:	68fb      	ldr	r3, [r7, #12]
 80119f0:	1ad3      	subs	r3, r2, r3
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	da02      	bge.n	80119fc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	68fa      	ldr	r2, [r7, #12]
 80119fa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a00:	2200      	movs	r2, #0
 8011a02:	69b9      	ldr	r1, [r7, #24]
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7ff fded 	bl	80115e4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a0a:	687a      	ldr	r2, [r7, #4]
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	3304      	adds	r3, #4
 8011a10:	69b9      	ldr	r1, [r7, #24]
 8011a12:	6878      	ldr	r0, [r7, #4]
 8011a14:	f7ff fe26 	bl	8011664 <tcp_output_control_segment>
 8011a18:	4603      	mov	r3, r0
 8011a1a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a1c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011a20:	4618      	mov	r0, r3
 8011a22:	372c      	adds	r7, #44	; 0x2c
 8011a24:	46bd      	mov	sp, r7
 8011a26:	bd90      	pop	{r4, r7, pc}
 8011a28:	0801a594 	.word	0x0801a594
 8011a2c:	0801ad8c 	.word	0x0801ad8c
 8011a30:	0801a5e8 	.word	0x0801a5e8

08011a34 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011a3c:	f7f9 ffe6 	bl	800ba0c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011a40:	4b0a      	ldr	r3, [pc, #40]	; (8011a6c <tcpip_tcp_timer+0x38>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d103      	bne.n	8011a50 <tcpip_tcp_timer+0x1c>
 8011a48:	4b09      	ldr	r3, [pc, #36]	; (8011a70 <tcpip_tcp_timer+0x3c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d005      	beq.n	8011a5c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a50:	2200      	movs	r2, #0
 8011a52:	4908      	ldr	r1, [pc, #32]	; (8011a74 <tcpip_tcp_timer+0x40>)
 8011a54:	20fa      	movs	r0, #250	; 0xfa
 8011a56:	f000 f8f3 	bl	8011c40 <sys_timeout>
 8011a5a:	e003      	b.n	8011a64 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011a5c:	4b06      	ldr	r3, [pc, #24]	; (8011a78 <tcpip_tcp_timer+0x44>)
 8011a5e:	2200      	movs	r2, #0
 8011a60:	601a      	str	r2, [r3, #0]
  }
}
 8011a62:	bf00      	nop
 8011a64:	bf00      	nop
 8011a66:	3708      	adds	r7, #8
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	2000f03c 	.word	0x2000f03c
 8011a70:	2000f04c 	.word	0x2000f04c
 8011a74:	08011a35 	.word	0x08011a35
 8011a78:	200085e8 	.word	0x200085e8

08011a7c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011a80:	4b0a      	ldr	r3, [pc, #40]	; (8011aac <tcp_timer_needed+0x30>)
 8011a82:	681b      	ldr	r3, [r3, #0]
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10f      	bne.n	8011aa8 <tcp_timer_needed+0x2c>
 8011a88:	4b09      	ldr	r3, [pc, #36]	; (8011ab0 <tcp_timer_needed+0x34>)
 8011a8a:	681b      	ldr	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d103      	bne.n	8011a98 <tcp_timer_needed+0x1c>
 8011a90:	4b08      	ldr	r3, [pc, #32]	; (8011ab4 <tcp_timer_needed+0x38>)
 8011a92:	681b      	ldr	r3, [r3, #0]
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d007      	beq.n	8011aa8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011a98:	4b04      	ldr	r3, [pc, #16]	; (8011aac <tcp_timer_needed+0x30>)
 8011a9a:	2201      	movs	r2, #1
 8011a9c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	4905      	ldr	r1, [pc, #20]	; (8011ab8 <tcp_timer_needed+0x3c>)
 8011aa2:	20fa      	movs	r0, #250	; 0xfa
 8011aa4:	f000 f8cc 	bl	8011c40 <sys_timeout>
  }
}
 8011aa8:	bf00      	nop
 8011aaa:	bd80      	pop	{r7, pc}
 8011aac:	200085e8 	.word	0x200085e8
 8011ab0:	2000f03c 	.word	0x2000f03c
 8011ab4:	2000f04c 	.word	0x2000f04c
 8011ab8:	08011a35 	.word	0x08011a35

08011abc <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011abc:	b580      	push	{r7, lr}
 8011abe:	b086      	sub	sp, #24
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	60f8      	str	r0, [r7, #12]
 8011ac4:	60b9      	str	r1, [r7, #8]
 8011ac6:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ac8:	200a      	movs	r0, #10
 8011aca:	f7f8 fda9 	bl	800a620 <memp_malloc>
 8011ace:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011ad0:	693b      	ldr	r3, [r7, #16]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d109      	bne.n	8011aea <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011ad6:	693b      	ldr	r3, [r7, #16]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d151      	bne.n	8011b80 <sys_timeout_abs+0xc4>
 8011adc:	4b2a      	ldr	r3, [pc, #168]	; (8011b88 <sys_timeout_abs+0xcc>)
 8011ade:	22be      	movs	r2, #190	; 0xbe
 8011ae0:	492a      	ldr	r1, [pc, #168]	; (8011b8c <sys_timeout_abs+0xd0>)
 8011ae2:	482b      	ldr	r0, [pc, #172]	; (8011b90 <sys_timeout_abs+0xd4>)
 8011ae4:	f005 f9c4 	bl	8016e70 <iprintf>
    return;
 8011ae8:	e04a      	b.n	8011b80 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011aea:	693b      	ldr	r3, [r7, #16]
 8011aec:	2200      	movs	r2, #0
 8011aee:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011af0:	693b      	ldr	r3, [r7, #16]
 8011af2:	68ba      	ldr	r2, [r7, #8]
 8011af4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011af6:	693b      	ldr	r3, [r7, #16]
 8011af8:	687a      	ldr	r2, [r7, #4]
 8011afa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011afc:	693b      	ldr	r3, [r7, #16]
 8011afe:	68fa      	ldr	r2, [r7, #12]
 8011b00:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011b02:	4b24      	ldr	r3, [pc, #144]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d103      	bne.n	8011b12 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011b0a:	4a22      	ldr	r2, [pc, #136]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b0c:	693b      	ldr	r3, [r7, #16]
 8011b0e:	6013      	str	r3, [r2, #0]
    return;
 8011b10:	e037      	b.n	8011b82 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011b12:	693b      	ldr	r3, [r7, #16]
 8011b14:	685a      	ldr	r2, [r3, #4]
 8011b16:	4b1f      	ldr	r3, [pc, #124]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	685b      	ldr	r3, [r3, #4]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	0fdb      	lsrs	r3, r3, #31
 8011b20:	f003 0301 	and.w	r3, r3, #1
 8011b24:	b2db      	uxtb	r3, r3
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d007      	beq.n	8011b3a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011b2a:	4b1a      	ldr	r3, [pc, #104]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	693b      	ldr	r3, [r7, #16]
 8011b30:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011b32:	4a18      	ldr	r2, [pc, #96]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b34:	693b      	ldr	r3, [r7, #16]
 8011b36:	6013      	str	r3, [r2, #0]
 8011b38:	e023      	b.n	8011b82 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b3a:	4b16      	ldr	r3, [pc, #88]	; (8011b94 <sys_timeout_abs+0xd8>)
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	617b      	str	r3, [r7, #20]
 8011b40:	e01a      	b.n	8011b78 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	681b      	ldr	r3, [r3, #0]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d00b      	beq.n	8011b62 <sys_timeout_abs+0xa6>
 8011b4a:	693b      	ldr	r3, [r7, #16]
 8011b4c:	685a      	ldr	r2, [r3, #4]
 8011b4e:	697b      	ldr	r3, [r7, #20]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	685b      	ldr	r3, [r3, #4]
 8011b54:	1ad3      	subs	r3, r2, r3
 8011b56:	0fdb      	lsrs	r3, r3, #31
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	b2db      	uxtb	r3, r3
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d007      	beq.n	8011b72 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011b62:	697b      	ldr	r3, [r7, #20]
 8011b64:	681a      	ldr	r2, [r3, #0]
 8011b66:	693b      	ldr	r3, [r7, #16]
 8011b68:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011b6a:	697b      	ldr	r3, [r7, #20]
 8011b6c:	693a      	ldr	r2, [r7, #16]
 8011b6e:	601a      	str	r2, [r3, #0]
        break;
 8011b70:	e007      	b.n	8011b82 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011b72:	697b      	ldr	r3, [r7, #20]
 8011b74:	681b      	ldr	r3, [r3, #0]
 8011b76:	617b      	str	r3, [r7, #20]
 8011b78:	697b      	ldr	r3, [r7, #20]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d1e1      	bne.n	8011b42 <sys_timeout_abs+0x86>
 8011b7e:	e000      	b.n	8011b82 <sys_timeout_abs+0xc6>
    return;
 8011b80:	bf00      	nop
      }
    }
  }
}
 8011b82:	3718      	adds	r7, #24
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	0801adb0 	.word	0x0801adb0
 8011b8c:	0801ade4 	.word	0x0801ade4
 8011b90:	0801ae24 	.word	0x0801ae24
 8011b94:	200085e0 	.word	0x200085e0

08011b98 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b086      	sub	sp, #24
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011ba0:	687b      	ldr	r3, [r7, #4]
 8011ba2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011ba4:	697b      	ldr	r3, [r7, #20]
 8011ba6:	685b      	ldr	r3, [r3, #4]
 8011ba8:	4798      	blx	r3

  now = sys_now();
 8011baa:	f7f2 fcdb 	bl	8004564 <sys_now>
 8011bae:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011bb0:	697b      	ldr	r3, [r7, #20]
 8011bb2:	681a      	ldr	r2, [r3, #0]
 8011bb4:	4b0f      	ldr	r3, [pc, #60]	; (8011bf4 <lwip_cyclic_timer+0x5c>)
 8011bb6:	681b      	ldr	r3, [r3, #0]
 8011bb8:	4413      	add	r3, r2
 8011bba:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011bbc:	68fa      	ldr	r2, [r7, #12]
 8011bbe:	693b      	ldr	r3, [r7, #16]
 8011bc0:	1ad3      	subs	r3, r2, r3
 8011bc2:	0fdb      	lsrs	r3, r3, #31
 8011bc4:	f003 0301 	and.w	r3, r3, #1
 8011bc8:	b2db      	uxtb	r3, r3
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d009      	beq.n	8011be2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011bce:	697b      	ldr	r3, [r7, #20]
 8011bd0:	681a      	ldr	r2, [r3, #0]
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	4413      	add	r3, r2
 8011bd6:	687a      	ldr	r2, [r7, #4]
 8011bd8:	4907      	ldr	r1, [pc, #28]	; (8011bf8 <lwip_cyclic_timer+0x60>)
 8011bda:	4618      	mov	r0, r3
 8011bdc:	f7ff ff6e 	bl	8011abc <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011be0:	e004      	b.n	8011bec <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	4904      	ldr	r1, [pc, #16]	; (8011bf8 <lwip_cyclic_timer+0x60>)
 8011be6:	68f8      	ldr	r0, [r7, #12]
 8011be8:	f7ff ff68 	bl	8011abc <sys_timeout_abs>
}
 8011bec:	bf00      	nop
 8011bee:	3718      	adds	r7, #24
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}
 8011bf4:	200085e4 	.word	0x200085e4
 8011bf8:	08011b99 	.word	0x08011b99

08011bfc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011bfc:	b580      	push	{r7, lr}
 8011bfe:	b082      	sub	sp, #8
 8011c00:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c02:	2301      	movs	r3, #1
 8011c04:	607b      	str	r3, [r7, #4]
 8011c06:	e00e      	b.n	8011c26 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011c08:	4a0b      	ldr	r2, [pc, #44]	; (8011c38 <sys_timeouts_init+0x3c>)
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011c10:	687b      	ldr	r3, [r7, #4]
 8011c12:	00db      	lsls	r3, r3, #3
 8011c14:	4a08      	ldr	r2, [pc, #32]	; (8011c38 <sys_timeouts_init+0x3c>)
 8011c16:	4413      	add	r3, r2
 8011c18:	461a      	mov	r2, r3
 8011c1a:	4908      	ldr	r1, [pc, #32]	; (8011c3c <sys_timeouts_init+0x40>)
 8011c1c:	f000 f810 	bl	8011c40 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	3301      	adds	r3, #1
 8011c24:	607b      	str	r3, [r7, #4]
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	2b04      	cmp	r3, #4
 8011c2a:	d9ed      	bls.n	8011c08 <sys_timeouts_init+0xc>
  }
}
 8011c2c:	bf00      	nop
 8011c2e:	bf00      	nop
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}
 8011c36:	bf00      	nop
 8011c38:	0801bd74 	.word	0x0801bd74
 8011c3c:	08011b99 	.word	0x08011b99

08011c40 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b086      	sub	sp, #24
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	60f8      	str	r0, [r7, #12]
 8011c48:	60b9      	str	r1, [r7, #8]
 8011c4a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011c4c:	68fb      	ldr	r3, [r7, #12]
 8011c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011c52:	d306      	bcc.n	8011c62 <sys_timeout+0x22>
 8011c54:	4b0a      	ldr	r3, [pc, #40]	; (8011c80 <sys_timeout+0x40>)
 8011c56:	f240 1229 	movw	r2, #297	; 0x129
 8011c5a:	490a      	ldr	r1, [pc, #40]	; (8011c84 <sys_timeout+0x44>)
 8011c5c:	480a      	ldr	r0, [pc, #40]	; (8011c88 <sys_timeout+0x48>)
 8011c5e:	f005 f907 	bl	8016e70 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011c62:	f7f2 fc7f 	bl	8004564 <sys_now>
 8011c66:	4602      	mov	r2, r0
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	4413      	add	r3, r2
 8011c6c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011c6e:	687a      	ldr	r2, [r7, #4]
 8011c70:	68b9      	ldr	r1, [r7, #8]
 8011c72:	6978      	ldr	r0, [r7, #20]
 8011c74:	f7ff ff22 	bl	8011abc <sys_timeout_abs>
#endif
}
 8011c78:	bf00      	nop
 8011c7a:	3718      	adds	r7, #24
 8011c7c:	46bd      	mov	sp, r7
 8011c7e:	bd80      	pop	{r7, pc}
 8011c80:	0801adb0 	.word	0x0801adb0
 8011c84:	0801ae4c 	.word	0x0801ae4c
 8011c88:	0801ae24 	.word	0x0801ae24

08011c8c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011c8c:	b580      	push	{r7, lr}
 8011c8e:	b084      	sub	sp, #16
 8011c90:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011c92:	f7f2 fc67 	bl	8004564 <sys_now>
 8011c96:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011c98:	4b17      	ldr	r3, [pc, #92]	; (8011cf8 <sys_check_timeouts+0x6c>)
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011c9e:	68bb      	ldr	r3, [r7, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d022      	beq.n	8011cea <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011ca4:	68bb      	ldr	r3, [r7, #8]
 8011ca6:	685b      	ldr	r3, [r3, #4]
 8011ca8:	68fa      	ldr	r2, [r7, #12]
 8011caa:	1ad3      	subs	r3, r2, r3
 8011cac:	0fdb      	lsrs	r3, r3, #31
 8011cae:	f003 0301 	and.w	r3, r3, #1
 8011cb2:	b2db      	uxtb	r3, r3
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d11a      	bne.n	8011cee <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011cb8:	68bb      	ldr	r3, [r7, #8]
 8011cba:	681b      	ldr	r3, [r3, #0]
 8011cbc:	4a0e      	ldr	r2, [pc, #56]	; (8011cf8 <sys_check_timeouts+0x6c>)
 8011cbe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	689b      	ldr	r3, [r3, #8]
 8011cc4:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011cc6:	68bb      	ldr	r3, [r7, #8]
 8011cc8:	68db      	ldr	r3, [r3, #12]
 8011cca:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	685b      	ldr	r3, [r3, #4]
 8011cd0:	4a0a      	ldr	r2, [pc, #40]	; (8011cfc <sys_check_timeouts+0x70>)
 8011cd2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011cd4:	68b9      	ldr	r1, [r7, #8]
 8011cd6:	200a      	movs	r0, #10
 8011cd8:	f7f8 fcf4 	bl	800a6c4 <memp_free>
    if (handler != NULL) {
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d0da      	beq.n	8011c98 <sys_check_timeouts+0xc>
      handler(arg);
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6838      	ldr	r0, [r7, #0]
 8011ce6:	4798      	blx	r3
  do {
 8011ce8:	e7d6      	b.n	8011c98 <sys_check_timeouts+0xc>
      return;
 8011cea:	bf00      	nop
 8011cec:	e000      	b.n	8011cf0 <sys_check_timeouts+0x64>
      return;
 8011cee:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011cf0:	3710      	adds	r7, #16
 8011cf2:	46bd      	mov	sp, r7
 8011cf4:	bd80      	pop	{r7, pc}
 8011cf6:	bf00      	nop
 8011cf8:	200085e0 	.word	0x200085e0
 8011cfc:	200085e4 	.word	0x200085e4

08011d00 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b082      	sub	sp, #8
 8011d04:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011d06:	4b16      	ldr	r3, [pc, #88]	; (8011d60 <sys_timeouts_sleeptime+0x60>)
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d102      	bne.n	8011d14 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8011d12:	e020      	b.n	8011d56 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011d14:	f7f2 fc26 	bl	8004564 <sys_now>
 8011d18:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011d1a:	4b11      	ldr	r3, [pc, #68]	; (8011d60 <sys_timeouts_sleeptime+0x60>)
 8011d1c:	681b      	ldr	r3, [r3, #0]
 8011d1e:	685a      	ldr	r2, [r3, #4]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	0fdb      	lsrs	r3, r3, #31
 8011d26:	f003 0301 	and.w	r3, r3, #1
 8011d2a:	b2db      	uxtb	r3, r3
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d001      	beq.n	8011d34 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011d30:	2300      	movs	r3, #0
 8011d32:	e010      	b.n	8011d56 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011d34:	4b0a      	ldr	r3, [pc, #40]	; (8011d60 <sys_timeouts_sleeptime+0x60>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	685a      	ldr	r2, [r3, #4]
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	1ad3      	subs	r3, r2, r3
 8011d3e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011d40:	683b      	ldr	r3, [r7, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	da06      	bge.n	8011d54 <sys_timeouts_sleeptime+0x54>
 8011d46:	4b07      	ldr	r3, [pc, #28]	; (8011d64 <sys_timeouts_sleeptime+0x64>)
 8011d48:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011d4c:	4906      	ldr	r1, [pc, #24]	; (8011d68 <sys_timeouts_sleeptime+0x68>)
 8011d4e:	4807      	ldr	r0, [pc, #28]	; (8011d6c <sys_timeouts_sleeptime+0x6c>)
 8011d50:	f005 f88e 	bl	8016e70 <iprintf>
    return ret;
 8011d54:	683b      	ldr	r3, [r7, #0]
  }
}
 8011d56:	4618      	mov	r0, r3
 8011d58:	3708      	adds	r7, #8
 8011d5a:	46bd      	mov	sp, r7
 8011d5c:	bd80      	pop	{r7, pc}
 8011d5e:	bf00      	nop
 8011d60:	200085e0 	.word	0x200085e0
 8011d64:	0801adb0 	.word	0x0801adb0
 8011d68:	0801ae84 	.word	0x0801ae84
 8011d6c:	0801ae24 	.word	0x0801ae24

08011d70 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011d70:	b580      	push	{r7, lr}
 8011d72:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011d74:	f005 f894 	bl	8016ea0 <rand>
 8011d78:	4603      	mov	r3, r0
 8011d7a:	b29b      	uxth	r3, r3
 8011d7c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011d80:	b29b      	uxth	r3, r3
 8011d82:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011d86:	b29a      	uxth	r2, r3
 8011d88:	4b01      	ldr	r3, [pc, #4]	; (8011d90 <udp_init+0x20>)
 8011d8a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011d8c:	bf00      	nop
 8011d8e:	bd80      	pop	{r7, pc}
 8011d90:	20000018 	.word	0x20000018

08011d94 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011d94:	b480      	push	{r7}
 8011d96:	b083      	sub	sp, #12
 8011d98:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011d9a:	2300      	movs	r3, #0
 8011d9c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011d9e:	4b17      	ldr	r3, [pc, #92]	; (8011dfc <udp_new_port+0x68>)
 8011da0:	881b      	ldrh	r3, [r3, #0]
 8011da2:	1c5a      	adds	r2, r3, #1
 8011da4:	b291      	uxth	r1, r2
 8011da6:	4a15      	ldr	r2, [pc, #84]	; (8011dfc <udp_new_port+0x68>)
 8011da8:	8011      	strh	r1, [r2, #0]
 8011daa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011dae:	4293      	cmp	r3, r2
 8011db0:	d103      	bne.n	8011dba <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011db2:	4b12      	ldr	r3, [pc, #72]	; (8011dfc <udp_new_port+0x68>)
 8011db4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011db8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011dba:	4b11      	ldr	r3, [pc, #68]	; (8011e00 <udp_new_port+0x6c>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	603b      	str	r3, [r7, #0]
 8011dc0:	e011      	b.n	8011de6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	8a5a      	ldrh	r2, [r3, #18]
 8011dc6:	4b0d      	ldr	r3, [pc, #52]	; (8011dfc <udp_new_port+0x68>)
 8011dc8:	881b      	ldrh	r3, [r3, #0]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d108      	bne.n	8011de0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011dce:	88fb      	ldrh	r3, [r7, #6]
 8011dd0:	3301      	adds	r3, #1
 8011dd2:	80fb      	strh	r3, [r7, #6]
 8011dd4:	88fb      	ldrh	r3, [r7, #6]
 8011dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011dda:	d3e0      	bcc.n	8011d9e <udp_new_port+0xa>
        return 0;
 8011ddc:	2300      	movs	r3, #0
 8011dde:	e007      	b.n	8011df0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011de0:	683b      	ldr	r3, [r7, #0]
 8011de2:	68db      	ldr	r3, [r3, #12]
 8011de4:	603b      	str	r3, [r7, #0]
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d1ea      	bne.n	8011dc2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011dec:	4b03      	ldr	r3, [pc, #12]	; (8011dfc <udp_new_port+0x68>)
 8011dee:	881b      	ldrh	r3, [r3, #0]
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr
 8011dfc:	20000018 	.word	0x20000018
 8011e00:	2000f054 	.word	0x2000f054

08011e04 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011e04:	b580      	push	{r7, lr}
 8011e06:	b084      	sub	sp, #16
 8011e08:	af00      	add	r7, sp, #0
 8011e0a:	60f8      	str	r0, [r7, #12]
 8011e0c:	60b9      	str	r1, [r7, #8]
 8011e0e:	4613      	mov	r3, r2
 8011e10:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011e12:	68fb      	ldr	r3, [r7, #12]
 8011e14:	2b00      	cmp	r3, #0
 8011e16:	d105      	bne.n	8011e24 <udp_input_local_match+0x20>
 8011e18:	4b27      	ldr	r3, [pc, #156]	; (8011eb8 <udp_input_local_match+0xb4>)
 8011e1a:	2287      	movs	r2, #135	; 0x87
 8011e1c:	4927      	ldr	r1, [pc, #156]	; (8011ebc <udp_input_local_match+0xb8>)
 8011e1e:	4828      	ldr	r0, [pc, #160]	; (8011ec0 <udp_input_local_match+0xbc>)
 8011e20:	f005 f826 	bl	8016e70 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011e24:	68bb      	ldr	r3, [r7, #8]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d105      	bne.n	8011e36 <udp_input_local_match+0x32>
 8011e2a:	4b23      	ldr	r3, [pc, #140]	; (8011eb8 <udp_input_local_match+0xb4>)
 8011e2c:	2288      	movs	r2, #136	; 0x88
 8011e2e:	4925      	ldr	r1, [pc, #148]	; (8011ec4 <udp_input_local_match+0xc0>)
 8011e30:	4823      	ldr	r0, [pc, #140]	; (8011ec0 <udp_input_local_match+0xbc>)
 8011e32:	f005 f81d 	bl	8016e70 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	7a1b      	ldrb	r3, [r3, #8]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00b      	beq.n	8011e56 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	7a1a      	ldrb	r2, [r3, #8]
 8011e42:	4b21      	ldr	r3, [pc, #132]	; (8011ec8 <udp_input_local_match+0xc4>)
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011e4a:	3301      	adds	r3, #1
 8011e4c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011e4e:	429a      	cmp	r2, r3
 8011e50:	d001      	beq.n	8011e56 <udp_input_local_match+0x52>
    return 0;
 8011e52:	2300      	movs	r3, #0
 8011e54:	e02b      	b.n	8011eae <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011e56:	79fb      	ldrb	r3, [r7, #7]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d018      	beq.n	8011e8e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e5c:	68fb      	ldr	r3, [r7, #12]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d013      	beq.n	8011e8a <udp_input_local_match+0x86>
 8011e62:	68fb      	ldr	r3, [r7, #12]
 8011e64:	681b      	ldr	r3, [r3, #0]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00f      	beq.n	8011e8a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011e6a:	4b17      	ldr	r3, [pc, #92]	; (8011ec8 <udp_input_local_match+0xc4>)
 8011e6c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011e72:	d00a      	beq.n	8011e8a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	681a      	ldr	r2, [r3, #0]
 8011e78:	4b13      	ldr	r3, [pc, #76]	; (8011ec8 <udp_input_local_match+0xc4>)
 8011e7a:	695b      	ldr	r3, [r3, #20]
 8011e7c:	405a      	eors	r2, r3
 8011e7e:	68bb      	ldr	r3, [r7, #8]
 8011e80:	3308      	adds	r3, #8
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011e86:	2b00      	cmp	r3, #0
 8011e88:	d110      	bne.n	8011eac <udp_input_local_match+0xa8>
          return 1;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	e00f      	b.n	8011eae <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d009      	beq.n	8011ea8 <udp_input_local_match+0xa4>
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	681b      	ldr	r3, [r3, #0]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d005      	beq.n	8011ea8 <udp_input_local_match+0xa4>
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	681a      	ldr	r2, [r3, #0]
 8011ea0:	4b09      	ldr	r3, [pc, #36]	; (8011ec8 <udp_input_local_match+0xc4>)
 8011ea2:	695b      	ldr	r3, [r3, #20]
 8011ea4:	429a      	cmp	r2, r3
 8011ea6:	d101      	bne.n	8011eac <udp_input_local_match+0xa8>
        return 1;
 8011ea8:	2301      	movs	r3, #1
 8011eaa:	e000      	b.n	8011eae <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011eac:	2300      	movs	r3, #0
}
 8011eae:	4618      	mov	r0, r3
 8011eb0:	3710      	adds	r7, #16
 8011eb2:	46bd      	mov	sp, r7
 8011eb4:	bd80      	pop	{r7, pc}
 8011eb6:	bf00      	nop
 8011eb8:	0801ae98 	.word	0x0801ae98
 8011ebc:	0801aec8 	.word	0x0801aec8
 8011ec0:	0801aeec 	.word	0x0801aeec
 8011ec4:	0801af14 	.word	0x0801af14
 8011ec8:	2000b908 	.word	0x2000b908

08011ecc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011ecc:	b590      	push	{r4, r7, lr}
 8011ece:	b08d      	sub	sp, #52	; 0x34
 8011ed0:	af02      	add	r7, sp, #8
 8011ed2:	6078      	str	r0, [r7, #4]
 8011ed4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8011eda:	687b      	ldr	r3, [r7, #4]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d105      	bne.n	8011eec <udp_input+0x20>
 8011ee0:	4b7c      	ldr	r3, [pc, #496]	; (80120d4 <udp_input+0x208>)
 8011ee2:	22cf      	movs	r2, #207	; 0xcf
 8011ee4:	497c      	ldr	r1, [pc, #496]	; (80120d8 <udp_input+0x20c>)
 8011ee6:	487d      	ldr	r0, [pc, #500]	; (80120dc <udp_input+0x210>)
 8011ee8:	f004 ffc2 	bl	8016e70 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8011eec:	683b      	ldr	r3, [r7, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d105      	bne.n	8011efe <udp_input+0x32>
 8011ef2:	4b78      	ldr	r3, [pc, #480]	; (80120d4 <udp_input+0x208>)
 8011ef4:	22d0      	movs	r2, #208	; 0xd0
 8011ef6:	497a      	ldr	r1, [pc, #488]	; (80120e0 <udp_input+0x214>)
 8011ef8:	4878      	ldr	r0, [pc, #480]	; (80120dc <udp_input+0x210>)
 8011efa:	f004 ffb9 	bl	8016e70 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	895b      	ldrh	r3, [r3, #10]
 8011f02:	2b07      	cmp	r3, #7
 8011f04:	d803      	bhi.n	8011f0e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011f06:	6878      	ldr	r0, [r7, #4]
 8011f08:	f7f9 fa8c 	bl	800b424 <pbuf_free>
    goto end;
 8011f0c:	e0de      	b.n	80120cc <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011f0e:	687b      	ldr	r3, [r7, #4]
 8011f10:	685b      	ldr	r3, [r3, #4]
 8011f12:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011f14:	4b73      	ldr	r3, [pc, #460]	; (80120e4 <udp_input+0x218>)
 8011f16:	695b      	ldr	r3, [r3, #20]
 8011f18:	4a72      	ldr	r2, [pc, #456]	; (80120e4 <udp_input+0x218>)
 8011f1a:	6812      	ldr	r2, [r2, #0]
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f003 fe12 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8011f24:	4603      	mov	r3, r0
 8011f26:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011f28:	697b      	ldr	r3, [r7, #20]
 8011f2a:	881b      	ldrh	r3, [r3, #0]
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7f7 fec0 	bl	8009cb4 <lwip_htons>
 8011f34:	4603      	mov	r3, r0
 8011f36:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011f38:	697b      	ldr	r3, [r7, #20]
 8011f3a:	885b      	ldrh	r3, [r3, #2]
 8011f3c:	b29b      	uxth	r3, r3
 8011f3e:	4618      	mov	r0, r3
 8011f40:	f7f7 feb8 	bl	8009cb4 <lwip_htons>
 8011f44:	4603      	mov	r3, r0
 8011f46:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011f48:	2300      	movs	r3, #0
 8011f4a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011f4c:	2300      	movs	r3, #0
 8011f4e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011f50:	2300      	movs	r3, #0
 8011f52:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f54:	4b64      	ldr	r3, [pc, #400]	; (80120e8 <udp_input+0x21c>)
 8011f56:	681b      	ldr	r3, [r3, #0]
 8011f58:	627b      	str	r3, [r7, #36]	; 0x24
 8011f5a:	e054      	b.n	8012006 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	8a5b      	ldrh	r3, [r3, #18]
 8011f60:	89fa      	ldrh	r2, [r7, #14]
 8011f62:	429a      	cmp	r2, r3
 8011f64:	d14a      	bne.n	8011ffc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011f66:	7cfb      	ldrb	r3, [r7, #19]
 8011f68:	461a      	mov	r2, r3
 8011f6a:	6839      	ldr	r1, [r7, #0]
 8011f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f6e:	f7ff ff49 	bl	8011e04 <udp_input_local_match>
 8011f72:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d041      	beq.n	8011ffc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f7a:	7c1b      	ldrb	r3, [r3, #16]
 8011f7c:	f003 0304 	and.w	r3, r3, #4
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d11d      	bne.n	8011fc0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011f84:	69fb      	ldr	r3, [r7, #28]
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d102      	bne.n	8011f90 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f8c:	61fb      	str	r3, [r7, #28]
 8011f8e:	e017      	b.n	8011fc0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011f90:	7cfb      	ldrb	r3, [r7, #19]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d014      	beq.n	8011fc0 <udp_input+0xf4>
 8011f96:	4b53      	ldr	r3, [pc, #332]	; (80120e4 <udp_input+0x218>)
 8011f98:	695b      	ldr	r3, [r3, #20]
 8011f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f9e:	d10f      	bne.n	8011fc0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011fa0:	69fb      	ldr	r3, [r7, #28]
 8011fa2:	681a      	ldr	r2, [r3, #0]
 8011fa4:	683b      	ldr	r3, [r7, #0]
 8011fa6:	3304      	adds	r3, #4
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d008      	beq.n	8011fc0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8011fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fb0:	681a      	ldr	r2, [r3, #0]
 8011fb2:	683b      	ldr	r3, [r7, #0]
 8011fb4:	3304      	adds	r3, #4
 8011fb6:	681b      	ldr	r3, [r3, #0]
 8011fb8:	429a      	cmp	r2, r3
 8011fba:	d101      	bne.n	8011fc0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fc2:	8a9b      	ldrh	r3, [r3, #20]
 8011fc4:	8a3a      	ldrh	r2, [r7, #16]
 8011fc6:	429a      	cmp	r2, r3
 8011fc8:	d118      	bne.n	8011ffc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fcc:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d005      	beq.n	8011fde <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fd4:	685a      	ldr	r2, [r3, #4]
 8011fd6:	4b43      	ldr	r3, [pc, #268]	; (80120e4 <udp_input+0x218>)
 8011fd8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d10e      	bne.n	8011ffc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8011fde:	6a3b      	ldr	r3, [r7, #32]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d014      	beq.n	801200e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe6:	68da      	ldr	r2, [r3, #12]
 8011fe8:	6a3b      	ldr	r3, [r7, #32]
 8011fea:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8011fec:	4b3e      	ldr	r3, [pc, #248]	; (80120e8 <udp_input+0x21c>)
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011ff4:	4a3c      	ldr	r2, [pc, #240]	; (80120e8 <udp_input+0x21c>)
 8011ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ff8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8011ffa:	e008      	b.n	801200e <udp_input+0x142>
      }
    }

    prev = pcb;
 8011ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ffe:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012002:	68db      	ldr	r3, [r3, #12]
 8012004:	627b      	str	r3, [r7, #36]	; 0x24
 8012006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012008:	2b00      	cmp	r3, #0
 801200a:	d1a7      	bne.n	8011f5c <udp_input+0x90>
 801200c:	e000      	b.n	8012010 <udp_input+0x144>
        break;
 801200e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012012:	2b00      	cmp	r3, #0
 8012014:	d101      	bne.n	801201a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012016:	69fb      	ldr	r3, [r7, #28]
 8012018:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801201c:	2b00      	cmp	r3, #0
 801201e:	d002      	beq.n	8012026 <udp_input+0x15a>
    for_us = 1;
 8012020:	2301      	movs	r3, #1
 8012022:	76fb      	strb	r3, [r7, #27]
 8012024:	e00a      	b.n	801203c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012026:	683b      	ldr	r3, [r7, #0]
 8012028:	3304      	adds	r3, #4
 801202a:	681a      	ldr	r2, [r3, #0]
 801202c:	4b2d      	ldr	r3, [pc, #180]	; (80120e4 <udp_input+0x218>)
 801202e:	695b      	ldr	r3, [r3, #20]
 8012030:	429a      	cmp	r2, r3
 8012032:	bf0c      	ite	eq
 8012034:	2301      	moveq	r3, #1
 8012036:	2300      	movne	r3, #0
 8012038:	b2db      	uxtb	r3, r3
 801203a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801203c:	7efb      	ldrb	r3, [r7, #27]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d041      	beq.n	80120c6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012042:	2108      	movs	r1, #8
 8012044:	6878      	ldr	r0, [r7, #4]
 8012046:	f7f9 f967 	bl	800b318 <pbuf_remove_header>
 801204a:	4603      	mov	r3, r0
 801204c:	2b00      	cmp	r3, #0
 801204e:	d00a      	beq.n	8012066 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8012050:	4b20      	ldr	r3, [pc, #128]	; (80120d4 <udp_input+0x208>)
 8012052:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8012056:	4925      	ldr	r1, [pc, #148]	; (80120ec <udp_input+0x220>)
 8012058:	4820      	ldr	r0, [pc, #128]	; (80120dc <udp_input+0x210>)
 801205a:	f004 ff09 	bl	8016e70 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801205e:	6878      	ldr	r0, [r7, #4]
 8012060:	f7f9 f9e0 	bl	800b424 <pbuf_free>
      goto end;
 8012064:	e032      	b.n	80120cc <udp_input+0x200>
    }

    if (pcb != NULL) {
 8012066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012068:	2b00      	cmp	r3, #0
 801206a:	d012      	beq.n	8012092 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801206e:	699b      	ldr	r3, [r3, #24]
 8012070:	2b00      	cmp	r3, #0
 8012072:	d00a      	beq.n	801208a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8012074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012076:	699c      	ldr	r4, [r3, #24]
 8012078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801207a:	69d8      	ldr	r0, [r3, #28]
 801207c:	8a3b      	ldrh	r3, [r7, #16]
 801207e:	9300      	str	r3, [sp, #0]
 8012080:	4b1b      	ldr	r3, [pc, #108]	; (80120f0 <udp_input+0x224>)
 8012082:	687a      	ldr	r2, [r7, #4]
 8012084:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012086:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012088:	e021      	b.n	80120ce <udp_input+0x202>
        pbuf_free(p);
 801208a:	6878      	ldr	r0, [r7, #4]
 801208c:	f7f9 f9ca 	bl	800b424 <pbuf_free>
        goto end;
 8012090:	e01c      	b.n	80120cc <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8012092:	7cfb      	ldrb	r3, [r7, #19]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d112      	bne.n	80120be <udp_input+0x1f2>
 8012098:	4b12      	ldr	r3, [pc, #72]	; (80120e4 <udp_input+0x218>)
 801209a:	695b      	ldr	r3, [r3, #20]
 801209c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120a0:	2be0      	cmp	r3, #224	; 0xe0
 80120a2:	d00c      	beq.n	80120be <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80120a4:	4b0f      	ldr	r3, [pc, #60]	; (80120e4 <udp_input+0x218>)
 80120a6:	899b      	ldrh	r3, [r3, #12]
 80120a8:	3308      	adds	r3, #8
 80120aa:	b29b      	uxth	r3, r3
 80120ac:	b21b      	sxth	r3, r3
 80120ae:	4619      	mov	r1, r3
 80120b0:	6878      	ldr	r0, [r7, #4]
 80120b2:	f7f9 f9a4 	bl	800b3fe <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80120b6:	2103      	movs	r1, #3
 80120b8:	6878      	ldr	r0, [r7, #4]
 80120ba:	f003 fa07 	bl	80154cc <icmp_dest_unreach>
      pbuf_free(p);
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	f7f9 f9b0 	bl	800b424 <pbuf_free>
  return;
 80120c4:	e003      	b.n	80120ce <udp_input+0x202>
    pbuf_free(p);
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	f7f9 f9ac 	bl	800b424 <pbuf_free>
  return;
 80120cc:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80120ce:	372c      	adds	r7, #44	; 0x2c
 80120d0:	46bd      	mov	sp, r7
 80120d2:	bd90      	pop	{r4, r7, pc}
 80120d4:	0801ae98 	.word	0x0801ae98
 80120d8:	0801af3c 	.word	0x0801af3c
 80120dc:	0801aeec 	.word	0x0801aeec
 80120e0:	0801af54 	.word	0x0801af54
 80120e4:	2000b908 	.word	0x2000b908
 80120e8:	2000f054 	.word	0x2000f054
 80120ec:	0801af70 	.word	0x0801af70
 80120f0:	2000b918 	.word	0x2000b918

080120f4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80120f4:	b580      	push	{r7, lr}
 80120f6:	b088      	sub	sp, #32
 80120f8:	af02      	add	r7, sp, #8
 80120fa:	60f8      	str	r0, [r7, #12]
 80120fc:	60b9      	str	r1, [r7, #8]
 80120fe:	607a      	str	r2, [r7, #4]
 8012100:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012102:	68fb      	ldr	r3, [r7, #12]
 8012104:	2b00      	cmp	r3, #0
 8012106:	d109      	bne.n	801211c <udp_sendto_if+0x28>
 8012108:	4b2e      	ldr	r3, [pc, #184]	; (80121c4 <udp_sendto_if+0xd0>)
 801210a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801210e:	492e      	ldr	r1, [pc, #184]	; (80121c8 <udp_sendto_if+0xd4>)
 8012110:	482e      	ldr	r0, [pc, #184]	; (80121cc <udp_sendto_if+0xd8>)
 8012112:	f004 fead 	bl	8016e70 <iprintf>
 8012116:	f06f 030f 	mvn.w	r3, #15
 801211a:	e04f      	b.n	80121bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801211c:	68bb      	ldr	r3, [r7, #8]
 801211e:	2b00      	cmp	r3, #0
 8012120:	d109      	bne.n	8012136 <udp_sendto_if+0x42>
 8012122:	4b28      	ldr	r3, [pc, #160]	; (80121c4 <udp_sendto_if+0xd0>)
 8012124:	f240 2281 	movw	r2, #641	; 0x281
 8012128:	4929      	ldr	r1, [pc, #164]	; (80121d0 <udp_sendto_if+0xdc>)
 801212a:	4828      	ldr	r0, [pc, #160]	; (80121cc <udp_sendto_if+0xd8>)
 801212c:	f004 fea0 	bl	8016e70 <iprintf>
 8012130:	f06f 030f 	mvn.w	r3, #15
 8012134:	e042      	b.n	80121bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	2b00      	cmp	r3, #0
 801213a:	d109      	bne.n	8012150 <udp_sendto_if+0x5c>
 801213c:	4b21      	ldr	r3, [pc, #132]	; (80121c4 <udp_sendto_if+0xd0>)
 801213e:	f240 2282 	movw	r2, #642	; 0x282
 8012142:	4924      	ldr	r1, [pc, #144]	; (80121d4 <udp_sendto_if+0xe0>)
 8012144:	4821      	ldr	r0, [pc, #132]	; (80121cc <udp_sendto_if+0xd8>)
 8012146:	f004 fe93 	bl	8016e70 <iprintf>
 801214a:	f06f 030f 	mvn.w	r3, #15
 801214e:	e035      	b.n	80121bc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8012150:	6a3b      	ldr	r3, [r7, #32]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d109      	bne.n	801216a <udp_sendto_if+0x76>
 8012156:	4b1b      	ldr	r3, [pc, #108]	; (80121c4 <udp_sendto_if+0xd0>)
 8012158:	f240 2283 	movw	r2, #643	; 0x283
 801215c:	491e      	ldr	r1, [pc, #120]	; (80121d8 <udp_sendto_if+0xe4>)
 801215e:	481b      	ldr	r0, [pc, #108]	; (80121cc <udp_sendto_if+0xd8>)
 8012160:	f004 fe86 	bl	8016e70 <iprintf>
 8012164:	f06f 030f 	mvn.w	r3, #15
 8012168:	e028      	b.n	80121bc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d009      	beq.n	8012184 <udp_sendto_if+0x90>
 8012170:	68fb      	ldr	r3, [r7, #12]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d005      	beq.n	8012184 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012180:	2be0      	cmp	r3, #224	; 0xe0
 8012182:	d103      	bne.n	801218c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8012184:	6a3b      	ldr	r3, [r7, #32]
 8012186:	3304      	adds	r3, #4
 8012188:	617b      	str	r3, [r7, #20]
 801218a:	e00b      	b.n	80121a4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801218c:	68fb      	ldr	r3, [r7, #12]
 801218e:	681a      	ldr	r2, [r3, #0]
 8012190:	6a3b      	ldr	r3, [r7, #32]
 8012192:	3304      	adds	r3, #4
 8012194:	681b      	ldr	r3, [r3, #0]
 8012196:	429a      	cmp	r2, r3
 8012198:	d002      	beq.n	80121a0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801219a:	f06f 0303 	mvn.w	r3, #3
 801219e:	e00d      	b.n	80121bc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80121a4:	887a      	ldrh	r2, [r7, #2]
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	9301      	str	r3, [sp, #4]
 80121aa:	6a3b      	ldr	r3, [r7, #32]
 80121ac:	9300      	str	r3, [sp, #0]
 80121ae:	4613      	mov	r3, r2
 80121b0:	687a      	ldr	r2, [r7, #4]
 80121b2:	68b9      	ldr	r1, [r7, #8]
 80121b4:	68f8      	ldr	r0, [r7, #12]
 80121b6:	f000 f811 	bl	80121dc <udp_sendto_if_src>
 80121ba:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}
 80121c4:	0801ae98 	.word	0x0801ae98
 80121c8:	0801b00c 	.word	0x0801b00c
 80121cc:	0801aeec 	.word	0x0801aeec
 80121d0:	0801b028 	.word	0x0801b028
 80121d4:	0801b044 	.word	0x0801b044
 80121d8:	0801b064 	.word	0x0801b064

080121dc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08c      	sub	sp, #48	; 0x30
 80121e0:	af04      	add	r7, sp, #16
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
 80121e8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80121ea:	68fb      	ldr	r3, [r7, #12]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d109      	bne.n	8012204 <udp_sendto_if_src+0x28>
 80121f0:	4b65      	ldr	r3, [pc, #404]	; (8012388 <udp_sendto_if_src+0x1ac>)
 80121f2:	f240 22d1 	movw	r2, #721	; 0x2d1
 80121f6:	4965      	ldr	r1, [pc, #404]	; (801238c <udp_sendto_if_src+0x1b0>)
 80121f8:	4865      	ldr	r0, [pc, #404]	; (8012390 <udp_sendto_if_src+0x1b4>)
 80121fa:	f004 fe39 	bl	8016e70 <iprintf>
 80121fe:	f06f 030f 	mvn.w	r3, #15
 8012202:	e0bc      	b.n	801237e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	2b00      	cmp	r3, #0
 8012208:	d109      	bne.n	801221e <udp_sendto_if_src+0x42>
 801220a:	4b5f      	ldr	r3, [pc, #380]	; (8012388 <udp_sendto_if_src+0x1ac>)
 801220c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012210:	4960      	ldr	r1, [pc, #384]	; (8012394 <udp_sendto_if_src+0x1b8>)
 8012212:	485f      	ldr	r0, [pc, #380]	; (8012390 <udp_sendto_if_src+0x1b4>)
 8012214:	f004 fe2c 	bl	8016e70 <iprintf>
 8012218:	f06f 030f 	mvn.w	r3, #15
 801221c:	e0af      	b.n	801237e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	2b00      	cmp	r3, #0
 8012222:	d109      	bne.n	8012238 <udp_sendto_if_src+0x5c>
 8012224:	4b58      	ldr	r3, [pc, #352]	; (8012388 <udp_sendto_if_src+0x1ac>)
 8012226:	f240 22d3 	movw	r2, #723	; 0x2d3
 801222a:	495b      	ldr	r1, [pc, #364]	; (8012398 <udp_sendto_if_src+0x1bc>)
 801222c:	4858      	ldr	r0, [pc, #352]	; (8012390 <udp_sendto_if_src+0x1b4>)
 801222e:	f004 fe1f 	bl	8016e70 <iprintf>
 8012232:	f06f 030f 	mvn.w	r3, #15
 8012236:	e0a2      	b.n	801237e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801223a:	2b00      	cmp	r3, #0
 801223c:	d109      	bne.n	8012252 <udp_sendto_if_src+0x76>
 801223e:	4b52      	ldr	r3, [pc, #328]	; (8012388 <udp_sendto_if_src+0x1ac>)
 8012240:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012244:	4955      	ldr	r1, [pc, #340]	; (801239c <udp_sendto_if_src+0x1c0>)
 8012246:	4852      	ldr	r0, [pc, #328]	; (8012390 <udp_sendto_if_src+0x1b4>)
 8012248:	f004 fe12 	bl	8016e70 <iprintf>
 801224c:	f06f 030f 	mvn.w	r3, #15
 8012250:	e095      	b.n	801237e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8012252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012254:	2b00      	cmp	r3, #0
 8012256:	d109      	bne.n	801226c <udp_sendto_if_src+0x90>
 8012258:	4b4b      	ldr	r3, [pc, #300]	; (8012388 <udp_sendto_if_src+0x1ac>)
 801225a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801225e:	4950      	ldr	r1, [pc, #320]	; (80123a0 <udp_sendto_if_src+0x1c4>)
 8012260:	484b      	ldr	r0, [pc, #300]	; (8012390 <udp_sendto_if_src+0x1b4>)
 8012262:	f004 fe05 	bl	8016e70 <iprintf>
 8012266:	f06f 030f 	mvn.w	r3, #15
 801226a:	e088      	b.n	801237e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	8a5b      	ldrh	r3, [r3, #18]
 8012270:	2b00      	cmp	r3, #0
 8012272:	d10f      	bne.n	8012294 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012274:	68f9      	ldr	r1, [r7, #12]
 8012276:	68fb      	ldr	r3, [r7, #12]
 8012278:	8a5b      	ldrh	r3, [r3, #18]
 801227a:	461a      	mov	r2, r3
 801227c:	68f8      	ldr	r0, [r7, #12]
 801227e:	f000 f893 	bl	80123a8 <udp_bind>
 8012282:	4603      	mov	r3, r0
 8012284:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8012286:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801228a:	2b00      	cmp	r3, #0
 801228c:	d002      	beq.n	8012294 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801228e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8012292:	e074      	b.n	801237e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	891b      	ldrh	r3, [r3, #8]
 8012298:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801229c:	4293      	cmp	r3, r2
 801229e:	d902      	bls.n	80122a6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80122a0:	f04f 33ff 	mov.w	r3, #4294967295
 80122a4:	e06b      	b.n	801237e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80122a6:	2108      	movs	r1, #8
 80122a8:	68b8      	ldr	r0, [r7, #8]
 80122aa:	f7f9 f825 	bl	800b2f8 <pbuf_add_header>
 80122ae:	4603      	mov	r3, r0
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d015      	beq.n	80122e0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80122b4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80122b8:	2108      	movs	r1, #8
 80122ba:	2022      	movs	r0, #34	; 0x22
 80122bc:	f7f8 fdce 	bl	800ae5c <pbuf_alloc>
 80122c0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80122c2:	69fb      	ldr	r3, [r7, #28]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d102      	bne.n	80122ce <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80122c8:	f04f 33ff 	mov.w	r3, #4294967295
 80122cc:	e057      	b.n	801237e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80122ce:	68bb      	ldr	r3, [r7, #8]
 80122d0:	891b      	ldrh	r3, [r3, #8]
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d006      	beq.n	80122e4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80122d6:	68b9      	ldr	r1, [r7, #8]
 80122d8:	69f8      	ldr	r0, [r7, #28]
 80122da:	f7f9 f9c7 	bl	800b66c <pbuf_chain>
 80122de:	e001      	b.n	80122e4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80122e0:	68bb      	ldr	r3, [r7, #8]
 80122e2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	895b      	ldrh	r3, [r3, #10]
 80122e8:	2b07      	cmp	r3, #7
 80122ea:	d806      	bhi.n	80122fa <udp_sendto_if_src+0x11e>
 80122ec:	4b26      	ldr	r3, [pc, #152]	; (8012388 <udp_sendto_if_src+0x1ac>)
 80122ee:	f240 320d 	movw	r2, #781	; 0x30d
 80122f2:	492c      	ldr	r1, [pc, #176]	; (80123a4 <udp_sendto_if_src+0x1c8>)
 80122f4:	4826      	ldr	r0, [pc, #152]	; (8012390 <udp_sendto_if_src+0x1b4>)
 80122f6:	f004 fdbb 	bl	8016e70 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80122fa:	69fb      	ldr	r3, [r7, #28]
 80122fc:	685b      	ldr	r3, [r3, #4]
 80122fe:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	8a5b      	ldrh	r3, [r3, #18]
 8012304:	4618      	mov	r0, r3
 8012306:	f7f7 fcd5 	bl	8009cb4 <lwip_htons>
 801230a:	4603      	mov	r3, r0
 801230c:	461a      	mov	r2, r3
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012312:	887b      	ldrh	r3, [r7, #2]
 8012314:	4618      	mov	r0, r3
 8012316:	f7f7 fccd 	bl	8009cb4 <lwip_htons>
 801231a:	4603      	mov	r3, r0
 801231c:	461a      	mov	r2, r3
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012322:	697b      	ldr	r3, [r7, #20]
 8012324:	2200      	movs	r2, #0
 8012326:	719a      	strb	r2, [r3, #6]
 8012328:	2200      	movs	r2, #0
 801232a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801232c:	69fb      	ldr	r3, [r7, #28]
 801232e:	891b      	ldrh	r3, [r3, #8]
 8012330:	4618      	mov	r0, r3
 8012332:	f7f7 fcbf 	bl	8009cb4 <lwip_htons>
 8012336:	4603      	mov	r3, r0
 8012338:	461a      	mov	r2, r3
 801233a:	697b      	ldr	r3, [r7, #20]
 801233c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801233e:	2311      	movs	r3, #17
 8012340:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	7adb      	ldrb	r3, [r3, #11]
 8012346:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	7a9b      	ldrb	r3, [r3, #10]
 801234c:	7cb9      	ldrb	r1, [r7, #18]
 801234e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012350:	9202      	str	r2, [sp, #8]
 8012352:	7cfa      	ldrb	r2, [r7, #19]
 8012354:	9201      	str	r2, [sp, #4]
 8012356:	9300      	str	r3, [sp, #0]
 8012358:	460b      	mov	r3, r1
 801235a:	687a      	ldr	r2, [r7, #4]
 801235c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801235e:	69f8      	ldr	r0, [r7, #28]
 8012360:	f003 fb44 	bl	80159ec <ip4_output_if_src>
 8012364:	4603      	mov	r3, r0
 8012366:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012368:	69fa      	ldr	r2, [r7, #28]
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	429a      	cmp	r2, r3
 801236e:	d004      	beq.n	801237a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8012370:	69f8      	ldr	r0, [r7, #28]
 8012372:	f7f9 f857 	bl	800b424 <pbuf_free>
    q = NULL;
 8012376:	2300      	movs	r3, #0
 8012378:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801237a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801237e:	4618      	mov	r0, r3
 8012380:	3720      	adds	r7, #32
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	0801ae98 	.word	0x0801ae98
 801238c:	0801b084 	.word	0x0801b084
 8012390:	0801aeec 	.word	0x0801aeec
 8012394:	0801b0a4 	.word	0x0801b0a4
 8012398:	0801b0c4 	.word	0x0801b0c4
 801239c:	0801b0e8 	.word	0x0801b0e8
 80123a0:	0801b10c 	.word	0x0801b10c
 80123a4:	0801b130 	.word	0x0801b130

080123a8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123a8:	b580      	push	{r7, lr}
 80123aa:	b086      	sub	sp, #24
 80123ac:	af00      	add	r7, sp, #0
 80123ae:	60f8      	str	r0, [r7, #12]
 80123b0:	60b9      	str	r1, [r7, #8]
 80123b2:	4613      	mov	r3, r2
 80123b4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d101      	bne.n	80123c0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80123bc:	4b39      	ldr	r3, [pc, #228]	; (80124a4 <udp_bind+0xfc>)
 80123be:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d109      	bne.n	80123da <udp_bind+0x32>
 80123c6:	4b38      	ldr	r3, [pc, #224]	; (80124a8 <udp_bind+0x100>)
 80123c8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80123cc:	4937      	ldr	r1, [pc, #220]	; (80124ac <udp_bind+0x104>)
 80123ce:	4838      	ldr	r0, [pc, #224]	; (80124b0 <udp_bind+0x108>)
 80123d0:	f004 fd4e 	bl	8016e70 <iprintf>
 80123d4:	f06f 030f 	mvn.w	r3, #15
 80123d8:	e060      	b.n	801249c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80123da:	2300      	movs	r3, #0
 80123dc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123de:	4b35      	ldr	r3, [pc, #212]	; (80124b4 <udp_bind+0x10c>)
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	617b      	str	r3, [r7, #20]
 80123e4:	e009      	b.n	80123fa <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	697b      	ldr	r3, [r7, #20]
 80123ea:	429a      	cmp	r2, r3
 80123ec:	d102      	bne.n	80123f4 <udp_bind+0x4c>
      rebind = 1;
 80123ee:	2301      	movs	r3, #1
 80123f0:	74fb      	strb	r3, [r7, #19]
      break;
 80123f2:	e005      	b.n	8012400 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80123f4:	697b      	ldr	r3, [r7, #20]
 80123f6:	68db      	ldr	r3, [r3, #12]
 80123f8:	617b      	str	r3, [r7, #20]
 80123fa:	697b      	ldr	r3, [r7, #20]
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d1f2      	bne.n	80123e6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012400:	88fb      	ldrh	r3, [r7, #6]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d109      	bne.n	801241a <udp_bind+0x72>
    port = udp_new_port();
 8012406:	f7ff fcc5 	bl	8011d94 <udp_new_port>
 801240a:	4603      	mov	r3, r0
 801240c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801240e:	88fb      	ldrh	r3, [r7, #6]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d12c      	bne.n	801246e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012414:	f06f 0307 	mvn.w	r3, #7
 8012418:	e040      	b.n	801249c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801241a:	4b26      	ldr	r3, [pc, #152]	; (80124b4 <udp_bind+0x10c>)
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	617b      	str	r3, [r7, #20]
 8012420:	e022      	b.n	8012468 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012422:	68fa      	ldr	r2, [r7, #12]
 8012424:	697b      	ldr	r3, [r7, #20]
 8012426:	429a      	cmp	r2, r3
 8012428:	d01b      	beq.n	8012462 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801242a:	697b      	ldr	r3, [r7, #20]
 801242c:	8a5b      	ldrh	r3, [r3, #18]
 801242e:	88fa      	ldrh	r2, [r7, #6]
 8012430:	429a      	cmp	r2, r3
 8012432:	d116      	bne.n	8012462 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	681a      	ldr	r2, [r3, #0]
 8012438:	68bb      	ldr	r3, [r7, #8]
 801243a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801243c:	429a      	cmp	r2, r3
 801243e:	d00d      	beq.n	801245c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d00a      	beq.n	801245c <udp_bind+0xb4>
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d006      	beq.n	801245c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801244e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012450:	2b00      	cmp	r3, #0
 8012452:	d003      	beq.n	801245c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d102      	bne.n	8012462 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801245c:	f06f 0307 	mvn.w	r3, #7
 8012460:	e01c      	b.n	801249c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012462:	697b      	ldr	r3, [r7, #20]
 8012464:	68db      	ldr	r3, [r3, #12]
 8012466:	617b      	str	r3, [r7, #20]
 8012468:	697b      	ldr	r3, [r7, #20]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1d9      	bne.n	8012422 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801246e:	68bb      	ldr	r3, [r7, #8]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d002      	beq.n	801247a <udp_bind+0xd2>
 8012474:	68bb      	ldr	r3, [r7, #8]
 8012476:	681b      	ldr	r3, [r3, #0]
 8012478:	e000      	b.n	801247c <udp_bind+0xd4>
 801247a:	2300      	movs	r3, #0
 801247c:	68fa      	ldr	r2, [r7, #12]
 801247e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	88fa      	ldrh	r2, [r7, #6]
 8012484:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012486:	7cfb      	ldrb	r3, [r7, #19]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d106      	bne.n	801249a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801248c:	4b09      	ldr	r3, [pc, #36]	; (80124b4 <udp_bind+0x10c>)
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012494:	4a07      	ldr	r2, [pc, #28]	; (80124b4 <udp_bind+0x10c>)
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801249a:	2300      	movs	r3, #0
}
 801249c:	4618      	mov	r0, r3
 801249e:	3718      	adds	r7, #24
 80124a0:	46bd      	mov	sp, r7
 80124a2:	bd80      	pop	{r7, pc}
 80124a4:	0801bd9c 	.word	0x0801bd9c
 80124a8:	0801ae98 	.word	0x0801ae98
 80124ac:	0801b160 	.word	0x0801b160
 80124b0:	0801aeec 	.word	0x0801aeec
 80124b4:	2000f054 	.word	0x2000f054

080124b8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80124b8:	b580      	push	{r7, lr}
 80124ba:	b086      	sub	sp, #24
 80124bc:	af00      	add	r7, sp, #0
 80124be:	60f8      	str	r0, [r7, #12]
 80124c0:	60b9      	str	r1, [r7, #8]
 80124c2:	4613      	mov	r3, r2
 80124c4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d109      	bne.n	80124e0 <udp_connect+0x28>
 80124cc:	4b2c      	ldr	r3, [pc, #176]	; (8012580 <udp_connect+0xc8>)
 80124ce:	f240 4235 	movw	r2, #1077	; 0x435
 80124d2:	492c      	ldr	r1, [pc, #176]	; (8012584 <udp_connect+0xcc>)
 80124d4:	482c      	ldr	r0, [pc, #176]	; (8012588 <udp_connect+0xd0>)
 80124d6:	f004 fccb 	bl	8016e70 <iprintf>
 80124da:	f06f 030f 	mvn.w	r3, #15
 80124de:	e04b      	b.n	8012578 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80124e0:	68bb      	ldr	r3, [r7, #8]
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	d109      	bne.n	80124fa <udp_connect+0x42>
 80124e6:	4b26      	ldr	r3, [pc, #152]	; (8012580 <udp_connect+0xc8>)
 80124e8:	f240 4236 	movw	r2, #1078	; 0x436
 80124ec:	4927      	ldr	r1, [pc, #156]	; (801258c <udp_connect+0xd4>)
 80124ee:	4826      	ldr	r0, [pc, #152]	; (8012588 <udp_connect+0xd0>)
 80124f0:	f004 fcbe 	bl	8016e70 <iprintf>
 80124f4:	f06f 030f 	mvn.w	r3, #15
 80124f8:	e03e      	b.n	8012578 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80124fa:	68fb      	ldr	r3, [r7, #12]
 80124fc:	8a5b      	ldrh	r3, [r3, #18]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d10f      	bne.n	8012522 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012502:	68f9      	ldr	r1, [r7, #12]
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	8a5b      	ldrh	r3, [r3, #18]
 8012508:	461a      	mov	r2, r3
 801250a:	68f8      	ldr	r0, [r7, #12]
 801250c:	f7ff ff4c 	bl	80123a8 <udp_bind>
 8012510:	4603      	mov	r3, r0
 8012512:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012514:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012518:	2b00      	cmp	r3, #0
 801251a:	d002      	beq.n	8012522 <udp_connect+0x6a>
      return err;
 801251c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012520:	e02a      	b.n	8012578 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012522:	68bb      	ldr	r3, [r7, #8]
 8012524:	2b00      	cmp	r3, #0
 8012526:	d002      	beq.n	801252e <udp_connect+0x76>
 8012528:	68bb      	ldr	r3, [r7, #8]
 801252a:	681b      	ldr	r3, [r3, #0]
 801252c:	e000      	b.n	8012530 <udp_connect+0x78>
 801252e:	2300      	movs	r3, #0
 8012530:	68fa      	ldr	r2, [r7, #12]
 8012532:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012534:	68fb      	ldr	r3, [r7, #12]
 8012536:	88fa      	ldrh	r2, [r7, #6]
 8012538:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	7c1b      	ldrb	r3, [r3, #16]
 801253e:	f043 0304 	orr.w	r3, r3, #4
 8012542:	b2da      	uxtb	r2, r3
 8012544:	68fb      	ldr	r3, [r7, #12]
 8012546:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012548:	4b11      	ldr	r3, [pc, #68]	; (8012590 <udp_connect+0xd8>)
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	617b      	str	r3, [r7, #20]
 801254e:	e008      	b.n	8012562 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	697b      	ldr	r3, [r7, #20]
 8012554:	429a      	cmp	r2, r3
 8012556:	d101      	bne.n	801255c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8012558:	2300      	movs	r3, #0
 801255a:	e00d      	b.n	8012578 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801255c:	697b      	ldr	r3, [r7, #20]
 801255e:	68db      	ldr	r3, [r3, #12]
 8012560:	617b      	str	r3, [r7, #20]
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d1f3      	bne.n	8012550 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012568:	4b09      	ldr	r3, [pc, #36]	; (8012590 <udp_connect+0xd8>)
 801256a:	681a      	ldr	r2, [r3, #0]
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012570:	4a07      	ldr	r2, [pc, #28]	; (8012590 <udp_connect+0xd8>)
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012576:	2300      	movs	r3, #0
}
 8012578:	4618      	mov	r0, r3
 801257a:	3718      	adds	r7, #24
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	0801ae98 	.word	0x0801ae98
 8012584:	0801b178 	.word	0x0801b178
 8012588:	0801aeec 	.word	0x0801aeec
 801258c:	0801b194 	.word	0x0801b194
 8012590:	2000f054 	.word	0x2000f054

08012594 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b084      	sub	sp, #16
 8012598:	af00      	add	r7, sp, #0
 801259a:	60f8      	str	r0, [r7, #12]
 801259c:	60b9      	str	r1, [r7, #8]
 801259e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d107      	bne.n	80125b6 <udp_recv+0x22>
 80125a6:	4b08      	ldr	r3, [pc, #32]	; (80125c8 <udp_recv+0x34>)
 80125a8:	f240 428a 	movw	r2, #1162	; 0x48a
 80125ac:	4907      	ldr	r1, [pc, #28]	; (80125cc <udp_recv+0x38>)
 80125ae:	4808      	ldr	r0, [pc, #32]	; (80125d0 <udp_recv+0x3c>)
 80125b0:	f004 fc5e 	bl	8016e70 <iprintf>
 80125b4:	e005      	b.n	80125c2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80125b6:	68fb      	ldr	r3, [r7, #12]
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	687a      	ldr	r2, [r7, #4]
 80125c0:	61da      	str	r2, [r3, #28]
}
 80125c2:	3710      	adds	r7, #16
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}
 80125c8:	0801ae98 	.word	0x0801ae98
 80125cc:	0801b1cc 	.word	0x0801b1cc
 80125d0:	0801aeec 	.word	0x0801aeec

080125d4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80125d4:	b580      	push	{r7, lr}
 80125d6:	b084      	sub	sp, #16
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d107      	bne.n	80125f2 <udp_remove+0x1e>
 80125e2:	4b19      	ldr	r3, [pc, #100]	; (8012648 <udp_remove+0x74>)
 80125e4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80125e8:	4918      	ldr	r1, [pc, #96]	; (801264c <udp_remove+0x78>)
 80125ea:	4819      	ldr	r0, [pc, #100]	; (8012650 <udp_remove+0x7c>)
 80125ec:	f004 fc40 	bl	8016e70 <iprintf>
 80125f0:	e026      	b.n	8012640 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80125f2:	4b18      	ldr	r3, [pc, #96]	; (8012654 <udp_remove+0x80>)
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	687a      	ldr	r2, [r7, #4]
 80125f8:	429a      	cmp	r2, r3
 80125fa:	d105      	bne.n	8012608 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80125fc:	4b15      	ldr	r3, [pc, #84]	; (8012654 <udp_remove+0x80>)
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	68db      	ldr	r3, [r3, #12]
 8012602:	4a14      	ldr	r2, [pc, #80]	; (8012654 <udp_remove+0x80>)
 8012604:	6013      	str	r3, [r2, #0]
 8012606:	e017      	b.n	8012638 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012608:	4b12      	ldr	r3, [pc, #72]	; (8012654 <udp_remove+0x80>)
 801260a:	681b      	ldr	r3, [r3, #0]
 801260c:	60fb      	str	r3, [r7, #12]
 801260e:	e010      	b.n	8012632 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012610:	68fb      	ldr	r3, [r7, #12]
 8012612:	68db      	ldr	r3, [r3, #12]
 8012614:	2b00      	cmp	r3, #0
 8012616:	d009      	beq.n	801262c <udp_remove+0x58>
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	68db      	ldr	r3, [r3, #12]
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	429a      	cmp	r2, r3
 8012620:	d104      	bne.n	801262c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	68da      	ldr	r2, [r3, #12]
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	60da      	str	r2, [r3, #12]
        break;
 801262a:	e005      	b.n	8012638 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801262c:	68fb      	ldr	r3, [r7, #12]
 801262e:	68db      	ldr	r3, [r3, #12]
 8012630:	60fb      	str	r3, [r7, #12]
 8012632:	68fb      	ldr	r3, [r7, #12]
 8012634:	2b00      	cmp	r3, #0
 8012636:	d1eb      	bne.n	8012610 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012638:	6879      	ldr	r1, [r7, #4]
 801263a:	2000      	movs	r0, #0
 801263c:	f7f8 f842 	bl	800a6c4 <memp_free>
}
 8012640:	3710      	adds	r7, #16
 8012642:	46bd      	mov	sp, r7
 8012644:	bd80      	pop	{r7, pc}
 8012646:	bf00      	nop
 8012648:	0801ae98 	.word	0x0801ae98
 801264c:	0801b1e4 	.word	0x0801b1e4
 8012650:	0801aeec 	.word	0x0801aeec
 8012654:	2000f054 	.word	0x2000f054

08012658 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012658:	b580      	push	{r7, lr}
 801265a:	b082      	sub	sp, #8
 801265c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801265e:	2000      	movs	r0, #0
 8012660:	f7f7 ffde 	bl	800a620 <memp_malloc>
 8012664:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d007      	beq.n	801267c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801266c:	2220      	movs	r2, #32
 801266e:	2100      	movs	r1, #0
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f004 fbf5 	bl	8016e60 <memset>
    pcb->ttl = UDP_TTL;
 8012676:	687b      	ldr	r3, [r7, #4]
 8012678:	22ff      	movs	r2, #255	; 0xff
 801267a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801267c:	687b      	ldr	r3, [r7, #4]
}
 801267e:	4618      	mov	r0, r3
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}

08012686 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012686:	b580      	push	{r7, lr}
 8012688:	b084      	sub	sp, #16
 801268a:	af00      	add	r7, sp, #0
 801268c:	4603      	mov	r3, r0
 801268e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8012690:	f7ff ffe2 	bl	8012658 <udp_new>
 8012694:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012696:	68fb      	ldr	r3, [r7, #12]
}
 8012698:	4618      	mov	r0, r3
 801269a:	3710      	adds	r7, #16
 801269c:	46bd      	mov	sp, r7
 801269e:	bd80      	pop	{r7, pc}

080126a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80126a0:	b480      	push	{r7}
 80126a2:	b085      	sub	sp, #20
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
 80126a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80126aa:	687b      	ldr	r3, [r7, #4]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d01e      	beq.n	80126ee <udp_netif_ip_addr_changed+0x4e>
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d01a      	beq.n	80126ee <udp_netif_ip_addr_changed+0x4e>
 80126b8:	683b      	ldr	r3, [r7, #0]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d017      	beq.n	80126ee <udp_netif_ip_addr_changed+0x4e>
 80126be:	683b      	ldr	r3, [r7, #0]
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d013      	beq.n	80126ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80126c6:	4b0d      	ldr	r3, [pc, #52]	; (80126fc <udp_netif_ip_addr_changed+0x5c>)
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	60fb      	str	r3, [r7, #12]
 80126cc:	e00c      	b.n	80126e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80126ce:	68fb      	ldr	r3, [r7, #12]
 80126d0:	681a      	ldr	r2, [r3, #0]
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	681b      	ldr	r3, [r3, #0]
 80126d6:	429a      	cmp	r2, r3
 80126d8:	d103      	bne.n	80126e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80126da:	683b      	ldr	r3, [r7, #0]
 80126dc:	681a      	ldr	r2, [r3, #0]
 80126de:	68fb      	ldr	r3, [r7, #12]
 80126e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	68db      	ldr	r3, [r3, #12]
 80126e6:	60fb      	str	r3, [r7, #12]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1ef      	bne.n	80126ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80126ee:	bf00      	nop
 80126f0:	3714      	adds	r7, #20
 80126f2:	46bd      	mov	sp, r7
 80126f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f8:	4770      	bx	lr
 80126fa:	bf00      	nop
 80126fc:	2000f054 	.word	0x2000f054

08012700 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012704:	4b20      	ldr	r3, [pc, #128]	; (8012788 <dhcp_inc_pcb_refcount+0x88>)
 8012706:	781b      	ldrb	r3, [r3, #0]
 8012708:	2b00      	cmp	r3, #0
 801270a:	d133      	bne.n	8012774 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801270c:	4b1f      	ldr	r3, [pc, #124]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 801270e:	681b      	ldr	r3, [r3, #0]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d005      	beq.n	8012720 <dhcp_inc_pcb_refcount+0x20>
 8012714:	4b1e      	ldr	r3, [pc, #120]	; (8012790 <dhcp_inc_pcb_refcount+0x90>)
 8012716:	22e5      	movs	r2, #229	; 0xe5
 8012718:	491e      	ldr	r1, [pc, #120]	; (8012794 <dhcp_inc_pcb_refcount+0x94>)
 801271a:	481f      	ldr	r0, [pc, #124]	; (8012798 <dhcp_inc_pcb_refcount+0x98>)
 801271c:	f004 fba8 	bl	8016e70 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012720:	f7ff ff9a 	bl	8012658 <udp_new>
 8012724:	4603      	mov	r3, r0
 8012726:	4a19      	ldr	r2, [pc, #100]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 8012728:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801272a:	4b18      	ldr	r3, [pc, #96]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d102      	bne.n	8012738 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012732:	f04f 33ff 	mov.w	r3, #4294967295
 8012736:	e024      	b.n	8012782 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012738:	4b14      	ldr	r3, [pc, #80]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	7a5a      	ldrb	r2, [r3, #9]
 801273e:	4b13      	ldr	r3, [pc, #76]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 8012740:	681b      	ldr	r3, [r3, #0]
 8012742:	f042 0220 	orr.w	r2, r2, #32
 8012746:	b2d2      	uxtb	r2, r2
 8012748:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801274a:	4b10      	ldr	r3, [pc, #64]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	2244      	movs	r2, #68	; 0x44
 8012750:	4912      	ldr	r1, [pc, #72]	; (801279c <dhcp_inc_pcb_refcount+0x9c>)
 8012752:	4618      	mov	r0, r3
 8012754:	f7ff fe28 	bl	80123a8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012758:	4b0c      	ldr	r3, [pc, #48]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	2243      	movs	r2, #67	; 0x43
 801275e:	490f      	ldr	r1, [pc, #60]	; (801279c <dhcp_inc_pcb_refcount+0x9c>)
 8012760:	4618      	mov	r0, r3
 8012762:	f7ff fea9 	bl	80124b8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012766:	4b09      	ldr	r3, [pc, #36]	; (801278c <dhcp_inc_pcb_refcount+0x8c>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	2200      	movs	r2, #0
 801276c:	490c      	ldr	r1, [pc, #48]	; (80127a0 <dhcp_inc_pcb_refcount+0xa0>)
 801276e:	4618      	mov	r0, r3
 8012770:	f7ff ff10 	bl	8012594 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012774:	4b04      	ldr	r3, [pc, #16]	; (8012788 <dhcp_inc_pcb_refcount+0x88>)
 8012776:	781b      	ldrb	r3, [r3, #0]
 8012778:	3301      	adds	r3, #1
 801277a:	b2da      	uxtb	r2, r3
 801277c:	4b02      	ldr	r3, [pc, #8]	; (8012788 <dhcp_inc_pcb_refcount+0x88>)
 801277e:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012780:	2300      	movs	r3, #0
}
 8012782:	4618      	mov	r0, r3
 8012784:	bd80      	pop	{r7, pc}
 8012786:	bf00      	nop
 8012788:	200085f0 	.word	0x200085f0
 801278c:	200085ec 	.word	0x200085ec
 8012790:	0801b1fc 	.word	0x0801b1fc
 8012794:	0801b234 	.word	0x0801b234
 8012798:	0801b25c 	.word	0x0801b25c
 801279c:	0801bd9c 	.word	0x0801bd9c
 80127a0:	08014035 	.word	0x08014035

080127a4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80127a4:	b580      	push	{r7, lr}
 80127a6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80127a8:	4b0e      	ldr	r3, [pc, #56]	; (80127e4 <dhcp_dec_pcb_refcount+0x40>)
 80127aa:	781b      	ldrb	r3, [r3, #0]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d105      	bne.n	80127bc <dhcp_dec_pcb_refcount+0x18>
 80127b0:	4b0d      	ldr	r3, [pc, #52]	; (80127e8 <dhcp_dec_pcb_refcount+0x44>)
 80127b2:	22ff      	movs	r2, #255	; 0xff
 80127b4:	490d      	ldr	r1, [pc, #52]	; (80127ec <dhcp_dec_pcb_refcount+0x48>)
 80127b6:	480e      	ldr	r0, [pc, #56]	; (80127f0 <dhcp_dec_pcb_refcount+0x4c>)
 80127b8:	f004 fb5a 	bl	8016e70 <iprintf>
  dhcp_pcb_refcount--;
 80127bc:	4b09      	ldr	r3, [pc, #36]	; (80127e4 <dhcp_dec_pcb_refcount+0x40>)
 80127be:	781b      	ldrb	r3, [r3, #0]
 80127c0:	3b01      	subs	r3, #1
 80127c2:	b2da      	uxtb	r2, r3
 80127c4:	4b07      	ldr	r3, [pc, #28]	; (80127e4 <dhcp_dec_pcb_refcount+0x40>)
 80127c6:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 80127c8:	4b06      	ldr	r3, [pc, #24]	; (80127e4 <dhcp_dec_pcb_refcount+0x40>)
 80127ca:	781b      	ldrb	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d107      	bne.n	80127e0 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 80127d0:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <dhcp_dec_pcb_refcount+0x50>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	4618      	mov	r0, r3
 80127d6:	f7ff fefd 	bl	80125d4 <udp_remove>
    dhcp_pcb = NULL;
 80127da:	4b06      	ldr	r3, [pc, #24]	; (80127f4 <dhcp_dec_pcb_refcount+0x50>)
 80127dc:	2200      	movs	r2, #0
 80127de:	601a      	str	r2, [r3, #0]
  }
}
 80127e0:	bf00      	nop
 80127e2:	bd80      	pop	{r7, pc}
 80127e4:	200085f0 	.word	0x200085f0
 80127e8:	0801b1fc 	.word	0x0801b1fc
 80127ec:	0801b284 	.word	0x0801b284
 80127f0:	0801b25c 	.word	0x0801b25c
 80127f4:	200085ec 	.word	0x200085ec

080127f8 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b084      	sub	sp, #16
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012804:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012806:	210c      	movs	r1, #12
 8012808:	68f8      	ldr	r0, [r7, #12]
 801280a:	f001 f855 	bl	80138b8 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801280e:	4b06      	ldr	r3, [pc, #24]	; (8012828 <dhcp_handle_nak+0x30>)
 8012810:	4a05      	ldr	r2, [pc, #20]	; (8012828 <dhcp_handle_nak+0x30>)
 8012812:	4905      	ldr	r1, [pc, #20]	; (8012828 <dhcp_handle_nak+0x30>)
 8012814:	6878      	ldr	r0, [r7, #4]
 8012816:	f7f8 f8f7 	bl	800aa08 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801281a:	6878      	ldr	r0, [r7, #4]
 801281c:	f000 fc48 	bl	80130b0 <dhcp_discover>
}
 8012820:	bf00      	nop
 8012822:	3710      	adds	r7, #16
 8012824:	46bd      	mov	sp, r7
 8012826:	bd80      	pop	{r7, pc}
 8012828:	0801bd9c 	.word	0x0801bd9c

0801282c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 801282c:	b580      	push	{r7, lr}
 801282e:	b084      	sub	sp, #16
 8012830:	af00      	add	r7, sp, #0
 8012832:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012838:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801283a:	2108      	movs	r1, #8
 801283c:	68f8      	ldr	r0, [r7, #12]
 801283e:	f001 f83b 	bl	80138b8 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	331c      	adds	r3, #28
 8012846:	2200      	movs	r2, #0
 8012848:	4619      	mov	r1, r3
 801284a:	6878      	ldr	r0, [r7, #4]
 801284c:	f002 fb3c 	bl	8014ec8 <etharp_query>
 8012850:	4603      	mov	r3, r0
 8012852:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012854:	68fb      	ldr	r3, [r7, #12]
 8012856:	799b      	ldrb	r3, [r3, #6]
 8012858:	2bff      	cmp	r3, #255	; 0xff
 801285a:	d005      	beq.n	8012868 <dhcp_check+0x3c>
    dhcp->tries++;
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	799b      	ldrb	r3, [r3, #6]
 8012860:	3301      	adds	r3, #1
 8012862:	b2da      	uxtb	r2, r3
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8012868:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 801286c:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801286e:	893b      	ldrh	r3, [r7, #8]
 8012870:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012874:	4a06      	ldr	r2, [pc, #24]	; (8012890 <dhcp_check+0x64>)
 8012876:	fb82 1203 	smull	r1, r2, r2, r3
 801287a:	1152      	asrs	r2, r2, #5
 801287c:	17db      	asrs	r3, r3, #31
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	b29a      	uxth	r2, r3
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012886:	bf00      	nop
 8012888:	3710      	adds	r7, #16
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	10624dd3 	.word	0x10624dd3

08012894 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b084      	sub	sp, #16
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80128a2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80128a4:	4b0c      	ldr	r3, [pc, #48]	; (80128d8 <dhcp_handle_offer+0x44>)
 80128a6:	789b      	ldrb	r3, [r3, #2]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d011      	beq.n	80128d0 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	2200      	movs	r2, #0
 80128b0:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80128b2:	4b0a      	ldr	r3, [pc, #40]	; (80128dc <dhcp_handle_offer+0x48>)
 80128b4:	689b      	ldr	r3, [r3, #8]
 80128b6:	4618      	mov	r0, r3
 80128b8:	f7f7 fa11 	bl	8009cde <lwip_htonl>
 80128bc:	4602      	mov	r2, r0
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80128c2:	683b      	ldr	r3, [r7, #0]
 80128c4:	691a      	ldr	r2, [r3, #16]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f000 f808 	bl	80128e0 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 80128d0:	bf00      	nop
 80128d2:	3710      	adds	r7, #16
 80128d4:	46bd      	mov	sp, r7
 80128d6:	bd80      	pop	{r7, pc}
 80128d8:	2000f058 	.word	0x2000f058
 80128dc:	2000f060 	.word	0x2000f060

080128e0 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 80128e0:	b5b0      	push	{r4, r5, r7, lr}
 80128e2:	b08a      	sub	sp, #40	; 0x28
 80128e4:	af02      	add	r7, sp, #8
 80128e6:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d109      	bne.n	8012902 <dhcp_select+0x22>
 80128ee:	4b71      	ldr	r3, [pc, #452]	; (8012ab4 <dhcp_select+0x1d4>)
 80128f0:	f240 1277 	movw	r2, #375	; 0x177
 80128f4:	4970      	ldr	r1, [pc, #448]	; (8012ab8 <dhcp_select+0x1d8>)
 80128f6:	4871      	ldr	r0, [pc, #452]	; (8012abc <dhcp_select+0x1dc>)
 80128f8:	f004 faba 	bl	8016e70 <iprintf>
 80128fc:	f06f 030f 	mvn.w	r3, #15
 8012900:	e0d3      	b.n	8012aaa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012906:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d109      	bne.n	8012922 <dhcp_select+0x42>
 801290e:	4b69      	ldr	r3, [pc, #420]	; (8012ab4 <dhcp_select+0x1d4>)
 8012910:	f240 1279 	movw	r2, #377	; 0x179
 8012914:	496a      	ldr	r1, [pc, #424]	; (8012ac0 <dhcp_select+0x1e0>)
 8012916:	4869      	ldr	r0, [pc, #420]	; (8012abc <dhcp_select+0x1dc>)
 8012918:	f004 faaa 	bl	8016e70 <iprintf>
 801291c:	f06f 0305 	mvn.w	r3, #5
 8012920:	e0c3      	b.n	8012aaa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012922:	2101      	movs	r1, #1
 8012924:	69b8      	ldr	r0, [r7, #24]
 8012926:	f000 ffc7 	bl	80138b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801292a:	f107 030c 	add.w	r3, r7, #12
 801292e:	2203      	movs	r2, #3
 8012930:	69b9      	ldr	r1, [r7, #24]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f001 fc4c 	bl	80141d0 <dhcp_create_msg>
 8012938:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801293a:	697b      	ldr	r3, [r7, #20]
 801293c:	2b00      	cmp	r3, #0
 801293e:	f000 8085 	beq.w	8012a4c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012942:	697b      	ldr	r3, [r7, #20]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012948:	89b8      	ldrh	r0, [r7, #12]
 801294a:	693b      	ldr	r3, [r7, #16]
 801294c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012950:	2302      	movs	r3, #2
 8012952:	2239      	movs	r2, #57	; 0x39
 8012954:	f000 ffca 	bl	80138ec <dhcp_option>
 8012958:	4603      	mov	r3, r0
 801295a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801295c:	89b8      	ldrh	r0, [r7, #12]
 801295e:	693b      	ldr	r3, [r7, #16]
 8012960:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012964:	687b      	ldr	r3, [r7, #4]
 8012966:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012968:	461a      	mov	r2, r3
 801296a:	f001 f819 	bl	80139a0 <dhcp_option_short>
 801296e:	4603      	mov	r3, r0
 8012970:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012972:	89b8      	ldrh	r0, [r7, #12]
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801297a:	2304      	movs	r3, #4
 801297c:	2232      	movs	r2, #50	; 0x32
 801297e:	f000 ffb5 	bl	80138ec <dhcp_option>
 8012982:	4603      	mov	r3, r0
 8012984:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012986:	89bc      	ldrh	r4, [r7, #12]
 8012988:	693b      	ldr	r3, [r7, #16]
 801298a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801298e:	69bb      	ldr	r3, [r7, #24]
 8012990:	69db      	ldr	r3, [r3, #28]
 8012992:	4618      	mov	r0, r3
 8012994:	f7f7 f9a3 	bl	8009cde <lwip_htonl>
 8012998:	4603      	mov	r3, r0
 801299a:	461a      	mov	r2, r3
 801299c:	4629      	mov	r1, r5
 801299e:	4620      	mov	r0, r4
 80129a0:	f001 f830 	bl	8013a04 <dhcp_option_long>
 80129a4:	4603      	mov	r3, r0
 80129a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80129a8:	89b8      	ldrh	r0, [r7, #12]
 80129aa:	693b      	ldr	r3, [r7, #16]
 80129ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129b0:	2304      	movs	r3, #4
 80129b2:	2236      	movs	r2, #54	; 0x36
 80129b4:	f000 ff9a 	bl	80138ec <dhcp_option>
 80129b8:	4603      	mov	r3, r0
 80129ba:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80129bc:	89bc      	ldrh	r4, [r7, #12]
 80129be:	693b      	ldr	r3, [r7, #16]
 80129c0:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80129c4:	69bb      	ldr	r3, [r7, #24]
 80129c6:	699b      	ldr	r3, [r3, #24]
 80129c8:	4618      	mov	r0, r3
 80129ca:	f7f7 f988 	bl	8009cde <lwip_htonl>
 80129ce:	4603      	mov	r3, r0
 80129d0:	461a      	mov	r2, r3
 80129d2:	4629      	mov	r1, r5
 80129d4:	4620      	mov	r0, r4
 80129d6:	f001 f815 	bl	8013a04 <dhcp_option_long>
 80129da:	4603      	mov	r3, r0
 80129dc:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80129de:	89b8      	ldrh	r0, [r7, #12]
 80129e0:	693b      	ldr	r3, [r7, #16]
 80129e2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129e6:	2303      	movs	r3, #3
 80129e8:	2237      	movs	r2, #55	; 0x37
 80129ea:	f000 ff7f 	bl	80138ec <dhcp_option>
 80129ee:	4603      	mov	r3, r0
 80129f0:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80129f2:	2300      	movs	r3, #0
 80129f4:	77bb      	strb	r3, [r7, #30]
 80129f6:	e00e      	b.n	8012a16 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80129f8:	89b8      	ldrh	r0, [r7, #12]
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a00:	7fbb      	ldrb	r3, [r7, #30]
 8012a02:	4a30      	ldr	r2, [pc, #192]	; (8012ac4 <dhcp_select+0x1e4>)
 8012a04:	5cd3      	ldrb	r3, [r2, r3]
 8012a06:	461a      	mov	r2, r3
 8012a08:	f000 ffa4 	bl	8013954 <dhcp_option_byte>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a10:	7fbb      	ldrb	r3, [r7, #30]
 8012a12:	3301      	adds	r3, #1
 8012a14:	77bb      	strb	r3, [r7, #30]
 8012a16:	7fbb      	ldrb	r3, [r7, #30]
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d9ed      	bls.n	80129f8 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012a1c:	89b8      	ldrh	r0, [r7, #12]
 8012a1e:	693b      	ldr	r3, [r7, #16]
 8012a20:	33f0      	adds	r3, #240	; 0xf0
 8012a22:	697a      	ldr	r2, [r7, #20]
 8012a24:	4619      	mov	r1, r3
 8012a26:	f001 fca9 	bl	801437c <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012a2a:	4b27      	ldr	r3, [pc, #156]	; (8012ac8 <dhcp_select+0x1e8>)
 8012a2c:	6818      	ldr	r0, [r3, #0]
 8012a2e:	4b27      	ldr	r3, [pc, #156]	; (8012acc <dhcp_select+0x1ec>)
 8012a30:	9301      	str	r3, [sp, #4]
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	9300      	str	r3, [sp, #0]
 8012a36:	2343      	movs	r3, #67	; 0x43
 8012a38:	4a25      	ldr	r2, [pc, #148]	; (8012ad0 <dhcp_select+0x1f0>)
 8012a3a:	6979      	ldr	r1, [r7, #20]
 8012a3c:	f7ff fbce 	bl	80121dc <udp_sendto_if_src>
 8012a40:	4603      	mov	r3, r0
 8012a42:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012a44:	6978      	ldr	r0, [r7, #20]
 8012a46:	f7f8 fced 	bl	800b424 <pbuf_free>
 8012a4a:	e001      	b.n	8012a50 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012a4c:	23ff      	movs	r3, #255	; 0xff
 8012a4e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	799b      	ldrb	r3, [r3, #6]
 8012a54:	2bff      	cmp	r3, #255	; 0xff
 8012a56:	d005      	beq.n	8012a64 <dhcp_select+0x184>
    dhcp->tries++;
 8012a58:	69bb      	ldr	r3, [r7, #24]
 8012a5a:	799b      	ldrb	r3, [r3, #6]
 8012a5c:	3301      	adds	r3, #1
 8012a5e:	b2da      	uxtb	r2, r3
 8012a60:	69bb      	ldr	r3, [r7, #24]
 8012a62:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012a64:	69bb      	ldr	r3, [r7, #24]
 8012a66:	799b      	ldrb	r3, [r3, #6]
 8012a68:	2b05      	cmp	r3, #5
 8012a6a:	d80d      	bhi.n	8012a88 <dhcp_select+0x1a8>
 8012a6c:	69bb      	ldr	r3, [r7, #24]
 8012a6e:	799b      	ldrb	r3, [r3, #6]
 8012a70:	461a      	mov	r2, r3
 8012a72:	2301      	movs	r3, #1
 8012a74:	4093      	lsls	r3, r2
 8012a76:	b29b      	uxth	r3, r3
 8012a78:	461a      	mov	r2, r3
 8012a7a:	0152      	lsls	r2, r2, #5
 8012a7c:	1ad2      	subs	r2, r2, r3
 8012a7e:	0092      	lsls	r2, r2, #2
 8012a80:	4413      	add	r3, r2
 8012a82:	00db      	lsls	r3, r3, #3
 8012a84:	b29b      	uxth	r3, r3
 8012a86:	e001      	b.n	8012a8c <dhcp_select+0x1ac>
 8012a88:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012a8c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012a8e:	89fb      	ldrh	r3, [r7, #14]
 8012a90:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012a94:	4a0f      	ldr	r2, [pc, #60]	; (8012ad4 <dhcp_select+0x1f4>)
 8012a96:	fb82 1203 	smull	r1, r2, r2, r3
 8012a9a:	1152      	asrs	r2, r2, #5
 8012a9c:	17db      	asrs	r3, r3, #31
 8012a9e:	1ad3      	subs	r3, r2, r3
 8012aa0:	b29a      	uxth	r2, r3
 8012aa2:	69bb      	ldr	r3, [r7, #24]
 8012aa4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012aa6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012aaa:	4618      	mov	r0, r3
 8012aac:	3720      	adds	r7, #32
 8012aae:	46bd      	mov	sp, r7
 8012ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8012ab2:	bf00      	nop
 8012ab4:	0801b1fc 	.word	0x0801b1fc
 8012ab8:	0801b2a8 	.word	0x0801b2a8
 8012abc:	0801b25c 	.word	0x0801b25c
 8012ac0:	0801b2c4 	.word	0x0801b2c4
 8012ac4:	2000001c 	.word	0x2000001c
 8012ac8:	200085ec 	.word	0x200085ec
 8012acc:	0801bd9c 	.word	0x0801bd9c
 8012ad0:	0801bda0 	.word	0x0801bda0
 8012ad4:	10624dd3 	.word	0x10624dd3

08012ad8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b082      	sub	sp, #8
 8012adc:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012ade:	4b27      	ldr	r3, [pc, #156]	; (8012b7c <dhcp_coarse_tmr+0xa4>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	607b      	str	r3, [r7, #4]
 8012ae4:	e042      	b.n	8012b6c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aea:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012aec:	683b      	ldr	r3, [r7, #0]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d039      	beq.n	8012b66 <dhcp_coarse_tmr+0x8e>
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	795b      	ldrb	r3, [r3, #5]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	d035      	beq.n	8012b66 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012afa:	683b      	ldr	r3, [r7, #0]
 8012afc:	8a9b      	ldrh	r3, [r3, #20]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d012      	beq.n	8012b28 <dhcp_coarse_tmr+0x50>
 8012b02:	683b      	ldr	r3, [r7, #0]
 8012b04:	8a5b      	ldrh	r3, [r3, #18]
 8012b06:	3301      	adds	r3, #1
 8012b08:	b29a      	uxth	r2, r3
 8012b0a:	683b      	ldr	r3, [r7, #0]
 8012b0c:	825a      	strh	r2, [r3, #18]
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	8a5a      	ldrh	r2, [r3, #18]
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	8a9b      	ldrh	r3, [r3, #20]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d106      	bne.n	8012b28 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f000 fe32 	bl	8013784 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f000 f969 	bl	8012df8 <dhcp_start>
 8012b26:	e01e      	b.n	8012b66 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012b28:	683b      	ldr	r3, [r7, #0]
 8012b2a:	8a1b      	ldrh	r3, [r3, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d00b      	beq.n	8012b48 <dhcp_coarse_tmr+0x70>
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	8a1b      	ldrh	r3, [r3, #16]
 8012b34:	1e5a      	subs	r2, r3, #1
 8012b36:	b291      	uxth	r1, r2
 8012b38:	683a      	ldr	r2, [r7, #0]
 8012b3a:	8211      	strh	r1, [r2, #16]
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d103      	bne.n	8012b48 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f8c6 	bl	8012cd2 <dhcp_t2_timeout>
 8012b46:	e00e      	b.n	8012b66 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012b48:	683b      	ldr	r3, [r7, #0]
 8012b4a:	89db      	ldrh	r3, [r3, #14]
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d00a      	beq.n	8012b66 <dhcp_coarse_tmr+0x8e>
 8012b50:	683b      	ldr	r3, [r7, #0]
 8012b52:	89db      	ldrh	r3, [r3, #14]
 8012b54:	1e5a      	subs	r2, r3, #1
 8012b56:	b291      	uxth	r1, r2
 8012b58:	683a      	ldr	r2, [r7, #0]
 8012b5a:	81d1      	strh	r1, [r2, #14]
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d102      	bne.n	8012b66 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012b60:	6878      	ldr	r0, [r7, #4]
 8012b62:	f000 f888 	bl	8012c76 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	607b      	str	r3, [r7, #4]
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d1b9      	bne.n	8012ae6 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012b72:	bf00      	nop
 8012b74:	bf00      	nop
 8012b76:	3708      	adds	r7, #8
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}
 8012b7c:	2000f02c 	.word	0x2000f02c

08012b80 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b082      	sub	sp, #8
 8012b84:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012b86:	4b16      	ldr	r3, [pc, #88]	; (8012be0 <dhcp_fine_tmr+0x60>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	607b      	str	r3, [r7, #4]
 8012b8c:	e020      	b.n	8012bd0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b92:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d017      	beq.n	8012bca <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012b9a:	683b      	ldr	r3, [r7, #0]
 8012b9c:	891b      	ldrh	r3, [r3, #8]
 8012b9e:	2b01      	cmp	r3, #1
 8012ba0:	d906      	bls.n	8012bb0 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012ba2:	683b      	ldr	r3, [r7, #0]
 8012ba4:	891b      	ldrh	r3, [r3, #8]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	811a      	strh	r2, [r3, #8]
 8012bae:	e00c      	b.n	8012bca <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	891b      	ldrh	r3, [r3, #8]
 8012bb4:	2b01      	cmp	r3, #1
 8012bb6:	d108      	bne.n	8012bca <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012bb8:	683b      	ldr	r3, [r7, #0]
 8012bba:	891b      	ldrh	r3, [r3, #8]
 8012bbc:	3b01      	subs	r3, #1
 8012bbe:	b29a      	uxth	r2, r3
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012bc4:	6878      	ldr	r0, [r7, #4]
 8012bc6:	f000 f80d 	bl	8012be4 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	607b      	str	r3, [r7, #4]
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1db      	bne.n	8012b8e <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012bd6:	bf00      	nop
 8012bd8:	bf00      	nop
 8012bda:	3708      	adds	r7, #8
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	2000f02c 	.word	0x2000f02c

08012be4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012be4:	b580      	push	{r7, lr}
 8012be6:	b084      	sub	sp, #16
 8012be8:	af00      	add	r7, sp, #0
 8012bea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bf0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	795b      	ldrb	r3, [r3, #5]
 8012bf6:	2b0c      	cmp	r3, #12
 8012bf8:	d003      	beq.n	8012c02 <dhcp_timeout+0x1e>
 8012bfa:	68fb      	ldr	r3, [r7, #12]
 8012bfc:	795b      	ldrb	r3, [r3, #5]
 8012bfe:	2b06      	cmp	r3, #6
 8012c00:	d103      	bne.n	8012c0a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012c02:	6878      	ldr	r0, [r7, #4]
 8012c04:	f000 fa54 	bl	80130b0 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012c08:	e031      	b.n	8012c6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012c0a:	68fb      	ldr	r3, [r7, #12]
 8012c0c:	795b      	ldrb	r3, [r3, #5]
 8012c0e:	2b01      	cmp	r3, #1
 8012c10:	d10e      	bne.n	8012c30 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012c12:	68fb      	ldr	r3, [r7, #12]
 8012c14:	799b      	ldrb	r3, [r3, #6]
 8012c16:	2b05      	cmp	r3, #5
 8012c18:	d803      	bhi.n	8012c22 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f7ff fe60 	bl	80128e0 <dhcp_select>
}
 8012c20:	e025      	b.n	8012c6e <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012c22:	6878      	ldr	r0, [r7, #4]
 8012c24:	f000 fdae 	bl	8013784 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012c28:	6878      	ldr	r0, [r7, #4]
 8012c2a:	f000 f8e5 	bl	8012df8 <dhcp_start>
}
 8012c2e:	e01e      	b.n	8012c6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	795b      	ldrb	r3, [r3, #5]
 8012c34:	2b08      	cmp	r3, #8
 8012c36:	d10b      	bne.n	8012c50 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	799b      	ldrb	r3, [r3, #6]
 8012c3c:	2b01      	cmp	r3, #1
 8012c3e:	d803      	bhi.n	8012c48 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f7ff fdf3 	bl	801282c <dhcp_check>
}
 8012c46:	e012      	b.n	8012c6e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012c48:	6878      	ldr	r0, [r7, #4]
 8012c4a:	f000 fad3 	bl	80131f4 <dhcp_bind>
}
 8012c4e:	e00e      	b.n	8012c6e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	795b      	ldrb	r3, [r3, #5]
 8012c54:	2b03      	cmp	r3, #3
 8012c56:	d10a      	bne.n	8012c6e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	799b      	ldrb	r3, [r3, #6]
 8012c5c:	2b01      	cmp	r3, #1
 8012c5e:	d803      	bhi.n	8012c68 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012c60:	6878      	ldr	r0, [r7, #4]
 8012c62:	f000 fcd9 	bl	8013618 <dhcp_reboot>
}
 8012c66:	e002      	b.n	8012c6e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012c68:	6878      	ldr	r0, [r7, #4]
 8012c6a:	f000 fa21 	bl	80130b0 <dhcp_discover>
}
 8012c6e:	bf00      	nop
 8012c70:	3710      	adds	r7, #16
 8012c72:	46bd      	mov	sp, r7
 8012c74:	bd80      	pop	{r7, pc}

08012c76 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012c76:	b580      	push	{r7, lr}
 8012c78:	b084      	sub	sp, #16
 8012c7a:	af00      	add	r7, sp, #0
 8012c7c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c82:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	795b      	ldrb	r3, [r3, #5]
 8012c88:	2b01      	cmp	r3, #1
 8012c8a:	d007      	beq.n	8012c9c <dhcp_t1_timeout+0x26>
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	795b      	ldrb	r3, [r3, #5]
 8012c90:	2b0a      	cmp	r3, #10
 8012c92:	d003      	beq.n	8012c9c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012c98:	2b05      	cmp	r3, #5
 8012c9a:	d116      	bne.n	8012cca <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f000 fb83 	bl	80133a8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012ca2:	68fb      	ldr	r3, [r7, #12]
 8012ca4:	899b      	ldrh	r3, [r3, #12]
 8012ca6:	461a      	mov	r2, r3
 8012ca8:	68fb      	ldr	r3, [r7, #12]
 8012caa:	8a5b      	ldrh	r3, [r3, #18]
 8012cac:	1ad3      	subs	r3, r2, r3
 8012cae:	2b01      	cmp	r3, #1
 8012cb0:	dd0b      	ble.n	8012cca <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	899b      	ldrh	r3, [r3, #12]
 8012cb6:	461a      	mov	r2, r3
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	8a5b      	ldrh	r3, [r3, #18]
 8012cbc:	1ad3      	subs	r3, r2, r3
 8012cbe:	0fda      	lsrs	r2, r3, #31
 8012cc0:	4413      	add	r3, r2
 8012cc2:	105b      	asrs	r3, r3, #1
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012cca:	bf00      	nop
 8012ccc:	3710      	adds	r7, #16
 8012cce:	46bd      	mov	sp, r7
 8012cd0:	bd80      	pop	{r7, pc}

08012cd2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012cd2:	b580      	push	{r7, lr}
 8012cd4:	b084      	sub	sp, #16
 8012cd6:	af00      	add	r7, sp, #0
 8012cd8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012cde:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	795b      	ldrb	r3, [r3, #5]
 8012ce4:	2b01      	cmp	r3, #1
 8012ce6:	d00b      	beq.n	8012d00 <dhcp_t2_timeout+0x2e>
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	795b      	ldrb	r3, [r3, #5]
 8012cec:	2b0a      	cmp	r3, #10
 8012cee:	d007      	beq.n	8012d00 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012cf4:	2b05      	cmp	r3, #5
 8012cf6:	d003      	beq.n	8012d00 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	795b      	ldrb	r3, [r3, #5]
 8012cfc:	2b04      	cmp	r3, #4
 8012cfe:	d116      	bne.n	8012d2e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012d00:	6878      	ldr	r0, [r7, #4]
 8012d02:	f000 fbed 	bl	80134e0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	8a9b      	ldrh	r3, [r3, #20]
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	68fb      	ldr	r3, [r7, #12]
 8012d0e:	8a5b      	ldrh	r3, [r3, #18]
 8012d10:	1ad3      	subs	r3, r2, r3
 8012d12:	2b01      	cmp	r3, #1
 8012d14:	dd0b      	ble.n	8012d2e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012d16:	68fb      	ldr	r3, [r7, #12]
 8012d18:	8a9b      	ldrh	r3, [r3, #20]
 8012d1a:	461a      	mov	r2, r3
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	8a5b      	ldrh	r3, [r3, #18]
 8012d20:	1ad3      	subs	r3, r2, r3
 8012d22:	0fda      	lsrs	r2, r3, #31
 8012d24:	4413      	add	r3, r2
 8012d26:	105b      	asrs	r3, r3, #1
 8012d28:	b29a      	uxth	r2, r3
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012d2e:	bf00      	nop
 8012d30:	3710      	adds	r7, #16
 8012d32:	46bd      	mov	sp, r7
 8012d34:	bd80      	pop	{r7, pc}
	...

08012d38 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b084      	sub	sp, #16
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	6078      	str	r0, [r7, #4]
 8012d40:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012d46:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012d48:	68fb      	ldr	r3, [r7, #12]
 8012d4a:	2200      	movs	r2, #0
 8012d4c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	2200      	movs	r2, #0
 8012d52:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012d54:	4b26      	ldr	r3, [pc, #152]	; (8012df0 <dhcp_handle_ack+0xb8>)
 8012d56:	78db      	ldrb	r3, [r3, #3]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d003      	beq.n	8012d64 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012d5c:	4b25      	ldr	r3, [pc, #148]	; (8012df4 <dhcp_handle_ack+0xbc>)
 8012d5e:	68da      	ldr	r2, [r3, #12]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012d64:	4b22      	ldr	r3, [pc, #136]	; (8012df0 <dhcp_handle_ack+0xb8>)
 8012d66:	791b      	ldrb	r3, [r3, #4]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d004      	beq.n	8012d76 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012d6c:	4b21      	ldr	r3, [pc, #132]	; (8012df4 <dhcp_handle_ack+0xbc>)
 8012d6e:	691a      	ldr	r2, [r3, #16]
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	62da      	str	r2, [r3, #44]	; 0x2c
 8012d74:	e004      	b.n	8012d80 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d7a:	085a      	lsrs	r2, r3, #1
 8012d7c:	68fb      	ldr	r3, [r7, #12]
 8012d7e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012d80:	4b1b      	ldr	r3, [pc, #108]	; (8012df0 <dhcp_handle_ack+0xb8>)
 8012d82:	795b      	ldrb	r3, [r3, #5]
 8012d84:	2b00      	cmp	r3, #0
 8012d86:	d004      	beq.n	8012d92 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012d88:	4b1a      	ldr	r3, [pc, #104]	; (8012df4 <dhcp_handle_ack+0xbc>)
 8012d8a:	695a      	ldr	r2, [r3, #20]
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	631a      	str	r2, [r3, #48]	; 0x30
 8012d90:	e007      	b.n	8012da2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012d92:	68fb      	ldr	r3, [r7, #12]
 8012d94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012d96:	4613      	mov	r3, r2
 8012d98:	00db      	lsls	r3, r3, #3
 8012d9a:	1a9b      	subs	r3, r3, r2
 8012d9c:	08da      	lsrs	r2, r3, #3
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	691a      	ldr	r2, [r3, #16]
 8012da6:	68fb      	ldr	r3, [r7, #12]
 8012da8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012daa:	4b11      	ldr	r3, [pc, #68]	; (8012df0 <dhcp_handle_ack+0xb8>)
 8012dac:	799b      	ldrb	r3, [r3, #6]
 8012dae:	2b00      	cmp	r3, #0
 8012db0:	d00b      	beq.n	8012dca <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012db2:	4b10      	ldr	r3, [pc, #64]	; (8012df4 <dhcp_handle_ack+0xbc>)
 8012db4:	699b      	ldr	r3, [r3, #24]
 8012db6:	4618      	mov	r0, r3
 8012db8:	f7f6 ff91 	bl	8009cde <lwip_htonl>
 8012dbc:	4602      	mov	r2, r0
 8012dbe:	68fb      	ldr	r3, [r7, #12]
 8012dc0:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	71da      	strb	r2, [r3, #7]
 8012dc8:	e002      	b.n	8012dd0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012dca:	68fb      	ldr	r3, [r7, #12]
 8012dcc:	2200      	movs	r2, #0
 8012dce:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012dd0:	4b07      	ldr	r3, [pc, #28]	; (8012df0 <dhcp_handle_ack+0xb8>)
 8012dd2:	79db      	ldrb	r3, [r3, #7]
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d007      	beq.n	8012de8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012dd8:	4b06      	ldr	r3, [pc, #24]	; (8012df4 <dhcp_handle_ack+0xbc>)
 8012dda:	69db      	ldr	r3, [r3, #28]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7f6 ff7e 	bl	8009cde <lwip_htonl>
 8012de2:	4602      	mov	r2, r0
 8012de4:	68fb      	ldr	r3, [r7, #12]
 8012de6:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012de8:	bf00      	nop
 8012dea:	3710      	adds	r7, #16
 8012dec:	46bd      	mov	sp, r7
 8012dee:	bd80      	pop	{r7, pc}
 8012df0:	2000f058 	.word	0x2000f058
 8012df4:	2000f060 	.word	0x2000f060

08012df8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b084      	sub	sp, #16
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d109      	bne.n	8012e1a <dhcp_start+0x22>
 8012e06:	4b37      	ldr	r3, [pc, #220]	; (8012ee4 <dhcp_start+0xec>)
 8012e08:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012e0c:	4936      	ldr	r1, [pc, #216]	; (8012ee8 <dhcp_start+0xf0>)
 8012e0e:	4837      	ldr	r0, [pc, #220]	; (8012eec <dhcp_start+0xf4>)
 8012e10:	f004 f82e 	bl	8016e70 <iprintf>
 8012e14:	f06f 030f 	mvn.w	r3, #15
 8012e18:	e060      	b.n	8012edc <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012e20:	f003 0301 	and.w	r3, r3, #1
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d109      	bne.n	8012e3c <dhcp_start+0x44>
 8012e28:	4b2e      	ldr	r3, [pc, #184]	; (8012ee4 <dhcp_start+0xec>)
 8012e2a:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012e2e:	4930      	ldr	r1, [pc, #192]	; (8012ef0 <dhcp_start+0xf8>)
 8012e30:	482e      	ldr	r0, [pc, #184]	; (8012eec <dhcp_start+0xf4>)
 8012e32:	f004 f81d 	bl	8016e70 <iprintf>
 8012e36:	f06f 030f 	mvn.w	r3, #15
 8012e3a:	e04f      	b.n	8012edc <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012e40:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012e46:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012e4a:	d202      	bcs.n	8012e52 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012e4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012e50:	e044      	b.n	8012edc <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d10d      	bne.n	8012e74 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012e58:	2034      	movs	r0, #52	; 0x34
 8012e5a:	f7f7 fa5f 	bl	800a31c <mem_malloc>
 8012e5e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d102      	bne.n	8012e6c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012e66:	f04f 33ff 	mov.w	r3, #4294967295
 8012e6a:	e037      	b.n	8012edc <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	68fa      	ldr	r2, [r7, #12]
 8012e70:	625a      	str	r2, [r3, #36]	; 0x24
 8012e72:	e005      	b.n	8012e80 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	791b      	ldrb	r3, [r3, #4]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d001      	beq.n	8012e80 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012e7c:	f7ff fc92 	bl	80127a4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012e80:	2234      	movs	r2, #52	; 0x34
 8012e82:	2100      	movs	r1, #0
 8012e84:	68f8      	ldr	r0, [r7, #12]
 8012e86:	f003 ffeb 	bl	8016e60 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012e8a:	f7ff fc39 	bl	8012700 <dhcp_inc_pcb_refcount>
 8012e8e:	4603      	mov	r3, r0
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d002      	beq.n	8012e9a <dhcp_start+0xa2>
    return ERR_MEM;
 8012e94:	f04f 33ff 	mov.w	r3, #4294967295
 8012e98:	e020      	b.n	8012edc <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012e9a:	68fb      	ldr	r3, [r7, #12]
 8012e9c:	2201      	movs	r2, #1
 8012e9e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8012ea6:	f003 0304 	and.w	r3, r3, #4
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d105      	bne.n	8012eba <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012eae:	2102      	movs	r1, #2
 8012eb0:	68f8      	ldr	r0, [r7, #12]
 8012eb2:	f000 fd01 	bl	80138b8 <dhcp_set_state>
    return ERR_OK;
 8012eb6:	2300      	movs	r3, #0
 8012eb8:	e010      	b.n	8012edc <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012eba:	6878      	ldr	r0, [r7, #4]
 8012ebc:	f000 f8f8 	bl	80130b0 <dhcp_discover>
 8012ec0:	4603      	mov	r3, r0
 8012ec2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8012ec4:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d005      	beq.n	8012ed8 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012ecc:	6878      	ldr	r0, [r7, #4]
 8012ece:	f000 fc59 	bl	8013784 <dhcp_release_and_stop>
    return ERR_MEM;
 8012ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8012ed6:	e001      	b.n	8012edc <dhcp_start+0xe4>
  }
  return result;
 8012ed8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012edc:	4618      	mov	r0, r3
 8012ede:	3710      	adds	r7, #16
 8012ee0:	46bd      	mov	sp, r7
 8012ee2:	bd80      	pop	{r7, pc}
 8012ee4:	0801b1fc 	.word	0x0801b1fc
 8012ee8:	0801b2e0 	.word	0x0801b2e0
 8012eec:	0801b25c 	.word	0x0801b25c
 8012ef0:	0801b324 	.word	0x0801b324

08012ef4 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8012ef4:	b580      	push	{r7, lr}
 8012ef6:	b084      	sub	sp, #16
 8012ef8:	af00      	add	r7, sp, #0
 8012efa:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012efc:	687b      	ldr	r3, [r7, #4]
 8012efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f00:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8012f02:	68fb      	ldr	r3, [r7, #12]
 8012f04:	2b00      	cmp	r3, #0
 8012f06:	d025      	beq.n	8012f54 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8012f08:	68fb      	ldr	r3, [r7, #12]
 8012f0a:	795b      	ldrb	r3, [r3, #5]
 8012f0c:	2b0a      	cmp	r3, #10
 8012f0e:	d008      	beq.n	8012f22 <dhcp_network_changed+0x2e>
 8012f10:	2b0a      	cmp	r3, #10
 8012f12:	dc0d      	bgt.n	8012f30 <dhcp_network_changed+0x3c>
 8012f14:	2b00      	cmp	r3, #0
 8012f16:	d01f      	beq.n	8012f58 <dhcp_network_changed+0x64>
 8012f18:	2b00      	cmp	r3, #0
 8012f1a:	db09      	blt.n	8012f30 <dhcp_network_changed+0x3c>
 8012f1c:	3b03      	subs	r3, #3
 8012f1e:	2b02      	cmp	r3, #2
 8012f20:	d806      	bhi.n	8012f30 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	2200      	movs	r2, #0
 8012f26:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8012f28:	6878      	ldr	r0, [r7, #4]
 8012f2a:	f000 fb75 	bl	8013618 <dhcp_reboot>
      break;
 8012f2e:	e014      	b.n	8012f5a <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	795b      	ldrb	r3, [r3, #5]
 8012f34:	2b0c      	cmp	r3, #12
 8012f36:	d906      	bls.n	8012f46 <dhcp_network_changed+0x52>
 8012f38:	4b09      	ldr	r3, [pc, #36]	; (8012f60 <dhcp_network_changed+0x6c>)
 8012f3a:	f240 326d 	movw	r2, #877	; 0x36d
 8012f3e:	4909      	ldr	r1, [pc, #36]	; (8012f64 <dhcp_network_changed+0x70>)
 8012f40:	4809      	ldr	r0, [pc, #36]	; (8012f68 <dhcp_network_changed+0x74>)
 8012f42:	f003 ff95 	bl	8016e70 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	2200      	movs	r2, #0
 8012f4a:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012f4c:	6878      	ldr	r0, [r7, #4]
 8012f4e:	f000 f8af 	bl	80130b0 <dhcp_discover>
      break;
 8012f52:	e002      	b.n	8012f5a <dhcp_network_changed+0x66>
    return;
 8012f54:	bf00      	nop
 8012f56:	e000      	b.n	8012f5a <dhcp_network_changed+0x66>
      break;
 8012f58:	bf00      	nop
  }
}
 8012f5a:	3710      	adds	r7, #16
 8012f5c:	46bd      	mov	sp, r7
 8012f5e:	bd80      	pop	{r7, pc}
 8012f60:	0801b1fc 	.word	0x0801b1fc
 8012f64:	0801b348 	.word	0x0801b348
 8012f68:	0801b25c 	.word	0x0801b25c

08012f6c <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012f6c:	b580      	push	{r7, lr}
 8012f6e:	b084      	sub	sp, #16
 8012f70:	af00      	add	r7, sp, #0
 8012f72:	6078      	str	r0, [r7, #4]
 8012f74:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d107      	bne.n	8012f8c <dhcp_arp_reply+0x20>
 8012f7c:	4b0e      	ldr	r3, [pc, #56]	; (8012fb8 <dhcp_arp_reply+0x4c>)
 8012f7e:	f240 328b 	movw	r2, #907	; 0x38b
 8012f82:	490e      	ldr	r1, [pc, #56]	; (8012fbc <dhcp_arp_reply+0x50>)
 8012f84:	480e      	ldr	r0, [pc, #56]	; (8012fc0 <dhcp_arp_reply+0x54>)
 8012f86:	f003 ff73 	bl	8016e70 <iprintf>
 8012f8a:	e012      	b.n	8012fb2 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f90:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	2b00      	cmp	r3, #0
 8012f96:	d00c      	beq.n	8012fb2 <dhcp_arp_reply+0x46>
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	795b      	ldrb	r3, [r3, #5]
 8012f9c:	2b08      	cmp	r3, #8
 8012f9e:	d108      	bne.n	8012fb2 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012fa0:	683b      	ldr	r3, [r7, #0]
 8012fa2:	681a      	ldr	r2, [r3, #0]
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	69db      	ldr	r3, [r3, #28]
 8012fa8:	429a      	cmp	r2, r3
 8012faa:	d102      	bne.n	8012fb2 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	f000 f809 	bl	8012fc4 <dhcp_decline>
    }
  }
}
 8012fb2:	3710      	adds	r7, #16
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}
 8012fb8:	0801b1fc 	.word	0x0801b1fc
 8012fbc:	0801b2e0 	.word	0x0801b2e0
 8012fc0:	0801b25c 	.word	0x0801b25c

08012fc4 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8012fc4:	b5b0      	push	{r4, r5, r7, lr}
 8012fc6:	b08a      	sub	sp, #40	; 0x28
 8012fc8:	af02      	add	r7, sp, #8
 8012fca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd0:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012fd2:	210c      	movs	r1, #12
 8012fd4:	69b8      	ldr	r0, [r7, #24]
 8012fd6:	f000 fc6f 	bl	80138b8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012fda:	f107 030c 	add.w	r3, r7, #12
 8012fde:	2204      	movs	r2, #4
 8012fe0:	69b9      	ldr	r1, [r7, #24]
 8012fe2:	6878      	ldr	r0, [r7, #4]
 8012fe4:	f001 f8f4 	bl	80141d0 <dhcp_create_msg>
 8012fe8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012fea:	697b      	ldr	r3, [r7, #20]
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d035      	beq.n	801305c <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012ff0:	697b      	ldr	r3, [r7, #20]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012ff6:	89b8      	ldrh	r0, [r7, #12]
 8012ff8:	693b      	ldr	r3, [r7, #16]
 8012ffa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ffe:	2304      	movs	r3, #4
 8013000:	2232      	movs	r2, #50	; 0x32
 8013002:	f000 fc73 	bl	80138ec <dhcp_option>
 8013006:	4603      	mov	r3, r0
 8013008:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801300a:	89bc      	ldrh	r4, [r7, #12]
 801300c:	693b      	ldr	r3, [r7, #16]
 801300e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013012:	69bb      	ldr	r3, [r7, #24]
 8013014:	69db      	ldr	r3, [r3, #28]
 8013016:	4618      	mov	r0, r3
 8013018:	f7f6 fe61 	bl	8009cde <lwip_htonl>
 801301c:	4603      	mov	r3, r0
 801301e:	461a      	mov	r2, r3
 8013020:	4629      	mov	r1, r5
 8013022:	4620      	mov	r0, r4
 8013024:	f000 fcee 	bl	8013a04 <dhcp_option_long>
 8013028:	4603      	mov	r3, r0
 801302a:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801302c:	89b8      	ldrh	r0, [r7, #12]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	33f0      	adds	r3, #240	; 0xf0
 8013032:	697a      	ldr	r2, [r7, #20]
 8013034:	4619      	mov	r1, r3
 8013036:	f001 f9a1 	bl	801437c <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801303a:	4b19      	ldr	r3, [pc, #100]	; (80130a0 <dhcp_decline+0xdc>)
 801303c:	6818      	ldr	r0, [r3, #0]
 801303e:	4b19      	ldr	r3, [pc, #100]	; (80130a4 <dhcp_decline+0xe0>)
 8013040:	9301      	str	r3, [sp, #4]
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	9300      	str	r3, [sp, #0]
 8013046:	2343      	movs	r3, #67	; 0x43
 8013048:	4a17      	ldr	r2, [pc, #92]	; (80130a8 <dhcp_decline+0xe4>)
 801304a:	6979      	ldr	r1, [r7, #20]
 801304c:	f7ff f8c6 	bl	80121dc <udp_sendto_if_src>
 8013050:	4603      	mov	r3, r0
 8013052:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013054:	6978      	ldr	r0, [r7, #20]
 8013056:	f7f8 f9e5 	bl	800b424 <pbuf_free>
 801305a:	e001      	b.n	8013060 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801305c:	23ff      	movs	r3, #255	; 0xff
 801305e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013060:	69bb      	ldr	r3, [r7, #24]
 8013062:	799b      	ldrb	r3, [r3, #6]
 8013064:	2bff      	cmp	r3, #255	; 0xff
 8013066:	d005      	beq.n	8013074 <dhcp_decline+0xb0>
    dhcp->tries++;
 8013068:	69bb      	ldr	r3, [r7, #24]
 801306a:	799b      	ldrb	r3, [r3, #6]
 801306c:	3301      	adds	r3, #1
 801306e:	b2da      	uxtb	r2, r3
 8013070:	69bb      	ldr	r3, [r7, #24]
 8013072:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8013074:	f242 7310 	movw	r3, #10000	; 0x2710
 8013078:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801307a:	89fb      	ldrh	r3, [r7, #14]
 801307c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013080:	4a0a      	ldr	r2, [pc, #40]	; (80130ac <dhcp_decline+0xe8>)
 8013082:	fb82 1203 	smull	r1, r2, r2, r3
 8013086:	1152      	asrs	r2, r2, #5
 8013088:	17db      	asrs	r3, r3, #31
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	b29a      	uxth	r2, r3
 801308e:	69bb      	ldr	r3, [r7, #24]
 8013090:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013092:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3720      	adds	r7, #32
 801309a:	46bd      	mov	sp, r7
 801309c:	bdb0      	pop	{r4, r5, r7, pc}
 801309e:	bf00      	nop
 80130a0:	200085ec 	.word	0x200085ec
 80130a4:	0801bd9c 	.word	0x0801bd9c
 80130a8:	0801bda0 	.word	0x0801bda0
 80130ac:	10624dd3 	.word	0x10624dd3

080130b0 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80130b0:	b580      	push	{r7, lr}
 80130b2:	b08a      	sub	sp, #40	; 0x28
 80130b4:	af02      	add	r7, sp, #8
 80130b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130bc:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80130be:	2300      	movs	r3, #0
 80130c0:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80130c2:	69bb      	ldr	r3, [r7, #24]
 80130c4:	2200      	movs	r2, #0
 80130c6:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 80130c8:	2106      	movs	r1, #6
 80130ca:	69b8      	ldr	r0, [r7, #24]
 80130cc:	f000 fbf4 	bl	80138b8 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 80130d0:	f107 0308 	add.w	r3, r7, #8
 80130d4:	2201      	movs	r2, #1
 80130d6:	69b9      	ldr	r1, [r7, #24]
 80130d8:	6878      	ldr	r0, [r7, #4]
 80130da:	f001 f879 	bl	80141d0 <dhcp_create_msg>
 80130de:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d04b      	beq.n	801317e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	685b      	ldr	r3, [r3, #4]
 80130ea:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80130ec:	8938      	ldrh	r0, [r7, #8]
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130f4:	2302      	movs	r3, #2
 80130f6:	2239      	movs	r2, #57	; 0x39
 80130f8:	f000 fbf8 	bl	80138ec <dhcp_option>
 80130fc:	4603      	mov	r3, r0
 80130fe:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013100:	8938      	ldrh	r0, [r7, #8]
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801310c:	461a      	mov	r2, r3
 801310e:	f000 fc47 	bl	80139a0 <dhcp_option_short>
 8013112:	4603      	mov	r3, r0
 8013114:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013116:	8938      	ldrh	r0, [r7, #8]
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801311e:	2303      	movs	r3, #3
 8013120:	2237      	movs	r2, #55	; 0x37
 8013122:	f000 fbe3 	bl	80138ec <dhcp_option>
 8013126:	4603      	mov	r3, r0
 8013128:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801312a:	2300      	movs	r3, #0
 801312c:	77fb      	strb	r3, [r7, #31]
 801312e:	e00e      	b.n	801314e <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013130:	8938      	ldrh	r0, [r7, #8]
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013138:	7ffb      	ldrb	r3, [r7, #31]
 801313a:	4a29      	ldr	r2, [pc, #164]	; (80131e0 <dhcp_discover+0x130>)
 801313c:	5cd3      	ldrb	r3, [r2, r3]
 801313e:	461a      	mov	r2, r3
 8013140:	f000 fc08 	bl	8013954 <dhcp_option_byte>
 8013144:	4603      	mov	r3, r0
 8013146:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013148:	7ffb      	ldrb	r3, [r7, #31]
 801314a:	3301      	adds	r3, #1
 801314c:	77fb      	strb	r3, [r7, #31]
 801314e:	7ffb      	ldrb	r3, [r7, #31]
 8013150:	2b02      	cmp	r3, #2
 8013152:	d9ed      	bls.n	8013130 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013154:	8938      	ldrh	r0, [r7, #8]
 8013156:	68fb      	ldr	r3, [r7, #12]
 8013158:	33f0      	adds	r3, #240	; 0xf0
 801315a:	693a      	ldr	r2, [r7, #16]
 801315c:	4619      	mov	r1, r3
 801315e:	f001 f90d 	bl	801437c <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013162:	4b20      	ldr	r3, [pc, #128]	; (80131e4 <dhcp_discover+0x134>)
 8013164:	6818      	ldr	r0, [r3, #0]
 8013166:	4b20      	ldr	r3, [pc, #128]	; (80131e8 <dhcp_discover+0x138>)
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	2343      	movs	r3, #67	; 0x43
 8013170:	4a1e      	ldr	r2, [pc, #120]	; (80131ec <dhcp_discover+0x13c>)
 8013172:	6939      	ldr	r1, [r7, #16]
 8013174:	f7ff f832 	bl	80121dc <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8013178:	6938      	ldr	r0, [r7, #16]
 801317a:	f7f8 f953 	bl	800b424 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801317e:	69bb      	ldr	r3, [r7, #24]
 8013180:	799b      	ldrb	r3, [r3, #6]
 8013182:	2bff      	cmp	r3, #255	; 0xff
 8013184:	d005      	beq.n	8013192 <dhcp_discover+0xe2>
    dhcp->tries++;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	799b      	ldrb	r3, [r3, #6]
 801318a:	3301      	adds	r3, #1
 801318c:	b2da      	uxtb	r2, r3
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8013192:	69bb      	ldr	r3, [r7, #24]
 8013194:	799b      	ldrb	r3, [r3, #6]
 8013196:	2b05      	cmp	r3, #5
 8013198:	d80d      	bhi.n	80131b6 <dhcp_discover+0x106>
 801319a:	69bb      	ldr	r3, [r7, #24]
 801319c:	799b      	ldrb	r3, [r3, #6]
 801319e:	461a      	mov	r2, r3
 80131a0:	2301      	movs	r3, #1
 80131a2:	4093      	lsls	r3, r2
 80131a4:	b29b      	uxth	r3, r3
 80131a6:	461a      	mov	r2, r3
 80131a8:	0152      	lsls	r2, r2, #5
 80131aa:	1ad2      	subs	r2, r2, r3
 80131ac:	0092      	lsls	r2, r2, #2
 80131ae:	4413      	add	r3, r2
 80131b0:	00db      	lsls	r3, r3, #3
 80131b2:	b29b      	uxth	r3, r3
 80131b4:	e001      	b.n	80131ba <dhcp_discover+0x10a>
 80131b6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80131ba:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80131bc:	897b      	ldrh	r3, [r7, #10]
 80131be:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80131c2:	4a0b      	ldr	r2, [pc, #44]	; (80131f0 <dhcp_discover+0x140>)
 80131c4:	fb82 1203 	smull	r1, r2, r2, r3
 80131c8:	1152      	asrs	r2, r2, #5
 80131ca:	17db      	asrs	r3, r3, #31
 80131cc:	1ad3      	subs	r3, r2, r3
 80131ce:	b29a      	uxth	r2, r3
 80131d0:	69bb      	ldr	r3, [r7, #24]
 80131d2:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80131d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80131d8:	4618      	mov	r0, r3
 80131da:	3720      	adds	r7, #32
 80131dc:	46bd      	mov	sp, r7
 80131de:	bd80      	pop	{r7, pc}
 80131e0:	2000001c 	.word	0x2000001c
 80131e4:	200085ec 	.word	0x200085ec
 80131e8:	0801bd9c 	.word	0x0801bd9c
 80131ec:	0801bda0 	.word	0x0801bda0
 80131f0:	10624dd3 	.word	0x10624dd3

080131f4 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 80131f4:	b580      	push	{r7, lr}
 80131f6:	b088      	sub	sp, #32
 80131f8:	af00      	add	r7, sp, #0
 80131fa:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	2b00      	cmp	r3, #0
 8013200:	d107      	bne.n	8013212 <dhcp_bind+0x1e>
 8013202:	4b64      	ldr	r3, [pc, #400]	; (8013394 <dhcp_bind+0x1a0>)
 8013204:	f240 4215 	movw	r2, #1045	; 0x415
 8013208:	4963      	ldr	r1, [pc, #396]	; (8013398 <dhcp_bind+0x1a4>)
 801320a:	4864      	ldr	r0, [pc, #400]	; (801339c <dhcp_bind+0x1a8>)
 801320c:	f003 fe30 	bl	8016e70 <iprintf>
 8013210:	e0bc      	b.n	801338c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013216:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013218:	69bb      	ldr	r3, [r7, #24]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d107      	bne.n	801322e <dhcp_bind+0x3a>
 801321e:	4b5d      	ldr	r3, [pc, #372]	; (8013394 <dhcp_bind+0x1a0>)
 8013220:	f240 4217 	movw	r2, #1047	; 0x417
 8013224:	495e      	ldr	r1, [pc, #376]	; (80133a0 <dhcp_bind+0x1ac>)
 8013226:	485d      	ldr	r0, [pc, #372]	; (801339c <dhcp_bind+0x1a8>)
 8013228:	f003 fe22 	bl	8016e70 <iprintf>
 801322c:	e0ae      	b.n	801338c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801322e:	69bb      	ldr	r3, [r7, #24]
 8013230:	2200      	movs	r2, #0
 8013232:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013234:	69bb      	ldr	r3, [r7, #24]
 8013236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013238:	f1b3 3fff 	cmp.w	r3, #4294967295
 801323c:	d019      	beq.n	8013272 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801323e:	69bb      	ldr	r3, [r7, #24]
 8013240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013242:	331e      	adds	r3, #30
 8013244:	4a57      	ldr	r2, [pc, #348]	; (80133a4 <dhcp_bind+0x1b0>)
 8013246:	fba2 2303 	umull	r2, r3, r2, r3
 801324a:	095b      	lsrs	r3, r3, #5
 801324c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801324e:	69fb      	ldr	r3, [r7, #28]
 8013250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013254:	d302      	bcc.n	801325c <dhcp_bind+0x68>
      timeout = 0xffff;
 8013256:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801325a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 801325c:	69fb      	ldr	r3, [r7, #28]
 801325e:	b29a      	uxth	r2, r3
 8013260:	69bb      	ldr	r3, [r7, #24]
 8013262:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8013264:	69bb      	ldr	r3, [r7, #24]
 8013266:	8a9b      	ldrh	r3, [r3, #20]
 8013268:	2b00      	cmp	r3, #0
 801326a:	d102      	bne.n	8013272 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 801326c:	69bb      	ldr	r3, [r7, #24]
 801326e:	2201      	movs	r2, #1
 8013270:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8013272:	69bb      	ldr	r3, [r7, #24]
 8013274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013276:	f1b3 3fff 	cmp.w	r3, #4294967295
 801327a:	d01d      	beq.n	80132b8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801327c:	69bb      	ldr	r3, [r7, #24]
 801327e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013280:	331e      	adds	r3, #30
 8013282:	4a48      	ldr	r2, [pc, #288]	; (80133a4 <dhcp_bind+0x1b0>)
 8013284:	fba2 2303 	umull	r2, r3, r2, r3
 8013288:	095b      	lsrs	r3, r3, #5
 801328a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801328c:	69fb      	ldr	r3, [r7, #28]
 801328e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013292:	d302      	bcc.n	801329a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8013294:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013298:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801329a:	69fb      	ldr	r3, [r7, #28]
 801329c:	b29a      	uxth	r2, r3
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80132a2:	69bb      	ldr	r3, [r7, #24]
 80132a4:	895b      	ldrh	r3, [r3, #10]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d102      	bne.n	80132b0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80132aa:	69bb      	ldr	r3, [r7, #24]
 80132ac:	2201      	movs	r2, #1
 80132ae:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80132b0:	69bb      	ldr	r3, [r7, #24]
 80132b2:	895a      	ldrh	r2, [r3, #10]
 80132b4:	69bb      	ldr	r3, [r7, #24]
 80132b6:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80132b8:	69bb      	ldr	r3, [r7, #24]
 80132ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80132c0:	d01d      	beq.n	80132fe <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132c6:	331e      	adds	r3, #30
 80132c8:	4a36      	ldr	r2, [pc, #216]	; (80133a4 <dhcp_bind+0x1b0>)
 80132ca:	fba2 2303 	umull	r2, r3, r2, r3
 80132ce:	095b      	lsrs	r3, r3, #5
 80132d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80132d2:	69fb      	ldr	r3, [r7, #28]
 80132d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132d8:	d302      	bcc.n	80132e0 <dhcp_bind+0xec>
      timeout = 0xffff;
 80132da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 80132e0:	69fb      	ldr	r3, [r7, #28]
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	899b      	ldrh	r3, [r3, #12]
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	d102      	bne.n	80132f6 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	2201      	movs	r2, #1
 80132f4:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80132f6:	69bb      	ldr	r3, [r7, #24]
 80132f8:	899a      	ldrh	r2, [r3, #12]
 80132fa:	69bb      	ldr	r3, [r7, #24]
 80132fc:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80132fe:	69bb      	ldr	r3, [r7, #24]
 8013300:	895a      	ldrh	r2, [r3, #10]
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	899b      	ldrh	r3, [r3, #12]
 8013306:	429a      	cmp	r2, r3
 8013308:	d306      	bcc.n	8013318 <dhcp_bind+0x124>
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	899b      	ldrh	r3, [r3, #12]
 801330e:	2b00      	cmp	r3, #0
 8013310:	d002      	beq.n	8013318 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	2200      	movs	r2, #0
 8013316:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013318:	69bb      	ldr	r3, [r7, #24]
 801331a:	79db      	ldrb	r3, [r3, #7]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d003      	beq.n	8013328 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	6a1b      	ldr	r3, [r3, #32]
 8013324:	613b      	str	r3, [r7, #16]
 8013326:	e014      	b.n	8013352 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013328:	69bb      	ldr	r3, [r7, #24]
 801332a:	331c      	adds	r3, #28
 801332c:	781b      	ldrb	r3, [r3, #0]
 801332e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8013330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013334:	2b00      	cmp	r3, #0
 8013336:	db02      	blt.n	801333e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013338:	23ff      	movs	r3, #255	; 0xff
 801333a:	613b      	str	r3, [r7, #16]
 801333c:	e009      	b.n	8013352 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801333e:	7dfb      	ldrb	r3, [r7, #23]
 8013340:	2bbf      	cmp	r3, #191	; 0xbf
 8013342:	d903      	bls.n	801334c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013344:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013348:	613b      	str	r3, [r7, #16]
 801334a:	e002      	b.n	8013352 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801334c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013350:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8013352:	69bb      	ldr	r3, [r7, #24]
 8013354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013356:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013358:	68fb      	ldr	r3, [r7, #12]
 801335a:	2b00      	cmp	r3, #0
 801335c:	d108      	bne.n	8013370 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801335e:	69bb      	ldr	r3, [r7, #24]
 8013360:	69da      	ldr	r2, [r3, #28]
 8013362:	693b      	ldr	r3, [r7, #16]
 8013364:	4013      	ands	r3, r2
 8013366:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801336e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8013370:	210a      	movs	r1, #10
 8013372:	69b8      	ldr	r0, [r7, #24]
 8013374:	f000 faa0 	bl	80138b8 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8013378:	69bb      	ldr	r3, [r7, #24]
 801337a:	f103 011c 	add.w	r1, r3, #28
 801337e:	f107 030c 	add.w	r3, r7, #12
 8013382:	f107 0210 	add.w	r2, r7, #16
 8013386:	6878      	ldr	r0, [r7, #4]
 8013388:	f7f7 fb3e 	bl	800aa08 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 801338c:	3720      	adds	r7, #32
 801338e:	46bd      	mov	sp, r7
 8013390:	bd80      	pop	{r7, pc}
 8013392:	bf00      	nop
 8013394:	0801b1fc 	.word	0x0801b1fc
 8013398:	0801b35c 	.word	0x0801b35c
 801339c:	0801b25c 	.word	0x0801b25c
 80133a0:	0801b378 	.word	0x0801b378
 80133a4:	88888889 	.word	0x88888889

080133a8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80133a8:	b580      	push	{r7, lr}
 80133aa:	b08a      	sub	sp, #40	; 0x28
 80133ac:	af02      	add	r7, sp, #8
 80133ae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133b4:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80133b6:	2105      	movs	r1, #5
 80133b8:	69b8      	ldr	r0, [r7, #24]
 80133ba:	f000 fa7d 	bl	80138b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80133be:	f107 030c 	add.w	r3, r7, #12
 80133c2:	2203      	movs	r2, #3
 80133c4:	69b9      	ldr	r1, [r7, #24]
 80133c6:	6878      	ldr	r0, [r7, #4]
 80133c8:	f000 ff02 	bl	80141d0 <dhcp_create_msg>
 80133cc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80133ce:	697b      	ldr	r3, [r7, #20]
 80133d0:	2b00      	cmp	r3, #0
 80133d2:	d04e      	beq.n	8013472 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80133d4:	697b      	ldr	r3, [r7, #20]
 80133d6:	685b      	ldr	r3, [r3, #4]
 80133d8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80133da:	89b8      	ldrh	r0, [r7, #12]
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133e2:	2302      	movs	r3, #2
 80133e4:	2239      	movs	r2, #57	; 0x39
 80133e6:	f000 fa81 	bl	80138ec <dhcp_option>
 80133ea:	4603      	mov	r3, r0
 80133ec:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80133ee:	89b8      	ldrh	r0, [r7, #12]
 80133f0:	693b      	ldr	r3, [r7, #16]
 80133f2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80133fa:	461a      	mov	r2, r3
 80133fc:	f000 fad0 	bl	80139a0 <dhcp_option_short>
 8013400:	4603      	mov	r3, r0
 8013402:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013404:	89b8      	ldrh	r0, [r7, #12]
 8013406:	693b      	ldr	r3, [r7, #16]
 8013408:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801340c:	2303      	movs	r3, #3
 801340e:	2237      	movs	r2, #55	; 0x37
 8013410:	f000 fa6c 	bl	80138ec <dhcp_option>
 8013414:	4603      	mov	r3, r0
 8013416:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013418:	2300      	movs	r3, #0
 801341a:	77bb      	strb	r3, [r7, #30]
 801341c:	e00e      	b.n	801343c <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801341e:	89b8      	ldrh	r0, [r7, #12]
 8013420:	693b      	ldr	r3, [r7, #16]
 8013422:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013426:	7fbb      	ldrb	r3, [r7, #30]
 8013428:	4a2a      	ldr	r2, [pc, #168]	; (80134d4 <dhcp_renew+0x12c>)
 801342a:	5cd3      	ldrb	r3, [r2, r3]
 801342c:	461a      	mov	r2, r3
 801342e:	f000 fa91 	bl	8013954 <dhcp_option_byte>
 8013432:	4603      	mov	r3, r0
 8013434:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013436:	7fbb      	ldrb	r3, [r7, #30]
 8013438:	3301      	adds	r3, #1
 801343a:	77bb      	strb	r3, [r7, #30]
 801343c:	7fbb      	ldrb	r3, [r7, #30]
 801343e:	2b02      	cmp	r3, #2
 8013440:	d9ed      	bls.n	801341e <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013442:	89b8      	ldrh	r0, [r7, #12]
 8013444:	693b      	ldr	r3, [r7, #16]
 8013446:	33f0      	adds	r3, #240	; 0xf0
 8013448:	697a      	ldr	r2, [r7, #20]
 801344a:	4619      	mov	r1, r3
 801344c:	f000 ff96 	bl	801437c <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013450:	4b21      	ldr	r3, [pc, #132]	; (80134d8 <dhcp_renew+0x130>)
 8013452:	6818      	ldr	r0, [r3, #0]
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	f103 0218 	add.w	r2, r3, #24
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	2343      	movs	r3, #67	; 0x43
 8013460:	6979      	ldr	r1, [r7, #20]
 8013462:	f7fe fe47 	bl	80120f4 <udp_sendto_if>
 8013466:	4603      	mov	r3, r0
 8013468:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801346a:	6978      	ldr	r0, [r7, #20]
 801346c:	f7f7 ffda 	bl	800b424 <pbuf_free>
 8013470:	e001      	b.n	8013476 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013472:	23ff      	movs	r3, #255	; 0xff
 8013474:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	799b      	ldrb	r3, [r3, #6]
 801347a:	2bff      	cmp	r3, #255	; 0xff
 801347c:	d005      	beq.n	801348a <dhcp_renew+0xe2>
    dhcp->tries++;
 801347e:	69bb      	ldr	r3, [r7, #24]
 8013480:	799b      	ldrb	r3, [r3, #6]
 8013482:	3301      	adds	r3, #1
 8013484:	b2da      	uxtb	r2, r3
 8013486:	69bb      	ldr	r3, [r7, #24]
 8013488:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801348a:	69bb      	ldr	r3, [r7, #24]
 801348c:	799b      	ldrb	r3, [r3, #6]
 801348e:	2b09      	cmp	r3, #9
 8013490:	d80a      	bhi.n	80134a8 <dhcp_renew+0x100>
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	799b      	ldrb	r3, [r3, #6]
 8013496:	b29b      	uxth	r3, r3
 8013498:	461a      	mov	r2, r3
 801349a:	0152      	lsls	r2, r2, #5
 801349c:	1ad2      	subs	r2, r2, r3
 801349e:	0092      	lsls	r2, r2, #2
 80134a0:	4413      	add	r3, r2
 80134a2:	011b      	lsls	r3, r3, #4
 80134a4:	b29b      	uxth	r3, r3
 80134a6:	e001      	b.n	80134ac <dhcp_renew+0x104>
 80134a8:	f644 6320 	movw	r3, #20000	; 0x4e20
 80134ac:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80134ae:	89fb      	ldrh	r3, [r7, #14]
 80134b0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80134b4:	4a09      	ldr	r2, [pc, #36]	; (80134dc <dhcp_renew+0x134>)
 80134b6:	fb82 1203 	smull	r1, r2, r2, r3
 80134ba:	1152      	asrs	r2, r2, #5
 80134bc:	17db      	asrs	r3, r3, #31
 80134be:	1ad3      	subs	r3, r2, r3
 80134c0:	b29a      	uxth	r2, r3
 80134c2:	69bb      	ldr	r3, [r7, #24]
 80134c4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80134c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3720      	adds	r7, #32
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	2000001c 	.word	0x2000001c
 80134d8:	200085ec 	.word	0x200085ec
 80134dc:	10624dd3 	.word	0x10624dd3

080134e0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80134e0:	b580      	push	{r7, lr}
 80134e2:	b08a      	sub	sp, #40	; 0x28
 80134e4:	af02      	add	r7, sp, #8
 80134e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134ec:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80134ee:	2104      	movs	r1, #4
 80134f0:	69b8      	ldr	r0, [r7, #24]
 80134f2:	f000 f9e1 	bl	80138b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80134f6:	f107 030c 	add.w	r3, r7, #12
 80134fa:	2203      	movs	r2, #3
 80134fc:	69b9      	ldr	r1, [r7, #24]
 80134fe:	6878      	ldr	r0, [r7, #4]
 8013500:	f000 fe66 	bl	80141d0 <dhcp_create_msg>
 8013504:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	2b00      	cmp	r3, #0
 801350a:	d04c      	beq.n	80135a6 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801350c:	697b      	ldr	r3, [r7, #20]
 801350e:	685b      	ldr	r3, [r3, #4]
 8013510:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013512:	89b8      	ldrh	r0, [r7, #12]
 8013514:	693b      	ldr	r3, [r7, #16]
 8013516:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801351a:	2302      	movs	r3, #2
 801351c:	2239      	movs	r2, #57	; 0x39
 801351e:	f000 f9e5 	bl	80138ec <dhcp_option>
 8013522:	4603      	mov	r3, r0
 8013524:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013526:	89b8      	ldrh	r0, [r7, #12]
 8013528:	693b      	ldr	r3, [r7, #16]
 801352a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013532:	461a      	mov	r2, r3
 8013534:	f000 fa34 	bl	80139a0 <dhcp_option_short>
 8013538:	4603      	mov	r3, r0
 801353a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801353c:	89b8      	ldrh	r0, [r7, #12]
 801353e:	693b      	ldr	r3, [r7, #16]
 8013540:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013544:	2303      	movs	r3, #3
 8013546:	2237      	movs	r2, #55	; 0x37
 8013548:	f000 f9d0 	bl	80138ec <dhcp_option>
 801354c:	4603      	mov	r3, r0
 801354e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013550:	2300      	movs	r3, #0
 8013552:	77bb      	strb	r3, [r7, #30]
 8013554:	e00e      	b.n	8013574 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013556:	89b8      	ldrh	r0, [r7, #12]
 8013558:	693b      	ldr	r3, [r7, #16]
 801355a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801355e:	7fbb      	ldrb	r3, [r7, #30]
 8013560:	4a29      	ldr	r2, [pc, #164]	; (8013608 <dhcp_rebind+0x128>)
 8013562:	5cd3      	ldrb	r3, [r2, r3]
 8013564:	461a      	mov	r2, r3
 8013566:	f000 f9f5 	bl	8013954 <dhcp_option_byte>
 801356a:	4603      	mov	r3, r0
 801356c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801356e:	7fbb      	ldrb	r3, [r7, #30]
 8013570:	3301      	adds	r3, #1
 8013572:	77bb      	strb	r3, [r7, #30]
 8013574:	7fbb      	ldrb	r3, [r7, #30]
 8013576:	2b02      	cmp	r3, #2
 8013578:	d9ed      	bls.n	8013556 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801357a:	89b8      	ldrh	r0, [r7, #12]
 801357c:	693b      	ldr	r3, [r7, #16]
 801357e:	33f0      	adds	r3, #240	; 0xf0
 8013580:	697a      	ldr	r2, [r7, #20]
 8013582:	4619      	mov	r1, r3
 8013584:	f000 fefa 	bl	801437c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013588:	4b20      	ldr	r3, [pc, #128]	; (801360c <dhcp_rebind+0x12c>)
 801358a:	6818      	ldr	r0, [r3, #0]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	9300      	str	r3, [sp, #0]
 8013590:	2343      	movs	r3, #67	; 0x43
 8013592:	4a1f      	ldr	r2, [pc, #124]	; (8013610 <dhcp_rebind+0x130>)
 8013594:	6979      	ldr	r1, [r7, #20]
 8013596:	f7fe fdad 	bl	80120f4 <udp_sendto_if>
 801359a:	4603      	mov	r3, r0
 801359c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801359e:	6978      	ldr	r0, [r7, #20]
 80135a0:	f7f7 ff40 	bl	800b424 <pbuf_free>
 80135a4:	e001      	b.n	80135aa <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80135a6:	23ff      	movs	r3, #255	; 0xff
 80135a8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80135aa:	69bb      	ldr	r3, [r7, #24]
 80135ac:	799b      	ldrb	r3, [r3, #6]
 80135ae:	2bff      	cmp	r3, #255	; 0xff
 80135b0:	d005      	beq.n	80135be <dhcp_rebind+0xde>
    dhcp->tries++;
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	799b      	ldrb	r3, [r3, #6]
 80135b6:	3301      	adds	r3, #1
 80135b8:	b2da      	uxtb	r2, r3
 80135ba:	69bb      	ldr	r3, [r7, #24]
 80135bc:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80135be:	69bb      	ldr	r3, [r7, #24]
 80135c0:	799b      	ldrb	r3, [r3, #6]
 80135c2:	2b09      	cmp	r3, #9
 80135c4:	d80a      	bhi.n	80135dc <dhcp_rebind+0xfc>
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	799b      	ldrb	r3, [r3, #6]
 80135ca:	b29b      	uxth	r3, r3
 80135cc:	461a      	mov	r2, r3
 80135ce:	0152      	lsls	r2, r2, #5
 80135d0:	1ad2      	subs	r2, r2, r3
 80135d2:	0092      	lsls	r2, r2, #2
 80135d4:	4413      	add	r3, r2
 80135d6:	00db      	lsls	r3, r3, #3
 80135d8:	b29b      	uxth	r3, r3
 80135da:	e001      	b.n	80135e0 <dhcp_rebind+0x100>
 80135dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80135e0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80135e2:	89fb      	ldrh	r3, [r7, #14]
 80135e4:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135e8:	4a0a      	ldr	r2, [pc, #40]	; (8013614 <dhcp_rebind+0x134>)
 80135ea:	fb82 1203 	smull	r1, r2, r2, r3
 80135ee:	1152      	asrs	r2, r2, #5
 80135f0:	17db      	asrs	r3, r3, #31
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	b29a      	uxth	r2, r3
 80135f6:	69bb      	ldr	r3, [r7, #24]
 80135f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80135fa:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3720      	adds	r7, #32
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	2000001c 	.word	0x2000001c
 801360c:	200085ec 	.word	0x200085ec
 8013610:	0801bda0 	.word	0x0801bda0
 8013614:	10624dd3 	.word	0x10624dd3

08013618 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013618:	b5b0      	push	{r4, r5, r7, lr}
 801361a:	b08a      	sub	sp, #40	; 0x28
 801361c:	af02      	add	r7, sp, #8
 801361e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013624:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013626:	2103      	movs	r1, #3
 8013628:	69b8      	ldr	r0, [r7, #24]
 801362a:	f000 f945 	bl	80138b8 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801362e:	f107 030c 	add.w	r3, r7, #12
 8013632:	2203      	movs	r2, #3
 8013634:	69b9      	ldr	r1, [r7, #24]
 8013636:	6878      	ldr	r0, [r7, #4]
 8013638:	f000 fdca 	bl	80141d0 <dhcp_create_msg>
 801363c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801363e:	697b      	ldr	r3, [r7, #20]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d066      	beq.n	8013712 <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013644:	697b      	ldr	r3, [r7, #20]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801364a:	89b8      	ldrh	r0, [r7, #12]
 801364c:	693b      	ldr	r3, [r7, #16]
 801364e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013652:	2302      	movs	r3, #2
 8013654:	2239      	movs	r2, #57	; 0x39
 8013656:	f000 f949 	bl	80138ec <dhcp_option>
 801365a:	4603      	mov	r3, r0
 801365c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801365e:	89b8      	ldrh	r0, [r7, #12]
 8013660:	693b      	ldr	r3, [r7, #16]
 8013662:	33f0      	adds	r3, #240	; 0xf0
 8013664:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013668:	4619      	mov	r1, r3
 801366a:	f000 f999 	bl	80139a0 <dhcp_option_short>
 801366e:	4603      	mov	r3, r0
 8013670:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013672:	89b8      	ldrh	r0, [r7, #12]
 8013674:	693b      	ldr	r3, [r7, #16]
 8013676:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801367a:	2304      	movs	r3, #4
 801367c:	2232      	movs	r2, #50	; 0x32
 801367e:	f000 f935 	bl	80138ec <dhcp_option>
 8013682:	4603      	mov	r3, r0
 8013684:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013686:	89bc      	ldrh	r4, [r7, #12]
 8013688:	693b      	ldr	r3, [r7, #16]
 801368a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801368e:	69bb      	ldr	r3, [r7, #24]
 8013690:	69db      	ldr	r3, [r3, #28]
 8013692:	4618      	mov	r0, r3
 8013694:	f7f6 fb23 	bl	8009cde <lwip_htonl>
 8013698:	4603      	mov	r3, r0
 801369a:	461a      	mov	r2, r3
 801369c:	4629      	mov	r1, r5
 801369e:	4620      	mov	r0, r4
 80136a0:	f000 f9b0 	bl	8013a04 <dhcp_option_long>
 80136a4:	4603      	mov	r3, r0
 80136a6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80136a8:	89b8      	ldrh	r0, [r7, #12]
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136b0:	2303      	movs	r3, #3
 80136b2:	2237      	movs	r2, #55	; 0x37
 80136b4:	f000 f91a 	bl	80138ec <dhcp_option>
 80136b8:	4603      	mov	r3, r0
 80136ba:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80136bc:	2300      	movs	r3, #0
 80136be:	77bb      	strb	r3, [r7, #30]
 80136c0:	e00e      	b.n	80136e0 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80136c2:	89b8      	ldrh	r0, [r7, #12]
 80136c4:	693b      	ldr	r3, [r7, #16]
 80136c6:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80136ca:	7fbb      	ldrb	r3, [r7, #30]
 80136cc:	4a29      	ldr	r2, [pc, #164]	; (8013774 <dhcp_reboot+0x15c>)
 80136ce:	5cd3      	ldrb	r3, [r2, r3]
 80136d0:	461a      	mov	r2, r3
 80136d2:	f000 f93f 	bl	8013954 <dhcp_option_byte>
 80136d6:	4603      	mov	r3, r0
 80136d8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80136da:	7fbb      	ldrb	r3, [r7, #30]
 80136dc:	3301      	adds	r3, #1
 80136de:	77bb      	strb	r3, [r7, #30]
 80136e0:	7fbb      	ldrb	r3, [r7, #30]
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	d9ed      	bls.n	80136c2 <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80136e6:	89b8      	ldrh	r0, [r7, #12]
 80136e8:	693b      	ldr	r3, [r7, #16]
 80136ea:	33f0      	adds	r3, #240	; 0xf0
 80136ec:	697a      	ldr	r2, [r7, #20]
 80136ee:	4619      	mov	r1, r3
 80136f0:	f000 fe44 	bl	801437c <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80136f4:	4b20      	ldr	r3, [pc, #128]	; (8013778 <dhcp_reboot+0x160>)
 80136f6:	6818      	ldr	r0, [r3, #0]
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	9300      	str	r3, [sp, #0]
 80136fc:	2343      	movs	r3, #67	; 0x43
 80136fe:	4a1f      	ldr	r2, [pc, #124]	; (801377c <dhcp_reboot+0x164>)
 8013700:	6979      	ldr	r1, [r7, #20]
 8013702:	f7fe fcf7 	bl	80120f4 <udp_sendto_if>
 8013706:	4603      	mov	r3, r0
 8013708:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801370a:	6978      	ldr	r0, [r7, #20]
 801370c:	f7f7 fe8a 	bl	800b424 <pbuf_free>
 8013710:	e001      	b.n	8013716 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013712:	23ff      	movs	r3, #255	; 0xff
 8013714:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013716:	69bb      	ldr	r3, [r7, #24]
 8013718:	799b      	ldrb	r3, [r3, #6]
 801371a:	2bff      	cmp	r3, #255	; 0xff
 801371c:	d005      	beq.n	801372a <dhcp_reboot+0x112>
    dhcp->tries++;
 801371e:	69bb      	ldr	r3, [r7, #24]
 8013720:	799b      	ldrb	r3, [r3, #6]
 8013722:	3301      	adds	r3, #1
 8013724:	b2da      	uxtb	r2, r3
 8013726:	69bb      	ldr	r3, [r7, #24]
 8013728:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	799b      	ldrb	r3, [r3, #6]
 801372e:	2b09      	cmp	r3, #9
 8013730:	d80a      	bhi.n	8013748 <dhcp_reboot+0x130>
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	799b      	ldrb	r3, [r3, #6]
 8013736:	b29b      	uxth	r3, r3
 8013738:	461a      	mov	r2, r3
 801373a:	0152      	lsls	r2, r2, #5
 801373c:	1ad2      	subs	r2, r2, r3
 801373e:	0092      	lsls	r2, r2, #2
 8013740:	4413      	add	r3, r2
 8013742:	00db      	lsls	r3, r3, #3
 8013744:	b29b      	uxth	r3, r3
 8013746:	e001      	b.n	801374c <dhcp_reboot+0x134>
 8013748:	f242 7310 	movw	r3, #10000	; 0x2710
 801374c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801374e:	89fb      	ldrh	r3, [r7, #14]
 8013750:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013754:	4a0a      	ldr	r2, [pc, #40]	; (8013780 <dhcp_reboot+0x168>)
 8013756:	fb82 1203 	smull	r1, r2, r2, r3
 801375a:	1152      	asrs	r2, r2, #5
 801375c:	17db      	asrs	r3, r3, #31
 801375e:	1ad3      	subs	r3, r2, r3
 8013760:	b29a      	uxth	r2, r3
 8013762:	69bb      	ldr	r3, [r7, #24]
 8013764:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013766:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801376a:	4618      	mov	r0, r3
 801376c:	3720      	adds	r7, #32
 801376e:	46bd      	mov	sp, r7
 8013770:	bdb0      	pop	{r4, r5, r7, pc}
 8013772:	bf00      	nop
 8013774:	2000001c 	.word	0x2000001c
 8013778:	200085ec 	.word	0x200085ec
 801377c:	0801bda0 	.word	0x0801bda0
 8013780:	10624dd3 	.word	0x10624dd3

08013784 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8013784:	b5b0      	push	{r4, r5, r7, lr}
 8013786:	b08a      	sub	sp, #40	; 0x28
 8013788:	af02      	add	r7, sp, #8
 801378a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013790:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	2b00      	cmp	r3, #0
 8013796:	f000 8084 	beq.w	80138a2 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 801379a:	69fb      	ldr	r3, [r7, #28]
 801379c:	795b      	ldrb	r3, [r3, #5]
 801379e:	2b00      	cmp	r3, #0
 80137a0:	f000 8081 	beq.w	80138a6 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80137a4:	69fb      	ldr	r3, [r7, #28]
 80137a6:	699b      	ldr	r3, [r3, #24]
 80137a8:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80137aa:	69fb      	ldr	r3, [r7, #28]
 80137ac:	2200      	movs	r2, #0
 80137ae:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80137b0:	69fb      	ldr	r3, [r7, #28]
 80137b2:	2200      	movs	r2, #0
 80137b4:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80137b6:	69fb      	ldr	r3, [r7, #28]
 80137b8:	2200      	movs	r2, #0
 80137ba:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80137bc:	69fb      	ldr	r3, [r7, #28]
 80137be:	2200      	movs	r2, #0
 80137c0:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80137c2:	69fb      	ldr	r3, [r7, #28]
 80137c4:	2200      	movs	r2, #0
 80137c6:	631a      	str	r2, [r3, #48]	; 0x30
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	62da      	str	r2, [r3, #44]	; 0x2c
 80137d0:	69fb      	ldr	r3, [r7, #28]
 80137d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80137d4:	69fb      	ldr	r3, [r7, #28]
 80137d6:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 80137d8:	69fb      	ldr	r3, [r7, #28]
 80137da:	2200      	movs	r2, #0
 80137dc:	829a      	strh	r2, [r3, #20]
 80137de:	69fb      	ldr	r3, [r7, #28]
 80137e0:	8a9a      	ldrh	r2, [r3, #20]
 80137e2:	69fb      	ldr	r3, [r7, #28]
 80137e4:	825a      	strh	r2, [r3, #18]
 80137e6:	69fb      	ldr	r3, [r7, #28]
 80137e8:	8a5a      	ldrh	r2, [r3, #18]
 80137ea:	69fb      	ldr	r3, [r7, #28]
 80137ec:	821a      	strh	r2, [r3, #16]
 80137ee:	69fb      	ldr	r3, [r7, #28]
 80137f0:	8a1a      	ldrh	r2, [r3, #16]
 80137f2:	69fb      	ldr	r3, [r7, #28]
 80137f4:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80137f6:	6878      	ldr	r0, [r7, #4]
 80137f8:	f000 fdee 	bl	80143d8 <dhcp_supplied_address>
 80137fc:	4603      	mov	r3, r0
 80137fe:	2b00      	cmp	r3, #0
 8013800:	d03b      	beq.n	801387a <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8013802:	f107 030e 	add.w	r3, r7, #14
 8013806:	2207      	movs	r2, #7
 8013808:	69f9      	ldr	r1, [r7, #28]
 801380a:	6878      	ldr	r0, [r7, #4]
 801380c:	f000 fce0 	bl	80141d0 <dhcp_create_msg>
 8013810:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8013812:	69bb      	ldr	r3, [r7, #24]
 8013814:	2b00      	cmp	r3, #0
 8013816:	d030      	beq.n	801387a <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	685b      	ldr	r3, [r3, #4]
 801381c:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801381e:	89f8      	ldrh	r0, [r7, #14]
 8013820:	697b      	ldr	r3, [r7, #20]
 8013822:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013826:	2304      	movs	r3, #4
 8013828:	2236      	movs	r2, #54	; 0x36
 801382a:	f000 f85f 	bl	80138ec <dhcp_option>
 801382e:	4603      	mov	r3, r0
 8013830:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013832:	89fc      	ldrh	r4, [r7, #14]
 8013834:	697b      	ldr	r3, [r7, #20]
 8013836:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801383a:	693b      	ldr	r3, [r7, #16]
 801383c:	4618      	mov	r0, r3
 801383e:	f7f6 fa4e 	bl	8009cde <lwip_htonl>
 8013842:	4603      	mov	r3, r0
 8013844:	461a      	mov	r2, r3
 8013846:	4629      	mov	r1, r5
 8013848:	4620      	mov	r0, r4
 801384a:	f000 f8db 	bl	8013a04 <dhcp_option_long>
 801384e:	4603      	mov	r3, r0
 8013850:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013852:	89f8      	ldrh	r0, [r7, #14]
 8013854:	697b      	ldr	r3, [r7, #20]
 8013856:	33f0      	adds	r3, #240	; 0xf0
 8013858:	69ba      	ldr	r2, [r7, #24]
 801385a:	4619      	mov	r1, r3
 801385c:	f000 fd8e 	bl	801437c <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013860:	4b13      	ldr	r3, [pc, #76]	; (80138b0 <dhcp_release_and_stop+0x12c>)
 8013862:	6818      	ldr	r0, [r3, #0]
 8013864:	f107 0210 	add.w	r2, r7, #16
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	9300      	str	r3, [sp, #0]
 801386c:	2343      	movs	r3, #67	; 0x43
 801386e:	69b9      	ldr	r1, [r7, #24]
 8013870:	f7fe fc40 	bl	80120f4 <udp_sendto_if>
      pbuf_free(p_out);
 8013874:	69b8      	ldr	r0, [r7, #24]
 8013876:	f7f7 fdd5 	bl	800b424 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801387a:	4b0e      	ldr	r3, [pc, #56]	; (80138b4 <dhcp_release_and_stop+0x130>)
 801387c:	4a0d      	ldr	r2, [pc, #52]	; (80138b4 <dhcp_release_and_stop+0x130>)
 801387e:	490d      	ldr	r1, [pc, #52]	; (80138b4 <dhcp_release_and_stop+0x130>)
 8013880:	6878      	ldr	r0, [r7, #4]
 8013882:	f7f7 f8c1 	bl	800aa08 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013886:	2100      	movs	r1, #0
 8013888:	69f8      	ldr	r0, [r7, #28]
 801388a:	f000 f815 	bl	80138b8 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801388e:	69fb      	ldr	r3, [r7, #28]
 8013890:	791b      	ldrb	r3, [r3, #4]
 8013892:	2b00      	cmp	r3, #0
 8013894:	d008      	beq.n	80138a8 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013896:	f7fe ff85 	bl	80127a4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	2200      	movs	r2, #0
 801389e:	711a      	strb	r2, [r3, #4]
 80138a0:	e002      	b.n	80138a8 <dhcp_release_and_stop+0x124>
    return;
 80138a2:	bf00      	nop
 80138a4:	e000      	b.n	80138a8 <dhcp_release_and_stop+0x124>
    return;
 80138a6:	bf00      	nop
  }
}
 80138a8:	3720      	adds	r7, #32
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bdb0      	pop	{r4, r5, r7, pc}
 80138ae:	bf00      	nop
 80138b0:	200085ec 	.word	0x200085ec
 80138b4:	0801bd9c 	.word	0x0801bd9c

080138b8 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80138b8:	b480      	push	{r7}
 80138ba:	b083      	sub	sp, #12
 80138bc:	af00      	add	r7, sp, #0
 80138be:	6078      	str	r0, [r7, #4]
 80138c0:	460b      	mov	r3, r1
 80138c2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	795b      	ldrb	r3, [r3, #5]
 80138c8:	78fa      	ldrb	r2, [r7, #3]
 80138ca:	429a      	cmp	r2, r3
 80138cc:	d008      	beq.n	80138e0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80138ce:	687b      	ldr	r3, [r7, #4]
 80138d0:	78fa      	ldrb	r2, [r7, #3]
 80138d2:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	2200      	movs	r2, #0
 80138d8:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 80138da:	687b      	ldr	r3, [r7, #4]
 80138dc:	2200      	movs	r2, #0
 80138de:	811a      	strh	r2, [r3, #8]
  }
}
 80138e0:	bf00      	nop
 80138e2:	370c      	adds	r7, #12
 80138e4:	46bd      	mov	sp, r7
 80138e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ea:	4770      	bx	lr

080138ec <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b082      	sub	sp, #8
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6039      	str	r1, [r7, #0]
 80138f4:	4611      	mov	r1, r2
 80138f6:	461a      	mov	r2, r3
 80138f8:	4603      	mov	r3, r0
 80138fa:	80fb      	strh	r3, [r7, #6]
 80138fc:	460b      	mov	r3, r1
 80138fe:	717b      	strb	r3, [r7, #5]
 8013900:	4613      	mov	r3, r2
 8013902:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013904:	88fa      	ldrh	r2, [r7, #6]
 8013906:	793b      	ldrb	r3, [r7, #4]
 8013908:	4413      	add	r3, r2
 801390a:	3302      	adds	r3, #2
 801390c:	2b44      	cmp	r3, #68	; 0x44
 801390e:	d906      	bls.n	801391e <dhcp_option+0x32>
 8013910:	4b0d      	ldr	r3, [pc, #52]	; (8013948 <dhcp_option+0x5c>)
 8013912:	f240 529a 	movw	r2, #1434	; 0x59a
 8013916:	490d      	ldr	r1, [pc, #52]	; (801394c <dhcp_option+0x60>)
 8013918:	480d      	ldr	r0, [pc, #52]	; (8013950 <dhcp_option+0x64>)
 801391a:	f003 faa9 	bl	8016e70 <iprintf>
  options[options_out_len++] = option_type;
 801391e:	88fb      	ldrh	r3, [r7, #6]
 8013920:	1c5a      	adds	r2, r3, #1
 8013922:	80fa      	strh	r2, [r7, #6]
 8013924:	461a      	mov	r2, r3
 8013926:	683b      	ldr	r3, [r7, #0]
 8013928:	4413      	add	r3, r2
 801392a:	797a      	ldrb	r2, [r7, #5]
 801392c:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801392e:	88fb      	ldrh	r3, [r7, #6]
 8013930:	1c5a      	adds	r2, r3, #1
 8013932:	80fa      	strh	r2, [r7, #6]
 8013934:	461a      	mov	r2, r3
 8013936:	683b      	ldr	r3, [r7, #0]
 8013938:	4413      	add	r3, r2
 801393a:	793a      	ldrb	r2, [r7, #4]
 801393c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801393e:	88fb      	ldrh	r3, [r7, #6]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3708      	adds	r7, #8
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	0801b1fc 	.word	0x0801b1fc
 801394c:	0801b390 	.word	0x0801b390
 8013950:	0801b25c 	.word	0x0801b25c

08013954 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	4603      	mov	r3, r0
 801395c:	6039      	str	r1, [r7, #0]
 801395e:	80fb      	strh	r3, [r7, #6]
 8013960:	4613      	mov	r3, r2
 8013962:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013964:	88fb      	ldrh	r3, [r7, #6]
 8013966:	2b43      	cmp	r3, #67	; 0x43
 8013968:	d906      	bls.n	8013978 <dhcp_option_byte+0x24>
 801396a:	4b0a      	ldr	r3, [pc, #40]	; (8013994 <dhcp_option_byte+0x40>)
 801396c:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013970:	4909      	ldr	r1, [pc, #36]	; (8013998 <dhcp_option_byte+0x44>)
 8013972:	480a      	ldr	r0, [pc, #40]	; (801399c <dhcp_option_byte+0x48>)
 8013974:	f003 fa7c 	bl	8016e70 <iprintf>
  options[options_out_len++] = value;
 8013978:	88fb      	ldrh	r3, [r7, #6]
 801397a:	1c5a      	adds	r2, r3, #1
 801397c:	80fa      	strh	r2, [r7, #6]
 801397e:	461a      	mov	r2, r3
 8013980:	683b      	ldr	r3, [r7, #0]
 8013982:	4413      	add	r3, r2
 8013984:	797a      	ldrb	r2, [r7, #5]
 8013986:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013988:	88fb      	ldrh	r3, [r7, #6]
}
 801398a:	4618      	mov	r0, r3
 801398c:	3708      	adds	r7, #8
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	0801b1fc 	.word	0x0801b1fc
 8013998:	0801b3d4 	.word	0x0801b3d4
 801399c:	0801b25c 	.word	0x0801b25c

080139a0 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 80139a0:	b580      	push	{r7, lr}
 80139a2:	b082      	sub	sp, #8
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	4603      	mov	r3, r0
 80139a8:	6039      	str	r1, [r7, #0]
 80139aa:	80fb      	strh	r3, [r7, #6]
 80139ac:	4613      	mov	r3, r2
 80139ae:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 80139b0:	88fb      	ldrh	r3, [r7, #6]
 80139b2:	3302      	adds	r3, #2
 80139b4:	2b44      	cmp	r3, #68	; 0x44
 80139b6:	d906      	bls.n	80139c6 <dhcp_option_short+0x26>
 80139b8:	4b0f      	ldr	r3, [pc, #60]	; (80139f8 <dhcp_option_short+0x58>)
 80139ba:	f240 52ae 	movw	r2, #1454	; 0x5ae
 80139be:	490f      	ldr	r1, [pc, #60]	; (80139fc <dhcp_option_short+0x5c>)
 80139c0:	480f      	ldr	r0, [pc, #60]	; (8013a00 <dhcp_option_short+0x60>)
 80139c2:	f003 fa55 	bl	8016e70 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80139c6:	88bb      	ldrh	r3, [r7, #4]
 80139c8:	0a1b      	lsrs	r3, r3, #8
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	88fb      	ldrh	r3, [r7, #6]
 80139ce:	1c59      	adds	r1, r3, #1
 80139d0:	80f9      	strh	r1, [r7, #6]
 80139d2:	4619      	mov	r1, r3
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	440b      	add	r3, r1
 80139d8:	b2d2      	uxtb	r2, r2
 80139da:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 80139dc:	88fb      	ldrh	r3, [r7, #6]
 80139de:	1c5a      	adds	r2, r3, #1
 80139e0:	80fa      	strh	r2, [r7, #6]
 80139e2:	461a      	mov	r2, r3
 80139e4:	683b      	ldr	r3, [r7, #0]
 80139e6:	4413      	add	r3, r2
 80139e8:	88ba      	ldrh	r2, [r7, #4]
 80139ea:	b2d2      	uxtb	r2, r2
 80139ec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80139ee:	88fb      	ldrh	r3, [r7, #6]
}
 80139f0:	4618      	mov	r0, r3
 80139f2:	3708      	adds	r7, #8
 80139f4:	46bd      	mov	sp, r7
 80139f6:	bd80      	pop	{r7, pc}
 80139f8:	0801b1fc 	.word	0x0801b1fc
 80139fc:	0801b40c 	.word	0x0801b40c
 8013a00:	0801b25c 	.word	0x0801b25c

08013a04 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	4603      	mov	r3, r0
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
 8013a10:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013a12:	89fb      	ldrh	r3, [r7, #14]
 8013a14:	3304      	adds	r3, #4
 8013a16:	2b44      	cmp	r3, #68	; 0x44
 8013a18:	d906      	bls.n	8013a28 <dhcp_option_long+0x24>
 8013a1a:	4b19      	ldr	r3, [pc, #100]	; (8013a80 <dhcp_option_long+0x7c>)
 8013a1c:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013a20:	4918      	ldr	r1, [pc, #96]	; (8013a84 <dhcp_option_long+0x80>)
 8013a22:	4819      	ldr	r0, [pc, #100]	; (8013a88 <dhcp_option_long+0x84>)
 8013a24:	f003 fa24 	bl	8016e70 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	0e1a      	lsrs	r2, r3, #24
 8013a2c:	89fb      	ldrh	r3, [r7, #14]
 8013a2e:	1c59      	adds	r1, r3, #1
 8013a30:	81f9      	strh	r1, [r7, #14]
 8013a32:	4619      	mov	r1, r3
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	440b      	add	r3, r1
 8013a38:	b2d2      	uxtb	r2, r2
 8013a3a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	0c1a      	lsrs	r2, r3, #16
 8013a40:	89fb      	ldrh	r3, [r7, #14]
 8013a42:	1c59      	adds	r1, r3, #1
 8013a44:	81f9      	strh	r1, [r7, #14]
 8013a46:	4619      	mov	r1, r3
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	440b      	add	r3, r1
 8013a4c:	b2d2      	uxtb	r2, r2
 8013a4e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	0a1a      	lsrs	r2, r3, #8
 8013a54:	89fb      	ldrh	r3, [r7, #14]
 8013a56:	1c59      	adds	r1, r3, #1
 8013a58:	81f9      	strh	r1, [r7, #14]
 8013a5a:	4619      	mov	r1, r3
 8013a5c:	68bb      	ldr	r3, [r7, #8]
 8013a5e:	440b      	add	r3, r1
 8013a60:	b2d2      	uxtb	r2, r2
 8013a62:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013a64:	89fb      	ldrh	r3, [r7, #14]
 8013a66:	1c5a      	adds	r2, r3, #1
 8013a68:	81fa      	strh	r2, [r7, #14]
 8013a6a:	461a      	mov	r2, r3
 8013a6c:	68bb      	ldr	r3, [r7, #8]
 8013a6e:	4413      	add	r3, r2
 8013a70:	687a      	ldr	r2, [r7, #4]
 8013a72:	b2d2      	uxtb	r2, r2
 8013a74:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a76:	89fb      	ldrh	r3, [r7, #14]
}
 8013a78:	4618      	mov	r0, r3
 8013a7a:	3710      	adds	r7, #16
 8013a7c:	46bd      	mov	sp, r7
 8013a7e:	bd80      	pop	{r7, pc}
 8013a80:	0801b1fc 	.word	0x0801b1fc
 8013a84:	0801b448 	.word	0x0801b448
 8013a88:	0801b25c 	.word	0x0801b25c

08013a8c <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013a8c:	b580      	push	{r7, lr}
 8013a8e:	b090      	sub	sp, #64	; 0x40
 8013a90:	af00      	add	r7, sp, #0
 8013a92:	6078      	str	r0, [r7, #4]
 8013a94:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013a96:	2300      	movs	r3, #0
 8013a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013a9e:	2208      	movs	r2, #8
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	48be      	ldr	r0, [pc, #760]	; (8013d9c <dhcp_parse_reply+0x310>)
 8013aa4:	f003 f9dc 	bl	8016e60 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013aa8:	687b      	ldr	r3, [r7, #4]
 8013aaa:	895b      	ldrh	r3, [r3, #10]
 8013aac:	2b2b      	cmp	r3, #43	; 0x2b
 8013aae:	d802      	bhi.n	8013ab6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013ab0:	f06f 0301 	mvn.w	r3, #1
 8013ab4:	e2a8      	b.n	8014008 <dhcp_parse_reply+0x57c>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013abc:	23f0      	movs	r3, #240	; 0xf0
 8013abe:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	891b      	ldrh	r3, [r3, #8]
 8013ac4:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013aca:	e00c      	b.n	8013ae6 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013acc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ace:	895b      	ldrh	r3, [r3, #10]
 8013ad0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013ad2:	1ad3      	subs	r3, r2, r3
 8013ad4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad8:	895b      	ldrh	r3, [r3, #10]
 8013ada:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013adc:	1ad3      	subs	r3, r2, r3
 8013ade:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae2:	681b      	ldr	r3, [r3, #0]
 8013ae4:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d004      	beq.n	8013af6 <dhcp_parse_reply+0x6a>
 8013aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aee:	895b      	ldrh	r3, [r3, #10]
 8013af0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013af2:	429a      	cmp	r2, r3
 8013af4:	d2ea      	bcs.n	8013acc <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013af8:	2b00      	cmp	r3, #0
 8013afa:	d102      	bne.n	8013b02 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013afc:	f06f 0301 	mvn.w	r3, #1
 8013b00:	e282      	b.n	8014008 <dhcp_parse_reply+0x57c>
  }
  offset = options_idx;
 8013b02:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013b04:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013b06:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013b08:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013b10:	e23a      	b.n	8013f88 <dhcp_parse_reply+0x4fc>
    u8_t op = options[offset];
 8013b12:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b14:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b16:	4413      	add	r3, r2
 8013b18:	781b      	ldrb	r3, [r3, #0]
 8013b1a:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013b22:	f04f 33ff 	mov.w	r3, #4294967295
 8013b26:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013b28:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b2a:	3302      	adds	r3, #2
 8013b2c:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013b2e:	8bfa      	ldrh	r2, [r7, #30]
 8013b30:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d202      	bcs.n	8013b3c <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013b36:	f06f 0301 	mvn.w	r3, #1
 8013b3a:	e265      	b.n	8014008 <dhcp_parse_reply+0x57c>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013b3c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b3e:	3301      	adds	r3, #1
 8013b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b42:	8952      	ldrh	r2, [r2, #10]
 8013b44:	4293      	cmp	r3, r2
 8013b46:	da07      	bge.n	8013b58 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013b48:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b4a:	3301      	adds	r3, #1
 8013b4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013b4e:	4413      	add	r3, r2
 8013b50:	781b      	ldrb	r3, [r3, #0]
 8013b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013b56:	e00b      	b.n	8013b70 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5a:	681b      	ldr	r3, [r3, #0]
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d004      	beq.n	8013b6a <dhcp_parse_reply+0xde>
 8013b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	685b      	ldr	r3, [r3, #4]
 8013b66:	781b      	ldrb	r3, [r3, #0]
 8013b68:	e000      	b.n	8013b6c <dhcp_parse_reply+0xe0>
 8013b6a:	2300      	movs	r3, #0
 8013b6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013b70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013b74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013b78:	7dfb      	ldrb	r3, [r7, #23]
 8013b7a:	2b3b      	cmp	r3, #59	; 0x3b
 8013b7c:	f200 812d 	bhi.w	8013dda <dhcp_parse_reply+0x34e>
 8013b80:	a201      	add	r2, pc, #4	; (adr r2, 8013b88 <dhcp_parse_reply+0xfc>)
 8013b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013b86:	bf00      	nop
 8013b88:	08013c79 	.word	0x08013c79
 8013b8c:	08013c89 	.word	0x08013c89
 8013b90:	08013ddb 	.word	0x08013ddb
 8013b94:	08013cab 	.word	0x08013cab
 8013b98:	08013ddb 	.word	0x08013ddb
 8013b9c:	08013ddb 	.word	0x08013ddb
 8013ba0:	08013ddb 	.word	0x08013ddb
 8013ba4:	08013ddb 	.word	0x08013ddb
 8013ba8:	08013ddb 	.word	0x08013ddb
 8013bac:	08013ddb 	.word	0x08013ddb
 8013bb0:	08013ddb 	.word	0x08013ddb
 8013bb4:	08013ddb 	.word	0x08013ddb
 8013bb8:	08013ddb 	.word	0x08013ddb
 8013bbc:	08013ddb 	.word	0x08013ddb
 8013bc0:	08013ddb 	.word	0x08013ddb
 8013bc4:	08013ddb 	.word	0x08013ddb
 8013bc8:	08013ddb 	.word	0x08013ddb
 8013bcc:	08013ddb 	.word	0x08013ddb
 8013bd0:	08013ddb 	.word	0x08013ddb
 8013bd4:	08013ddb 	.word	0x08013ddb
 8013bd8:	08013ddb 	.word	0x08013ddb
 8013bdc:	08013ddb 	.word	0x08013ddb
 8013be0:	08013ddb 	.word	0x08013ddb
 8013be4:	08013ddb 	.word	0x08013ddb
 8013be8:	08013ddb 	.word	0x08013ddb
 8013bec:	08013ddb 	.word	0x08013ddb
 8013bf0:	08013ddb 	.word	0x08013ddb
 8013bf4:	08013ddb 	.word	0x08013ddb
 8013bf8:	08013ddb 	.word	0x08013ddb
 8013bfc:	08013ddb 	.word	0x08013ddb
 8013c00:	08013ddb 	.word	0x08013ddb
 8013c04:	08013ddb 	.word	0x08013ddb
 8013c08:	08013ddb 	.word	0x08013ddb
 8013c0c:	08013ddb 	.word	0x08013ddb
 8013c10:	08013ddb 	.word	0x08013ddb
 8013c14:	08013ddb 	.word	0x08013ddb
 8013c18:	08013ddb 	.word	0x08013ddb
 8013c1c:	08013ddb 	.word	0x08013ddb
 8013c20:	08013ddb 	.word	0x08013ddb
 8013c24:	08013ddb 	.word	0x08013ddb
 8013c28:	08013ddb 	.word	0x08013ddb
 8013c2c:	08013ddb 	.word	0x08013ddb
 8013c30:	08013ddb 	.word	0x08013ddb
 8013c34:	08013ddb 	.word	0x08013ddb
 8013c38:	08013ddb 	.word	0x08013ddb
 8013c3c:	08013ddb 	.word	0x08013ddb
 8013c40:	08013ddb 	.word	0x08013ddb
 8013c44:	08013ddb 	.word	0x08013ddb
 8013c48:	08013ddb 	.word	0x08013ddb
 8013c4c:	08013ddb 	.word	0x08013ddb
 8013c50:	08013ddb 	.word	0x08013ddb
 8013c54:	08013cd7 	.word	0x08013cd7
 8013c58:	08013cf9 	.word	0x08013cf9
 8013c5c:	08013d35 	.word	0x08013d35
 8013c60:	08013d57 	.word	0x08013d57
 8013c64:	08013ddb 	.word	0x08013ddb
 8013c68:	08013ddb 	.word	0x08013ddb
 8013c6c:	08013ddb 	.word	0x08013ddb
 8013c70:	08013d79 	.word	0x08013d79
 8013c74:	08013db9 	.word	0x08013db9
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013c78:	2300      	movs	r3, #0
 8013c7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013c86:	e0ac      	b.n	8013de2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c8c:	2b04      	cmp	r3, #4
 8013c8e:	d009      	beq.n	8013ca4 <dhcp_parse_reply+0x218>
 8013c90:	4b43      	ldr	r3, [pc, #268]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013c92:	f240 622e 	movw	r2, #1582	; 0x62e
 8013c96:	4943      	ldr	r1, [pc, #268]	; (8013da4 <dhcp_parse_reply+0x318>)
 8013c98:	4843      	ldr	r0, [pc, #268]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013c9a:	f003 f8e9 	bl	8016e70 <iprintf>
 8013c9e:	f06f 0305 	mvn.w	r3, #5
 8013ca2:	e1b1      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013ca4:	2306      	movs	r3, #6
 8013ca6:	623b      	str	r3, [r7, #32]
        break;
 8013ca8:	e09b      	b.n	8013de2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013caa:	2304      	movs	r3, #4
 8013cac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013cb0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013cb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013cb8:	429a      	cmp	r2, r3
 8013cba:	d209      	bcs.n	8013cd0 <dhcp_parse_reply+0x244>
 8013cbc:	4b38      	ldr	r3, [pc, #224]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013cbe:	f240 6233 	movw	r2, #1587	; 0x633
 8013cc2:	493a      	ldr	r1, [pc, #232]	; (8013dac <dhcp_parse_reply+0x320>)
 8013cc4:	4838      	ldr	r0, [pc, #224]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013cc6:	f003 f8d3 	bl	8016e70 <iprintf>
 8013cca:	f06f 0305 	mvn.w	r3, #5
 8013cce:	e19b      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013cd0:	2307      	movs	r3, #7
 8013cd2:	623b      	str	r3, [r7, #32]
        break;
 8013cd4:	e085      	b.n	8013de2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013cd6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cda:	2b04      	cmp	r3, #4
 8013cdc:	d009      	beq.n	8013cf2 <dhcp_parse_reply+0x266>
 8013cde:	4b30      	ldr	r3, [pc, #192]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013ce0:	f240 6241 	movw	r2, #1601	; 0x641
 8013ce4:	492f      	ldr	r1, [pc, #188]	; (8013da4 <dhcp_parse_reply+0x318>)
 8013ce6:	4830      	ldr	r0, [pc, #192]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013ce8:	f003 f8c2 	bl	8016e70 <iprintf>
 8013cec:	f06f 0305 	mvn.w	r3, #5
 8013cf0:	e18a      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013cf2:	2303      	movs	r3, #3
 8013cf4:	623b      	str	r3, [r7, #32]
        break;
 8013cf6:	e074      	b.n	8013de2 <dhcp_parse_reply+0x356>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013cf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cfc:	2b01      	cmp	r3, #1
 8013cfe:	d009      	beq.n	8013d14 <dhcp_parse_reply+0x288>
 8013d00:	4b27      	ldr	r3, [pc, #156]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013d02:	f240 624f 	movw	r2, #1615	; 0x64f
 8013d06:	492a      	ldr	r1, [pc, #168]	; (8013db0 <dhcp_parse_reply+0x324>)
 8013d08:	4827      	ldr	r0, [pc, #156]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013d0a:	f003 f8b1 	bl	8016e70 <iprintf>
 8013d0e:	f06f 0305 	mvn.w	r3, #5
 8013d12:	e179      	b.n	8014008 <dhcp_parse_reply+0x57c>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013d14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013d16:	2bf0      	cmp	r3, #240	; 0xf0
 8013d18:	d009      	beq.n	8013d2e <dhcp_parse_reply+0x2a2>
 8013d1a:	4b21      	ldr	r3, [pc, #132]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013d1c:	f240 6251 	movw	r2, #1617	; 0x651
 8013d20:	4924      	ldr	r1, [pc, #144]	; (8013db4 <dhcp_parse_reply+0x328>)
 8013d22:	4821      	ldr	r0, [pc, #132]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013d24:	f003 f8a4 	bl	8016e70 <iprintf>
 8013d28:	f06f 0305 	mvn.w	r3, #5
 8013d2c:	e16c      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013d2e:	2300      	movs	r3, #0
 8013d30:	623b      	str	r3, [r7, #32]
        break;
 8013d32:	e056      	b.n	8013de2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013d34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d38:	2b01      	cmp	r3, #1
 8013d3a:	d009      	beq.n	8013d50 <dhcp_parse_reply+0x2c4>
 8013d3c:	4b18      	ldr	r3, [pc, #96]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013d3e:	f240 6255 	movw	r2, #1621	; 0x655
 8013d42:	491b      	ldr	r1, [pc, #108]	; (8013db0 <dhcp_parse_reply+0x324>)
 8013d44:	4818      	ldr	r0, [pc, #96]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013d46:	f003 f893 	bl	8016e70 <iprintf>
 8013d4a:	f06f 0305 	mvn.w	r3, #5
 8013d4e:	e15b      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013d50:	2301      	movs	r3, #1
 8013d52:	623b      	str	r3, [r7, #32]
        break;
 8013d54:	e045      	b.n	8013de2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d5a:	2b04      	cmp	r3, #4
 8013d5c:	d009      	beq.n	8013d72 <dhcp_parse_reply+0x2e6>
 8013d5e:	4b10      	ldr	r3, [pc, #64]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013d60:	f240 6259 	movw	r2, #1625	; 0x659
 8013d64:	490f      	ldr	r1, [pc, #60]	; (8013da4 <dhcp_parse_reply+0x318>)
 8013d66:	4810      	ldr	r0, [pc, #64]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013d68:	f003 f882 	bl	8016e70 <iprintf>
 8013d6c:	f06f 0305 	mvn.w	r3, #5
 8013d70:	e14a      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013d72:	2302      	movs	r3, #2
 8013d74:	623b      	str	r3, [r7, #32]
        break;
 8013d76:	e034      	b.n	8013de2 <dhcp_parse_reply+0x356>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013d78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013d7c:	2b04      	cmp	r3, #4
 8013d7e:	d009      	beq.n	8013d94 <dhcp_parse_reply+0x308>
 8013d80:	4b07      	ldr	r3, [pc, #28]	; (8013da0 <dhcp_parse_reply+0x314>)
 8013d82:	f240 625d 	movw	r2, #1629	; 0x65d
 8013d86:	4907      	ldr	r1, [pc, #28]	; (8013da4 <dhcp_parse_reply+0x318>)
 8013d88:	4807      	ldr	r0, [pc, #28]	; (8013da8 <dhcp_parse_reply+0x31c>)
 8013d8a:	f003 f871 	bl	8016e70 <iprintf>
 8013d8e:	f06f 0305 	mvn.w	r3, #5
 8013d92:	e139      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013d94:	2304      	movs	r3, #4
 8013d96:	623b      	str	r3, [r7, #32]
        break;
 8013d98:	e023      	b.n	8013de2 <dhcp_parse_reply+0x356>
 8013d9a:	bf00      	nop
 8013d9c:	2000f058 	.word	0x2000f058
 8013da0:	0801b1fc 	.word	0x0801b1fc
 8013da4:	0801b484 	.word	0x0801b484
 8013da8:	0801b25c 	.word	0x0801b25c
 8013dac:	0801b490 	.word	0x0801b490
 8013db0:	0801b4a4 	.word	0x0801b4a4
 8013db4:	0801b4b0 	.word	0x0801b4b0
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013db8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dbc:	2b04      	cmp	r3, #4
 8013dbe:	d009      	beq.n	8013dd4 <dhcp_parse_reply+0x348>
 8013dc0:	4b93      	ldr	r3, [pc, #588]	; (8014010 <dhcp_parse_reply+0x584>)
 8013dc2:	f240 6261 	movw	r2, #1633	; 0x661
 8013dc6:	4993      	ldr	r1, [pc, #588]	; (8014014 <dhcp_parse_reply+0x588>)
 8013dc8:	4893      	ldr	r0, [pc, #588]	; (8014018 <dhcp_parse_reply+0x58c>)
 8013dca:	f003 f851 	bl	8016e70 <iprintf>
 8013dce:	f06f 0305 	mvn.w	r3, #5
 8013dd2:	e119      	b.n	8014008 <dhcp_parse_reply+0x57c>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013dd4:	2305      	movs	r3, #5
 8013dd6:	623b      	str	r3, [r7, #32]
        break;
 8013dd8:	e003      	b.n	8013de2 <dhcp_parse_reply+0x356>
      default:
        decode_len = 0;
 8013dda:	2300      	movs	r3, #0
 8013ddc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013de0:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013de2:	7dfb      	ldrb	r3, [r7, #23]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d103      	bne.n	8013df0 <dhcp_parse_reply+0x364>
      offset++;
 8013de8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dea:	3301      	adds	r3, #1
 8013dec:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013dee:	e0a1      	b.n	8013f34 <dhcp_parse_reply+0x4a8>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013df0:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013df2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013df6:	4413      	add	r3, r2
 8013df8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	dd02      	ble.n	8013e06 <dhcp_parse_reply+0x37a>
        /* overflow */
        return ERR_BUF;
 8013e00:	f06f 0301 	mvn.w	r3, #1
 8013e04:	e100      	b.n	8014008 <dhcp_parse_reply+0x57c>
      }
      offset = (u16_t)(offset + len + 2);
 8013e06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e0a:	b29a      	uxth	r2, r3
 8013e0c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013e0e:	4413      	add	r3, r2
 8013e10:	b29b      	uxth	r3, r3
 8013e12:	3302      	adds	r3, #2
 8013e14:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013e16:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	f000 808a 	beq.w	8013f34 <dhcp_parse_reply+0x4a8>
        u32_t value = 0;
 8013e20:	2300      	movs	r3, #0
 8013e22:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013e24:	6a3b      	ldr	r3, [r7, #32]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	db02      	blt.n	8013e30 <dhcp_parse_reply+0x3a4>
 8013e2a:	6a3b      	ldr	r3, [r7, #32]
 8013e2c:	2b07      	cmp	r3, #7
 8013e2e:	dd06      	ble.n	8013e3e <dhcp_parse_reply+0x3b2>
 8013e30:	4b77      	ldr	r3, [pc, #476]	; (8014010 <dhcp_parse_reply+0x584>)
 8013e32:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013e36:	4979      	ldr	r1, [pc, #484]	; (801401c <dhcp_parse_reply+0x590>)
 8013e38:	4877      	ldr	r0, [pc, #476]	; (8014018 <dhcp_parse_reply+0x58c>)
 8013e3a:	f003 f819 	bl	8016e70 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013e3e:	4a78      	ldr	r2, [pc, #480]	; (8014020 <dhcp_parse_reply+0x594>)
 8013e40:	6a3b      	ldr	r3, [r7, #32]
 8013e42:	4413      	add	r3, r2
 8013e44:	781b      	ldrb	r3, [r3, #0]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d174      	bne.n	8013f34 <dhcp_parse_reply+0x4a8>
          copy_len = LWIP_MIN(decode_len, 4);
 8013e4a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e4e:	2b04      	cmp	r3, #4
 8013e50:	bf28      	it	cs
 8013e52:	2304      	movcs	r3, #4
 8013e54:	b2db      	uxtb	r3, r3
 8013e56:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013e58:	8bfb      	ldrh	r3, [r7, #30]
 8013e5a:	8aba      	ldrh	r2, [r7, #20]
 8013e5c:	f107 0108 	add.w	r1, r7, #8
 8013e60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e62:	f7f7 fce5 	bl	800b830 <pbuf_copy_partial>
 8013e66:	4603      	mov	r3, r0
 8013e68:	461a      	mov	r2, r3
 8013e6a:	8abb      	ldrh	r3, [r7, #20]
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d002      	beq.n	8013e76 <dhcp_parse_reply+0x3ea>
            return ERR_BUF;
 8013e70:	f06f 0301 	mvn.w	r3, #1
 8013e74:	e0c8      	b.n	8014008 <dhcp_parse_reply+0x57c>
          }
          if (decode_len > 4) {
 8013e76:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e7a:	2b04      	cmp	r3, #4
 8013e7c:	d933      	bls.n	8013ee6 <dhcp_parse_reply+0x45a>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013e7e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013e82:	f003 0303 	and.w	r3, r3, #3
 8013e86:	b2db      	uxtb	r3, r3
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d009      	beq.n	8013ea0 <dhcp_parse_reply+0x414>
 8013e8c:	4b60      	ldr	r3, [pc, #384]	; (8014010 <dhcp_parse_reply+0x584>)
 8013e8e:	f240 6281 	movw	r2, #1665	; 0x681
 8013e92:	4964      	ldr	r1, [pc, #400]	; (8014024 <dhcp_parse_reply+0x598>)
 8013e94:	4860      	ldr	r0, [pc, #384]	; (8014018 <dhcp_parse_reply+0x58c>)
 8013e96:	f002 ffeb 	bl	8016e70 <iprintf>
 8013e9a:	f06f 0305 	mvn.w	r3, #5
 8013e9e:	e0b3      	b.n	8014008 <dhcp_parse_reply+0x57c>
            dhcp_got_option(dhcp, decode_idx);
 8013ea0:	4a5f      	ldr	r2, [pc, #380]	; (8014020 <dhcp_parse_reply+0x594>)
 8013ea2:	6a3b      	ldr	r3, [r7, #32]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	2201      	movs	r2, #1
 8013ea8:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013eaa:	68bb      	ldr	r3, [r7, #8]
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f5 ff16 	bl	8009cde <lwip_htonl>
 8013eb2:	4602      	mov	r2, r0
 8013eb4:	495c      	ldr	r1, [pc, #368]	; (8014028 <dhcp_parse_reply+0x59c>)
 8013eb6:	6a3b      	ldr	r3, [r7, #32]
 8013eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013ebc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ec0:	3b04      	subs	r3, #4
 8013ec2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8013ec6:	8bfb      	ldrh	r3, [r7, #30]
 8013ec8:	3304      	adds	r3, #4
 8013eca:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013ecc:	8a7a      	ldrh	r2, [r7, #18]
 8013ece:	8bfb      	ldrh	r3, [r7, #30]
 8013ed0:	429a      	cmp	r2, r3
 8013ed2:	d202      	bcs.n	8013eda <dhcp_parse_reply+0x44e>
              /* overflow */
              return ERR_BUF;
 8013ed4:	f06f 0301 	mvn.w	r3, #1
 8013ed8:	e096      	b.n	8014008 <dhcp_parse_reply+0x57c>
            }
            val_offset = next_val_offset;
 8013eda:	8a7b      	ldrh	r3, [r7, #18]
 8013edc:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013ede:	6a3b      	ldr	r3, [r7, #32]
 8013ee0:	3301      	adds	r3, #1
 8013ee2:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8013ee4:	e79e      	b.n	8013e24 <dhcp_parse_reply+0x398>
          } else if (decode_len == 4) {
 8013ee6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013eea:	2b04      	cmp	r3, #4
 8013eec:	d106      	bne.n	8013efc <dhcp_parse_reply+0x470>
            value = lwip_ntohl(value);
 8013eee:	68bb      	ldr	r3, [r7, #8]
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f7f5 fef4 	bl	8009cde <lwip_htonl>
 8013ef6:	4603      	mov	r3, r0
 8013ef8:	60bb      	str	r3, [r7, #8]
 8013efa:	e011      	b.n	8013f20 <dhcp_parse_reply+0x494>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8013efc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f00:	2b01      	cmp	r3, #1
 8013f02:	d009      	beq.n	8013f18 <dhcp_parse_reply+0x48c>
 8013f04:	4b42      	ldr	r3, [pc, #264]	; (8014010 <dhcp_parse_reply+0x584>)
 8013f06:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8013f0a:	4948      	ldr	r1, [pc, #288]	; (801402c <dhcp_parse_reply+0x5a0>)
 8013f0c:	4842      	ldr	r0, [pc, #264]	; (8014018 <dhcp_parse_reply+0x58c>)
 8013f0e:	f002 ffaf 	bl	8016e70 <iprintf>
 8013f12:	f06f 0305 	mvn.w	r3, #5
 8013f16:	e077      	b.n	8014008 <dhcp_parse_reply+0x57c>
            value = ((u8_t *)&value)[0];
 8013f18:	f107 0308 	add.w	r3, r7, #8
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8013f20:	4a3f      	ldr	r2, [pc, #252]	; (8014020 <dhcp_parse_reply+0x594>)
 8013f22:	6a3b      	ldr	r3, [r7, #32]
 8013f24:	4413      	add	r3, r2
 8013f26:	2201      	movs	r2, #1
 8013f28:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8013f2a:	68ba      	ldr	r2, [r7, #8]
 8013f2c:	493e      	ldr	r1, [pc, #248]	; (8014028 <dhcp_parse_reply+0x59c>)
 8013f2e:	6a3b      	ldr	r3, [r7, #32]
 8013f30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8013f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f36:	895b      	ldrh	r3, [r3, #10]
 8013f38:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f3a:	429a      	cmp	r2, r3
 8013f3c:	d324      	bcc.n	8013f88 <dhcp_parse_reply+0x4fc>
      offset = (u16_t)(offset - q->len);
 8013f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f40:	895b      	ldrh	r3, [r3, #10]
 8013f42:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f44:	1ad3      	subs	r3, r2, r3
 8013f46:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8013f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4a:	895b      	ldrh	r3, [r3, #10]
 8013f4c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013f4e:	1ad3      	subs	r3, r2, r3
 8013f50:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013f52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f54:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013f56:	429a      	cmp	r2, r3
 8013f58:	d213      	bcs.n	8013f82 <dhcp_parse_reply+0x4f6>
        q = q->next;
 8013f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f62:	2b00      	cmp	r3, #0
 8013f64:	d109      	bne.n	8013f7a <dhcp_parse_reply+0x4ee>
 8013f66:	4b2a      	ldr	r3, [pc, #168]	; (8014010 <dhcp_parse_reply+0x584>)
 8013f68:	f240 629d 	movw	r2, #1693	; 0x69d
 8013f6c:	4930      	ldr	r1, [pc, #192]	; (8014030 <dhcp_parse_reply+0x5a4>)
 8013f6e:	482a      	ldr	r0, [pc, #168]	; (8014018 <dhcp_parse_reply+0x58c>)
 8013f70:	f002 ff7e 	bl	8016e70 <iprintf>
 8013f74:	f06f 0305 	mvn.w	r3, #5
 8013f78:	e046      	b.n	8014008 <dhcp_parse_reply+0x57c>
        options = (u8_t *)q->payload;
 8013f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f7c:	685b      	ldr	r3, [r3, #4]
 8013f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013f80:	e002      	b.n	8013f88 <dhcp_parse_reply+0x4fc>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013f82:	f06f 0301 	mvn.w	r3, #1
 8013f86:	e03f      	b.n	8014008 <dhcp_parse_reply+0x57c>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d00a      	beq.n	8013fa4 <dhcp_parse_reply+0x518>
 8013f8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f90:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d206      	bcs.n	8013fa4 <dhcp_parse_reply+0x518>
 8013f96:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013f9a:	4413      	add	r3, r2
 8013f9c:	781b      	ldrb	r3, [r3, #0]
 8013f9e:	2bff      	cmp	r3, #255	; 0xff
 8013fa0:	f47f adb7 	bne.w	8013b12 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8013fa4:	4b1e      	ldr	r3, [pc, #120]	; (8014020 <dhcp_parse_reply+0x594>)
 8013fa6:	781b      	ldrb	r3, [r3, #0]
 8013fa8:	2b00      	cmp	r3, #0
 8013faa:	d018      	beq.n	8013fde <dhcp_parse_reply+0x552>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013fac:	4b1e      	ldr	r3, [pc, #120]	; (8014028 <dhcp_parse_reply+0x59c>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013fb2:	4b1b      	ldr	r3, [pc, #108]	; (8014020 <dhcp_parse_reply+0x594>)
 8013fb4:	2200      	movs	r2, #0
 8013fb6:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	2b01      	cmp	r3, #1
 8013fbc:	d102      	bne.n	8013fc4 <dhcp_parse_reply+0x538>
      parse_file_as_options = 1;
 8013fbe:	2301      	movs	r3, #1
 8013fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013fc2:	e00c      	b.n	8013fde <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	2b02      	cmp	r3, #2
 8013fc8:	d102      	bne.n	8013fd0 <dhcp_parse_reply+0x544>
      parse_sname_as_options = 1;
 8013fca:	2301      	movs	r3, #1
 8013fcc:	62bb      	str	r3, [r7, #40]	; 0x28
 8013fce:	e006      	b.n	8013fde <dhcp_parse_reply+0x552>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2b03      	cmp	r3, #3
 8013fd4:	d103      	bne.n	8013fde <dhcp_parse_reply+0x552>
      parse_sname_as_options = 1;
 8013fd6:	2301      	movs	r3, #1
 8013fd8:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013fda:	2301      	movs	r3, #1
 8013fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fe0:	2b00      	cmp	r3, #0
 8013fe2:	d006      	beq.n	8013ff2 <dhcp_parse_reply+0x566>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8013fe4:	2300      	movs	r3, #0
 8013fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8013fe8:	236c      	movs	r3, #108	; 0x6c
 8013fea:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8013fec:	23ec      	movs	r3, #236	; 0xec
 8013fee:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8013ff0:	e569      	b.n	8013ac6 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8013ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d006      	beq.n	8014006 <dhcp_parse_reply+0x57a>
    parse_sname_as_options = 0;
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8013ffc:	232c      	movs	r3, #44	; 0x2c
 8013ffe:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014000:	236c      	movs	r3, #108	; 0x6c
 8014002:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 8014004:	e55f      	b.n	8013ac6 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014006:	2300      	movs	r3, #0
}
 8014008:	4618      	mov	r0, r3
 801400a:	3740      	adds	r7, #64	; 0x40
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	0801b1fc 	.word	0x0801b1fc
 8014014:	0801b484 	.word	0x0801b484
 8014018:	0801b25c 	.word	0x0801b25c
 801401c:	0801b4c8 	.word	0x0801b4c8
 8014020:	2000f058 	.word	0x2000f058
 8014024:	0801b4dc 	.word	0x0801b4dc
 8014028:	2000f060 	.word	0x2000f060
 801402c:	0801b4f4 	.word	0x0801b4f4
 8014030:	0801b508 	.word	0x0801b508

08014034 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014034:	b580      	push	{r7, lr}
 8014036:	b08a      	sub	sp, #40	; 0x28
 8014038:	af00      	add	r7, sp, #0
 801403a:	60f8      	str	r0, [r7, #12]
 801403c:	60b9      	str	r1, [r7, #8]
 801403e:	607a      	str	r2, [r7, #4]
 8014040:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014042:	4b60      	ldr	r3, [pc, #384]	; (80141c4 <dhcp_recv+0x190>)
 8014044:	685b      	ldr	r3, [r3, #4]
 8014046:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014048:	6a3b      	ldr	r3, [r7, #32]
 801404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801404c:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	685b      	ldr	r3, [r3, #4]
 8014052:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	2b00      	cmp	r3, #0
 8014058:	f000 809d 	beq.w	8014196 <dhcp_recv+0x162>
 801405c:	69fb      	ldr	r3, [r7, #28]
 801405e:	791b      	ldrb	r3, [r3, #4]
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 8098 	beq.w	8014196 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	895b      	ldrh	r3, [r3, #10]
 801406a:	2b2b      	cmp	r3, #43	; 0x2b
 801406c:	f240 8095 	bls.w	801419a <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014070:	69bb      	ldr	r3, [r7, #24]
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	2b02      	cmp	r3, #2
 8014076:	f040 8092 	bne.w	801419e <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801407a:	2300      	movs	r3, #0
 801407c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014080:	e012      	b.n	80140a8 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014082:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014086:	6a3a      	ldr	r2, [r7, #32]
 8014088:	4413      	add	r3, r2
 801408a:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 801408e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014092:	69b9      	ldr	r1, [r7, #24]
 8014094:	440b      	add	r3, r1
 8014096:	7f1b      	ldrb	r3, [r3, #28]
 8014098:	429a      	cmp	r2, r3
 801409a:	f040 8082 	bne.w	80141a2 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801409e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140a2:	3301      	adds	r3, #1
 80140a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80140a8:	6a3b      	ldr	r3, [r7, #32]
 80140aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80140ae:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80140b2:	429a      	cmp	r2, r3
 80140b4:	d203      	bcs.n	80140be <dhcp_recv+0x8a>
 80140b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80140ba:	2b05      	cmp	r3, #5
 80140bc:	d9e1      	bls.n	8014082 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80140be:	69bb      	ldr	r3, [r7, #24]
 80140c0:	685b      	ldr	r3, [r3, #4]
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7f5 fe0b 	bl	8009cde <lwip_htonl>
 80140c8:	4602      	mov	r2, r0
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	681b      	ldr	r3, [r3, #0]
 80140ce:	429a      	cmp	r2, r3
 80140d0:	d169      	bne.n	80141a6 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 80140d2:	69f9      	ldr	r1, [r7, #28]
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7ff fcd9 	bl	8013a8c <dhcp_parse_reply>
 80140da:	4603      	mov	r3, r0
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d164      	bne.n	80141aa <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80140e0:	4b39      	ldr	r3, [pc, #228]	; (80141c8 <dhcp_recv+0x194>)
 80140e2:	785b      	ldrb	r3, [r3, #1]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d062      	beq.n	80141ae <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	685b      	ldr	r3, [r3, #4]
 80140ec:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80140ee:	4b37      	ldr	r3, [pc, #220]	; (80141cc <dhcp_recv+0x198>)
 80140f0:	685b      	ldr	r3, [r3, #4]
 80140f2:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80140f4:	7cfb      	ldrb	r3, [r7, #19]
 80140f6:	2b05      	cmp	r3, #5
 80140f8:	d12a      	bne.n	8014150 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	795b      	ldrb	r3, [r3, #5]
 80140fe:	2b01      	cmp	r3, #1
 8014100:	d112      	bne.n	8014128 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8014102:	6979      	ldr	r1, [r7, #20]
 8014104:	6a38      	ldr	r0, [r7, #32]
 8014106:	f7fe fe17 	bl	8012d38 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801410a:	6a3b      	ldr	r3, [r7, #32]
 801410c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014110:	f003 0308 	and.w	r3, r3, #8
 8014114:	2b00      	cmp	r3, #0
 8014116:	d003      	beq.n	8014120 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014118:	6a38      	ldr	r0, [r7, #32]
 801411a:	f7fe fb87 	bl	801282c <dhcp_check>
 801411e:	e049      	b.n	80141b4 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014120:	6a38      	ldr	r0, [r7, #32]
 8014122:	f7ff f867 	bl	80131f4 <dhcp_bind>
 8014126:	e045      	b.n	80141b4 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	795b      	ldrb	r3, [r3, #5]
 801412c:	2b03      	cmp	r3, #3
 801412e:	d007      	beq.n	8014140 <dhcp_recv+0x10c>
 8014130:	69fb      	ldr	r3, [r7, #28]
 8014132:	795b      	ldrb	r3, [r3, #5]
 8014134:	2b04      	cmp	r3, #4
 8014136:	d003      	beq.n	8014140 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014138:	69fb      	ldr	r3, [r7, #28]
 801413a:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801413c:	2b05      	cmp	r3, #5
 801413e:	d139      	bne.n	80141b4 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8014140:	6979      	ldr	r1, [r7, #20]
 8014142:	6a38      	ldr	r0, [r7, #32]
 8014144:	f7fe fdf8 	bl	8012d38 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014148:	6a38      	ldr	r0, [r7, #32]
 801414a:	f7ff f853 	bl	80131f4 <dhcp_bind>
 801414e:	e031      	b.n	80141b4 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014150:	7cfb      	ldrb	r3, [r7, #19]
 8014152:	2b06      	cmp	r3, #6
 8014154:	d113      	bne.n	801417e <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014156:	69fb      	ldr	r3, [r7, #28]
 8014158:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801415a:	2b03      	cmp	r3, #3
 801415c:	d00b      	beq.n	8014176 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	795b      	ldrb	r3, [r3, #5]
 8014162:	2b01      	cmp	r3, #1
 8014164:	d007      	beq.n	8014176 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014166:	69fb      	ldr	r3, [r7, #28]
 8014168:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801416a:	2b04      	cmp	r3, #4
 801416c:	d003      	beq.n	8014176 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	795b      	ldrb	r3, [r3, #5]
 8014172:	2b05      	cmp	r3, #5
 8014174:	d103      	bne.n	801417e <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014176:	6a38      	ldr	r0, [r7, #32]
 8014178:	f7fe fb3e 	bl	80127f8 <dhcp_handle_nak>
 801417c:	e01a      	b.n	80141b4 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801417e:	7cfb      	ldrb	r3, [r7, #19]
 8014180:	2b02      	cmp	r3, #2
 8014182:	d116      	bne.n	80141b2 <dhcp_recv+0x17e>
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	795b      	ldrb	r3, [r3, #5]
 8014188:	2b06      	cmp	r3, #6
 801418a:	d112      	bne.n	80141b2 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801418c:	6979      	ldr	r1, [r7, #20]
 801418e:	6a38      	ldr	r0, [r7, #32]
 8014190:	f7fe fb80 	bl	8012894 <dhcp_handle_offer>
 8014194:	e00e      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8014196:	bf00      	nop
 8014198:	e00c      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801419a:	bf00      	nop
 801419c:	e00a      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801419e:	bf00      	nop
 80141a0:	e008      	b.n	80141b4 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80141a2:	bf00      	nop
 80141a4:	e006      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80141a6:	bf00      	nop
 80141a8:	e004      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80141aa:	bf00      	nop
 80141ac:	e002      	b.n	80141b4 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80141ae:	bf00      	nop
 80141b0:	e000      	b.n	80141b4 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80141b2:	bf00      	nop
  pbuf_free(p);
 80141b4:	6878      	ldr	r0, [r7, #4]
 80141b6:	f7f7 f935 	bl	800b424 <pbuf_free>
}
 80141ba:	bf00      	nop
 80141bc:	3728      	adds	r7, #40	; 0x28
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	2000b908 	.word	0x2000b908
 80141c8:	2000f058 	.word	0x2000f058
 80141cc:	2000f060 	.word	0x2000f060

080141d0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	b088      	sub	sp, #32
 80141d4:	af00      	add	r7, sp, #0
 80141d6:	60f8      	str	r0, [r7, #12]
 80141d8:	60b9      	str	r1, [r7, #8]
 80141da:	603b      	str	r3, [r7, #0]
 80141dc:	4613      	mov	r3, r2
 80141de:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d108      	bne.n	80141f8 <dhcp_create_msg+0x28>
 80141e6:	4b5f      	ldr	r3, [pc, #380]	; (8014364 <dhcp_create_msg+0x194>)
 80141e8:	f240 7269 	movw	r2, #1897	; 0x769
 80141ec:	495e      	ldr	r1, [pc, #376]	; (8014368 <dhcp_create_msg+0x198>)
 80141ee:	485f      	ldr	r0, [pc, #380]	; (801436c <dhcp_create_msg+0x19c>)
 80141f0:	f002 fe3e 	bl	8016e70 <iprintf>
 80141f4:	2300      	movs	r3, #0
 80141f6:	e0b1      	b.n	801435c <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 80141f8:	68bb      	ldr	r3, [r7, #8]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d108      	bne.n	8014210 <dhcp_create_msg+0x40>
 80141fe:	4b59      	ldr	r3, [pc, #356]	; (8014364 <dhcp_create_msg+0x194>)
 8014200:	f240 726a 	movw	r2, #1898	; 0x76a
 8014204:	495a      	ldr	r1, [pc, #360]	; (8014370 <dhcp_create_msg+0x1a0>)
 8014206:	4859      	ldr	r0, [pc, #356]	; (801436c <dhcp_create_msg+0x19c>)
 8014208:	f002 fe32 	bl	8016e70 <iprintf>
 801420c:	2300      	movs	r3, #0
 801420e:	e0a5      	b.n	801435c <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8014210:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014214:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014218:	2036      	movs	r0, #54	; 0x36
 801421a:	f7f6 fe1f 	bl	800ae5c <pbuf_alloc>
 801421e:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8014220:	69bb      	ldr	r3, [r7, #24]
 8014222:	2b00      	cmp	r3, #0
 8014224:	d101      	bne.n	801422a <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014226:	2300      	movs	r3, #0
 8014228:	e098      	b.n	801435c <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801422a:	69bb      	ldr	r3, [r7, #24]
 801422c:	895b      	ldrh	r3, [r3, #10]
 801422e:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014232:	d206      	bcs.n	8014242 <dhcp_create_msg+0x72>
 8014234:	4b4b      	ldr	r3, [pc, #300]	; (8014364 <dhcp_create_msg+0x194>)
 8014236:	f240 7271 	movw	r2, #1905	; 0x771
 801423a:	494e      	ldr	r1, [pc, #312]	; (8014374 <dhcp_create_msg+0x1a4>)
 801423c:	484b      	ldr	r0, [pc, #300]	; (801436c <dhcp_create_msg+0x19c>)
 801423e:	f002 fe17 	bl	8016e70 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014242:	79fb      	ldrb	r3, [r7, #7]
 8014244:	2b03      	cmp	r3, #3
 8014246:	d103      	bne.n	8014250 <dhcp_create_msg+0x80>
 8014248:	68bb      	ldr	r3, [r7, #8]
 801424a:	795b      	ldrb	r3, [r3, #5]
 801424c:	2b03      	cmp	r3, #3
 801424e:	d10d      	bne.n	801426c <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014250:	68bb      	ldr	r3, [r7, #8]
 8014252:	799b      	ldrb	r3, [r3, #6]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d105      	bne.n	8014264 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014258:	f002 fe22 	bl	8016ea0 <rand>
 801425c:	4603      	mov	r3, r0
 801425e:	461a      	mov	r2, r3
 8014260:	4b45      	ldr	r3, [pc, #276]	; (8014378 <dhcp_create_msg+0x1a8>)
 8014262:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8014264:	4b44      	ldr	r3, [pc, #272]	; (8014378 <dhcp_create_msg+0x1a8>)
 8014266:	681a      	ldr	r2, [r3, #0]
 8014268:	68bb      	ldr	r3, [r7, #8]
 801426a:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801426c:	69bb      	ldr	r3, [r7, #24]
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8014272:	f44f 729a 	mov.w	r2, #308	; 0x134
 8014276:	2100      	movs	r1, #0
 8014278:	6978      	ldr	r0, [r7, #20]
 801427a:	f002 fdf1 	bl	8016e60 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801427e:	697b      	ldr	r3, [r7, #20]
 8014280:	2201      	movs	r2, #1
 8014282:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8014284:	697b      	ldr	r3, [r7, #20]
 8014286:	2201      	movs	r2, #1
 8014288:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8014290:	697b      	ldr	r3, [r7, #20]
 8014292:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8014294:	68bb      	ldr	r3, [r7, #8]
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	4618      	mov	r0, r3
 801429a:	f7f5 fd20 	bl	8009cde <lwip_htonl>
 801429e:	4602      	mov	r2, r0
 80142a0:	697b      	ldr	r3, [r7, #20]
 80142a2:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80142a4:	79fb      	ldrb	r3, [r7, #7]
 80142a6:	2b08      	cmp	r3, #8
 80142a8:	d010      	beq.n	80142cc <dhcp_create_msg+0xfc>
 80142aa:	79fb      	ldrb	r3, [r7, #7]
 80142ac:	2b04      	cmp	r3, #4
 80142ae:	d00d      	beq.n	80142cc <dhcp_create_msg+0xfc>
 80142b0:	79fb      	ldrb	r3, [r7, #7]
 80142b2:	2b07      	cmp	r3, #7
 80142b4:	d00a      	beq.n	80142cc <dhcp_create_msg+0xfc>
 80142b6:	79fb      	ldrb	r3, [r7, #7]
 80142b8:	2b03      	cmp	r3, #3
 80142ba:	d10c      	bne.n	80142d6 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80142bc:	68bb      	ldr	r3, [r7, #8]
 80142be:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80142c0:	2b05      	cmp	r3, #5
 80142c2:	d003      	beq.n	80142cc <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	795b      	ldrb	r3, [r3, #5]
 80142c8:	2b04      	cmp	r3, #4
 80142ca:	d104      	bne.n	80142d6 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	3304      	adds	r3, #4
 80142d0:	681a      	ldr	r2, [r3, #0]
 80142d2:	697b      	ldr	r3, [r7, #20]
 80142d4:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80142d6:	2300      	movs	r3, #0
 80142d8:	83fb      	strh	r3, [r7, #30]
 80142da:	e00c      	b.n	80142f6 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 80142dc:	8bfa      	ldrh	r2, [r7, #30]
 80142de:	8bfb      	ldrh	r3, [r7, #30]
 80142e0:	68f9      	ldr	r1, [r7, #12]
 80142e2:	440a      	add	r2, r1
 80142e4:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 80142e8:	697a      	ldr	r2, [r7, #20]
 80142ea:	4413      	add	r3, r2
 80142ec:	460a      	mov	r2, r1
 80142ee:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80142f0:	8bfb      	ldrh	r3, [r7, #30]
 80142f2:	3301      	adds	r3, #1
 80142f4:	83fb      	strh	r3, [r7, #30]
 80142f6:	8bfb      	ldrh	r3, [r7, #30]
 80142f8:	2b05      	cmp	r3, #5
 80142fa:	d9ef      	bls.n	80142dc <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80142fc:	697b      	ldr	r3, [r7, #20]
 80142fe:	2200      	movs	r2, #0
 8014300:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014304:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014308:	2200      	movs	r2, #0
 801430a:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801430e:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8014312:	2200      	movs	r2, #0
 8014314:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014318:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 801431c:	2200      	movs	r2, #0
 801431e:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014322:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014326:	697b      	ldr	r3, [r7, #20]
 8014328:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801432c:	2301      	movs	r3, #1
 801432e:	2235      	movs	r2, #53	; 0x35
 8014330:	2000      	movs	r0, #0
 8014332:	f7ff fadb 	bl	80138ec <dhcp_option>
 8014336:	4603      	mov	r3, r0
 8014338:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801433a:	697b      	ldr	r3, [r7, #20]
 801433c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014340:	79fa      	ldrb	r2, [r7, #7]
 8014342:	8a7b      	ldrh	r3, [r7, #18]
 8014344:	4618      	mov	r0, r3
 8014346:	f7ff fb05 	bl	8013954 <dhcp_option_byte>
 801434a:	4603      	mov	r3, r0
 801434c:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801434e:	683b      	ldr	r3, [r7, #0]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d002      	beq.n	801435a <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014354:	683b      	ldr	r3, [r7, #0]
 8014356:	8a7a      	ldrh	r2, [r7, #18]
 8014358:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801435a:	69bb      	ldr	r3, [r7, #24]
}
 801435c:	4618      	mov	r0, r3
 801435e:	3720      	adds	r7, #32
 8014360:	46bd      	mov	sp, r7
 8014362:	bd80      	pop	{r7, pc}
 8014364:	0801b1fc 	.word	0x0801b1fc
 8014368:	0801b51c 	.word	0x0801b51c
 801436c:	0801b25c 	.word	0x0801b25c
 8014370:	0801b53c 	.word	0x0801b53c
 8014374:	0801b55c 	.word	0x0801b55c
 8014378:	200085f4 	.word	0x200085f4

0801437c <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	b084      	sub	sp, #16
 8014380:	af00      	add	r7, sp, #0
 8014382:	4603      	mov	r3, r0
 8014384:	60b9      	str	r1, [r7, #8]
 8014386:	607a      	str	r2, [r7, #4]
 8014388:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801438a:	89fb      	ldrh	r3, [r7, #14]
 801438c:	1c5a      	adds	r2, r3, #1
 801438e:	81fa      	strh	r2, [r7, #14]
 8014390:	461a      	mov	r2, r3
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	4413      	add	r3, r2
 8014396:	22ff      	movs	r2, #255	; 0xff
 8014398:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801439a:	e007      	b.n	80143ac <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801439c:	89fb      	ldrh	r3, [r7, #14]
 801439e:	1c5a      	adds	r2, r3, #1
 80143a0:	81fa      	strh	r2, [r7, #14]
 80143a2:	461a      	mov	r2, r3
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	4413      	add	r3, r2
 80143a8:	2200      	movs	r2, #0
 80143aa:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80143ac:	89fb      	ldrh	r3, [r7, #14]
 80143ae:	2b43      	cmp	r3, #67	; 0x43
 80143b0:	d904      	bls.n	80143bc <dhcp_option_trailer+0x40>
 80143b2:	89fb      	ldrh	r3, [r7, #14]
 80143b4:	f003 0303 	and.w	r3, r3, #3
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d002      	beq.n	80143c2 <dhcp_option_trailer+0x46>
 80143bc:	89fb      	ldrh	r3, [r7, #14]
 80143be:	2b43      	cmp	r3, #67	; 0x43
 80143c0:	d9ec      	bls.n	801439c <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80143c2:	89fb      	ldrh	r3, [r7, #14]
 80143c4:	33f0      	adds	r3, #240	; 0xf0
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	4619      	mov	r1, r3
 80143ca:	6878      	ldr	r0, [r7, #4]
 80143cc:	f7f6 fea4 	bl	800b118 <pbuf_realloc>
}
 80143d0:	bf00      	nop
 80143d2:	3710      	adds	r7, #16
 80143d4:	46bd      	mov	sp, r7
 80143d6:	bd80      	pop	{r7, pc}

080143d8 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80143d8:	b480      	push	{r7}
 80143da:	b085      	sub	sp, #20
 80143dc:	af00      	add	r7, sp, #0
 80143de:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	2b00      	cmp	r3, #0
 80143e4:	d017      	beq.n	8014416 <dhcp_supplied_address+0x3e>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143ea:	2b00      	cmp	r3, #0
 80143ec:	d013      	beq.n	8014416 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80143ee:	687b      	ldr	r3, [r7, #4]
 80143f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80143f2:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	795b      	ldrb	r3, [r3, #5]
 80143f8:	2b0a      	cmp	r3, #10
 80143fa:	d007      	beq.n	801440c <dhcp_supplied_address+0x34>
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	795b      	ldrb	r3, [r3, #5]
 8014400:	2b05      	cmp	r3, #5
 8014402:	d003      	beq.n	801440c <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014408:	2b04      	cmp	r3, #4
 801440a:	d101      	bne.n	8014410 <dhcp_supplied_address+0x38>
 801440c:	2301      	movs	r3, #1
 801440e:	e000      	b.n	8014412 <dhcp_supplied_address+0x3a>
 8014410:	2300      	movs	r3, #0
 8014412:	b2db      	uxtb	r3, r3
 8014414:	e000      	b.n	8014418 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014416:	2300      	movs	r3, #0
}
 8014418:	4618      	mov	r0, r3
 801441a:	3714      	adds	r7, #20
 801441c:	46bd      	mov	sp, r7
 801441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014422:	4770      	bx	lr

08014424 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014424:	b580      	push	{r7, lr}
 8014426:	b082      	sub	sp, #8
 8014428:	af00      	add	r7, sp, #0
 801442a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801442c:	4915      	ldr	r1, [pc, #84]	; (8014484 <etharp_free_entry+0x60>)
 801442e:	687a      	ldr	r2, [r7, #4]
 8014430:	4613      	mov	r3, r2
 8014432:	005b      	lsls	r3, r3, #1
 8014434:	4413      	add	r3, r2
 8014436:	00db      	lsls	r3, r3, #3
 8014438:	440b      	add	r3, r1
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	2b00      	cmp	r3, #0
 801443e:	d013      	beq.n	8014468 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014440:	4910      	ldr	r1, [pc, #64]	; (8014484 <etharp_free_entry+0x60>)
 8014442:	687a      	ldr	r2, [r7, #4]
 8014444:	4613      	mov	r3, r2
 8014446:	005b      	lsls	r3, r3, #1
 8014448:	4413      	add	r3, r2
 801444a:	00db      	lsls	r3, r3, #3
 801444c:	440b      	add	r3, r1
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	4618      	mov	r0, r3
 8014452:	f7f6 ffe7 	bl	800b424 <pbuf_free>
    arp_table[i].q = NULL;
 8014456:	490b      	ldr	r1, [pc, #44]	; (8014484 <etharp_free_entry+0x60>)
 8014458:	687a      	ldr	r2, [r7, #4]
 801445a:	4613      	mov	r3, r2
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	4413      	add	r3, r2
 8014460:	00db      	lsls	r3, r3, #3
 8014462:	440b      	add	r3, r1
 8014464:	2200      	movs	r2, #0
 8014466:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014468:	4906      	ldr	r1, [pc, #24]	; (8014484 <etharp_free_entry+0x60>)
 801446a:	687a      	ldr	r2, [r7, #4]
 801446c:	4613      	mov	r3, r2
 801446e:	005b      	lsls	r3, r3, #1
 8014470:	4413      	add	r3, r2
 8014472:	00db      	lsls	r3, r3, #3
 8014474:	440b      	add	r3, r1
 8014476:	3314      	adds	r3, #20
 8014478:	2200      	movs	r2, #0
 801447a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801447c:	bf00      	nop
 801447e:	3708      	adds	r7, #8
 8014480:	46bd      	mov	sp, r7
 8014482:	bd80      	pop	{r7, pc}
 8014484:	200085f8 	.word	0x200085f8

08014488 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014488:	b580      	push	{r7, lr}
 801448a:	b082      	sub	sp, #8
 801448c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801448e:	2300      	movs	r3, #0
 8014490:	607b      	str	r3, [r7, #4]
 8014492:	e096      	b.n	80145c2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014494:	494f      	ldr	r1, [pc, #316]	; (80145d4 <etharp_tmr+0x14c>)
 8014496:	687a      	ldr	r2, [r7, #4]
 8014498:	4613      	mov	r3, r2
 801449a:	005b      	lsls	r3, r3, #1
 801449c:	4413      	add	r3, r2
 801449e:	00db      	lsls	r3, r3, #3
 80144a0:	440b      	add	r3, r1
 80144a2:	3314      	adds	r3, #20
 80144a4:	781b      	ldrb	r3, [r3, #0]
 80144a6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80144a8:	78fb      	ldrb	r3, [r7, #3]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	f000 8086 	beq.w	80145bc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80144b0:	4948      	ldr	r1, [pc, #288]	; (80145d4 <etharp_tmr+0x14c>)
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	4613      	mov	r3, r2
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	4413      	add	r3, r2
 80144ba:	00db      	lsls	r3, r3, #3
 80144bc:	440b      	add	r3, r1
 80144be:	3312      	adds	r3, #18
 80144c0:	881b      	ldrh	r3, [r3, #0]
 80144c2:	3301      	adds	r3, #1
 80144c4:	b298      	uxth	r0, r3
 80144c6:	4943      	ldr	r1, [pc, #268]	; (80145d4 <etharp_tmr+0x14c>)
 80144c8:	687a      	ldr	r2, [r7, #4]
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3312      	adds	r3, #18
 80144d6:	4602      	mov	r2, r0
 80144d8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80144da:	493e      	ldr	r1, [pc, #248]	; (80145d4 <etharp_tmr+0x14c>)
 80144dc:	687a      	ldr	r2, [r7, #4]
 80144de:	4613      	mov	r3, r2
 80144e0:	005b      	lsls	r3, r3, #1
 80144e2:	4413      	add	r3, r2
 80144e4:	00db      	lsls	r3, r3, #3
 80144e6:	440b      	add	r3, r1
 80144e8:	3312      	adds	r3, #18
 80144ea:	881b      	ldrh	r3, [r3, #0]
 80144ec:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80144f0:	d215      	bcs.n	801451e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80144f2:	4938      	ldr	r1, [pc, #224]	; (80145d4 <etharp_tmr+0x14c>)
 80144f4:	687a      	ldr	r2, [r7, #4]
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	440b      	add	r3, r1
 8014500:	3314      	adds	r3, #20
 8014502:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014504:	2b01      	cmp	r3, #1
 8014506:	d10e      	bne.n	8014526 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014508:	4932      	ldr	r1, [pc, #200]	; (80145d4 <etharp_tmr+0x14c>)
 801450a:	687a      	ldr	r2, [r7, #4]
 801450c:	4613      	mov	r3, r2
 801450e:	005b      	lsls	r3, r3, #1
 8014510:	4413      	add	r3, r2
 8014512:	00db      	lsls	r3, r3, #3
 8014514:	440b      	add	r3, r1
 8014516:	3312      	adds	r3, #18
 8014518:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801451a:	2b04      	cmp	r3, #4
 801451c:	d903      	bls.n	8014526 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801451e:	6878      	ldr	r0, [r7, #4]
 8014520:	f7ff ff80 	bl	8014424 <etharp_free_entry>
 8014524:	e04a      	b.n	80145bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014526:	492b      	ldr	r1, [pc, #172]	; (80145d4 <etharp_tmr+0x14c>)
 8014528:	687a      	ldr	r2, [r7, #4]
 801452a:	4613      	mov	r3, r2
 801452c:	005b      	lsls	r3, r3, #1
 801452e:	4413      	add	r3, r2
 8014530:	00db      	lsls	r3, r3, #3
 8014532:	440b      	add	r3, r1
 8014534:	3314      	adds	r3, #20
 8014536:	781b      	ldrb	r3, [r3, #0]
 8014538:	2b03      	cmp	r3, #3
 801453a:	d10a      	bne.n	8014552 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801453c:	4925      	ldr	r1, [pc, #148]	; (80145d4 <etharp_tmr+0x14c>)
 801453e:	687a      	ldr	r2, [r7, #4]
 8014540:	4613      	mov	r3, r2
 8014542:	005b      	lsls	r3, r3, #1
 8014544:	4413      	add	r3, r2
 8014546:	00db      	lsls	r3, r3, #3
 8014548:	440b      	add	r3, r1
 801454a:	3314      	adds	r3, #20
 801454c:	2204      	movs	r2, #4
 801454e:	701a      	strb	r2, [r3, #0]
 8014550:	e034      	b.n	80145bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014552:	4920      	ldr	r1, [pc, #128]	; (80145d4 <etharp_tmr+0x14c>)
 8014554:	687a      	ldr	r2, [r7, #4]
 8014556:	4613      	mov	r3, r2
 8014558:	005b      	lsls	r3, r3, #1
 801455a:	4413      	add	r3, r2
 801455c:	00db      	lsls	r3, r3, #3
 801455e:	440b      	add	r3, r1
 8014560:	3314      	adds	r3, #20
 8014562:	781b      	ldrb	r3, [r3, #0]
 8014564:	2b04      	cmp	r3, #4
 8014566:	d10a      	bne.n	801457e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014568:	491a      	ldr	r1, [pc, #104]	; (80145d4 <etharp_tmr+0x14c>)
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	4613      	mov	r3, r2
 801456e:	005b      	lsls	r3, r3, #1
 8014570:	4413      	add	r3, r2
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	440b      	add	r3, r1
 8014576:	3314      	adds	r3, #20
 8014578:	2202      	movs	r2, #2
 801457a:	701a      	strb	r2, [r3, #0]
 801457c:	e01e      	b.n	80145bc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801457e:	4915      	ldr	r1, [pc, #84]	; (80145d4 <etharp_tmr+0x14c>)
 8014580:	687a      	ldr	r2, [r7, #4]
 8014582:	4613      	mov	r3, r2
 8014584:	005b      	lsls	r3, r3, #1
 8014586:	4413      	add	r3, r2
 8014588:	00db      	lsls	r3, r3, #3
 801458a:	440b      	add	r3, r1
 801458c:	3314      	adds	r3, #20
 801458e:	781b      	ldrb	r3, [r3, #0]
 8014590:	2b01      	cmp	r3, #1
 8014592:	d113      	bne.n	80145bc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014594:	490f      	ldr	r1, [pc, #60]	; (80145d4 <etharp_tmr+0x14c>)
 8014596:	687a      	ldr	r2, [r7, #4]
 8014598:	4613      	mov	r3, r2
 801459a:	005b      	lsls	r3, r3, #1
 801459c:	4413      	add	r3, r2
 801459e:	00db      	lsls	r3, r3, #3
 80145a0:	440b      	add	r3, r1
 80145a2:	3308      	adds	r3, #8
 80145a4:	6818      	ldr	r0, [r3, #0]
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	4613      	mov	r3, r2
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	4413      	add	r3, r2
 80145ae:	00db      	lsls	r3, r3, #3
 80145b0:	4a08      	ldr	r2, [pc, #32]	; (80145d4 <etharp_tmr+0x14c>)
 80145b2:	4413      	add	r3, r2
 80145b4:	3304      	adds	r3, #4
 80145b6:	4619      	mov	r1, r3
 80145b8:	f000 fe72 	bl	80152a0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	3301      	adds	r3, #1
 80145c0:	607b      	str	r3, [r7, #4]
 80145c2:	687b      	ldr	r3, [r7, #4]
 80145c4:	2b09      	cmp	r3, #9
 80145c6:	f77f af65 	ble.w	8014494 <etharp_tmr+0xc>
      }
    }
  }
}
 80145ca:	bf00      	nop
 80145cc:	bf00      	nop
 80145ce:	3708      	adds	r7, #8
 80145d0:	46bd      	mov	sp, r7
 80145d2:	bd80      	pop	{r7, pc}
 80145d4:	200085f8 	.word	0x200085f8

080145d8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80145d8:	b580      	push	{r7, lr}
 80145da:	b08a      	sub	sp, #40	; 0x28
 80145dc:	af00      	add	r7, sp, #0
 80145de:	60f8      	str	r0, [r7, #12]
 80145e0:	460b      	mov	r3, r1
 80145e2:	607a      	str	r2, [r7, #4]
 80145e4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80145e6:	230a      	movs	r3, #10
 80145e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80145ea:	230a      	movs	r3, #10
 80145ec:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80145ee:	230a      	movs	r3, #10
 80145f0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80145f2:	2300      	movs	r3, #0
 80145f4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80145f6:	230a      	movs	r3, #10
 80145f8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80145fa:	2300      	movs	r3, #0
 80145fc:	83bb      	strh	r3, [r7, #28]
 80145fe:	2300      	movs	r3, #0
 8014600:	837b      	strh	r3, [r7, #26]
 8014602:	2300      	movs	r3, #0
 8014604:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014606:	2300      	movs	r3, #0
 8014608:	843b      	strh	r3, [r7, #32]
 801460a:	e0ae      	b.n	801476a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801460c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014610:	49a6      	ldr	r1, [pc, #664]	; (80148ac <etharp_find_entry+0x2d4>)
 8014612:	4613      	mov	r3, r2
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	4413      	add	r3, r2
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	440b      	add	r3, r1
 801461c:	3314      	adds	r3, #20
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014622:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014626:	2b0a      	cmp	r3, #10
 8014628:	d105      	bne.n	8014636 <etharp_find_entry+0x5e>
 801462a:	7dfb      	ldrb	r3, [r7, #23]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d102      	bne.n	8014636 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014630:	8c3b      	ldrh	r3, [r7, #32]
 8014632:	847b      	strh	r3, [r7, #34]	; 0x22
 8014634:	e095      	b.n	8014762 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014636:	7dfb      	ldrb	r3, [r7, #23]
 8014638:	2b00      	cmp	r3, #0
 801463a:	f000 8092 	beq.w	8014762 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801463e:	7dfb      	ldrb	r3, [r7, #23]
 8014640:	2b01      	cmp	r3, #1
 8014642:	d009      	beq.n	8014658 <etharp_find_entry+0x80>
 8014644:	7dfb      	ldrb	r3, [r7, #23]
 8014646:	2b01      	cmp	r3, #1
 8014648:	d806      	bhi.n	8014658 <etharp_find_entry+0x80>
 801464a:	4b99      	ldr	r3, [pc, #612]	; (80148b0 <etharp_find_entry+0x2d8>)
 801464c:	f240 1223 	movw	r2, #291	; 0x123
 8014650:	4998      	ldr	r1, [pc, #608]	; (80148b4 <etharp_find_entry+0x2dc>)
 8014652:	4899      	ldr	r0, [pc, #612]	; (80148b8 <etharp_find_entry+0x2e0>)
 8014654:	f002 fc0c 	bl	8016e70 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014658:	68fb      	ldr	r3, [r7, #12]
 801465a:	2b00      	cmp	r3, #0
 801465c:	d020      	beq.n	80146a0 <etharp_find_entry+0xc8>
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	6819      	ldr	r1, [r3, #0]
 8014662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014666:	4891      	ldr	r0, [pc, #580]	; (80148ac <etharp_find_entry+0x2d4>)
 8014668:	4613      	mov	r3, r2
 801466a:	005b      	lsls	r3, r3, #1
 801466c:	4413      	add	r3, r2
 801466e:	00db      	lsls	r3, r3, #3
 8014670:	4403      	add	r3, r0
 8014672:	3304      	adds	r3, #4
 8014674:	681b      	ldr	r3, [r3, #0]
 8014676:	4299      	cmp	r1, r3
 8014678:	d112      	bne.n	80146a0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	2b00      	cmp	r3, #0
 801467e:	d00c      	beq.n	801469a <etharp_find_entry+0xc2>
 8014680:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014684:	4989      	ldr	r1, [pc, #548]	; (80148ac <etharp_find_entry+0x2d4>)
 8014686:	4613      	mov	r3, r2
 8014688:	005b      	lsls	r3, r3, #1
 801468a:	4413      	add	r3, r2
 801468c:	00db      	lsls	r3, r3, #3
 801468e:	440b      	add	r3, r1
 8014690:	3308      	adds	r3, #8
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	687a      	ldr	r2, [r7, #4]
 8014696:	429a      	cmp	r2, r3
 8014698:	d102      	bne.n	80146a0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801469a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801469e:	e100      	b.n	80148a2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80146a0:	7dfb      	ldrb	r3, [r7, #23]
 80146a2:	2b01      	cmp	r3, #1
 80146a4:	d140      	bne.n	8014728 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80146a6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146aa:	4980      	ldr	r1, [pc, #512]	; (80148ac <etharp_find_entry+0x2d4>)
 80146ac:	4613      	mov	r3, r2
 80146ae:	005b      	lsls	r3, r3, #1
 80146b0:	4413      	add	r3, r2
 80146b2:	00db      	lsls	r3, r3, #3
 80146b4:	440b      	add	r3, r1
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d01a      	beq.n	80146f2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80146bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146c0:	497a      	ldr	r1, [pc, #488]	; (80148ac <etharp_find_entry+0x2d4>)
 80146c2:	4613      	mov	r3, r2
 80146c4:	005b      	lsls	r3, r3, #1
 80146c6:	4413      	add	r3, r2
 80146c8:	00db      	lsls	r3, r3, #3
 80146ca:	440b      	add	r3, r1
 80146cc:	3312      	adds	r3, #18
 80146ce:	881b      	ldrh	r3, [r3, #0]
 80146d0:	8bba      	ldrh	r2, [r7, #28]
 80146d2:	429a      	cmp	r2, r3
 80146d4:	d845      	bhi.n	8014762 <etharp_find_entry+0x18a>
            old_queue = i;
 80146d6:	8c3b      	ldrh	r3, [r7, #32]
 80146d8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80146da:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146de:	4973      	ldr	r1, [pc, #460]	; (80148ac <etharp_find_entry+0x2d4>)
 80146e0:	4613      	mov	r3, r2
 80146e2:	005b      	lsls	r3, r3, #1
 80146e4:	4413      	add	r3, r2
 80146e6:	00db      	lsls	r3, r3, #3
 80146e8:	440b      	add	r3, r1
 80146ea:	3312      	adds	r3, #18
 80146ec:	881b      	ldrh	r3, [r3, #0]
 80146ee:	83bb      	strh	r3, [r7, #28]
 80146f0:	e037      	b.n	8014762 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80146f2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146f6:	496d      	ldr	r1, [pc, #436]	; (80148ac <etharp_find_entry+0x2d4>)
 80146f8:	4613      	mov	r3, r2
 80146fa:	005b      	lsls	r3, r3, #1
 80146fc:	4413      	add	r3, r2
 80146fe:	00db      	lsls	r3, r3, #3
 8014700:	440b      	add	r3, r1
 8014702:	3312      	adds	r3, #18
 8014704:	881b      	ldrh	r3, [r3, #0]
 8014706:	8b7a      	ldrh	r2, [r7, #26]
 8014708:	429a      	cmp	r2, r3
 801470a:	d82a      	bhi.n	8014762 <etharp_find_entry+0x18a>
            old_pending = i;
 801470c:	8c3b      	ldrh	r3, [r7, #32]
 801470e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014710:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014714:	4965      	ldr	r1, [pc, #404]	; (80148ac <etharp_find_entry+0x2d4>)
 8014716:	4613      	mov	r3, r2
 8014718:	005b      	lsls	r3, r3, #1
 801471a:	4413      	add	r3, r2
 801471c:	00db      	lsls	r3, r3, #3
 801471e:	440b      	add	r3, r1
 8014720:	3312      	adds	r3, #18
 8014722:	881b      	ldrh	r3, [r3, #0]
 8014724:	837b      	strh	r3, [r7, #26]
 8014726:	e01c      	b.n	8014762 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014728:	7dfb      	ldrb	r3, [r7, #23]
 801472a:	2b01      	cmp	r3, #1
 801472c:	d919      	bls.n	8014762 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801472e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014732:	495e      	ldr	r1, [pc, #376]	; (80148ac <etharp_find_entry+0x2d4>)
 8014734:	4613      	mov	r3, r2
 8014736:	005b      	lsls	r3, r3, #1
 8014738:	4413      	add	r3, r2
 801473a:	00db      	lsls	r3, r3, #3
 801473c:	440b      	add	r3, r1
 801473e:	3312      	adds	r3, #18
 8014740:	881b      	ldrh	r3, [r3, #0]
 8014742:	8b3a      	ldrh	r2, [r7, #24]
 8014744:	429a      	cmp	r2, r3
 8014746:	d80c      	bhi.n	8014762 <etharp_find_entry+0x18a>
            old_stable = i;
 8014748:	8c3b      	ldrh	r3, [r7, #32]
 801474a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801474c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014750:	4956      	ldr	r1, [pc, #344]	; (80148ac <etharp_find_entry+0x2d4>)
 8014752:	4613      	mov	r3, r2
 8014754:	005b      	lsls	r3, r3, #1
 8014756:	4413      	add	r3, r2
 8014758:	00db      	lsls	r3, r3, #3
 801475a:	440b      	add	r3, r1
 801475c:	3312      	adds	r3, #18
 801475e:	881b      	ldrh	r3, [r3, #0]
 8014760:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014762:	8c3b      	ldrh	r3, [r7, #32]
 8014764:	3301      	adds	r3, #1
 8014766:	b29b      	uxth	r3, r3
 8014768:	843b      	strh	r3, [r7, #32]
 801476a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801476e:	2b09      	cmp	r3, #9
 8014770:	f77f af4c 	ble.w	801460c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014774:	7afb      	ldrb	r3, [r7, #11]
 8014776:	f003 0302 	and.w	r3, r3, #2
 801477a:	2b00      	cmp	r3, #0
 801477c:	d108      	bne.n	8014790 <etharp_find_entry+0x1b8>
 801477e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014782:	2b0a      	cmp	r3, #10
 8014784:	d107      	bne.n	8014796 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014786:	7afb      	ldrb	r3, [r7, #11]
 8014788:	f003 0301 	and.w	r3, r3, #1
 801478c:	2b00      	cmp	r3, #0
 801478e:	d102      	bne.n	8014796 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014790:	f04f 33ff 	mov.w	r3, #4294967295
 8014794:	e085      	b.n	80148a2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014796:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801479a:	2b09      	cmp	r3, #9
 801479c:	dc02      	bgt.n	80147a4 <etharp_find_entry+0x1cc>
    i = empty;
 801479e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80147a0:	843b      	strh	r3, [r7, #32]
 80147a2:	e039      	b.n	8014818 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80147a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80147a8:	2b09      	cmp	r3, #9
 80147aa:	dc14      	bgt.n	80147d6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80147ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80147ae:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80147b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147b4:	493d      	ldr	r1, [pc, #244]	; (80148ac <etharp_find_entry+0x2d4>)
 80147b6:	4613      	mov	r3, r2
 80147b8:	005b      	lsls	r3, r3, #1
 80147ba:	4413      	add	r3, r2
 80147bc:	00db      	lsls	r3, r3, #3
 80147be:	440b      	add	r3, r1
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	2b00      	cmp	r3, #0
 80147c4:	d018      	beq.n	80147f8 <etharp_find_entry+0x220>
 80147c6:	4b3a      	ldr	r3, [pc, #232]	; (80148b0 <etharp_find_entry+0x2d8>)
 80147c8:	f240 126d 	movw	r2, #365	; 0x16d
 80147cc:	493b      	ldr	r1, [pc, #236]	; (80148bc <etharp_find_entry+0x2e4>)
 80147ce:	483a      	ldr	r0, [pc, #232]	; (80148b8 <etharp_find_entry+0x2e0>)
 80147d0:	f002 fb4e 	bl	8016e70 <iprintf>
 80147d4:	e010      	b.n	80147f8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80147d6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80147da:	2b09      	cmp	r3, #9
 80147dc:	dc02      	bgt.n	80147e4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80147de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80147e0:	843b      	strh	r3, [r7, #32]
 80147e2:	e009      	b.n	80147f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80147e4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80147e8:	2b09      	cmp	r3, #9
 80147ea:	dc02      	bgt.n	80147f2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80147ec:	8bfb      	ldrh	r3, [r7, #30]
 80147ee:	843b      	strh	r3, [r7, #32]
 80147f0:	e002      	b.n	80147f8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80147f2:	f04f 33ff 	mov.w	r3, #4294967295
 80147f6:	e054      	b.n	80148a2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80147f8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80147fc:	2b09      	cmp	r3, #9
 80147fe:	dd06      	ble.n	801480e <etharp_find_entry+0x236>
 8014800:	4b2b      	ldr	r3, [pc, #172]	; (80148b0 <etharp_find_entry+0x2d8>)
 8014802:	f240 127f 	movw	r2, #383	; 0x17f
 8014806:	492e      	ldr	r1, [pc, #184]	; (80148c0 <etharp_find_entry+0x2e8>)
 8014808:	482b      	ldr	r0, [pc, #172]	; (80148b8 <etharp_find_entry+0x2e0>)
 801480a:	f002 fb31 	bl	8016e70 <iprintf>
    etharp_free_entry(i);
 801480e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014812:	4618      	mov	r0, r3
 8014814:	f7ff fe06 	bl	8014424 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014818:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801481c:	2b09      	cmp	r3, #9
 801481e:	dd06      	ble.n	801482e <etharp_find_entry+0x256>
 8014820:	4b23      	ldr	r3, [pc, #140]	; (80148b0 <etharp_find_entry+0x2d8>)
 8014822:	f240 1283 	movw	r2, #387	; 0x183
 8014826:	4926      	ldr	r1, [pc, #152]	; (80148c0 <etharp_find_entry+0x2e8>)
 8014828:	4823      	ldr	r0, [pc, #140]	; (80148b8 <etharp_find_entry+0x2e0>)
 801482a:	f002 fb21 	bl	8016e70 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801482e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014832:	491e      	ldr	r1, [pc, #120]	; (80148ac <etharp_find_entry+0x2d4>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3314      	adds	r3, #20
 8014840:	781b      	ldrb	r3, [r3, #0]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d006      	beq.n	8014854 <etharp_find_entry+0x27c>
 8014846:	4b1a      	ldr	r3, [pc, #104]	; (80148b0 <etharp_find_entry+0x2d8>)
 8014848:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801484c:	491d      	ldr	r1, [pc, #116]	; (80148c4 <etharp_find_entry+0x2ec>)
 801484e:	481a      	ldr	r0, [pc, #104]	; (80148b8 <etharp_find_entry+0x2e0>)
 8014850:	f002 fb0e 	bl	8016e70 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014854:	68fb      	ldr	r3, [r7, #12]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d00b      	beq.n	8014872 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801485a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801485e:	68fb      	ldr	r3, [r7, #12]
 8014860:	6819      	ldr	r1, [r3, #0]
 8014862:	4812      	ldr	r0, [pc, #72]	; (80148ac <etharp_find_entry+0x2d4>)
 8014864:	4613      	mov	r3, r2
 8014866:	005b      	lsls	r3, r3, #1
 8014868:	4413      	add	r3, r2
 801486a:	00db      	lsls	r3, r3, #3
 801486c:	4403      	add	r3, r0
 801486e:	3304      	adds	r3, #4
 8014870:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014872:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014876:	490d      	ldr	r1, [pc, #52]	; (80148ac <etharp_find_entry+0x2d4>)
 8014878:	4613      	mov	r3, r2
 801487a:	005b      	lsls	r3, r3, #1
 801487c:	4413      	add	r3, r2
 801487e:	00db      	lsls	r3, r3, #3
 8014880:	440b      	add	r3, r1
 8014882:	3312      	adds	r3, #18
 8014884:	2200      	movs	r2, #0
 8014886:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801488c:	4907      	ldr	r1, [pc, #28]	; (80148ac <etharp_find_entry+0x2d4>)
 801488e:	4613      	mov	r3, r2
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	4413      	add	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	440b      	add	r3, r1
 8014898:	3308      	adds	r3, #8
 801489a:	687a      	ldr	r2, [r7, #4]
 801489c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801489e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80148a2:	4618      	mov	r0, r3
 80148a4:	3728      	adds	r7, #40	; 0x28
 80148a6:	46bd      	mov	sp, r7
 80148a8:	bd80      	pop	{r7, pc}
 80148aa:	bf00      	nop
 80148ac:	200085f8 	.word	0x200085f8
 80148b0:	0801b59c 	.word	0x0801b59c
 80148b4:	0801b5d4 	.word	0x0801b5d4
 80148b8:	0801b614 	.word	0x0801b614
 80148bc:	0801b63c 	.word	0x0801b63c
 80148c0:	0801b654 	.word	0x0801b654
 80148c4:	0801b668 	.word	0x0801b668

080148c8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80148c8:	b580      	push	{r7, lr}
 80148ca:	b088      	sub	sp, #32
 80148cc:	af02      	add	r7, sp, #8
 80148ce:	60f8      	str	r0, [r7, #12]
 80148d0:	60b9      	str	r1, [r7, #8]
 80148d2:	607a      	str	r2, [r7, #4]
 80148d4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80148d6:	68fb      	ldr	r3, [r7, #12]
 80148d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80148dc:	2b06      	cmp	r3, #6
 80148de:	d006      	beq.n	80148ee <etharp_update_arp_entry+0x26>
 80148e0:	4b48      	ldr	r3, [pc, #288]	; (8014a04 <etharp_update_arp_entry+0x13c>)
 80148e2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80148e6:	4948      	ldr	r1, [pc, #288]	; (8014a08 <etharp_update_arp_entry+0x140>)
 80148e8:	4848      	ldr	r0, [pc, #288]	; (8014a0c <etharp_update_arp_entry+0x144>)
 80148ea:	f002 fac1 	bl	8016e70 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80148ee:	68bb      	ldr	r3, [r7, #8]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d012      	beq.n	801491a <etharp_update_arp_entry+0x52>
 80148f4:	68bb      	ldr	r3, [r7, #8]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d00e      	beq.n	801491a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80148fc:	68bb      	ldr	r3, [r7, #8]
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	68f9      	ldr	r1, [r7, #12]
 8014902:	4618      	mov	r0, r3
 8014904:	f001 f920 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8014908:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801490a:	2b00      	cmp	r3, #0
 801490c:	d105      	bne.n	801491a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801490e:	68bb      	ldr	r3, [r7, #8]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014916:	2be0      	cmp	r3, #224	; 0xe0
 8014918:	d102      	bne.n	8014920 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801491a:	f06f 030f 	mvn.w	r3, #15
 801491e:	e06c      	b.n	80149fa <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014920:	78fb      	ldrb	r3, [r7, #3]
 8014922:	68fa      	ldr	r2, [r7, #12]
 8014924:	4619      	mov	r1, r3
 8014926:	68b8      	ldr	r0, [r7, #8]
 8014928:	f7ff fe56 	bl	80145d8 <etharp_find_entry>
 801492c:	4603      	mov	r3, r0
 801492e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014930:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014934:	2b00      	cmp	r3, #0
 8014936:	da02      	bge.n	801493e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014938:	8afb      	ldrh	r3, [r7, #22]
 801493a:	b25b      	sxtb	r3, r3
 801493c:	e05d      	b.n	80149fa <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801493e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014942:	4933      	ldr	r1, [pc, #204]	; (8014a10 <etharp_update_arp_entry+0x148>)
 8014944:	4613      	mov	r3, r2
 8014946:	005b      	lsls	r3, r3, #1
 8014948:	4413      	add	r3, r2
 801494a:	00db      	lsls	r3, r3, #3
 801494c:	440b      	add	r3, r1
 801494e:	3314      	adds	r3, #20
 8014950:	2202      	movs	r2, #2
 8014952:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014954:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014958:	492d      	ldr	r1, [pc, #180]	; (8014a10 <etharp_update_arp_entry+0x148>)
 801495a:	4613      	mov	r3, r2
 801495c:	005b      	lsls	r3, r3, #1
 801495e:	4413      	add	r3, r2
 8014960:	00db      	lsls	r3, r3, #3
 8014962:	440b      	add	r3, r1
 8014964:	3308      	adds	r3, #8
 8014966:	68fa      	ldr	r2, [r7, #12]
 8014968:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801496a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801496e:	4613      	mov	r3, r2
 8014970:	005b      	lsls	r3, r3, #1
 8014972:	4413      	add	r3, r2
 8014974:	00db      	lsls	r3, r3, #3
 8014976:	3308      	adds	r3, #8
 8014978:	4a25      	ldr	r2, [pc, #148]	; (8014a10 <etharp_update_arp_entry+0x148>)
 801497a:	4413      	add	r3, r2
 801497c:	3304      	adds	r3, #4
 801497e:	2206      	movs	r2, #6
 8014980:	6879      	ldr	r1, [r7, #4]
 8014982:	4618      	mov	r0, r3
 8014984:	f002 fa44 	bl	8016e10 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014988:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801498c:	4920      	ldr	r1, [pc, #128]	; (8014a10 <etharp_update_arp_entry+0x148>)
 801498e:	4613      	mov	r3, r2
 8014990:	005b      	lsls	r3, r3, #1
 8014992:	4413      	add	r3, r2
 8014994:	00db      	lsls	r3, r3, #3
 8014996:	440b      	add	r3, r1
 8014998:	3312      	adds	r3, #18
 801499a:	2200      	movs	r2, #0
 801499c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801499e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149a2:	491b      	ldr	r1, [pc, #108]	; (8014a10 <etharp_update_arp_entry+0x148>)
 80149a4:	4613      	mov	r3, r2
 80149a6:	005b      	lsls	r3, r3, #1
 80149a8:	4413      	add	r3, r2
 80149aa:	00db      	lsls	r3, r3, #3
 80149ac:	440b      	add	r3, r1
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d021      	beq.n	80149f8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80149b4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149b8:	4915      	ldr	r1, [pc, #84]	; (8014a10 <etharp_update_arp_entry+0x148>)
 80149ba:	4613      	mov	r3, r2
 80149bc:	005b      	lsls	r3, r3, #1
 80149be:	4413      	add	r3, r2
 80149c0:	00db      	lsls	r3, r3, #3
 80149c2:	440b      	add	r3, r1
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80149c8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80149cc:	4910      	ldr	r1, [pc, #64]	; (8014a10 <etharp_update_arp_entry+0x148>)
 80149ce:	4613      	mov	r3, r2
 80149d0:	005b      	lsls	r3, r3, #1
 80149d2:	4413      	add	r3, r2
 80149d4:	00db      	lsls	r3, r3, #3
 80149d6:	440b      	add	r3, r1
 80149d8:	2200      	movs	r2, #0
 80149da:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80149e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80149e6:	9300      	str	r3, [sp, #0]
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	6939      	ldr	r1, [r7, #16]
 80149ec:	68f8      	ldr	r0, [r7, #12]
 80149ee:	f001 ffb3 	bl	8016958 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80149f2:	6938      	ldr	r0, [r7, #16]
 80149f4:	f7f6 fd16 	bl	800b424 <pbuf_free>
  }
  return ERR_OK;
 80149f8:	2300      	movs	r3, #0
}
 80149fa:	4618      	mov	r0, r3
 80149fc:	3718      	adds	r7, #24
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	0801b59c 	.word	0x0801b59c
 8014a08:	0801b694 	.word	0x0801b694
 8014a0c:	0801b614 	.word	0x0801b614
 8014a10:	200085f8 	.word	0x200085f8

08014a14 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014a14:	b580      	push	{r7, lr}
 8014a16:	b084      	sub	sp, #16
 8014a18:	af00      	add	r7, sp, #0
 8014a1a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	60fb      	str	r3, [r7, #12]
 8014a20:	e01e      	b.n	8014a60 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014a22:	4913      	ldr	r1, [pc, #76]	; (8014a70 <etharp_cleanup_netif+0x5c>)
 8014a24:	68fa      	ldr	r2, [r7, #12]
 8014a26:	4613      	mov	r3, r2
 8014a28:	005b      	lsls	r3, r3, #1
 8014a2a:	4413      	add	r3, r2
 8014a2c:	00db      	lsls	r3, r3, #3
 8014a2e:	440b      	add	r3, r1
 8014a30:	3314      	adds	r3, #20
 8014a32:	781b      	ldrb	r3, [r3, #0]
 8014a34:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014a36:	7afb      	ldrb	r3, [r7, #11]
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	d00e      	beq.n	8014a5a <etharp_cleanup_netif+0x46>
 8014a3c:	490c      	ldr	r1, [pc, #48]	; (8014a70 <etharp_cleanup_netif+0x5c>)
 8014a3e:	68fa      	ldr	r2, [r7, #12]
 8014a40:	4613      	mov	r3, r2
 8014a42:	005b      	lsls	r3, r3, #1
 8014a44:	4413      	add	r3, r2
 8014a46:	00db      	lsls	r3, r3, #3
 8014a48:	440b      	add	r3, r1
 8014a4a:	3308      	adds	r3, #8
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	687a      	ldr	r2, [r7, #4]
 8014a50:	429a      	cmp	r2, r3
 8014a52:	d102      	bne.n	8014a5a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014a54:	68f8      	ldr	r0, [r7, #12]
 8014a56:	f7ff fce5 	bl	8014424 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014a5a:	68fb      	ldr	r3, [r7, #12]
 8014a5c:	3301      	adds	r3, #1
 8014a5e:	60fb      	str	r3, [r7, #12]
 8014a60:	68fb      	ldr	r3, [r7, #12]
 8014a62:	2b09      	cmp	r3, #9
 8014a64:	dddd      	ble.n	8014a22 <etharp_cleanup_netif+0xe>
    }
  }
}
 8014a66:	bf00      	nop
 8014a68:	bf00      	nop
 8014a6a:	3710      	adds	r7, #16
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	bd80      	pop	{r7, pc}
 8014a70:	200085f8 	.word	0x200085f8

08014a74 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014a74:	b5b0      	push	{r4, r5, r7, lr}
 8014a76:	b08a      	sub	sp, #40	; 0x28
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014a7e:	683b      	ldr	r3, [r7, #0]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d107      	bne.n	8014a94 <etharp_input+0x20>
 8014a84:	4b3f      	ldr	r3, [pc, #252]	; (8014b84 <etharp_input+0x110>)
 8014a86:	f240 228a 	movw	r2, #650	; 0x28a
 8014a8a:	493f      	ldr	r1, [pc, #252]	; (8014b88 <etharp_input+0x114>)
 8014a8c:	483f      	ldr	r0, [pc, #252]	; (8014b8c <etharp_input+0x118>)
 8014a8e:	f002 f9ef 	bl	8016e70 <iprintf>
 8014a92:	e074      	b.n	8014b7e <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014a9a:	693b      	ldr	r3, [r7, #16]
 8014a9c:	881b      	ldrh	r3, [r3, #0]
 8014a9e:	b29b      	uxth	r3, r3
 8014aa0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014aa4:	d10c      	bne.n	8014ac0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014aa6:	693b      	ldr	r3, [r7, #16]
 8014aa8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014aaa:	2b06      	cmp	r3, #6
 8014aac:	d108      	bne.n	8014ac0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014aae:	693b      	ldr	r3, [r7, #16]
 8014ab0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014ab2:	2b04      	cmp	r3, #4
 8014ab4:	d104      	bne.n	8014ac0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014ab6:	693b      	ldr	r3, [r7, #16]
 8014ab8:	885b      	ldrh	r3, [r3, #2]
 8014aba:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014abc:	2b08      	cmp	r3, #8
 8014abe:	d003      	beq.n	8014ac8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014ac0:	6878      	ldr	r0, [r7, #4]
 8014ac2:	f7f6 fcaf 	bl	800b424 <pbuf_free>
    return;
 8014ac6:	e05a      	b.n	8014b7e <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014ac8:	693b      	ldr	r3, [r7, #16]
 8014aca:	330e      	adds	r3, #14
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014ad0:	693b      	ldr	r3, [r7, #16]
 8014ad2:	3318      	adds	r3, #24
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ad8:	683b      	ldr	r3, [r7, #0]
 8014ada:	3304      	adds	r3, #4
 8014adc:	681b      	ldr	r3, [r3, #0]
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	d102      	bne.n	8014ae8 <etharp_input+0x74>
    for_us = 0;
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	75fb      	strb	r3, [r7, #23]
 8014ae6:	e009      	b.n	8014afc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014ae8:	68ba      	ldr	r2, [r7, #8]
 8014aea:	683b      	ldr	r3, [r7, #0]
 8014aec:	3304      	adds	r3, #4
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	429a      	cmp	r2, r3
 8014af2:	bf0c      	ite	eq
 8014af4:	2301      	moveq	r3, #1
 8014af6:	2300      	movne	r3, #0
 8014af8:	b2db      	uxtb	r3, r3
 8014afa:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014afc:	693b      	ldr	r3, [r7, #16]
 8014afe:	f103 0208 	add.w	r2, r3, #8
 8014b02:	7dfb      	ldrb	r3, [r7, #23]
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d001      	beq.n	8014b0c <etharp_input+0x98>
 8014b08:	2301      	movs	r3, #1
 8014b0a:	e000      	b.n	8014b0e <etharp_input+0x9a>
 8014b0c:	2302      	movs	r3, #2
 8014b0e:	f107 010c 	add.w	r1, r7, #12
 8014b12:	6838      	ldr	r0, [r7, #0]
 8014b14:	f7ff fed8 	bl	80148c8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	88db      	ldrh	r3, [r3, #6]
 8014b1c:	b29b      	uxth	r3, r3
 8014b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014b22:	d003      	beq.n	8014b2c <etharp_input+0xb8>
 8014b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014b28:	d01e      	beq.n	8014b68 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014b2a:	e025      	b.n	8014b78 <etharp_input+0x104>
      if (for_us) {
 8014b2c:	7dfb      	ldrb	r3, [r7, #23]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d021      	beq.n	8014b76 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014b32:	683b      	ldr	r3, [r7, #0]
 8014b34:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014b38:	693b      	ldr	r3, [r7, #16]
 8014b3a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014b3e:	683b      	ldr	r3, [r7, #0]
 8014b40:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8014b44:	683b      	ldr	r3, [r7, #0]
 8014b46:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014b48:	693a      	ldr	r2, [r7, #16]
 8014b4a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014b4c:	2102      	movs	r1, #2
 8014b4e:	9103      	str	r1, [sp, #12]
 8014b50:	f107 010c 	add.w	r1, r7, #12
 8014b54:	9102      	str	r1, [sp, #8]
 8014b56:	9201      	str	r2, [sp, #4]
 8014b58:	9300      	str	r3, [sp, #0]
 8014b5a:	462b      	mov	r3, r5
 8014b5c:	4622      	mov	r2, r4
 8014b5e:	4601      	mov	r1, r0
 8014b60:	6838      	ldr	r0, [r7, #0]
 8014b62:	f000 faef 	bl	8015144 <etharp_raw>
      break;
 8014b66:	e006      	b.n	8014b76 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014b68:	f107 030c 	add.w	r3, r7, #12
 8014b6c:	4619      	mov	r1, r3
 8014b6e:	6838      	ldr	r0, [r7, #0]
 8014b70:	f7fe f9fc 	bl	8012f6c <dhcp_arp_reply>
      break;
 8014b74:	e000      	b.n	8014b78 <etharp_input+0x104>
      break;
 8014b76:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014b78:	6878      	ldr	r0, [r7, #4]
 8014b7a:	f7f6 fc53 	bl	800b424 <pbuf_free>
}
 8014b7e:	3718      	adds	r7, #24
 8014b80:	46bd      	mov	sp, r7
 8014b82:	bdb0      	pop	{r4, r5, r7, pc}
 8014b84:	0801b59c 	.word	0x0801b59c
 8014b88:	0801b6ec 	.word	0x0801b6ec
 8014b8c:	0801b614 	.word	0x0801b614

08014b90 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014b90:	b580      	push	{r7, lr}
 8014b92:	b086      	sub	sp, #24
 8014b94:	af02      	add	r7, sp, #8
 8014b96:	60f8      	str	r0, [r7, #12]
 8014b98:	60b9      	str	r1, [r7, #8]
 8014b9a:	4613      	mov	r3, r2
 8014b9c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014b9e:	79fa      	ldrb	r2, [r7, #7]
 8014ba0:	4944      	ldr	r1, [pc, #272]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014ba2:	4613      	mov	r3, r2
 8014ba4:	005b      	lsls	r3, r3, #1
 8014ba6:	4413      	add	r3, r2
 8014ba8:	00db      	lsls	r3, r3, #3
 8014baa:	440b      	add	r3, r1
 8014bac:	3314      	adds	r3, #20
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d806      	bhi.n	8014bc2 <etharp_output_to_arp_index+0x32>
 8014bb4:	4b40      	ldr	r3, [pc, #256]	; (8014cb8 <etharp_output_to_arp_index+0x128>)
 8014bb6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014bba:	4940      	ldr	r1, [pc, #256]	; (8014cbc <etharp_output_to_arp_index+0x12c>)
 8014bbc:	4840      	ldr	r0, [pc, #256]	; (8014cc0 <etharp_output_to_arp_index+0x130>)
 8014bbe:	f002 f957 	bl	8016e70 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014bc2:	79fa      	ldrb	r2, [r7, #7]
 8014bc4:	493b      	ldr	r1, [pc, #236]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014bc6:	4613      	mov	r3, r2
 8014bc8:	005b      	lsls	r3, r3, #1
 8014bca:	4413      	add	r3, r2
 8014bcc:	00db      	lsls	r3, r3, #3
 8014bce:	440b      	add	r3, r1
 8014bd0:	3314      	adds	r3, #20
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	2b02      	cmp	r3, #2
 8014bd6:	d153      	bne.n	8014c80 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014bd8:	79fa      	ldrb	r2, [r7, #7]
 8014bda:	4936      	ldr	r1, [pc, #216]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014bdc:	4613      	mov	r3, r2
 8014bde:	005b      	lsls	r3, r3, #1
 8014be0:	4413      	add	r3, r2
 8014be2:	00db      	lsls	r3, r3, #3
 8014be4:	440b      	add	r3, r1
 8014be6:	3312      	adds	r3, #18
 8014be8:	881b      	ldrh	r3, [r3, #0]
 8014bea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014bee:	d919      	bls.n	8014c24 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014bf0:	79fa      	ldrb	r2, [r7, #7]
 8014bf2:	4613      	mov	r3, r2
 8014bf4:	005b      	lsls	r3, r3, #1
 8014bf6:	4413      	add	r3, r2
 8014bf8:	00db      	lsls	r3, r3, #3
 8014bfa:	4a2e      	ldr	r2, [pc, #184]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014bfc:	4413      	add	r3, r2
 8014bfe:	3304      	adds	r3, #4
 8014c00:	4619      	mov	r1, r3
 8014c02:	68f8      	ldr	r0, [r7, #12]
 8014c04:	f000 fb4c 	bl	80152a0 <etharp_request>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d138      	bne.n	8014c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014c0e:	79fa      	ldrb	r2, [r7, #7]
 8014c10:	4928      	ldr	r1, [pc, #160]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c12:	4613      	mov	r3, r2
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	4413      	add	r3, r2
 8014c18:	00db      	lsls	r3, r3, #3
 8014c1a:	440b      	add	r3, r1
 8014c1c:	3314      	adds	r3, #20
 8014c1e:	2203      	movs	r2, #3
 8014c20:	701a      	strb	r2, [r3, #0]
 8014c22:	e02d      	b.n	8014c80 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014c24:	79fa      	ldrb	r2, [r7, #7]
 8014c26:	4923      	ldr	r1, [pc, #140]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c28:	4613      	mov	r3, r2
 8014c2a:	005b      	lsls	r3, r3, #1
 8014c2c:	4413      	add	r3, r2
 8014c2e:	00db      	lsls	r3, r3, #3
 8014c30:	440b      	add	r3, r1
 8014c32:	3312      	adds	r3, #18
 8014c34:	881b      	ldrh	r3, [r3, #0]
 8014c36:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014c3a:	d321      	bcc.n	8014c80 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014c3c:	79fa      	ldrb	r2, [r7, #7]
 8014c3e:	4613      	mov	r3, r2
 8014c40:	005b      	lsls	r3, r3, #1
 8014c42:	4413      	add	r3, r2
 8014c44:	00db      	lsls	r3, r3, #3
 8014c46:	4a1b      	ldr	r2, [pc, #108]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c48:	4413      	add	r3, r2
 8014c4a:	1d19      	adds	r1, r3, #4
 8014c4c:	79fa      	ldrb	r2, [r7, #7]
 8014c4e:	4613      	mov	r3, r2
 8014c50:	005b      	lsls	r3, r3, #1
 8014c52:	4413      	add	r3, r2
 8014c54:	00db      	lsls	r3, r3, #3
 8014c56:	3308      	adds	r3, #8
 8014c58:	4a16      	ldr	r2, [pc, #88]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c5a:	4413      	add	r3, r2
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	461a      	mov	r2, r3
 8014c60:	68f8      	ldr	r0, [r7, #12]
 8014c62:	f000 fafb 	bl	801525c <etharp_request_dst>
 8014c66:	4603      	mov	r3, r0
 8014c68:	2b00      	cmp	r3, #0
 8014c6a:	d109      	bne.n	8014c80 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014c6c:	79fa      	ldrb	r2, [r7, #7]
 8014c6e:	4911      	ldr	r1, [pc, #68]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c70:	4613      	mov	r3, r2
 8014c72:	005b      	lsls	r3, r3, #1
 8014c74:	4413      	add	r3, r2
 8014c76:	00db      	lsls	r3, r3, #3
 8014c78:	440b      	add	r3, r1
 8014c7a:	3314      	adds	r3, #20
 8014c7c:	2203      	movs	r2, #3
 8014c7e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8014c86:	79fa      	ldrb	r2, [r7, #7]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	005b      	lsls	r3, r3, #1
 8014c8c:	4413      	add	r3, r2
 8014c8e:	00db      	lsls	r3, r3, #3
 8014c90:	3308      	adds	r3, #8
 8014c92:	4a08      	ldr	r2, [pc, #32]	; (8014cb4 <etharp_output_to_arp_index+0x124>)
 8014c94:	4413      	add	r3, r2
 8014c96:	3304      	adds	r3, #4
 8014c98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014c9c:	9200      	str	r2, [sp, #0]
 8014c9e:	460a      	mov	r2, r1
 8014ca0:	68b9      	ldr	r1, [r7, #8]
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f001 fe58 	bl	8016958 <ethernet_output>
 8014ca8:	4603      	mov	r3, r0
}
 8014caa:	4618      	mov	r0, r3
 8014cac:	3710      	adds	r7, #16
 8014cae:	46bd      	mov	sp, r7
 8014cb0:	bd80      	pop	{r7, pc}
 8014cb2:	bf00      	nop
 8014cb4:	200085f8 	.word	0x200085f8
 8014cb8:	0801b59c 	.word	0x0801b59c
 8014cbc:	0801b70c 	.word	0x0801b70c
 8014cc0:	0801b614 	.word	0x0801b614

08014cc4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b08a      	sub	sp, #40	; 0x28
 8014cc8:	af02      	add	r7, sp, #8
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d106      	bne.n	8014ce8 <etharp_output+0x24>
 8014cda:	4b73      	ldr	r3, [pc, #460]	; (8014ea8 <etharp_output+0x1e4>)
 8014cdc:	f240 321e 	movw	r2, #798	; 0x31e
 8014ce0:	4972      	ldr	r1, [pc, #456]	; (8014eac <etharp_output+0x1e8>)
 8014ce2:	4873      	ldr	r0, [pc, #460]	; (8014eb0 <etharp_output+0x1ec>)
 8014ce4:	f002 f8c4 	bl	8016e70 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014ce8:	68bb      	ldr	r3, [r7, #8]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d106      	bne.n	8014cfc <etharp_output+0x38>
 8014cee:	4b6e      	ldr	r3, [pc, #440]	; (8014ea8 <etharp_output+0x1e4>)
 8014cf0:	f240 321f 	movw	r2, #799	; 0x31f
 8014cf4:	496f      	ldr	r1, [pc, #444]	; (8014eb4 <etharp_output+0x1f0>)
 8014cf6:	486e      	ldr	r0, [pc, #440]	; (8014eb0 <etharp_output+0x1ec>)
 8014cf8:	f002 f8ba 	bl	8016e70 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d106      	bne.n	8014d10 <etharp_output+0x4c>
 8014d02:	4b69      	ldr	r3, [pc, #420]	; (8014ea8 <etharp_output+0x1e4>)
 8014d04:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014d08:	496b      	ldr	r1, [pc, #428]	; (8014eb8 <etharp_output+0x1f4>)
 8014d0a:	4869      	ldr	r0, [pc, #420]	; (8014eb0 <etharp_output+0x1ec>)
 8014d0c:	f002 f8b0 	bl	8016e70 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	681b      	ldr	r3, [r3, #0]
 8014d14:	68f9      	ldr	r1, [r7, #12]
 8014d16:	4618      	mov	r0, r3
 8014d18:	f000 ff16 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d002      	beq.n	8014d28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014d22:	4b66      	ldr	r3, [pc, #408]	; (8014ebc <etharp_output+0x1f8>)
 8014d24:	61fb      	str	r3, [r7, #28]
 8014d26:	e0af      	b.n	8014e88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014d30:	2be0      	cmp	r3, #224	; 0xe0
 8014d32:	d118      	bne.n	8014d66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014d34:	2301      	movs	r3, #1
 8014d36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014d38:	2300      	movs	r3, #0
 8014d3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014d3c:	235e      	movs	r3, #94	; 0x5e
 8014d3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	3301      	adds	r3, #1
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014d4a:	b2db      	uxtb	r3, r3
 8014d4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	3302      	adds	r3, #2
 8014d52:	781b      	ldrb	r3, [r3, #0]
 8014d54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014d56:	687b      	ldr	r3, [r7, #4]
 8014d58:	3303      	adds	r3, #3
 8014d5a:	781b      	ldrb	r3, [r3, #0]
 8014d5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014d5e:	f107 0310 	add.w	r3, r7, #16
 8014d62:	61fb      	str	r3, [r7, #28]
 8014d64:	e090      	b.n	8014e88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	681a      	ldr	r2, [r3, #0]
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	3304      	adds	r3, #4
 8014d6e:	681b      	ldr	r3, [r3, #0]
 8014d70:	405a      	eors	r2, r3
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	3308      	adds	r3, #8
 8014d76:	681b      	ldr	r3, [r3, #0]
 8014d78:	4013      	ands	r3, r2
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d012      	beq.n	8014da4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014d84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d00b      	beq.n	8014da4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	330c      	adds	r3, #12
 8014d90:	681b      	ldr	r3, [r3, #0]
 8014d92:	2b00      	cmp	r3, #0
 8014d94:	d003      	beq.n	8014d9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	330c      	adds	r3, #12
 8014d9a:	61bb      	str	r3, [r7, #24]
 8014d9c:	e002      	b.n	8014da4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014d9e:	f06f 0303 	mvn.w	r3, #3
 8014da2:	e07d      	b.n	8014ea0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014da4:	4b46      	ldr	r3, [pc, #280]	; (8014ec0 <etharp_output+0x1fc>)
 8014da6:	781b      	ldrb	r3, [r3, #0]
 8014da8:	4619      	mov	r1, r3
 8014daa:	4a46      	ldr	r2, [pc, #280]	; (8014ec4 <etharp_output+0x200>)
 8014dac:	460b      	mov	r3, r1
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	440b      	add	r3, r1
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	4413      	add	r3, r2
 8014db6:	3314      	adds	r3, #20
 8014db8:	781b      	ldrb	r3, [r3, #0]
 8014dba:	2b01      	cmp	r3, #1
 8014dbc:	d925      	bls.n	8014e0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014dbe:	4b40      	ldr	r3, [pc, #256]	; (8014ec0 <etharp_output+0x1fc>)
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	4619      	mov	r1, r3
 8014dc4:	4a3f      	ldr	r2, [pc, #252]	; (8014ec4 <etharp_output+0x200>)
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	005b      	lsls	r3, r3, #1
 8014dca:	440b      	add	r3, r1
 8014dcc:	00db      	lsls	r3, r3, #3
 8014dce:	4413      	add	r3, r2
 8014dd0:	3308      	adds	r3, #8
 8014dd2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014dd4:	68fa      	ldr	r2, [r7, #12]
 8014dd6:	429a      	cmp	r2, r3
 8014dd8:	d117      	bne.n	8014e0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014dda:	69bb      	ldr	r3, [r7, #24]
 8014ddc:	681a      	ldr	r2, [r3, #0]
 8014dde:	4b38      	ldr	r3, [pc, #224]	; (8014ec0 <etharp_output+0x1fc>)
 8014de0:	781b      	ldrb	r3, [r3, #0]
 8014de2:	4618      	mov	r0, r3
 8014de4:	4937      	ldr	r1, [pc, #220]	; (8014ec4 <etharp_output+0x200>)
 8014de6:	4603      	mov	r3, r0
 8014de8:	005b      	lsls	r3, r3, #1
 8014dea:	4403      	add	r3, r0
 8014dec:	00db      	lsls	r3, r3, #3
 8014dee:	440b      	add	r3, r1
 8014df0:	3304      	adds	r3, #4
 8014df2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d108      	bne.n	8014e0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014df8:	4b31      	ldr	r3, [pc, #196]	; (8014ec0 <etharp_output+0x1fc>)
 8014dfa:	781b      	ldrb	r3, [r3, #0]
 8014dfc:	461a      	mov	r2, r3
 8014dfe:	68b9      	ldr	r1, [r7, #8]
 8014e00:	68f8      	ldr	r0, [r7, #12]
 8014e02:	f7ff fec5 	bl	8014b90 <etharp_output_to_arp_index>
 8014e06:	4603      	mov	r3, r0
 8014e08:	e04a      	b.n	8014ea0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	75fb      	strb	r3, [r7, #23]
 8014e0e:	e031      	b.n	8014e74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014e10:	7dfa      	ldrb	r2, [r7, #23]
 8014e12:	492c      	ldr	r1, [pc, #176]	; (8014ec4 <etharp_output+0x200>)
 8014e14:	4613      	mov	r3, r2
 8014e16:	005b      	lsls	r3, r3, #1
 8014e18:	4413      	add	r3, r2
 8014e1a:	00db      	lsls	r3, r3, #3
 8014e1c:	440b      	add	r3, r1
 8014e1e:	3314      	adds	r3, #20
 8014e20:	781b      	ldrb	r3, [r3, #0]
 8014e22:	2b01      	cmp	r3, #1
 8014e24:	d923      	bls.n	8014e6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014e26:	7dfa      	ldrb	r2, [r7, #23]
 8014e28:	4926      	ldr	r1, [pc, #152]	; (8014ec4 <etharp_output+0x200>)
 8014e2a:	4613      	mov	r3, r2
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	4413      	add	r3, r2
 8014e30:	00db      	lsls	r3, r3, #3
 8014e32:	440b      	add	r3, r1
 8014e34:	3308      	adds	r3, #8
 8014e36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014e38:	68fa      	ldr	r2, [r7, #12]
 8014e3a:	429a      	cmp	r2, r3
 8014e3c:	d117      	bne.n	8014e6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	6819      	ldr	r1, [r3, #0]
 8014e42:	7dfa      	ldrb	r2, [r7, #23]
 8014e44:	481f      	ldr	r0, [pc, #124]	; (8014ec4 <etharp_output+0x200>)
 8014e46:	4613      	mov	r3, r2
 8014e48:	005b      	lsls	r3, r3, #1
 8014e4a:	4413      	add	r3, r2
 8014e4c:	00db      	lsls	r3, r3, #3
 8014e4e:	4403      	add	r3, r0
 8014e50:	3304      	adds	r3, #4
 8014e52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014e54:	4299      	cmp	r1, r3
 8014e56:	d10a      	bne.n	8014e6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014e58:	4a19      	ldr	r2, [pc, #100]	; (8014ec0 <etharp_output+0x1fc>)
 8014e5a:	7dfb      	ldrb	r3, [r7, #23]
 8014e5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014e5e:	7dfb      	ldrb	r3, [r7, #23]
 8014e60:	461a      	mov	r2, r3
 8014e62:	68b9      	ldr	r1, [r7, #8]
 8014e64:	68f8      	ldr	r0, [r7, #12]
 8014e66:	f7ff fe93 	bl	8014b90 <etharp_output_to_arp_index>
 8014e6a:	4603      	mov	r3, r0
 8014e6c:	e018      	b.n	8014ea0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014e6e:	7dfb      	ldrb	r3, [r7, #23]
 8014e70:	3301      	adds	r3, #1
 8014e72:	75fb      	strb	r3, [r7, #23]
 8014e74:	7dfb      	ldrb	r3, [r7, #23]
 8014e76:	2b09      	cmp	r3, #9
 8014e78:	d9ca      	bls.n	8014e10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014e7a:	68ba      	ldr	r2, [r7, #8]
 8014e7c:	69b9      	ldr	r1, [r7, #24]
 8014e7e:	68f8      	ldr	r0, [r7, #12]
 8014e80:	f000 f822 	bl	8014ec8 <etharp_query>
 8014e84:	4603      	mov	r3, r0
 8014e86:	e00b      	b.n	8014ea0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014e88:	68fb      	ldr	r3, [r7, #12]
 8014e8a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014e8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014e92:	9300      	str	r3, [sp, #0]
 8014e94:	69fb      	ldr	r3, [r7, #28]
 8014e96:	68b9      	ldr	r1, [r7, #8]
 8014e98:	68f8      	ldr	r0, [r7, #12]
 8014e9a:	f001 fd5d 	bl	8016958 <ethernet_output>
 8014e9e:	4603      	mov	r3, r0
}
 8014ea0:	4618      	mov	r0, r3
 8014ea2:	3720      	adds	r7, #32
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	bd80      	pop	{r7, pc}
 8014ea8:	0801b59c 	.word	0x0801b59c
 8014eac:	0801b6ec 	.word	0x0801b6ec
 8014eb0:	0801b614 	.word	0x0801b614
 8014eb4:	0801b73c 	.word	0x0801b73c
 8014eb8:	0801b6dc 	.word	0x0801b6dc
 8014ebc:	0801bda4 	.word	0x0801bda4
 8014ec0:	200086e8 	.word	0x200086e8
 8014ec4:	200085f8 	.word	0x200085f8

08014ec8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014ec8:	b580      	push	{r7, lr}
 8014eca:	b08c      	sub	sp, #48	; 0x30
 8014ecc:	af02      	add	r7, sp, #8
 8014ece:	60f8      	str	r0, [r7, #12]
 8014ed0:	60b9      	str	r1, [r7, #8]
 8014ed2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	332a      	adds	r3, #42	; 0x2a
 8014ed8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014eda:	23ff      	movs	r3, #255	; 0xff
 8014edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014ee0:	2300      	movs	r3, #0
 8014ee2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	68f9      	ldr	r1, [r7, #12]
 8014eea:	4618      	mov	r0, r3
 8014eec:	f000 fe2c 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8014ef0:	4603      	mov	r3, r0
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d10c      	bne.n	8014f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	681b      	ldr	r3, [r3, #0]
 8014efa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014efe:	2be0      	cmp	r3, #224	; 0xe0
 8014f00:	d006      	beq.n	8014f10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014f02:	68bb      	ldr	r3, [r7, #8]
 8014f04:	2b00      	cmp	r3, #0
 8014f06:	d003      	beq.n	8014f10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	681b      	ldr	r3, [r3, #0]
 8014f0c:	2b00      	cmp	r3, #0
 8014f0e:	d102      	bne.n	8014f16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014f10:	f06f 030f 	mvn.w	r3, #15
 8014f14:	e101      	b.n	801511a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014f16:	68fa      	ldr	r2, [r7, #12]
 8014f18:	2101      	movs	r1, #1
 8014f1a:	68b8      	ldr	r0, [r7, #8]
 8014f1c:	f7ff fb5c 	bl	80145d8 <etharp_find_entry>
 8014f20:	4603      	mov	r3, r0
 8014f22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014f24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014f28:	2b00      	cmp	r3, #0
 8014f2a:	da02      	bge.n	8014f32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014f2c:	8a7b      	ldrh	r3, [r7, #18]
 8014f2e:	b25b      	sxtb	r3, r3
 8014f30:	e0f3      	b.n	801511a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014f32:	8a7b      	ldrh	r3, [r7, #18]
 8014f34:	2b7e      	cmp	r3, #126	; 0x7e
 8014f36:	d906      	bls.n	8014f46 <etharp_query+0x7e>
 8014f38:	4b7a      	ldr	r3, [pc, #488]	; (8015124 <etharp_query+0x25c>)
 8014f3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014f3e:	497a      	ldr	r1, [pc, #488]	; (8015128 <etharp_query+0x260>)
 8014f40:	487a      	ldr	r0, [pc, #488]	; (801512c <etharp_query+0x264>)
 8014f42:	f001 ff95 	bl	8016e70 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014f46:	8a7b      	ldrh	r3, [r7, #18]
 8014f48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014f4a:	7c7a      	ldrb	r2, [r7, #17]
 8014f4c:	4978      	ldr	r1, [pc, #480]	; (8015130 <etharp_query+0x268>)
 8014f4e:	4613      	mov	r3, r2
 8014f50:	005b      	lsls	r3, r3, #1
 8014f52:	4413      	add	r3, r2
 8014f54:	00db      	lsls	r3, r3, #3
 8014f56:	440b      	add	r3, r1
 8014f58:	3314      	adds	r3, #20
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	2b00      	cmp	r3, #0
 8014f5e:	d115      	bne.n	8014f8c <etharp_query+0xc4>
    is_new_entry = 1;
 8014f60:	2301      	movs	r3, #1
 8014f62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014f64:	7c7a      	ldrb	r2, [r7, #17]
 8014f66:	4972      	ldr	r1, [pc, #456]	; (8015130 <etharp_query+0x268>)
 8014f68:	4613      	mov	r3, r2
 8014f6a:	005b      	lsls	r3, r3, #1
 8014f6c:	4413      	add	r3, r2
 8014f6e:	00db      	lsls	r3, r3, #3
 8014f70:	440b      	add	r3, r1
 8014f72:	3314      	adds	r3, #20
 8014f74:	2201      	movs	r2, #1
 8014f76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014f78:	7c7a      	ldrb	r2, [r7, #17]
 8014f7a:	496d      	ldr	r1, [pc, #436]	; (8015130 <etharp_query+0x268>)
 8014f7c:	4613      	mov	r3, r2
 8014f7e:	005b      	lsls	r3, r3, #1
 8014f80:	4413      	add	r3, r2
 8014f82:	00db      	lsls	r3, r3, #3
 8014f84:	440b      	add	r3, r1
 8014f86:	3308      	adds	r3, #8
 8014f88:	68fa      	ldr	r2, [r7, #12]
 8014f8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014f8c:	7c7a      	ldrb	r2, [r7, #17]
 8014f8e:	4968      	ldr	r1, [pc, #416]	; (8015130 <etharp_query+0x268>)
 8014f90:	4613      	mov	r3, r2
 8014f92:	005b      	lsls	r3, r3, #1
 8014f94:	4413      	add	r3, r2
 8014f96:	00db      	lsls	r3, r3, #3
 8014f98:	440b      	add	r3, r1
 8014f9a:	3314      	adds	r3, #20
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b01      	cmp	r3, #1
 8014fa0:	d011      	beq.n	8014fc6 <etharp_query+0xfe>
 8014fa2:	7c7a      	ldrb	r2, [r7, #17]
 8014fa4:	4962      	ldr	r1, [pc, #392]	; (8015130 <etharp_query+0x268>)
 8014fa6:	4613      	mov	r3, r2
 8014fa8:	005b      	lsls	r3, r3, #1
 8014faa:	4413      	add	r3, r2
 8014fac:	00db      	lsls	r3, r3, #3
 8014fae:	440b      	add	r3, r1
 8014fb0:	3314      	adds	r3, #20
 8014fb2:	781b      	ldrb	r3, [r3, #0]
 8014fb4:	2b01      	cmp	r3, #1
 8014fb6:	d806      	bhi.n	8014fc6 <etharp_query+0xfe>
 8014fb8:	4b5a      	ldr	r3, [pc, #360]	; (8015124 <etharp_query+0x25c>)
 8014fba:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014fbe:	495d      	ldr	r1, [pc, #372]	; (8015134 <etharp_query+0x26c>)
 8014fc0:	485a      	ldr	r0, [pc, #360]	; (801512c <etharp_query+0x264>)
 8014fc2:	f001 ff55 	bl	8016e70 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014fc6:	6a3b      	ldr	r3, [r7, #32]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	d102      	bne.n	8014fd2 <etharp_query+0x10a>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d10c      	bne.n	8014fec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014fd2:	68b9      	ldr	r1, [r7, #8]
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f000 f963 	bl	80152a0 <etharp_request>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d102      	bne.n	8014fec <etharp_query+0x124>
      return result;
 8014fe6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014fea:	e096      	b.n	801511a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	2b00      	cmp	r3, #0
 8014ff0:	d106      	bne.n	8015000 <etharp_query+0x138>
 8014ff2:	4b4c      	ldr	r3, [pc, #304]	; (8015124 <etharp_query+0x25c>)
 8014ff4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014ff8:	494f      	ldr	r1, [pc, #316]	; (8015138 <etharp_query+0x270>)
 8014ffa:	484c      	ldr	r0, [pc, #304]	; (801512c <etharp_query+0x264>)
 8014ffc:	f001 ff38 	bl	8016e70 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015000:	7c7a      	ldrb	r2, [r7, #17]
 8015002:	494b      	ldr	r1, [pc, #300]	; (8015130 <etharp_query+0x268>)
 8015004:	4613      	mov	r3, r2
 8015006:	005b      	lsls	r3, r3, #1
 8015008:	4413      	add	r3, r2
 801500a:	00db      	lsls	r3, r3, #3
 801500c:	440b      	add	r3, r1
 801500e:	3314      	adds	r3, #20
 8015010:	781b      	ldrb	r3, [r3, #0]
 8015012:	2b01      	cmp	r3, #1
 8015014:	d917      	bls.n	8015046 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015016:	4a49      	ldr	r2, [pc, #292]	; (801513c <etharp_query+0x274>)
 8015018:	7c7b      	ldrb	r3, [r7, #17]
 801501a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801501c:	7c7a      	ldrb	r2, [r7, #17]
 801501e:	4613      	mov	r3, r2
 8015020:	005b      	lsls	r3, r3, #1
 8015022:	4413      	add	r3, r2
 8015024:	00db      	lsls	r3, r3, #3
 8015026:	3308      	adds	r3, #8
 8015028:	4a41      	ldr	r2, [pc, #260]	; (8015130 <etharp_query+0x268>)
 801502a:	4413      	add	r3, r2
 801502c:	3304      	adds	r3, #4
 801502e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015032:	9200      	str	r2, [sp, #0]
 8015034:	697a      	ldr	r2, [r7, #20]
 8015036:	6879      	ldr	r1, [r7, #4]
 8015038:	68f8      	ldr	r0, [r7, #12]
 801503a:	f001 fc8d 	bl	8016958 <ethernet_output>
 801503e:	4603      	mov	r3, r0
 8015040:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015044:	e067      	b.n	8015116 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015046:	7c7a      	ldrb	r2, [r7, #17]
 8015048:	4939      	ldr	r1, [pc, #228]	; (8015130 <etharp_query+0x268>)
 801504a:	4613      	mov	r3, r2
 801504c:	005b      	lsls	r3, r3, #1
 801504e:	4413      	add	r3, r2
 8015050:	00db      	lsls	r3, r3, #3
 8015052:	440b      	add	r3, r1
 8015054:	3314      	adds	r3, #20
 8015056:	781b      	ldrb	r3, [r3, #0]
 8015058:	2b01      	cmp	r3, #1
 801505a:	d15c      	bne.n	8015116 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801505c:	2300      	movs	r3, #0
 801505e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015064:	e01c      	b.n	80150a0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015066:	69fb      	ldr	r3, [r7, #28]
 8015068:	895a      	ldrh	r2, [r3, #10]
 801506a:	69fb      	ldr	r3, [r7, #28]
 801506c:	891b      	ldrh	r3, [r3, #8]
 801506e:	429a      	cmp	r2, r3
 8015070:	d10a      	bne.n	8015088 <etharp_query+0x1c0>
 8015072:	69fb      	ldr	r3, [r7, #28]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	2b00      	cmp	r3, #0
 8015078:	d006      	beq.n	8015088 <etharp_query+0x1c0>
 801507a:	4b2a      	ldr	r3, [pc, #168]	; (8015124 <etharp_query+0x25c>)
 801507c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8015080:	492f      	ldr	r1, [pc, #188]	; (8015140 <etharp_query+0x278>)
 8015082:	482a      	ldr	r0, [pc, #168]	; (801512c <etharp_query+0x264>)
 8015084:	f001 fef4 	bl	8016e70 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8015088:	69fb      	ldr	r3, [r7, #28]
 801508a:	7b1b      	ldrb	r3, [r3, #12]
 801508c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015090:	2b00      	cmp	r3, #0
 8015092:	d002      	beq.n	801509a <etharp_query+0x1d2>
        copy_needed = 1;
 8015094:	2301      	movs	r3, #1
 8015096:	61bb      	str	r3, [r7, #24]
        break;
 8015098:	e005      	b.n	80150a6 <etharp_query+0x1de>
      }
      p = p->next;
 801509a:	69fb      	ldr	r3, [r7, #28]
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80150a0:	69fb      	ldr	r3, [r7, #28]
 80150a2:	2b00      	cmp	r3, #0
 80150a4:	d1df      	bne.n	8015066 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80150a6:	69bb      	ldr	r3, [r7, #24]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	d007      	beq.n	80150bc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80150ac:	687a      	ldr	r2, [r7, #4]
 80150ae:	f44f 7120 	mov.w	r1, #640	; 0x280
 80150b2:	200e      	movs	r0, #14
 80150b4:	f7f6 fc2e 	bl	800b914 <pbuf_clone>
 80150b8:	61f8      	str	r0, [r7, #28]
 80150ba:	e004      	b.n	80150c6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80150c0:	69f8      	ldr	r0, [r7, #28]
 80150c2:	f7f6 fa55 	bl	800b570 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80150c6:	69fb      	ldr	r3, [r7, #28]
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d021      	beq.n	8015110 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80150cc:	7c7a      	ldrb	r2, [r7, #17]
 80150ce:	4918      	ldr	r1, [pc, #96]	; (8015130 <etharp_query+0x268>)
 80150d0:	4613      	mov	r3, r2
 80150d2:	005b      	lsls	r3, r3, #1
 80150d4:	4413      	add	r3, r2
 80150d6:	00db      	lsls	r3, r3, #3
 80150d8:	440b      	add	r3, r1
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	2b00      	cmp	r3, #0
 80150de:	d00a      	beq.n	80150f6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80150e0:	7c7a      	ldrb	r2, [r7, #17]
 80150e2:	4913      	ldr	r1, [pc, #76]	; (8015130 <etharp_query+0x268>)
 80150e4:	4613      	mov	r3, r2
 80150e6:	005b      	lsls	r3, r3, #1
 80150e8:	4413      	add	r3, r2
 80150ea:	00db      	lsls	r3, r3, #3
 80150ec:	440b      	add	r3, r1
 80150ee:	681b      	ldr	r3, [r3, #0]
 80150f0:	4618      	mov	r0, r3
 80150f2:	f7f6 f997 	bl	800b424 <pbuf_free>
      }
      arp_table[i].q = p;
 80150f6:	7c7a      	ldrb	r2, [r7, #17]
 80150f8:	490d      	ldr	r1, [pc, #52]	; (8015130 <etharp_query+0x268>)
 80150fa:	4613      	mov	r3, r2
 80150fc:	005b      	lsls	r3, r3, #1
 80150fe:	4413      	add	r3, r2
 8015100:	00db      	lsls	r3, r3, #3
 8015102:	440b      	add	r3, r1
 8015104:	69fa      	ldr	r2, [r7, #28]
 8015106:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015108:	2300      	movs	r3, #0
 801510a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801510e:	e002      	b.n	8015116 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015110:	23ff      	movs	r3, #255	; 0xff
 8015112:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015116:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801511a:	4618      	mov	r0, r3
 801511c:	3728      	adds	r7, #40	; 0x28
 801511e:	46bd      	mov	sp, r7
 8015120:	bd80      	pop	{r7, pc}
 8015122:	bf00      	nop
 8015124:	0801b59c 	.word	0x0801b59c
 8015128:	0801b748 	.word	0x0801b748
 801512c:	0801b614 	.word	0x0801b614
 8015130:	200085f8 	.word	0x200085f8
 8015134:	0801b758 	.word	0x0801b758
 8015138:	0801b73c 	.word	0x0801b73c
 801513c:	200086e8 	.word	0x200086e8
 8015140:	0801b780 	.word	0x0801b780

08015144 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015144:	b580      	push	{r7, lr}
 8015146:	b08a      	sub	sp, #40	; 0x28
 8015148:	af02      	add	r7, sp, #8
 801514a:	60f8      	str	r0, [r7, #12]
 801514c:	60b9      	str	r1, [r7, #8]
 801514e:	607a      	str	r2, [r7, #4]
 8015150:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015152:	2300      	movs	r3, #0
 8015154:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015156:	68fb      	ldr	r3, [r7, #12]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d106      	bne.n	801516a <etharp_raw+0x26>
 801515c:	4b3a      	ldr	r3, [pc, #232]	; (8015248 <etharp_raw+0x104>)
 801515e:	f240 4257 	movw	r2, #1111	; 0x457
 8015162:	493a      	ldr	r1, [pc, #232]	; (801524c <etharp_raw+0x108>)
 8015164:	483a      	ldr	r0, [pc, #232]	; (8015250 <etharp_raw+0x10c>)
 8015166:	f001 fe83 	bl	8016e70 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801516a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801516e:	211c      	movs	r1, #28
 8015170:	200e      	movs	r0, #14
 8015172:	f7f5 fe73 	bl	800ae5c <pbuf_alloc>
 8015176:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015178:	69bb      	ldr	r3, [r7, #24]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d102      	bne.n	8015184 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801517e:	f04f 33ff 	mov.w	r3, #4294967295
 8015182:	e05d      	b.n	8015240 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015184:	69bb      	ldr	r3, [r7, #24]
 8015186:	895b      	ldrh	r3, [r3, #10]
 8015188:	2b1b      	cmp	r3, #27
 801518a:	d806      	bhi.n	801519a <etharp_raw+0x56>
 801518c:	4b2e      	ldr	r3, [pc, #184]	; (8015248 <etharp_raw+0x104>)
 801518e:	f240 4262 	movw	r2, #1122	; 0x462
 8015192:	4930      	ldr	r1, [pc, #192]	; (8015254 <etharp_raw+0x110>)
 8015194:	482e      	ldr	r0, [pc, #184]	; (8015250 <etharp_raw+0x10c>)
 8015196:	f001 fe6b 	bl	8016e70 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801519a:	69bb      	ldr	r3, [r7, #24]
 801519c:	685b      	ldr	r3, [r3, #4]
 801519e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80151a0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80151a2:	4618      	mov	r0, r3
 80151a4:	f7f4 fd86 	bl	8009cb4 <lwip_htons>
 80151a8:	4603      	mov	r3, r0
 80151aa:	461a      	mov	r2, r3
 80151ac:	697b      	ldr	r3, [r7, #20]
 80151ae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80151b0:	68fb      	ldr	r3, [r7, #12]
 80151b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80151b6:	2b06      	cmp	r3, #6
 80151b8:	d006      	beq.n	80151c8 <etharp_raw+0x84>
 80151ba:	4b23      	ldr	r3, [pc, #140]	; (8015248 <etharp_raw+0x104>)
 80151bc:	f240 4269 	movw	r2, #1129	; 0x469
 80151c0:	4925      	ldr	r1, [pc, #148]	; (8015258 <etharp_raw+0x114>)
 80151c2:	4823      	ldr	r0, [pc, #140]	; (8015250 <etharp_raw+0x10c>)
 80151c4:	f001 fe54 	bl	8016e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80151c8:	697b      	ldr	r3, [r7, #20]
 80151ca:	3308      	adds	r3, #8
 80151cc:	2206      	movs	r2, #6
 80151ce:	6839      	ldr	r1, [r7, #0]
 80151d0:	4618      	mov	r0, r3
 80151d2:	f001 fe1d 	bl	8016e10 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80151d6:	697b      	ldr	r3, [r7, #20]
 80151d8:	3312      	adds	r3, #18
 80151da:	2206      	movs	r2, #6
 80151dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80151de:	4618      	mov	r0, r3
 80151e0:	f001 fe16 	bl	8016e10 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	330e      	adds	r3, #14
 80151e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80151ea:	6812      	ldr	r2, [r2, #0]
 80151ec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80151ee:	697b      	ldr	r3, [r7, #20]
 80151f0:	3318      	adds	r3, #24
 80151f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151f4:	6812      	ldr	r2, [r2, #0]
 80151f6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80151f8:	697b      	ldr	r3, [r7, #20]
 80151fa:	2200      	movs	r2, #0
 80151fc:	701a      	strb	r2, [r3, #0]
 80151fe:	2200      	movs	r2, #0
 8015200:	f042 0201 	orr.w	r2, r2, #1
 8015204:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015206:	697b      	ldr	r3, [r7, #20]
 8015208:	2200      	movs	r2, #0
 801520a:	f042 0208 	orr.w	r2, r2, #8
 801520e:	709a      	strb	r2, [r3, #2]
 8015210:	2200      	movs	r2, #0
 8015212:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015214:	697b      	ldr	r3, [r7, #20]
 8015216:	2206      	movs	r2, #6
 8015218:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801521a:	697b      	ldr	r3, [r7, #20]
 801521c:	2204      	movs	r2, #4
 801521e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015220:	f640 0306 	movw	r3, #2054	; 0x806
 8015224:	9300      	str	r3, [sp, #0]
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	68ba      	ldr	r2, [r7, #8]
 801522a:	69b9      	ldr	r1, [r7, #24]
 801522c:	68f8      	ldr	r0, [r7, #12]
 801522e:	f001 fb93 	bl	8016958 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015232:	69b8      	ldr	r0, [r7, #24]
 8015234:	f7f6 f8f6 	bl	800b424 <pbuf_free>
  p = NULL;
 8015238:	2300      	movs	r3, #0
 801523a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801523c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015240:	4618      	mov	r0, r3
 8015242:	3720      	adds	r7, #32
 8015244:	46bd      	mov	sp, r7
 8015246:	bd80      	pop	{r7, pc}
 8015248:	0801b59c 	.word	0x0801b59c
 801524c:	0801b6ec 	.word	0x0801b6ec
 8015250:	0801b614 	.word	0x0801b614
 8015254:	0801b79c 	.word	0x0801b79c
 8015258:	0801b7d0 	.word	0x0801b7d0

0801525c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801525c:	b580      	push	{r7, lr}
 801525e:	b088      	sub	sp, #32
 8015260:	af04      	add	r7, sp, #16
 8015262:	60f8      	str	r0, [r7, #12]
 8015264:	60b9      	str	r1, [r7, #8]
 8015266:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015268:	68fb      	ldr	r3, [r7, #12]
 801526a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8015274:	68fb      	ldr	r3, [r7, #12]
 8015276:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015278:	2201      	movs	r2, #1
 801527a:	9203      	str	r2, [sp, #12]
 801527c:	68ba      	ldr	r2, [r7, #8]
 801527e:	9202      	str	r2, [sp, #8]
 8015280:	4a06      	ldr	r2, [pc, #24]	; (801529c <etharp_request_dst+0x40>)
 8015282:	9201      	str	r2, [sp, #4]
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	4603      	mov	r3, r0
 8015288:	687a      	ldr	r2, [r7, #4]
 801528a:	68f8      	ldr	r0, [r7, #12]
 801528c:	f7ff ff5a 	bl	8015144 <etharp_raw>
 8015290:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015292:	4618      	mov	r0, r3
 8015294:	3710      	adds	r7, #16
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	0801bdac 	.word	0x0801bdac

080152a0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
 80152a8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80152aa:	4a05      	ldr	r2, [pc, #20]	; (80152c0 <etharp_request+0x20>)
 80152ac:	6839      	ldr	r1, [r7, #0]
 80152ae:	6878      	ldr	r0, [r7, #4]
 80152b0:	f7ff ffd4 	bl	801525c <etharp_request_dst>
 80152b4:	4603      	mov	r3, r0
}
 80152b6:	4618      	mov	r0, r3
 80152b8:	3708      	adds	r7, #8
 80152ba:	46bd      	mov	sp, r7
 80152bc:	bd80      	pop	{r7, pc}
 80152be:	bf00      	nop
 80152c0:	0801bda4 	.word	0x0801bda4

080152c4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b08e      	sub	sp, #56	; 0x38
 80152c8:	af04      	add	r7, sp, #16
 80152ca:	6078      	str	r0, [r7, #4]
 80152cc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80152ce:	4b79      	ldr	r3, [pc, #484]	; (80154b4 <icmp_input+0x1f0>)
 80152d0:	689b      	ldr	r3, [r3, #8]
 80152d2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80152d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80152d6:	781b      	ldrb	r3, [r3, #0]
 80152d8:	f003 030f 	and.w	r3, r3, #15
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	009b      	lsls	r3, r3, #2
 80152e0:	b2db      	uxtb	r3, r3
 80152e2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80152e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152e6:	2b13      	cmp	r3, #19
 80152e8:	f240 80cd 	bls.w	8015486 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	2b03      	cmp	r3, #3
 80152f2:	f240 80ca 	bls.w	801548a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	685b      	ldr	r3, [r3, #4]
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015300:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015304:	2b00      	cmp	r3, #0
 8015306:	f000 80b7 	beq.w	8015478 <icmp_input+0x1b4>
 801530a:	2b08      	cmp	r3, #8
 801530c:	f040 80b7 	bne.w	801547e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015310:	4b69      	ldr	r3, [pc, #420]	; (80154b8 <icmp_input+0x1f4>)
 8015312:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015314:	4b67      	ldr	r3, [pc, #412]	; (80154b4 <icmp_input+0x1f0>)
 8015316:	695b      	ldr	r3, [r3, #20]
 8015318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801531c:	2be0      	cmp	r3, #224	; 0xe0
 801531e:	f000 80bb 	beq.w	8015498 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015322:	4b64      	ldr	r3, [pc, #400]	; (80154b4 <icmp_input+0x1f0>)
 8015324:	695b      	ldr	r3, [r3, #20]
 8015326:	4a63      	ldr	r2, [pc, #396]	; (80154b4 <icmp_input+0x1f0>)
 8015328:	6812      	ldr	r2, [r2, #0]
 801532a:	4611      	mov	r1, r2
 801532c:	4618      	mov	r0, r3
 801532e:	f000 fc0b 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8015332:	4603      	mov	r3, r0
 8015334:	2b00      	cmp	r3, #0
 8015336:	f040 80b1 	bne.w	801549c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	891b      	ldrh	r3, [r3, #8]
 801533e:	2b07      	cmp	r3, #7
 8015340:	f240 80a5 	bls.w	801548e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015346:	330e      	adds	r3, #14
 8015348:	4619      	mov	r1, r3
 801534a:	6878      	ldr	r0, [r7, #4]
 801534c:	f7f5 ffd4 	bl	800b2f8 <pbuf_add_header>
 8015350:	4603      	mov	r3, r0
 8015352:	2b00      	cmp	r3, #0
 8015354:	d04b      	beq.n	80153ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	891a      	ldrh	r2, [r3, #8]
 801535a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801535c:	4413      	add	r3, r2
 801535e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	891b      	ldrh	r3, [r3, #8]
 8015364:	8b7a      	ldrh	r2, [r7, #26]
 8015366:	429a      	cmp	r2, r3
 8015368:	f0c0 809a 	bcc.w	80154a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801536c:	8b7b      	ldrh	r3, [r7, #26]
 801536e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015372:	4619      	mov	r1, r3
 8015374:	200e      	movs	r0, #14
 8015376:	f7f5 fd71 	bl	800ae5c <pbuf_alloc>
 801537a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801537c:	697b      	ldr	r3, [r7, #20]
 801537e:	2b00      	cmp	r3, #0
 8015380:	f000 8090 	beq.w	80154a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015384:	697b      	ldr	r3, [r7, #20]
 8015386:	895b      	ldrh	r3, [r3, #10]
 8015388:	461a      	mov	r2, r3
 801538a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801538c:	3308      	adds	r3, #8
 801538e:	429a      	cmp	r2, r3
 8015390:	d203      	bcs.n	801539a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015392:	6978      	ldr	r0, [r7, #20]
 8015394:	f7f6 f846 	bl	800b424 <pbuf_free>
          goto icmperr;
 8015398:	e085      	b.n	80154a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801539a:	697b      	ldr	r3, [r7, #20]
 801539c:	685b      	ldr	r3, [r3, #4]
 801539e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80153a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80153a2:	4618      	mov	r0, r3
 80153a4:	f001 fd34 	bl	8016e10 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80153a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153aa:	4619      	mov	r1, r3
 80153ac:	6978      	ldr	r0, [r7, #20]
 80153ae:	f7f5 ffb3 	bl	800b318 <pbuf_remove_header>
 80153b2:	4603      	mov	r3, r0
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d009      	beq.n	80153cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80153b8:	4b40      	ldr	r3, [pc, #256]	; (80154bc <icmp_input+0x1f8>)
 80153ba:	22b6      	movs	r2, #182	; 0xb6
 80153bc:	4940      	ldr	r1, [pc, #256]	; (80154c0 <icmp_input+0x1fc>)
 80153be:	4841      	ldr	r0, [pc, #260]	; (80154c4 <icmp_input+0x200>)
 80153c0:	f001 fd56 	bl	8016e70 <iprintf>
          pbuf_free(r);
 80153c4:	6978      	ldr	r0, [r7, #20]
 80153c6:	f7f6 f82d 	bl	800b424 <pbuf_free>
          goto icmperr;
 80153ca:	e06c      	b.n	80154a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80153cc:	6879      	ldr	r1, [r7, #4]
 80153ce:	6978      	ldr	r0, [r7, #20]
 80153d0:	f7f6 f95c 	bl	800b68c <pbuf_copy>
 80153d4:	4603      	mov	r3, r0
 80153d6:	2b00      	cmp	r3, #0
 80153d8:	d003      	beq.n	80153e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80153da:	6978      	ldr	r0, [r7, #20]
 80153dc:	f7f6 f822 	bl	800b424 <pbuf_free>
          goto icmperr;
 80153e0:	e061      	b.n	80154a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80153e2:	6878      	ldr	r0, [r7, #4]
 80153e4:	f7f6 f81e 	bl	800b424 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80153e8:	697b      	ldr	r3, [r7, #20]
 80153ea:	607b      	str	r3, [r7, #4]
 80153ec:	e00f      	b.n	801540e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80153ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80153f0:	330e      	adds	r3, #14
 80153f2:	4619      	mov	r1, r3
 80153f4:	6878      	ldr	r0, [r7, #4]
 80153f6:	f7f5 ff8f 	bl	800b318 <pbuf_remove_header>
 80153fa:	4603      	mov	r3, r0
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d006      	beq.n	801540e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015400:	4b2e      	ldr	r3, [pc, #184]	; (80154bc <icmp_input+0x1f8>)
 8015402:	22c7      	movs	r2, #199	; 0xc7
 8015404:	4930      	ldr	r1, [pc, #192]	; (80154c8 <icmp_input+0x204>)
 8015406:	482f      	ldr	r0, [pc, #188]	; (80154c4 <icmp_input+0x200>)
 8015408:	f001 fd32 	bl	8016e70 <iprintf>
          goto icmperr;
 801540c:	e04b      	b.n	80154a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	685b      	ldr	r3, [r3, #4]
 8015412:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015414:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015416:	4619      	mov	r1, r3
 8015418:	6878      	ldr	r0, [r7, #4]
 801541a:	f7f5 ff6d 	bl	800b2f8 <pbuf_add_header>
 801541e:	4603      	mov	r3, r0
 8015420:	2b00      	cmp	r3, #0
 8015422:	d12b      	bne.n	801547c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	685b      	ldr	r3, [r3, #4]
 8015428:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801542a:	69fb      	ldr	r3, [r7, #28]
 801542c:	681a      	ldr	r2, [r3, #0]
 801542e:	68fb      	ldr	r3, [r7, #12]
 8015430:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015432:	4b20      	ldr	r3, [pc, #128]	; (80154b4 <icmp_input+0x1f0>)
 8015434:	691a      	ldr	r2, [r3, #16]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801543a:	693b      	ldr	r3, [r7, #16]
 801543c:	2200      	movs	r2, #0
 801543e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015440:	693b      	ldr	r3, [r7, #16]
 8015442:	2200      	movs	r2, #0
 8015444:	709a      	strb	r2, [r3, #2]
 8015446:	2200      	movs	r2, #0
 8015448:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	22ff      	movs	r2, #255	; 0xff
 801544e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015450:	68fb      	ldr	r3, [r7, #12]
 8015452:	2200      	movs	r2, #0
 8015454:	729a      	strb	r2, [r3, #10]
 8015456:	2200      	movs	r2, #0
 8015458:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	9302      	str	r3, [sp, #8]
 801545e:	2301      	movs	r3, #1
 8015460:	9301      	str	r3, [sp, #4]
 8015462:	2300      	movs	r3, #0
 8015464:	9300      	str	r3, [sp, #0]
 8015466:	23ff      	movs	r3, #255	; 0xff
 8015468:	2200      	movs	r2, #0
 801546a:	69f9      	ldr	r1, [r7, #28]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f000 fa93 	bl	8015998 <ip4_output_if>
 8015472:	4603      	mov	r3, r0
 8015474:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015476:	e001      	b.n	801547c <icmp_input+0x1b8>
      break;
 8015478:	bf00      	nop
 801547a:	e000      	b.n	801547e <icmp_input+0x1ba>
      break;
 801547c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801547e:	6878      	ldr	r0, [r7, #4]
 8015480:	f7f5 ffd0 	bl	800b424 <pbuf_free>
  return;
 8015484:	e013      	b.n	80154ae <icmp_input+0x1ea>
    goto lenerr;
 8015486:	bf00      	nop
 8015488:	e002      	b.n	8015490 <icmp_input+0x1cc>
    goto lenerr;
 801548a:	bf00      	nop
 801548c:	e000      	b.n	8015490 <icmp_input+0x1cc>
        goto lenerr;
 801548e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015490:	6878      	ldr	r0, [r7, #4]
 8015492:	f7f5 ffc7 	bl	800b424 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015496:	e00a      	b.n	80154ae <icmp_input+0x1ea>
        goto icmperr;
 8015498:	bf00      	nop
 801549a:	e004      	b.n	80154a6 <icmp_input+0x1e2>
        goto icmperr;
 801549c:	bf00      	nop
 801549e:	e002      	b.n	80154a6 <icmp_input+0x1e2>
          goto icmperr;
 80154a0:	bf00      	nop
 80154a2:	e000      	b.n	80154a6 <icmp_input+0x1e2>
          goto icmperr;
 80154a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80154a6:	6878      	ldr	r0, [r7, #4]
 80154a8:	f7f5 ffbc 	bl	800b424 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80154ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80154ae:	3728      	adds	r7, #40	; 0x28
 80154b0:	46bd      	mov	sp, r7
 80154b2:	bd80      	pop	{r7, pc}
 80154b4:	2000b908 	.word	0x2000b908
 80154b8:	2000b91c 	.word	0x2000b91c
 80154bc:	0801b814 	.word	0x0801b814
 80154c0:	0801b84c 	.word	0x0801b84c
 80154c4:	0801b884 	.word	0x0801b884
 80154c8:	0801b8ac 	.word	0x0801b8ac

080154cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
 80154d4:	460b      	mov	r3, r1
 80154d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80154d8:	78fb      	ldrb	r3, [r7, #3]
 80154da:	461a      	mov	r2, r3
 80154dc:	2103      	movs	r1, #3
 80154de:	6878      	ldr	r0, [r7, #4]
 80154e0:	f000 f814 	bl	801550c <icmp_send_response>
}
 80154e4:	bf00      	nop
 80154e6:	3708      	adds	r7, #8
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}

080154ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b082      	sub	sp, #8
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
 80154f4:	460b      	mov	r3, r1
 80154f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80154f8:	78fb      	ldrb	r3, [r7, #3]
 80154fa:	461a      	mov	r2, r3
 80154fc:	210b      	movs	r1, #11
 80154fe:	6878      	ldr	r0, [r7, #4]
 8015500:	f000 f804 	bl	801550c <icmp_send_response>
}
 8015504:	bf00      	nop
 8015506:	3708      	adds	r7, #8
 8015508:	46bd      	mov	sp, r7
 801550a:	bd80      	pop	{r7, pc}

0801550c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801550c:	b580      	push	{r7, lr}
 801550e:	b08c      	sub	sp, #48	; 0x30
 8015510:	af04      	add	r7, sp, #16
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	460b      	mov	r3, r1
 8015516:	70fb      	strb	r3, [r7, #3]
 8015518:	4613      	mov	r3, r2
 801551a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801551c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015520:	2124      	movs	r1, #36	; 0x24
 8015522:	2022      	movs	r0, #34	; 0x22
 8015524:	f7f5 fc9a 	bl	800ae5c <pbuf_alloc>
 8015528:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801552a:	69fb      	ldr	r3, [r7, #28]
 801552c:	2b00      	cmp	r3, #0
 801552e:	d04c      	beq.n	80155ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015530:	69fb      	ldr	r3, [r7, #28]
 8015532:	895b      	ldrh	r3, [r3, #10]
 8015534:	2b23      	cmp	r3, #35	; 0x23
 8015536:	d806      	bhi.n	8015546 <icmp_send_response+0x3a>
 8015538:	4b26      	ldr	r3, [pc, #152]	; (80155d4 <icmp_send_response+0xc8>)
 801553a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801553e:	4926      	ldr	r1, [pc, #152]	; (80155d8 <icmp_send_response+0xcc>)
 8015540:	4826      	ldr	r0, [pc, #152]	; (80155dc <icmp_send_response+0xd0>)
 8015542:	f001 fc95 	bl	8016e70 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	685b      	ldr	r3, [r3, #4]
 801554a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015552:	697b      	ldr	r3, [r7, #20]
 8015554:	78fa      	ldrb	r2, [r7, #3]
 8015556:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	78ba      	ldrb	r2, [r7, #2]
 801555c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	2200      	movs	r2, #0
 8015562:	711a      	strb	r2, [r3, #4]
 8015564:	2200      	movs	r2, #0
 8015566:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015568:	697b      	ldr	r3, [r7, #20]
 801556a:	2200      	movs	r2, #0
 801556c:	719a      	strb	r2, [r3, #6]
 801556e:	2200      	movs	r2, #0
 8015570:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	f103 0008 	add.w	r0, r3, #8
 801557a:	687b      	ldr	r3, [r7, #4]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	221c      	movs	r2, #28
 8015580:	4619      	mov	r1, r3
 8015582:	f001 fc45 	bl	8016e10 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015586:	69bb      	ldr	r3, [r7, #24]
 8015588:	68db      	ldr	r3, [r3, #12]
 801558a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801558c:	f107 030c 	add.w	r3, r7, #12
 8015590:	4618      	mov	r0, r3
 8015592:	f000 f825 	bl	80155e0 <ip4_route>
 8015596:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d011      	beq.n	80155c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	2200      	movs	r2, #0
 80155a2:	709a      	strb	r2, [r3, #2]
 80155a4:	2200      	movs	r2, #0
 80155a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80155a8:	f107 020c 	add.w	r2, r7, #12
 80155ac:	693b      	ldr	r3, [r7, #16]
 80155ae:	9302      	str	r3, [sp, #8]
 80155b0:	2301      	movs	r3, #1
 80155b2:	9301      	str	r3, [sp, #4]
 80155b4:	2300      	movs	r3, #0
 80155b6:	9300      	str	r3, [sp, #0]
 80155b8:	23ff      	movs	r3, #255	; 0xff
 80155ba:	2100      	movs	r1, #0
 80155bc:	69f8      	ldr	r0, [r7, #28]
 80155be:	f000 f9eb 	bl	8015998 <ip4_output_if>
  }
  pbuf_free(q);
 80155c2:	69f8      	ldr	r0, [r7, #28]
 80155c4:	f7f5 ff2e 	bl	800b424 <pbuf_free>
 80155c8:	e000      	b.n	80155cc <icmp_send_response+0xc0>
    return;
 80155ca:	bf00      	nop
}
 80155cc:	3720      	adds	r7, #32
 80155ce:	46bd      	mov	sp, r7
 80155d0:	bd80      	pop	{r7, pc}
 80155d2:	bf00      	nop
 80155d4:	0801b814 	.word	0x0801b814
 80155d8:	0801b8e0 	.word	0x0801b8e0
 80155dc:	0801b884 	.word	0x0801b884

080155e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80155e8:	4b33      	ldr	r3, [pc, #204]	; (80156b8 <ip4_route+0xd8>)
 80155ea:	681b      	ldr	r3, [r3, #0]
 80155ec:	60fb      	str	r3, [r7, #12]
 80155ee:	e036      	b.n	801565e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80155f0:	68fb      	ldr	r3, [r7, #12]
 80155f2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80155f6:	f003 0301 	and.w	r3, r3, #1
 80155fa:	b2db      	uxtb	r3, r3
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d02b      	beq.n	8015658 <ip4_route+0x78>
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015606:	089b      	lsrs	r3, r3, #2
 8015608:	f003 0301 	and.w	r3, r3, #1
 801560c:	b2db      	uxtb	r3, r3
 801560e:	2b00      	cmp	r3, #0
 8015610:	d022      	beq.n	8015658 <ip4_route+0x78>
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	3304      	adds	r3, #4
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d01d      	beq.n	8015658 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	681a      	ldr	r2, [r3, #0]
 8015620:	68fb      	ldr	r3, [r7, #12]
 8015622:	3304      	adds	r3, #4
 8015624:	681b      	ldr	r3, [r3, #0]
 8015626:	405a      	eors	r2, r3
 8015628:	68fb      	ldr	r3, [r7, #12]
 801562a:	3308      	adds	r3, #8
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	4013      	ands	r3, r2
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015634:	68fb      	ldr	r3, [r7, #12]
 8015636:	e038      	b.n	80156aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801563e:	f003 0302 	and.w	r3, r3, #2
 8015642:	2b00      	cmp	r3, #0
 8015644:	d108      	bne.n	8015658 <ip4_route+0x78>
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	681a      	ldr	r2, [r3, #0]
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	330c      	adds	r3, #12
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	429a      	cmp	r2, r3
 8015652:	d101      	bne.n	8015658 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015654:	68fb      	ldr	r3, [r7, #12]
 8015656:	e028      	b.n	80156aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	60fb      	str	r3, [r7, #12]
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d1c5      	bne.n	80155f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015664:	4b15      	ldr	r3, [pc, #84]	; (80156bc <ip4_route+0xdc>)
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d01a      	beq.n	80156a2 <ip4_route+0xc2>
 801566c:	4b13      	ldr	r3, [pc, #76]	; (80156bc <ip4_route+0xdc>)
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015674:	f003 0301 	and.w	r3, r3, #1
 8015678:	2b00      	cmp	r3, #0
 801567a:	d012      	beq.n	80156a2 <ip4_route+0xc2>
 801567c:	4b0f      	ldr	r3, [pc, #60]	; (80156bc <ip4_route+0xdc>)
 801567e:	681b      	ldr	r3, [r3, #0]
 8015680:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015684:	f003 0304 	and.w	r3, r3, #4
 8015688:	2b00      	cmp	r3, #0
 801568a:	d00a      	beq.n	80156a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801568c:	4b0b      	ldr	r3, [pc, #44]	; (80156bc <ip4_route+0xdc>)
 801568e:	681b      	ldr	r3, [r3, #0]
 8015690:	3304      	adds	r3, #4
 8015692:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015694:	2b00      	cmp	r3, #0
 8015696:	d004      	beq.n	80156a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	b2db      	uxtb	r3, r3
 801569e:	2b7f      	cmp	r3, #127	; 0x7f
 80156a0:	d101      	bne.n	80156a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80156a2:	2300      	movs	r3, #0
 80156a4:	e001      	b.n	80156aa <ip4_route+0xca>
  }

  return netif_default;
 80156a6:	4b05      	ldr	r3, [pc, #20]	; (80156bc <ip4_route+0xdc>)
 80156a8:	681b      	ldr	r3, [r3, #0]
}
 80156aa:	4618      	mov	r0, r3
 80156ac:	3714      	adds	r7, #20
 80156ae:	46bd      	mov	sp, r7
 80156b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b4:	4770      	bx	lr
 80156b6:	bf00      	nop
 80156b8:	2000f02c 	.word	0x2000f02c
 80156bc:	2000f030 	.word	0x2000f030

080156c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80156c0:	b580      	push	{r7, lr}
 80156c2:	b082      	sub	sp, #8
 80156c4:	af00      	add	r7, sp, #0
 80156c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80156ce:	f003 0301 	and.w	r3, r3, #1
 80156d2:	b2db      	uxtb	r3, r3
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d016      	beq.n	8015706 <ip4_input_accept+0x46>
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	3304      	adds	r3, #4
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d011      	beq.n	8015706 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80156e2:	4b0b      	ldr	r3, [pc, #44]	; (8015710 <ip4_input_accept+0x50>)
 80156e4:	695a      	ldr	r2, [r3, #20]
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	3304      	adds	r3, #4
 80156ea:	681b      	ldr	r3, [r3, #0]
 80156ec:	429a      	cmp	r2, r3
 80156ee:	d008      	beq.n	8015702 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80156f0:	4b07      	ldr	r3, [pc, #28]	; (8015710 <ip4_input_accept+0x50>)
 80156f2:	695b      	ldr	r3, [r3, #20]
 80156f4:	6879      	ldr	r1, [r7, #4]
 80156f6:	4618      	mov	r0, r3
 80156f8:	f000 fa26 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 80156fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80156fe:	2b00      	cmp	r3, #0
 8015700:	d001      	beq.n	8015706 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8015702:	2301      	movs	r3, #1
 8015704:	e000      	b.n	8015708 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015706:	2300      	movs	r3, #0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3708      	adds	r7, #8
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}
 8015710:	2000b908 	.word	0x2000b908

08015714 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015714:	b580      	push	{r7, lr}
 8015716:	b088      	sub	sp, #32
 8015718:	af00      	add	r7, sp, #0
 801571a:	6078      	str	r0, [r7, #4]
 801571c:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801571e:	2301      	movs	r3, #1
 8015720:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	685b      	ldr	r3, [r3, #4]
 8015726:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015728:	69fb      	ldr	r3, [r7, #28]
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	091b      	lsrs	r3, r3, #4
 801572e:	b2db      	uxtb	r3, r3
 8015730:	2b04      	cmp	r3, #4
 8015732:	d004      	beq.n	801573e <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f7f5 fe75 	bl	800b424 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801573a:	2300      	movs	r3, #0
 801573c:	e123      	b.n	8015986 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801573e:	69fb      	ldr	r3, [r7, #28]
 8015740:	781b      	ldrb	r3, [r3, #0]
 8015742:	f003 030f 	and.w	r3, r3, #15
 8015746:	b2db      	uxtb	r3, r3
 8015748:	009b      	lsls	r3, r3, #2
 801574a:	b2db      	uxtb	r3, r3
 801574c:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	885b      	ldrh	r3, [r3, #2]
 8015752:	b29b      	uxth	r3, r3
 8015754:	4618      	mov	r0, r3
 8015756:	f7f4 faad 	bl	8009cb4 <lwip_htons>
 801575a:	4603      	mov	r3, r0
 801575c:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	891b      	ldrh	r3, [r3, #8]
 8015762:	8a3a      	ldrh	r2, [r7, #16]
 8015764:	429a      	cmp	r2, r3
 8015766:	d204      	bcs.n	8015772 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015768:	8a3b      	ldrh	r3, [r7, #16]
 801576a:	4619      	mov	r1, r3
 801576c:	6878      	ldr	r0, [r7, #4]
 801576e:	f7f5 fcd3 	bl	800b118 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015772:	687b      	ldr	r3, [r7, #4]
 8015774:	895b      	ldrh	r3, [r3, #10]
 8015776:	8a7a      	ldrh	r2, [r7, #18]
 8015778:	429a      	cmp	r2, r3
 801577a:	d807      	bhi.n	801578c <ip4_input+0x78>
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	891b      	ldrh	r3, [r3, #8]
 8015780:	8a3a      	ldrh	r2, [r7, #16]
 8015782:	429a      	cmp	r2, r3
 8015784:	d802      	bhi.n	801578c <ip4_input+0x78>
 8015786:	8a7b      	ldrh	r3, [r7, #18]
 8015788:	2b13      	cmp	r3, #19
 801578a:	d804      	bhi.n	8015796 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801578c:	6878      	ldr	r0, [r7, #4]
 801578e:	f7f5 fe49 	bl	800b424 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015792:	2300      	movs	r3, #0
 8015794:	e0f7      	b.n	8015986 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	691b      	ldr	r3, [r3, #16]
 801579a:	4a7d      	ldr	r2, [pc, #500]	; (8015990 <ip4_input+0x27c>)
 801579c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801579e:	69fb      	ldr	r3, [r7, #28]
 80157a0:	68db      	ldr	r3, [r3, #12]
 80157a2:	4a7b      	ldr	r2, [pc, #492]	; (8015990 <ip4_input+0x27c>)
 80157a4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80157a6:	4b7a      	ldr	r3, [pc, #488]	; (8015990 <ip4_input+0x27c>)
 80157a8:	695b      	ldr	r3, [r3, #20]
 80157aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80157ae:	2be0      	cmp	r3, #224	; 0xe0
 80157b0:	d112      	bne.n	80157d8 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80157b2:	683b      	ldr	r3, [r7, #0]
 80157b4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80157b8:	f003 0301 	and.w	r3, r3, #1
 80157bc:	b2db      	uxtb	r3, r3
 80157be:	2b00      	cmp	r3, #0
 80157c0:	d007      	beq.n	80157d2 <ip4_input+0xbe>
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	3304      	adds	r3, #4
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d002      	beq.n	80157d2 <ip4_input+0xbe>
      netif = inp;
 80157cc:	683b      	ldr	r3, [r7, #0]
 80157ce:	61bb      	str	r3, [r7, #24]
 80157d0:	e02a      	b.n	8015828 <ip4_input+0x114>
    } else {
      netif = NULL;
 80157d2:	2300      	movs	r3, #0
 80157d4:	61bb      	str	r3, [r7, #24]
 80157d6:	e027      	b.n	8015828 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80157d8:	6838      	ldr	r0, [r7, #0]
 80157da:	f7ff ff71 	bl	80156c0 <ip4_input_accept>
 80157de:	4603      	mov	r3, r0
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d002      	beq.n	80157ea <ip4_input+0xd6>
      netif = inp;
 80157e4:	683b      	ldr	r3, [r7, #0]
 80157e6:	61bb      	str	r3, [r7, #24]
 80157e8:	e01e      	b.n	8015828 <ip4_input+0x114>
    } else {
      netif = NULL;
 80157ea:	2300      	movs	r3, #0
 80157ec:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80157ee:	4b68      	ldr	r3, [pc, #416]	; (8015990 <ip4_input+0x27c>)
 80157f0:	695b      	ldr	r3, [r3, #20]
 80157f2:	b2db      	uxtb	r3, r3
 80157f4:	2b7f      	cmp	r3, #127	; 0x7f
 80157f6:	d017      	beq.n	8015828 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80157f8:	4b66      	ldr	r3, [pc, #408]	; (8015994 <ip4_input+0x280>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	61bb      	str	r3, [r7, #24]
 80157fe:	e00e      	b.n	801581e <ip4_input+0x10a>
          if (netif == inp) {
 8015800:	69ba      	ldr	r2, [r7, #24]
 8015802:	683b      	ldr	r3, [r7, #0]
 8015804:	429a      	cmp	r2, r3
 8015806:	d006      	beq.n	8015816 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015808:	69b8      	ldr	r0, [r7, #24]
 801580a:	f7ff ff59 	bl	80156c0 <ip4_input_accept>
 801580e:	4603      	mov	r3, r0
 8015810:	2b00      	cmp	r3, #0
 8015812:	d108      	bne.n	8015826 <ip4_input+0x112>
 8015814:	e000      	b.n	8015818 <ip4_input+0x104>
            continue;
 8015816:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015818:	69bb      	ldr	r3, [r7, #24]
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	61bb      	str	r3, [r7, #24]
 801581e:	69bb      	ldr	r3, [r7, #24]
 8015820:	2b00      	cmp	r3, #0
 8015822:	d1ed      	bne.n	8015800 <ip4_input+0xec>
 8015824:	e000      	b.n	8015828 <ip4_input+0x114>
            break;
 8015826:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015828:	69bb      	ldr	r3, [r7, #24]
 801582a:	2b00      	cmp	r3, #0
 801582c:	d111      	bne.n	8015852 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801582e:	69fb      	ldr	r3, [r7, #28]
 8015830:	7a5b      	ldrb	r3, [r3, #9]
 8015832:	2b11      	cmp	r3, #17
 8015834:	d10d      	bne.n	8015852 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015836:	8a7b      	ldrh	r3, [r7, #18]
 8015838:	69fa      	ldr	r2, [r7, #28]
 801583a:	4413      	add	r3, r2
 801583c:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801583e:	68fb      	ldr	r3, [r7, #12]
 8015840:	885b      	ldrh	r3, [r3, #2]
 8015842:	b29b      	uxth	r3, r3
 8015844:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015848:	d103      	bne.n	8015852 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801584a:	683b      	ldr	r3, [r7, #0]
 801584c:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801584e:	2300      	movs	r3, #0
 8015850:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015852:	697b      	ldr	r3, [r7, #20]
 8015854:	2b00      	cmp	r3, #0
 8015856:	d017      	beq.n	8015888 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015858:	4b4d      	ldr	r3, [pc, #308]	; (8015990 <ip4_input+0x27c>)
 801585a:	691b      	ldr	r3, [r3, #16]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d013      	beq.n	8015888 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015860:	4b4b      	ldr	r3, [pc, #300]	; (8015990 <ip4_input+0x27c>)
 8015862:	691b      	ldr	r3, [r3, #16]
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	4618      	mov	r0, r3
 8015868:	f000 f96e 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 801586c:	4603      	mov	r3, r0
 801586e:	2b00      	cmp	r3, #0
 8015870:	d105      	bne.n	801587e <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015872:	4b47      	ldr	r3, [pc, #284]	; (8015990 <ip4_input+0x27c>)
 8015874:	691b      	ldr	r3, [r3, #16]
 8015876:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801587a:	2be0      	cmp	r3, #224	; 0xe0
 801587c:	d104      	bne.n	8015888 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801587e:	6878      	ldr	r0, [r7, #4]
 8015880:	f7f5 fdd0 	bl	800b424 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015884:	2300      	movs	r3, #0
 8015886:	e07e      	b.n	8015986 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015888:	69bb      	ldr	r3, [r7, #24]
 801588a:	2b00      	cmp	r3, #0
 801588c:	d104      	bne.n	8015898 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801588e:	6878      	ldr	r0, [r7, #4]
 8015890:	f7f5 fdc8 	bl	800b424 <pbuf_free>
    return ERR_OK;
 8015894:	2300      	movs	r3, #0
 8015896:	e076      	b.n	8015986 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	88db      	ldrh	r3, [r3, #6]
 801589c:	b29b      	uxth	r3, r3
 801589e:	461a      	mov	r2, r3
 80158a0:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80158a4:	4013      	ands	r3, r2
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d00b      	beq.n	80158c2 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80158aa:	6878      	ldr	r0, [r7, #4]
 80158ac:	f000 fc92 	bl	80161d4 <ip4_reass>
 80158b0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d101      	bne.n	80158bc <ip4_input+0x1a8>
      return ERR_OK;
 80158b8:	2300      	movs	r3, #0
 80158ba:	e064      	b.n	8015986 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80158bc:	687b      	ldr	r3, [r7, #4]
 80158be:	685b      	ldr	r3, [r3, #4]
 80158c0:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80158c2:	4a33      	ldr	r2, [pc, #204]	; (8015990 <ip4_input+0x27c>)
 80158c4:	69bb      	ldr	r3, [r7, #24]
 80158c6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80158c8:	4a31      	ldr	r2, [pc, #196]	; (8015990 <ip4_input+0x27c>)
 80158ca:	683b      	ldr	r3, [r7, #0]
 80158cc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80158ce:	4a30      	ldr	r2, [pc, #192]	; (8015990 <ip4_input+0x27c>)
 80158d0:	69fb      	ldr	r3, [r7, #28]
 80158d2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80158d4:	69fb      	ldr	r3, [r7, #28]
 80158d6:	781b      	ldrb	r3, [r3, #0]
 80158d8:	f003 030f 	and.w	r3, r3, #15
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	009b      	lsls	r3, r3, #2
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	b29a      	uxth	r2, r3
 80158e4:	4b2a      	ldr	r3, [pc, #168]	; (8015990 <ip4_input+0x27c>)
 80158e6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80158e8:	8a7b      	ldrh	r3, [r7, #18]
 80158ea:	4619      	mov	r1, r3
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7f5 fd13 	bl	800b318 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80158f2:	69fb      	ldr	r3, [r7, #28]
 80158f4:	7a5b      	ldrb	r3, [r3, #9]
 80158f6:	2b11      	cmp	r3, #17
 80158f8:	d006      	beq.n	8015908 <ip4_input+0x1f4>
 80158fa:	2b11      	cmp	r3, #17
 80158fc:	dc13      	bgt.n	8015926 <ip4_input+0x212>
 80158fe:	2b01      	cmp	r3, #1
 8015900:	d00c      	beq.n	801591c <ip4_input+0x208>
 8015902:	2b06      	cmp	r3, #6
 8015904:	d005      	beq.n	8015912 <ip4_input+0x1fe>
 8015906:	e00e      	b.n	8015926 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f7fc fade 	bl	8011ecc <udp_input>
        break;
 8015910:	e026      	b.n	8015960 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015912:	6839      	ldr	r1, [r7, #0]
 8015914:	6878      	ldr	r0, [r7, #4]
 8015916:	f7f7 fe9b 	bl	800d650 <tcp_input>
        break;
 801591a:	e021      	b.n	8015960 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801591c:	6839      	ldr	r1, [r7, #0]
 801591e:	6878      	ldr	r0, [r7, #4]
 8015920:	f7ff fcd0 	bl	80152c4 <icmp_input>
        break;
 8015924:	e01c      	b.n	8015960 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015926:	4b1a      	ldr	r3, [pc, #104]	; (8015990 <ip4_input+0x27c>)
 8015928:	695b      	ldr	r3, [r3, #20]
 801592a:	69b9      	ldr	r1, [r7, #24]
 801592c:	4618      	mov	r0, r3
 801592e:	f000 f90b 	bl	8015b48 <ip4_addr_isbroadcast_u32>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d10f      	bne.n	8015958 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015938:	4b15      	ldr	r3, [pc, #84]	; (8015990 <ip4_input+0x27c>)
 801593a:	695b      	ldr	r3, [r3, #20]
 801593c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015940:	2be0      	cmp	r3, #224	; 0xe0
 8015942:	d009      	beq.n	8015958 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015944:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015948:	4619      	mov	r1, r3
 801594a:	6878      	ldr	r0, [r7, #4]
 801594c:	f7f5 fd57 	bl	800b3fe <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015950:	2102      	movs	r1, #2
 8015952:	6878      	ldr	r0, [r7, #4]
 8015954:	f7ff fdba 	bl	80154cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f7f5 fd63 	bl	800b424 <pbuf_free>
        break;
 801595e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015960:	4b0b      	ldr	r3, [pc, #44]	; (8015990 <ip4_input+0x27c>)
 8015962:	2200      	movs	r2, #0
 8015964:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015966:	4b0a      	ldr	r3, [pc, #40]	; (8015990 <ip4_input+0x27c>)
 8015968:	2200      	movs	r2, #0
 801596a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801596c:	4b08      	ldr	r3, [pc, #32]	; (8015990 <ip4_input+0x27c>)
 801596e:	2200      	movs	r2, #0
 8015970:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015972:	4b07      	ldr	r3, [pc, #28]	; (8015990 <ip4_input+0x27c>)
 8015974:	2200      	movs	r2, #0
 8015976:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015978:	4b05      	ldr	r3, [pc, #20]	; (8015990 <ip4_input+0x27c>)
 801597a:	2200      	movs	r2, #0
 801597c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801597e:	4b04      	ldr	r3, [pc, #16]	; (8015990 <ip4_input+0x27c>)
 8015980:	2200      	movs	r2, #0
 8015982:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	3720      	adds	r7, #32
 801598a:	46bd      	mov	sp, r7
 801598c:	bd80      	pop	{r7, pc}
 801598e:	bf00      	nop
 8015990:	2000b908 	.word	0x2000b908
 8015994:	2000f02c 	.word	0x2000f02c

08015998 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015998:	b580      	push	{r7, lr}
 801599a:	b08a      	sub	sp, #40	; 0x28
 801599c:	af04      	add	r7, sp, #16
 801599e:	60f8      	str	r0, [r7, #12]
 80159a0:	60b9      	str	r1, [r7, #8]
 80159a2:	607a      	str	r2, [r7, #4]
 80159a4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80159a6:	68bb      	ldr	r3, [r7, #8]
 80159a8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d009      	beq.n	80159c4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80159b0:	68bb      	ldr	r3, [r7, #8]
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d003      	beq.n	80159be <ip4_output_if+0x26>
 80159b6:	68bb      	ldr	r3, [r7, #8]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	d102      	bne.n	80159c4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80159be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c0:	3304      	adds	r3, #4
 80159c2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80159c4:	78fa      	ldrb	r2, [r7, #3]
 80159c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159c8:	9302      	str	r3, [sp, #8]
 80159ca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80159ce:	9301      	str	r3, [sp, #4]
 80159d0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80159d4:	9300      	str	r3, [sp, #0]
 80159d6:	4613      	mov	r3, r2
 80159d8:	687a      	ldr	r2, [r7, #4]
 80159da:	6979      	ldr	r1, [r7, #20]
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f000 f805 	bl	80159ec <ip4_output_if_src>
 80159e2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80159e4:	4618      	mov	r0, r3
 80159e6:	3718      	adds	r7, #24
 80159e8:	46bd      	mov	sp, r7
 80159ea:	bd80      	pop	{r7, pc}

080159ec <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80159ec:	b580      	push	{r7, lr}
 80159ee:	b088      	sub	sp, #32
 80159f0:	af00      	add	r7, sp, #0
 80159f2:	60f8      	str	r0, [r7, #12]
 80159f4:	60b9      	str	r1, [r7, #8]
 80159f6:	607a      	str	r2, [r7, #4]
 80159f8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80159fa:	68fb      	ldr	r3, [r7, #12]
 80159fc:	7b9b      	ldrb	r3, [r3, #14]
 80159fe:	2b01      	cmp	r3, #1
 8015a00:	d006      	beq.n	8015a10 <ip4_output_if_src+0x24>
 8015a02:	4b4b      	ldr	r3, [pc, #300]	; (8015b30 <ip4_output_if_src+0x144>)
 8015a04:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015a08:	494a      	ldr	r1, [pc, #296]	; (8015b34 <ip4_output_if_src+0x148>)
 8015a0a:	484b      	ldr	r0, [pc, #300]	; (8015b38 <ip4_output_if_src+0x14c>)
 8015a0c:	f001 fa30 	bl	8016e70 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015a10:	687b      	ldr	r3, [r7, #4]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d060      	beq.n	8015ad8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015a16:	2314      	movs	r3, #20
 8015a18:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015a1a:	2114      	movs	r1, #20
 8015a1c:	68f8      	ldr	r0, [r7, #12]
 8015a1e:	f7f5 fc6b 	bl	800b2f8 <pbuf_add_header>
 8015a22:	4603      	mov	r3, r0
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d002      	beq.n	8015a2e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015a28:	f06f 0301 	mvn.w	r3, #1
 8015a2c:	e07c      	b.n	8015b28 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015a34:	68fb      	ldr	r3, [r7, #12]
 8015a36:	895b      	ldrh	r3, [r3, #10]
 8015a38:	2b13      	cmp	r3, #19
 8015a3a:	d806      	bhi.n	8015a4a <ip4_output_if_src+0x5e>
 8015a3c:	4b3c      	ldr	r3, [pc, #240]	; (8015b30 <ip4_output_if_src+0x144>)
 8015a3e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015a42:	493e      	ldr	r1, [pc, #248]	; (8015b3c <ip4_output_if_src+0x150>)
 8015a44:	483c      	ldr	r0, [pc, #240]	; (8015b38 <ip4_output_if_src+0x14c>)
 8015a46:	f001 fa13 	bl	8016e70 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015a4a:	69fb      	ldr	r3, [r7, #28]
 8015a4c:	78fa      	ldrb	r2, [r7, #3]
 8015a4e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015a50:	69fb      	ldr	r3, [r7, #28]
 8015a52:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015a56:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	681a      	ldr	r2, [r3, #0]
 8015a5c:	69fb      	ldr	r3, [r7, #28]
 8015a5e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015a60:	8b7b      	ldrh	r3, [r7, #26]
 8015a62:	089b      	lsrs	r3, r3, #2
 8015a64:	b29b      	uxth	r3, r3
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015a6c:	b2da      	uxtb	r2, r3
 8015a6e:	69fb      	ldr	r3, [r7, #28]
 8015a70:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015a72:	69fb      	ldr	r3, [r7, #28]
 8015a74:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015a78:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	891b      	ldrh	r3, [r3, #8]
 8015a7e:	4618      	mov	r0, r3
 8015a80:	f7f4 f918 	bl	8009cb4 <lwip_htons>
 8015a84:	4603      	mov	r3, r0
 8015a86:	461a      	mov	r2, r3
 8015a88:	69fb      	ldr	r3, [r7, #28]
 8015a8a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015a8c:	69fb      	ldr	r3, [r7, #28]
 8015a8e:	2200      	movs	r2, #0
 8015a90:	719a      	strb	r2, [r3, #6]
 8015a92:	2200      	movs	r2, #0
 8015a94:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015a96:	4b2a      	ldr	r3, [pc, #168]	; (8015b40 <ip4_output_if_src+0x154>)
 8015a98:	881b      	ldrh	r3, [r3, #0]
 8015a9a:	4618      	mov	r0, r3
 8015a9c:	f7f4 f90a 	bl	8009cb4 <lwip_htons>
 8015aa0:	4603      	mov	r3, r0
 8015aa2:	461a      	mov	r2, r3
 8015aa4:	69fb      	ldr	r3, [r7, #28]
 8015aa6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015aa8:	4b25      	ldr	r3, [pc, #148]	; (8015b40 <ip4_output_if_src+0x154>)
 8015aaa:	881b      	ldrh	r3, [r3, #0]
 8015aac:	3301      	adds	r3, #1
 8015aae:	b29a      	uxth	r2, r3
 8015ab0:	4b23      	ldr	r3, [pc, #140]	; (8015b40 <ip4_output_if_src+0x154>)
 8015ab2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d104      	bne.n	8015ac4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015aba:	4b22      	ldr	r3, [pc, #136]	; (8015b44 <ip4_output_if_src+0x158>)
 8015abc:	681a      	ldr	r2, [r3, #0]
 8015abe:	69fb      	ldr	r3, [r7, #28]
 8015ac0:	60da      	str	r2, [r3, #12]
 8015ac2:	e003      	b.n	8015acc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015ac4:	68bb      	ldr	r3, [r7, #8]
 8015ac6:	681a      	ldr	r2, [r3, #0]
 8015ac8:	69fb      	ldr	r3, [r7, #28]
 8015aca:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015acc:	69fb      	ldr	r3, [r7, #28]
 8015ace:	2200      	movs	r2, #0
 8015ad0:	729a      	strb	r2, [r3, #10]
 8015ad2:	2200      	movs	r2, #0
 8015ad4:	72da      	strb	r2, [r3, #11]
 8015ad6:	e00f      	b.n	8015af8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015ad8:	68fb      	ldr	r3, [r7, #12]
 8015ada:	895b      	ldrh	r3, [r3, #10]
 8015adc:	2b13      	cmp	r3, #19
 8015ade:	d802      	bhi.n	8015ae6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015ae0:	f06f 0301 	mvn.w	r3, #1
 8015ae4:	e020      	b.n	8015b28 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015ae6:	68fb      	ldr	r3, [r7, #12]
 8015ae8:	685b      	ldr	r3, [r3, #4]
 8015aea:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015aec:	69fb      	ldr	r3, [r7, #28]
 8015aee:	691b      	ldr	r3, [r3, #16]
 8015af0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015af2:	f107 0314 	add.w	r3, r7, #20
 8015af6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d00c      	beq.n	8015b1a <ip4_output_if_src+0x12e>
 8015b00:	68fb      	ldr	r3, [r7, #12]
 8015b02:	891a      	ldrh	r2, [r3, #8]
 8015b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015b08:	429a      	cmp	r2, r3
 8015b0a:	d906      	bls.n	8015b1a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8015b0c:	687a      	ldr	r2, [r7, #4]
 8015b0e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015b10:	68f8      	ldr	r0, [r7, #12]
 8015b12:	f000 fd4d 	bl	80165b0 <ip4_frag>
 8015b16:	4603      	mov	r3, r0
 8015b18:	e006      	b.n	8015b28 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b1c:	695b      	ldr	r3, [r3, #20]
 8015b1e:	687a      	ldr	r2, [r7, #4]
 8015b20:	68f9      	ldr	r1, [r7, #12]
 8015b22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015b24:	4798      	blx	r3
 8015b26:	4603      	mov	r3, r0
}
 8015b28:	4618      	mov	r0, r3
 8015b2a:	3720      	adds	r7, #32
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	bd80      	pop	{r7, pc}
 8015b30:	0801b90c 	.word	0x0801b90c
 8015b34:	0801b940 	.word	0x0801b940
 8015b38:	0801b94c 	.word	0x0801b94c
 8015b3c:	0801b974 	.word	0x0801b974
 8015b40:	200086ea 	.word	0x200086ea
 8015b44:	0801bd9c 	.word	0x0801bd9c

08015b48 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015b48:	b480      	push	{r7}
 8015b4a:	b085      	sub	sp, #20
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015b5c:	d002      	beq.n	8015b64 <ip4_addr_isbroadcast_u32+0x1c>
 8015b5e:	687b      	ldr	r3, [r7, #4]
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d101      	bne.n	8015b68 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015b64:	2301      	movs	r3, #1
 8015b66:	e02a      	b.n	8015bbe <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015b68:	683b      	ldr	r3, [r7, #0]
 8015b6a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015b6e:	f003 0302 	and.w	r3, r3, #2
 8015b72:	2b00      	cmp	r3, #0
 8015b74:	d101      	bne.n	8015b7a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015b76:	2300      	movs	r3, #0
 8015b78:	e021      	b.n	8015bbe <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015b7a:	683b      	ldr	r3, [r7, #0]
 8015b7c:	3304      	adds	r3, #4
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	687a      	ldr	r2, [r7, #4]
 8015b82:	429a      	cmp	r2, r3
 8015b84:	d101      	bne.n	8015b8a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015b86:	2300      	movs	r3, #0
 8015b88:	e019      	b.n	8015bbe <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015b8a:	68fa      	ldr	r2, [r7, #12]
 8015b8c:	683b      	ldr	r3, [r7, #0]
 8015b8e:	3304      	adds	r3, #4
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	405a      	eors	r2, r3
 8015b94:	683b      	ldr	r3, [r7, #0]
 8015b96:	3308      	adds	r3, #8
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4013      	ands	r3, r2
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d10d      	bne.n	8015bbc <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015ba0:	683b      	ldr	r3, [r7, #0]
 8015ba2:	3308      	adds	r3, #8
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	43da      	mvns	r2, r3
 8015ba8:	687b      	ldr	r3, [r7, #4]
 8015baa:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015bac:	683b      	ldr	r3, [r7, #0]
 8015bae:	3308      	adds	r3, #8
 8015bb0:	681b      	ldr	r3, [r3, #0]
 8015bb2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015bb4:	429a      	cmp	r2, r3
 8015bb6:	d101      	bne.n	8015bbc <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015bb8:	2301      	movs	r3, #1
 8015bba:	e000      	b.n	8015bbe <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015bbc:	2300      	movs	r3, #0
  }
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3714      	adds	r7, #20
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bc8:	4770      	bx	lr
	...

08015bcc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015bcc:	b580      	push	{r7, lr}
 8015bce:	b084      	sub	sp, #16
 8015bd0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015bd6:	4b12      	ldr	r3, [pc, #72]	; (8015c20 <ip_reass_tmr+0x54>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015bdc:	e018      	b.n	8015c10 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	7fdb      	ldrb	r3, [r3, #31]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d00b      	beq.n	8015bfe <ip_reass_tmr+0x32>
      r->timer--;
 8015be6:	68fb      	ldr	r3, [r7, #12]
 8015be8:	7fdb      	ldrb	r3, [r3, #31]
 8015bea:	3b01      	subs	r3, #1
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	68fb      	ldr	r3, [r7, #12]
 8015bf0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	60fb      	str	r3, [r7, #12]
 8015bfc:	e008      	b.n	8015c10 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015bfe:	68fb      	ldr	r3, [r7, #12]
 8015c00:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015c08:	68b9      	ldr	r1, [r7, #8]
 8015c0a:	6878      	ldr	r0, [r7, #4]
 8015c0c:	f000 f80a 	bl	8015c24 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015c10:	68fb      	ldr	r3, [r7, #12]
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d1e3      	bne.n	8015bde <ip_reass_tmr+0x12>
    }
  }
}
 8015c16:	bf00      	nop
 8015c18:	bf00      	nop
 8015c1a:	3710      	adds	r7, #16
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	200086ec 	.word	0x200086ec

08015c24 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015c24:	b580      	push	{r7, lr}
 8015c26:	b088      	sub	sp, #32
 8015c28:	af00      	add	r7, sp, #0
 8015c2a:	6078      	str	r0, [r7, #4]
 8015c2c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015c32:	683a      	ldr	r2, [r7, #0]
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	429a      	cmp	r2, r3
 8015c38:	d105      	bne.n	8015c46 <ip_reass_free_complete_datagram+0x22>
 8015c3a:	4b45      	ldr	r3, [pc, #276]	; (8015d50 <ip_reass_free_complete_datagram+0x12c>)
 8015c3c:	22ab      	movs	r2, #171	; 0xab
 8015c3e:	4945      	ldr	r1, [pc, #276]	; (8015d54 <ip_reass_free_complete_datagram+0x130>)
 8015c40:	4845      	ldr	r0, [pc, #276]	; (8015d58 <ip_reass_free_complete_datagram+0x134>)
 8015c42:	f001 f915 	bl	8016e70 <iprintf>
  if (prev != NULL) {
 8015c46:	683b      	ldr	r3, [r7, #0]
 8015c48:	2b00      	cmp	r3, #0
 8015c4a:	d00a      	beq.n	8015c62 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015c4c:	683b      	ldr	r3, [r7, #0]
 8015c4e:	681b      	ldr	r3, [r3, #0]
 8015c50:	687a      	ldr	r2, [r7, #4]
 8015c52:	429a      	cmp	r2, r3
 8015c54:	d005      	beq.n	8015c62 <ip_reass_free_complete_datagram+0x3e>
 8015c56:	4b3e      	ldr	r3, [pc, #248]	; (8015d50 <ip_reass_free_complete_datagram+0x12c>)
 8015c58:	22ad      	movs	r2, #173	; 0xad
 8015c5a:	4940      	ldr	r1, [pc, #256]	; (8015d5c <ip_reass_free_complete_datagram+0x138>)
 8015c5c:	483e      	ldr	r0, [pc, #248]	; (8015d58 <ip_reass_free_complete_datagram+0x134>)
 8015c5e:	f001 f907 	bl	8016e70 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015c6a:	697b      	ldr	r3, [r7, #20]
 8015c6c:	889b      	ldrh	r3, [r3, #4]
 8015c6e:	b29b      	uxth	r3, r3
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d12a      	bne.n	8015cca <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	685b      	ldr	r3, [r3, #4]
 8015c78:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015c7a:	697b      	ldr	r3, [r7, #20]
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015c82:	69bb      	ldr	r3, [r7, #24]
 8015c84:	6858      	ldr	r0, [r3, #4]
 8015c86:	687b      	ldr	r3, [r7, #4]
 8015c88:	3308      	adds	r3, #8
 8015c8a:	2214      	movs	r2, #20
 8015c8c:	4619      	mov	r1, r3
 8015c8e:	f001 f8bf 	bl	8016e10 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015c92:	2101      	movs	r1, #1
 8015c94:	69b8      	ldr	r0, [r7, #24]
 8015c96:	f7ff fc29 	bl	80154ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015c9a:	69b8      	ldr	r0, [r7, #24]
 8015c9c:	f7f5 fc50 	bl	800b540 <pbuf_clen>
 8015ca0:	4603      	mov	r3, r0
 8015ca2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ca4:	8bfa      	ldrh	r2, [r7, #30]
 8015ca6:	8a7b      	ldrh	r3, [r7, #18]
 8015ca8:	4413      	add	r3, r2
 8015caa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cae:	db05      	blt.n	8015cbc <ip_reass_free_complete_datagram+0x98>
 8015cb0:	4b27      	ldr	r3, [pc, #156]	; (8015d50 <ip_reass_free_complete_datagram+0x12c>)
 8015cb2:	22bc      	movs	r2, #188	; 0xbc
 8015cb4:	492a      	ldr	r1, [pc, #168]	; (8015d60 <ip_reass_free_complete_datagram+0x13c>)
 8015cb6:	4828      	ldr	r0, [pc, #160]	; (8015d58 <ip_reass_free_complete_datagram+0x134>)
 8015cb8:	f001 f8da 	bl	8016e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015cbc:	8bfa      	ldrh	r2, [r7, #30]
 8015cbe:	8a7b      	ldrh	r3, [r7, #18]
 8015cc0:	4413      	add	r3, r2
 8015cc2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015cc4:	69b8      	ldr	r0, [r7, #24]
 8015cc6:	f7f5 fbad 	bl	800b424 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	685b      	ldr	r3, [r3, #4]
 8015cce:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015cd0:	e01f      	b.n	8015d12 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015cd2:	69bb      	ldr	r3, [r7, #24]
 8015cd4:	685b      	ldr	r3, [r3, #4]
 8015cd6:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015cd8:	69bb      	ldr	r3, [r7, #24]
 8015cda:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015cdc:	697b      	ldr	r3, [r7, #20]
 8015cde:	681b      	ldr	r3, [r3, #0]
 8015ce0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015ce2:	68f8      	ldr	r0, [r7, #12]
 8015ce4:	f7f5 fc2c 	bl	800b540 <pbuf_clen>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015cec:	8bfa      	ldrh	r2, [r7, #30]
 8015cee:	8a7b      	ldrh	r3, [r7, #18]
 8015cf0:	4413      	add	r3, r2
 8015cf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015cf6:	db05      	blt.n	8015d04 <ip_reass_free_complete_datagram+0xe0>
 8015cf8:	4b15      	ldr	r3, [pc, #84]	; (8015d50 <ip_reass_free_complete_datagram+0x12c>)
 8015cfa:	22cc      	movs	r2, #204	; 0xcc
 8015cfc:	4918      	ldr	r1, [pc, #96]	; (8015d60 <ip_reass_free_complete_datagram+0x13c>)
 8015cfe:	4816      	ldr	r0, [pc, #88]	; (8015d58 <ip_reass_free_complete_datagram+0x134>)
 8015d00:	f001 f8b6 	bl	8016e70 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015d04:	8bfa      	ldrh	r2, [r7, #30]
 8015d06:	8a7b      	ldrh	r3, [r7, #18]
 8015d08:	4413      	add	r3, r2
 8015d0a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015d0c:	68f8      	ldr	r0, [r7, #12]
 8015d0e:	f7f5 fb89 	bl	800b424 <pbuf_free>
  while (p != NULL) {
 8015d12:	69bb      	ldr	r3, [r7, #24]
 8015d14:	2b00      	cmp	r3, #0
 8015d16:	d1dc      	bne.n	8015cd2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015d18:	6839      	ldr	r1, [r7, #0]
 8015d1a:	6878      	ldr	r0, [r7, #4]
 8015d1c:	f000 f8c2 	bl	8015ea4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015d20:	4b10      	ldr	r3, [pc, #64]	; (8015d64 <ip_reass_free_complete_datagram+0x140>)
 8015d22:	881b      	ldrh	r3, [r3, #0]
 8015d24:	8bfa      	ldrh	r2, [r7, #30]
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d905      	bls.n	8015d36 <ip_reass_free_complete_datagram+0x112>
 8015d2a:	4b09      	ldr	r3, [pc, #36]	; (8015d50 <ip_reass_free_complete_datagram+0x12c>)
 8015d2c:	22d2      	movs	r2, #210	; 0xd2
 8015d2e:	490e      	ldr	r1, [pc, #56]	; (8015d68 <ip_reass_free_complete_datagram+0x144>)
 8015d30:	4809      	ldr	r0, [pc, #36]	; (8015d58 <ip_reass_free_complete_datagram+0x134>)
 8015d32:	f001 f89d 	bl	8016e70 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015d36:	4b0b      	ldr	r3, [pc, #44]	; (8015d64 <ip_reass_free_complete_datagram+0x140>)
 8015d38:	881a      	ldrh	r2, [r3, #0]
 8015d3a:	8bfb      	ldrh	r3, [r7, #30]
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	b29a      	uxth	r2, r3
 8015d40:	4b08      	ldr	r3, [pc, #32]	; (8015d64 <ip_reass_free_complete_datagram+0x140>)
 8015d42:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015d44:	8bfb      	ldrh	r3, [r7, #30]
}
 8015d46:	4618      	mov	r0, r3
 8015d48:	3720      	adds	r7, #32
 8015d4a:	46bd      	mov	sp, r7
 8015d4c:	bd80      	pop	{r7, pc}
 8015d4e:	bf00      	nop
 8015d50:	0801b9a4 	.word	0x0801b9a4
 8015d54:	0801b9e0 	.word	0x0801b9e0
 8015d58:	0801b9ec 	.word	0x0801b9ec
 8015d5c:	0801ba14 	.word	0x0801ba14
 8015d60:	0801ba28 	.word	0x0801ba28
 8015d64:	200086f0 	.word	0x200086f0
 8015d68:	0801ba48 	.word	0x0801ba48

08015d6c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015d6c:	b580      	push	{r7, lr}
 8015d6e:	b08a      	sub	sp, #40	; 0x28
 8015d70:	af00      	add	r7, sp, #0
 8015d72:	6078      	str	r0, [r7, #4]
 8015d74:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015d76:	2300      	movs	r3, #0
 8015d78:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015d7a:	2300      	movs	r3, #0
 8015d7c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015d7e:	2300      	movs	r3, #0
 8015d80:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015d82:	2300      	movs	r3, #0
 8015d84:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015d86:	2300      	movs	r3, #0
 8015d88:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015d8a:	4b28      	ldr	r3, [pc, #160]	; (8015e2c <ip_reass_remove_oldest_datagram+0xc0>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015d90:	e030      	b.n	8015df4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d94:	695a      	ldr	r2, [r3, #20]
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	68db      	ldr	r3, [r3, #12]
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d10c      	bne.n	8015db8 <ip_reass_remove_oldest_datagram+0x4c>
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	699a      	ldr	r2, [r3, #24]
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	691b      	ldr	r3, [r3, #16]
 8015da6:	429a      	cmp	r2, r3
 8015da8:	d106      	bne.n	8015db8 <ip_reass_remove_oldest_datagram+0x4c>
 8015daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dac:	899a      	ldrh	r2, [r3, #12]
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	889b      	ldrh	r3, [r3, #4]
 8015db2:	b29b      	uxth	r3, r3
 8015db4:	429a      	cmp	r2, r3
 8015db6:	d014      	beq.n	8015de2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015db8:	693b      	ldr	r3, [r7, #16]
 8015dba:	3301      	adds	r3, #1
 8015dbc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015dbe:	6a3b      	ldr	r3, [r7, #32]
 8015dc0:	2b00      	cmp	r3, #0
 8015dc2:	d104      	bne.n	8015dce <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	61bb      	str	r3, [r7, #24]
 8015dcc:	e009      	b.n	8015de2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd0:	7fda      	ldrb	r2, [r3, #31]
 8015dd2:	6a3b      	ldr	r3, [r7, #32]
 8015dd4:	7fdb      	ldrb	r3, [r3, #31]
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d803      	bhi.n	8015de2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ddc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015de4:	681b      	ldr	r3, [r3, #0]
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d001      	beq.n	8015dee <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dec:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d1cb      	bne.n	8015d92 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015dfa:	6a3b      	ldr	r3, [r7, #32]
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d008      	beq.n	8015e12 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015e00:	69b9      	ldr	r1, [r7, #24]
 8015e02:	6a38      	ldr	r0, [r7, #32]
 8015e04:	f7ff ff0e 	bl	8015c24 <ip_reass_free_complete_datagram>
 8015e08:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015e0a:	697a      	ldr	r2, [r7, #20]
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	4413      	add	r3, r2
 8015e10:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015e12:	697a      	ldr	r2, [r7, #20]
 8015e14:	683b      	ldr	r3, [r7, #0]
 8015e16:	429a      	cmp	r2, r3
 8015e18:	da02      	bge.n	8015e20 <ip_reass_remove_oldest_datagram+0xb4>
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	2b01      	cmp	r3, #1
 8015e1e:	dcac      	bgt.n	8015d7a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015e20:	697b      	ldr	r3, [r7, #20]
}
 8015e22:	4618      	mov	r0, r3
 8015e24:	3728      	adds	r7, #40	; 0x28
 8015e26:	46bd      	mov	sp, r7
 8015e28:	bd80      	pop	{r7, pc}
 8015e2a:	bf00      	nop
 8015e2c:	200086ec 	.word	0x200086ec

08015e30 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015e30:	b580      	push	{r7, lr}
 8015e32:	b084      	sub	sp, #16
 8015e34:	af00      	add	r7, sp, #0
 8015e36:	6078      	str	r0, [r7, #4]
 8015e38:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e3a:	2004      	movs	r0, #4
 8015e3c:	f7f4 fbf0 	bl	800a620 <memp_malloc>
 8015e40:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	2b00      	cmp	r3, #0
 8015e46:	d110      	bne.n	8015e6a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015e48:	6839      	ldr	r1, [r7, #0]
 8015e4a:	6878      	ldr	r0, [r7, #4]
 8015e4c:	f7ff ff8e 	bl	8015d6c <ip_reass_remove_oldest_datagram>
 8015e50:	4602      	mov	r2, r0
 8015e52:	683b      	ldr	r3, [r7, #0]
 8015e54:	4293      	cmp	r3, r2
 8015e56:	dc03      	bgt.n	8015e60 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015e58:	2004      	movs	r0, #4
 8015e5a:	f7f4 fbe1 	bl	800a620 <memp_malloc>
 8015e5e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015e60:	68fb      	ldr	r3, [r7, #12]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d101      	bne.n	8015e6a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e016      	b.n	8015e98 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015e6a:	2220      	movs	r2, #32
 8015e6c:	2100      	movs	r1, #0
 8015e6e:	68f8      	ldr	r0, [r7, #12]
 8015e70:	f000 fff6 	bl	8016e60 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015e74:	68fb      	ldr	r3, [r7, #12]
 8015e76:	220f      	movs	r2, #15
 8015e78:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015e7a:	4b09      	ldr	r3, [pc, #36]	; (8015ea0 <ip_reass_enqueue_new_datagram+0x70>)
 8015e7c:	681a      	ldr	r2, [r3, #0]
 8015e7e:	68fb      	ldr	r3, [r7, #12]
 8015e80:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015e82:	4a07      	ldr	r2, [pc, #28]	; (8015ea0 <ip_reass_enqueue_new_datagram+0x70>)
 8015e84:	68fb      	ldr	r3, [r7, #12]
 8015e86:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015e88:	68fb      	ldr	r3, [r7, #12]
 8015e8a:	3308      	adds	r3, #8
 8015e8c:	2214      	movs	r2, #20
 8015e8e:	6879      	ldr	r1, [r7, #4]
 8015e90:	4618      	mov	r0, r3
 8015e92:	f000 ffbd 	bl	8016e10 <memcpy>
  return ipr;
 8015e96:	68fb      	ldr	r3, [r7, #12]
}
 8015e98:	4618      	mov	r0, r3
 8015e9a:	3710      	adds	r7, #16
 8015e9c:	46bd      	mov	sp, r7
 8015e9e:	bd80      	pop	{r7, pc}
 8015ea0:	200086ec 	.word	0x200086ec

08015ea4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ea4:	b580      	push	{r7, lr}
 8015ea6:	b082      	sub	sp, #8
 8015ea8:	af00      	add	r7, sp, #0
 8015eaa:	6078      	str	r0, [r7, #4]
 8015eac:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015eae:	4b10      	ldr	r3, [pc, #64]	; (8015ef0 <ip_reass_dequeue_datagram+0x4c>)
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	687a      	ldr	r2, [r7, #4]
 8015eb4:	429a      	cmp	r2, r3
 8015eb6:	d104      	bne.n	8015ec2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015eb8:	687b      	ldr	r3, [r7, #4]
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	4a0c      	ldr	r2, [pc, #48]	; (8015ef0 <ip_reass_dequeue_datagram+0x4c>)
 8015ebe:	6013      	str	r3, [r2, #0]
 8015ec0:	e00d      	b.n	8015ede <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015ec2:	683b      	ldr	r3, [r7, #0]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d106      	bne.n	8015ed6 <ip_reass_dequeue_datagram+0x32>
 8015ec8:	4b0a      	ldr	r3, [pc, #40]	; (8015ef4 <ip_reass_dequeue_datagram+0x50>)
 8015eca:	f240 1245 	movw	r2, #325	; 0x145
 8015ece:	490a      	ldr	r1, [pc, #40]	; (8015ef8 <ip_reass_dequeue_datagram+0x54>)
 8015ed0:	480a      	ldr	r0, [pc, #40]	; (8015efc <ip_reass_dequeue_datagram+0x58>)
 8015ed2:	f000 ffcd 	bl	8016e70 <iprintf>
    prev->next = ipr->next;
 8015ed6:	687b      	ldr	r3, [r7, #4]
 8015ed8:	681a      	ldr	r2, [r3, #0]
 8015eda:	683b      	ldr	r3, [r7, #0]
 8015edc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015ede:	6879      	ldr	r1, [r7, #4]
 8015ee0:	2004      	movs	r0, #4
 8015ee2:	f7f4 fbef 	bl	800a6c4 <memp_free>
}
 8015ee6:	bf00      	nop
 8015ee8:	3708      	adds	r7, #8
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	200086ec 	.word	0x200086ec
 8015ef4:	0801b9a4 	.word	0x0801b9a4
 8015ef8:	0801ba6c 	.word	0x0801ba6c
 8015efc:	0801b9ec 	.word	0x0801b9ec

08015f00 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015f00:	b580      	push	{r7, lr}
 8015f02:	b08c      	sub	sp, #48	; 0x30
 8015f04:	af00      	add	r7, sp, #0
 8015f06:	60f8      	str	r0, [r7, #12]
 8015f08:	60b9      	str	r1, [r7, #8]
 8015f0a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015f0c:	2300      	movs	r3, #0
 8015f0e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015f10:	2301      	movs	r3, #1
 8015f12:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015f14:	68bb      	ldr	r3, [r7, #8]
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015f1a:	69fb      	ldr	r3, [r7, #28]
 8015f1c:	885b      	ldrh	r3, [r3, #2]
 8015f1e:	b29b      	uxth	r3, r3
 8015f20:	4618      	mov	r0, r3
 8015f22:	f7f3 fec7 	bl	8009cb4 <lwip_htons>
 8015f26:	4603      	mov	r3, r0
 8015f28:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015f2a:	69fb      	ldr	r3, [r7, #28]
 8015f2c:	781b      	ldrb	r3, [r3, #0]
 8015f2e:	f003 030f 	and.w	r3, r3, #15
 8015f32:	b2db      	uxtb	r3, r3
 8015f34:	009b      	lsls	r3, r3, #2
 8015f36:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015f38:	7e7b      	ldrb	r3, [r7, #25]
 8015f3a:	b29b      	uxth	r3, r3
 8015f3c:	8b7a      	ldrh	r2, [r7, #26]
 8015f3e:	429a      	cmp	r2, r3
 8015f40:	d202      	bcs.n	8015f48 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f42:	f04f 33ff 	mov.w	r3, #4294967295
 8015f46:	e135      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015f48:	7e7b      	ldrb	r3, [r7, #25]
 8015f4a:	b29b      	uxth	r3, r3
 8015f4c:	8b7a      	ldrh	r2, [r7, #26]
 8015f4e:	1ad3      	subs	r3, r2, r3
 8015f50:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015f52:	69fb      	ldr	r3, [r7, #28]
 8015f54:	88db      	ldrh	r3, [r3, #6]
 8015f56:	b29b      	uxth	r3, r3
 8015f58:	4618      	mov	r0, r3
 8015f5a:	f7f3 feab 	bl	8009cb4 <lwip_htons>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015f64:	b29b      	uxth	r3, r3
 8015f66:	00db      	lsls	r3, r3, #3
 8015f68:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015f6a:	68bb      	ldr	r3, [r7, #8]
 8015f6c:	685b      	ldr	r3, [r3, #4]
 8015f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f72:	2200      	movs	r2, #0
 8015f74:	701a      	strb	r2, [r3, #0]
 8015f76:	2200      	movs	r2, #0
 8015f78:	705a      	strb	r2, [r3, #1]
 8015f7a:	2200      	movs	r2, #0
 8015f7c:	709a      	strb	r2, [r3, #2]
 8015f7e:	2200      	movs	r2, #0
 8015f80:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f84:	8afa      	ldrh	r2, [r7, #22]
 8015f86:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015f88:	8afa      	ldrh	r2, [r7, #22]
 8015f8a:	8b7b      	ldrh	r3, [r7, #26]
 8015f8c:	4413      	add	r3, r2
 8015f8e:	b29a      	uxth	r2, r3
 8015f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f92:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f96:	88db      	ldrh	r3, [r3, #6]
 8015f98:	b29b      	uxth	r3, r3
 8015f9a:	8afa      	ldrh	r2, [r7, #22]
 8015f9c:	429a      	cmp	r2, r3
 8015f9e:	d902      	bls.n	8015fa6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8015fa4:	e106      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	685b      	ldr	r3, [r3, #4]
 8015faa:	627b      	str	r3, [r7, #36]	; 0x24
 8015fac:	e068      	b.n	8016080 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb0:	685b      	ldr	r3, [r3, #4]
 8015fb2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fb6:	889b      	ldrh	r3, [r3, #4]
 8015fb8:	b29a      	uxth	r2, r3
 8015fba:	693b      	ldr	r3, [r7, #16]
 8015fbc:	889b      	ldrh	r3, [r3, #4]
 8015fbe:	b29b      	uxth	r3, r3
 8015fc0:	429a      	cmp	r2, r3
 8015fc2:	d235      	bcs.n	8016030 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015fc8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	d020      	beq.n	8016012 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd2:	889b      	ldrh	r3, [r3, #4]
 8015fd4:	b29a      	uxth	r2, r3
 8015fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fd8:	88db      	ldrh	r3, [r3, #6]
 8015fda:	b29b      	uxth	r3, r3
 8015fdc:	429a      	cmp	r2, r3
 8015fde:	d307      	bcc.n	8015ff0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fe2:	88db      	ldrh	r3, [r3, #6]
 8015fe4:	b29a      	uxth	r2, r3
 8015fe6:	693b      	ldr	r3, [r7, #16]
 8015fe8:	889b      	ldrh	r3, [r3, #4]
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	429a      	cmp	r2, r3
 8015fee:	d902      	bls.n	8015ff6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8015ff4:	e0de      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ff8:	68ba      	ldr	r2, [r7, #8]
 8015ffa:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffe:	88db      	ldrh	r3, [r3, #6]
 8016000:	b29a      	uxth	r2, r3
 8016002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016004:	889b      	ldrh	r3, [r3, #4]
 8016006:	b29b      	uxth	r3, r3
 8016008:	429a      	cmp	r2, r3
 801600a:	d03d      	beq.n	8016088 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801600c:	2300      	movs	r3, #0
 801600e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016010:	e03a      	b.n	8016088 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8016012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016014:	88db      	ldrh	r3, [r3, #6]
 8016016:	b29a      	uxth	r2, r3
 8016018:	693b      	ldr	r3, [r7, #16]
 801601a:	889b      	ldrh	r3, [r3, #4]
 801601c:	b29b      	uxth	r3, r3
 801601e:	429a      	cmp	r2, r3
 8016020:	d902      	bls.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016022:	f04f 33ff 	mov.w	r3, #4294967295
 8016026:	e0c5      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	68ba      	ldr	r2, [r7, #8]
 801602c:	605a      	str	r2, [r3, #4]
      break;
 801602e:	e02b      	b.n	8016088 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016032:	889b      	ldrh	r3, [r3, #4]
 8016034:	b29a      	uxth	r2, r3
 8016036:	693b      	ldr	r3, [r7, #16]
 8016038:	889b      	ldrh	r3, [r3, #4]
 801603a:	b29b      	uxth	r3, r3
 801603c:	429a      	cmp	r2, r3
 801603e:	d102      	bne.n	8016046 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016040:	f04f 33ff 	mov.w	r3, #4294967295
 8016044:	e0b6      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016048:	889b      	ldrh	r3, [r3, #4]
 801604a:	b29a      	uxth	r2, r3
 801604c:	693b      	ldr	r3, [r7, #16]
 801604e:	88db      	ldrh	r3, [r3, #6]
 8016050:	b29b      	uxth	r3, r3
 8016052:	429a      	cmp	r2, r3
 8016054:	d202      	bcs.n	801605c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016056:	f04f 33ff 	mov.w	r3, #4294967295
 801605a:	e0ab      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605e:	2b00      	cmp	r3, #0
 8016060:	d009      	beq.n	8016076 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8016062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016064:	88db      	ldrh	r3, [r3, #6]
 8016066:	b29a      	uxth	r2, r3
 8016068:	693b      	ldr	r3, [r7, #16]
 801606a:	889b      	ldrh	r3, [r3, #4]
 801606c:	b29b      	uxth	r3, r3
 801606e:	429a      	cmp	r2, r3
 8016070:	d001      	beq.n	8016076 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016072:	2300      	movs	r3, #0
 8016074:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016076:	693b      	ldr	r3, [r7, #16]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016082:	2b00      	cmp	r3, #0
 8016084:	d193      	bne.n	8015fae <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8016086:	e000      	b.n	801608a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8016088:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801608a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608c:	2b00      	cmp	r3, #0
 801608e:	d12d      	bne.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8016090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016092:	2b00      	cmp	r3, #0
 8016094:	d01c      	beq.n	80160d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	88db      	ldrh	r3, [r3, #6]
 801609a:	b29a      	uxth	r2, r3
 801609c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801609e:	889b      	ldrh	r3, [r3, #4]
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	429a      	cmp	r2, r3
 80160a4:	d906      	bls.n	80160b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80160a6:	4b45      	ldr	r3, [pc, #276]	; (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160a8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80160ac:	4944      	ldr	r1, [pc, #272]	; (80161c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80160ae:	4845      	ldr	r0, [pc, #276]	; (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160b0:	f000 fede 	bl	8016e70 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80160b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160b6:	68ba      	ldr	r2, [r7, #8]
 80160b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80160ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160bc:	88db      	ldrh	r3, [r3, #6]
 80160be:	b29a      	uxth	r2, r3
 80160c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160c2:	889b      	ldrh	r3, [r3, #4]
 80160c4:	b29b      	uxth	r3, r3
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d010      	beq.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80160ca:	2300      	movs	r3, #0
 80160cc:	623b      	str	r3, [r7, #32]
 80160ce:	e00d      	b.n	80160ec <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	685b      	ldr	r3, [r3, #4]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d006      	beq.n	80160e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80160d8:	4b38      	ldr	r3, [pc, #224]	; (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80160da:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80160de:	493a      	ldr	r1, [pc, #232]	; (80161c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80160e0:	4838      	ldr	r0, [pc, #224]	; (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80160e2:	f000 fec5 	bl	8016e70 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	68ba      	ldr	r2, [r7, #8]
 80160ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d105      	bne.n	80160fe <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	7f9b      	ldrb	r3, [r3, #30]
 80160f6:	f003 0301 	and.w	r3, r3, #1
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d059      	beq.n	80161b2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80160fe:	6a3b      	ldr	r3, [r7, #32]
 8016100:	2b00      	cmp	r3, #0
 8016102:	d04f      	beq.n	80161a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	2b00      	cmp	r3, #0
 801610a:	d006      	beq.n	801611a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	685b      	ldr	r3, [r3, #4]
 8016110:	685b      	ldr	r3, [r3, #4]
 8016112:	889b      	ldrh	r3, [r3, #4]
 8016114:	b29b      	uxth	r3, r3
 8016116:	2b00      	cmp	r3, #0
 8016118:	d002      	beq.n	8016120 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801611a:	2300      	movs	r3, #0
 801611c:	623b      	str	r3, [r7, #32]
 801611e:	e041      	b.n	80161a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016122:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801612a:	e012      	b.n	8016152 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801612c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8016132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016134:	88db      	ldrh	r3, [r3, #6]
 8016136:	b29a      	uxth	r2, r3
 8016138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613a:	889b      	ldrh	r3, [r3, #4]
 801613c:	b29b      	uxth	r3, r3
 801613e:	429a      	cmp	r2, r3
 8016140:	d002      	beq.n	8016148 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8016142:	2300      	movs	r3, #0
 8016144:	623b      	str	r3, [r7, #32]
            break;
 8016146:	e007      	b.n	8016158 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8016148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801614c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801614e:	681b      	ldr	r3, [r3, #0]
 8016150:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016154:	2b00      	cmp	r3, #0
 8016156:	d1e9      	bne.n	801612c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016158:	6a3b      	ldr	r3, [r7, #32]
 801615a:	2b00      	cmp	r3, #0
 801615c:	d022      	beq.n	80161a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801615e:	68fb      	ldr	r3, [r7, #12]
 8016160:	685b      	ldr	r3, [r3, #4]
 8016162:	2b00      	cmp	r3, #0
 8016164:	d106      	bne.n	8016174 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8016166:	4b15      	ldr	r3, [pc, #84]	; (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016168:	f240 12df 	movw	r2, #479	; 0x1df
 801616c:	4917      	ldr	r1, [pc, #92]	; (80161cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801616e:	4815      	ldr	r0, [pc, #84]	; (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016170:	f000 fe7e 	bl	8016e70 <iprintf>
          LWIP_ASSERT("sanity check",
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	685b      	ldr	r3, [r3, #4]
 801617a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801617c:	429a      	cmp	r2, r3
 801617e:	d106      	bne.n	801618e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016180:	4b0e      	ldr	r3, [pc, #56]	; (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016182:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8016186:	4911      	ldr	r1, [pc, #68]	; (80161cc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016188:	480e      	ldr	r0, [pc, #56]	; (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801618a:	f000 fe71 	bl	8016e70 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801618e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016190:	681b      	ldr	r3, [r3, #0]
 8016192:	2b00      	cmp	r3, #0
 8016194:	d006      	beq.n	80161a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8016196:	4b09      	ldr	r3, [pc, #36]	; (80161bc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016198:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801619c:	490c      	ldr	r1, [pc, #48]	; (80161d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801619e:	4809      	ldr	r0, [pc, #36]	; (80161c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80161a0:	f000 fe66 	bl	8016e70 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80161a4:	6a3b      	ldr	r3, [r7, #32]
 80161a6:	2b00      	cmp	r3, #0
 80161a8:	bf14      	ite	ne
 80161aa:	2301      	movne	r3, #1
 80161ac:	2300      	moveq	r3, #0
 80161ae:	b2db      	uxtb	r3, r3
 80161b0:	e000      	b.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80161b2:	2300      	movs	r3, #0
}
 80161b4:	4618      	mov	r0, r3
 80161b6:	3730      	adds	r7, #48	; 0x30
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}
 80161bc:	0801b9a4 	.word	0x0801b9a4
 80161c0:	0801ba88 	.word	0x0801ba88
 80161c4:	0801b9ec 	.word	0x0801b9ec
 80161c8:	0801baa8 	.word	0x0801baa8
 80161cc:	0801bae0 	.word	0x0801bae0
 80161d0:	0801baf0 	.word	0x0801baf0

080161d4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80161d4:	b580      	push	{r7, lr}
 80161d6:	b08e      	sub	sp, #56	; 0x38
 80161d8:	af00      	add	r7, sp, #0
 80161da:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	685b      	ldr	r3, [r3, #4]
 80161e0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80161e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161e4:	781b      	ldrb	r3, [r3, #0]
 80161e6:	f003 030f 	and.w	r3, r3, #15
 80161ea:	b2db      	uxtb	r3, r3
 80161ec:	009b      	lsls	r3, r3, #2
 80161ee:	b2db      	uxtb	r3, r3
 80161f0:	2b14      	cmp	r3, #20
 80161f2:	f040 8167 	bne.w	80164c4 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80161f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f8:	88db      	ldrh	r3, [r3, #6]
 80161fa:	b29b      	uxth	r3, r3
 80161fc:	4618      	mov	r0, r3
 80161fe:	f7f3 fd59 	bl	8009cb4 <lwip_htons>
 8016202:	4603      	mov	r3, r0
 8016204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016208:	b29b      	uxth	r3, r3
 801620a:	00db      	lsls	r3, r3, #3
 801620c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801620e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016210:	885b      	ldrh	r3, [r3, #2]
 8016212:	b29b      	uxth	r3, r3
 8016214:	4618      	mov	r0, r3
 8016216:	f7f3 fd4d 	bl	8009cb4 <lwip_htons>
 801621a:	4603      	mov	r3, r0
 801621c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801621e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016220:	781b      	ldrb	r3, [r3, #0]
 8016222:	f003 030f 	and.w	r3, r3, #15
 8016226:	b2db      	uxtb	r3, r3
 8016228:	009b      	lsls	r3, r3, #2
 801622a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801622e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016232:	b29b      	uxth	r3, r3
 8016234:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016236:	429a      	cmp	r2, r3
 8016238:	f0c0 8146 	bcc.w	80164c8 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801623c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016240:	b29b      	uxth	r3, r3
 8016242:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016244:	1ad3      	subs	r3, r2, r3
 8016246:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8016248:	6878      	ldr	r0, [r7, #4]
 801624a:	f7f5 f979 	bl	800b540 <pbuf_clen>
 801624e:	4603      	mov	r3, r0
 8016250:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016252:	4b9f      	ldr	r3, [pc, #636]	; (80164d0 <ip4_reass+0x2fc>)
 8016254:	881b      	ldrh	r3, [r3, #0]
 8016256:	461a      	mov	r2, r3
 8016258:	8c3b      	ldrh	r3, [r7, #32]
 801625a:	4413      	add	r3, r2
 801625c:	2b0a      	cmp	r3, #10
 801625e:	dd10      	ble.n	8016282 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016260:	8c3b      	ldrh	r3, [r7, #32]
 8016262:	4619      	mov	r1, r3
 8016264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016266:	f7ff fd81 	bl	8015d6c <ip_reass_remove_oldest_datagram>
 801626a:	4603      	mov	r3, r0
 801626c:	2b00      	cmp	r3, #0
 801626e:	f000 812d 	beq.w	80164cc <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016272:	4b97      	ldr	r3, [pc, #604]	; (80164d0 <ip4_reass+0x2fc>)
 8016274:	881b      	ldrh	r3, [r3, #0]
 8016276:	461a      	mov	r2, r3
 8016278:	8c3b      	ldrh	r3, [r7, #32]
 801627a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801627c:	2b0a      	cmp	r3, #10
 801627e:	f300 8125 	bgt.w	80164cc <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016282:	4b94      	ldr	r3, [pc, #592]	; (80164d4 <ip4_reass+0x300>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	633b      	str	r3, [r7, #48]	; 0x30
 8016288:	e015      	b.n	80162b6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801628a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801628c:	695a      	ldr	r2, [r3, #20]
 801628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016290:	68db      	ldr	r3, [r3, #12]
 8016292:	429a      	cmp	r2, r3
 8016294:	d10c      	bne.n	80162b0 <ip4_reass+0xdc>
 8016296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016298:	699a      	ldr	r2, [r3, #24]
 801629a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801629c:	691b      	ldr	r3, [r3, #16]
 801629e:	429a      	cmp	r2, r3
 80162a0:	d106      	bne.n	80162b0 <ip4_reass+0xdc>
 80162a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162a4:	899a      	ldrh	r2, [r3, #12]
 80162a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162a8:	889b      	ldrh	r3, [r3, #4]
 80162aa:	b29b      	uxth	r3, r3
 80162ac:	429a      	cmp	r2, r3
 80162ae:	d006      	beq.n	80162be <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80162b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	633b      	str	r3, [r7, #48]	; 0x30
 80162b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d1e6      	bne.n	801628a <ip4_reass+0xb6>
 80162bc:	e000      	b.n	80162c0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80162be:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80162c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d109      	bne.n	80162da <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80162c6:	8c3b      	ldrh	r3, [r7, #32]
 80162c8:	4619      	mov	r1, r3
 80162ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80162cc:	f7ff fdb0 	bl	8015e30 <ip_reass_enqueue_new_datagram>
 80162d0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80162d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d11c      	bne.n	8016312 <ip4_reass+0x13e>
      goto nullreturn;
 80162d8:	e109      	b.n	80164ee <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80162da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80162dc:	88db      	ldrh	r3, [r3, #6]
 80162de:	b29b      	uxth	r3, r3
 80162e0:	4618      	mov	r0, r3
 80162e2:	f7f3 fce7 	bl	8009cb4 <lwip_htons>
 80162e6:	4603      	mov	r3, r0
 80162e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d110      	bne.n	8016312 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80162f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162f2:	89db      	ldrh	r3, [r3, #14]
 80162f4:	4618      	mov	r0, r3
 80162f6:	f7f3 fcdd 	bl	8009cb4 <lwip_htons>
 80162fa:	4603      	mov	r3, r0
 80162fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016300:	2b00      	cmp	r3, #0
 8016302:	d006      	beq.n	8016312 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8016304:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016306:	3308      	adds	r3, #8
 8016308:	2214      	movs	r2, #20
 801630a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801630c:	4618      	mov	r0, r3
 801630e:	f000 fd7f 	bl	8016e10 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016314:	88db      	ldrh	r3, [r3, #6]
 8016316:	b29b      	uxth	r3, r3
 8016318:	f003 0320 	and.w	r3, r3, #32
 801631c:	2b00      	cmp	r3, #0
 801631e:	bf0c      	ite	eq
 8016320:	2301      	moveq	r3, #1
 8016322:	2300      	movne	r3, #0
 8016324:	b2db      	uxtb	r3, r3
 8016326:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016328:	69fb      	ldr	r3, [r7, #28]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d00e      	beq.n	801634c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801632e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016330:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016332:	4413      	add	r3, r2
 8016334:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8016336:	8b7a      	ldrh	r2, [r7, #26]
 8016338:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801633a:	429a      	cmp	r2, r3
 801633c:	f0c0 80a0 	bcc.w	8016480 <ip4_reass+0x2ac>
 8016340:	8b7b      	ldrh	r3, [r7, #26]
 8016342:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8016346:	4293      	cmp	r3, r2
 8016348:	f200 809a 	bhi.w	8016480 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801634c:	69fa      	ldr	r2, [r7, #28]
 801634e:	6879      	ldr	r1, [r7, #4]
 8016350:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016352:	f7ff fdd5 	bl	8015f00 <ip_reass_chain_frag_into_datagram_and_validate>
 8016356:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801635e:	f000 8091 	beq.w	8016484 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016362:	4b5b      	ldr	r3, [pc, #364]	; (80164d0 <ip4_reass+0x2fc>)
 8016364:	881a      	ldrh	r2, [r3, #0]
 8016366:	8c3b      	ldrh	r3, [r7, #32]
 8016368:	4413      	add	r3, r2
 801636a:	b29a      	uxth	r2, r3
 801636c:	4b58      	ldr	r3, [pc, #352]	; (80164d0 <ip4_reass+0x2fc>)
 801636e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016370:	69fb      	ldr	r3, [r7, #28]
 8016372:	2b00      	cmp	r3, #0
 8016374:	d00d      	beq.n	8016392 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8016376:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016378:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801637a:	4413      	add	r3, r2
 801637c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801637e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016380:	8a7a      	ldrh	r2, [r7, #18]
 8016382:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016386:	7f9b      	ldrb	r3, [r3, #30]
 8016388:	f043 0301 	orr.w	r3, r3, #1
 801638c:	b2da      	uxtb	r2, r3
 801638e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016390:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016392:	697b      	ldr	r3, [r7, #20]
 8016394:	2b01      	cmp	r3, #1
 8016396:	d171      	bne.n	801647c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8016398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801639a:	8b9b      	ldrh	r3, [r3, #28]
 801639c:	3314      	adds	r3, #20
 801639e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80163a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163a2:	685b      	ldr	r3, [r3, #4]
 80163a4:	685b      	ldr	r3, [r3, #4]
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80163aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163ac:	685b      	ldr	r3, [r3, #4]
 80163ae:	685b      	ldr	r3, [r3, #4]
 80163b0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80163b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163b4:	3308      	adds	r3, #8
 80163b6:	2214      	movs	r2, #20
 80163b8:	4619      	mov	r1, r3
 80163ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163bc:	f000 fd28 	bl	8016e10 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80163c0:	8a3b      	ldrh	r3, [r7, #16]
 80163c2:	4618      	mov	r0, r3
 80163c4:	f7f3 fc76 	bl	8009cb4 <lwip_htons>
 80163c8:	4603      	mov	r3, r0
 80163ca:	461a      	mov	r2, r3
 80163cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163ce:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80163d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163d2:	2200      	movs	r2, #0
 80163d4:	719a      	strb	r2, [r3, #6]
 80163d6:	2200      	movs	r2, #0
 80163d8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80163da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163dc:	2200      	movs	r2, #0
 80163de:	729a      	strb	r2, [r3, #10]
 80163e0:	2200      	movs	r2, #0
 80163e2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80163e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e6:	685b      	ldr	r3, [r3, #4]
 80163e8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80163ea:	e00d      	b.n	8016408 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80163ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80163ee:	685b      	ldr	r3, [r3, #4]
 80163f0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80163f2:	2114      	movs	r1, #20
 80163f4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80163f6:	f7f4 ff8f 	bl	800b318 <pbuf_remove_header>
      pbuf_cat(p, r);
 80163fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80163fc:	6878      	ldr	r0, [r7, #4]
 80163fe:	f7f5 f8df 	bl	800b5c0 <pbuf_cat>
      r = iprh->next_pbuf;
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801640a:	2b00      	cmp	r3, #0
 801640c:	d1ee      	bne.n	80163ec <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801640e:	4b31      	ldr	r3, [pc, #196]	; (80164d4 <ip4_reass+0x300>)
 8016410:	681b      	ldr	r3, [r3, #0]
 8016412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016414:	429a      	cmp	r2, r3
 8016416:	d102      	bne.n	801641e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016418:	2300      	movs	r3, #0
 801641a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801641c:	e010      	b.n	8016440 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801641e:	4b2d      	ldr	r3, [pc, #180]	; (80164d4 <ip4_reass+0x300>)
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016424:	e007      	b.n	8016436 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8016426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801642c:	429a      	cmp	r2, r3
 801642e:	d006      	beq.n	801643e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016438:	2b00      	cmp	r3, #0
 801643a:	d1f4      	bne.n	8016426 <ip4_reass+0x252>
 801643c:	e000      	b.n	8016440 <ip4_reass+0x26c>
          break;
 801643e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016440:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016444:	f7ff fd2e 	bl	8015ea4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8016448:	6878      	ldr	r0, [r7, #4]
 801644a:	f7f5 f879 	bl	800b540 <pbuf_clen>
 801644e:	4603      	mov	r3, r0
 8016450:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016452:	4b1f      	ldr	r3, [pc, #124]	; (80164d0 <ip4_reass+0x2fc>)
 8016454:	881b      	ldrh	r3, [r3, #0]
 8016456:	8c3a      	ldrh	r2, [r7, #32]
 8016458:	429a      	cmp	r2, r3
 801645a:	d906      	bls.n	801646a <ip4_reass+0x296>
 801645c:	4b1e      	ldr	r3, [pc, #120]	; (80164d8 <ip4_reass+0x304>)
 801645e:	f240 229b 	movw	r2, #667	; 0x29b
 8016462:	491e      	ldr	r1, [pc, #120]	; (80164dc <ip4_reass+0x308>)
 8016464:	481e      	ldr	r0, [pc, #120]	; (80164e0 <ip4_reass+0x30c>)
 8016466:	f000 fd03 	bl	8016e70 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801646a:	4b19      	ldr	r3, [pc, #100]	; (80164d0 <ip4_reass+0x2fc>)
 801646c:	881a      	ldrh	r2, [r3, #0]
 801646e:	8c3b      	ldrh	r3, [r7, #32]
 8016470:	1ad3      	subs	r3, r2, r3
 8016472:	b29a      	uxth	r2, r3
 8016474:	4b16      	ldr	r3, [pc, #88]	; (80164d0 <ip4_reass+0x2fc>)
 8016476:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016478:	687b      	ldr	r3, [r7, #4]
 801647a:	e03c      	b.n	80164f6 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801647c:	2300      	movs	r3, #0
 801647e:	e03a      	b.n	80164f6 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8016480:	bf00      	nop
 8016482:	e000      	b.n	8016486 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8016484:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8016486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016488:	2b00      	cmp	r3, #0
 801648a:	d106      	bne.n	801649a <ip4_reass+0x2c6>
 801648c:	4b12      	ldr	r3, [pc, #72]	; (80164d8 <ip4_reass+0x304>)
 801648e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8016492:	4914      	ldr	r1, [pc, #80]	; (80164e4 <ip4_reass+0x310>)
 8016494:	4812      	ldr	r0, [pc, #72]	; (80164e0 <ip4_reass+0x30c>)
 8016496:	f000 fceb 	bl	8016e70 <iprintf>
  if (ipr->p == NULL) {
 801649a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801649c:	685b      	ldr	r3, [r3, #4]
 801649e:	2b00      	cmp	r3, #0
 80164a0:	d124      	bne.n	80164ec <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80164a2:	4b0c      	ldr	r3, [pc, #48]	; (80164d4 <ip4_reass+0x300>)
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80164a8:	429a      	cmp	r2, r3
 80164aa:	d006      	beq.n	80164ba <ip4_reass+0x2e6>
 80164ac:	4b0a      	ldr	r3, [pc, #40]	; (80164d8 <ip4_reass+0x304>)
 80164ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80164b2:	490d      	ldr	r1, [pc, #52]	; (80164e8 <ip4_reass+0x314>)
 80164b4:	480a      	ldr	r0, [pc, #40]	; (80164e0 <ip4_reass+0x30c>)
 80164b6:	f000 fcdb 	bl	8016e70 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80164ba:	2100      	movs	r1, #0
 80164bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164be:	f7ff fcf1 	bl	8015ea4 <ip_reass_dequeue_datagram>
 80164c2:	e014      	b.n	80164ee <ip4_reass+0x31a>
    goto nullreturn;
 80164c4:	bf00      	nop
 80164c6:	e012      	b.n	80164ee <ip4_reass+0x31a>
    goto nullreturn;
 80164c8:	bf00      	nop
 80164ca:	e010      	b.n	80164ee <ip4_reass+0x31a>
      goto nullreturn;
 80164cc:	bf00      	nop
 80164ce:	e00e      	b.n	80164ee <ip4_reass+0x31a>
 80164d0:	200086f0 	.word	0x200086f0
 80164d4:	200086ec 	.word	0x200086ec
 80164d8:	0801b9a4 	.word	0x0801b9a4
 80164dc:	0801bb14 	.word	0x0801bb14
 80164e0:	0801b9ec 	.word	0x0801b9ec
 80164e4:	0801bb30 	.word	0x0801bb30
 80164e8:	0801bb3c 	.word	0x0801bb3c
  }

nullreturn:
 80164ec:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f7f4 ff98 	bl	800b424 <pbuf_free>
  return NULL;
 80164f4:	2300      	movs	r3, #0
}
 80164f6:	4618      	mov	r0, r3
 80164f8:	3738      	adds	r7, #56	; 0x38
 80164fa:	46bd      	mov	sp, r7
 80164fc:	bd80      	pop	{r7, pc}
 80164fe:	bf00      	nop

08016500 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016500:	b580      	push	{r7, lr}
 8016502:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016504:	2005      	movs	r0, #5
 8016506:	f7f4 f88b 	bl	800a620 <memp_malloc>
 801650a:	4603      	mov	r3, r0
}
 801650c:	4618      	mov	r0, r3
 801650e:	bd80      	pop	{r7, pc}

08016510 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b082      	sub	sp, #8
 8016514:	af00      	add	r7, sp, #0
 8016516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	2b00      	cmp	r3, #0
 801651c:	d106      	bne.n	801652c <ip_frag_free_pbuf_custom_ref+0x1c>
 801651e:	4b07      	ldr	r3, [pc, #28]	; (801653c <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016520:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016524:	4906      	ldr	r1, [pc, #24]	; (8016540 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016526:	4807      	ldr	r0, [pc, #28]	; (8016544 <ip_frag_free_pbuf_custom_ref+0x34>)
 8016528:	f000 fca2 	bl	8016e70 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801652c:	6879      	ldr	r1, [r7, #4]
 801652e:	2005      	movs	r0, #5
 8016530:	f7f4 f8c8 	bl	800a6c4 <memp_free>
}
 8016534:	bf00      	nop
 8016536:	3708      	adds	r7, #8
 8016538:	46bd      	mov	sp, r7
 801653a:	bd80      	pop	{r7, pc}
 801653c:	0801b9a4 	.word	0x0801b9a4
 8016540:	0801bb5c 	.word	0x0801bb5c
 8016544:	0801b9ec 	.word	0x0801b9ec

08016548 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016548:	b580      	push	{r7, lr}
 801654a:	b084      	sub	sp, #16
 801654c:	af00      	add	r7, sp, #0
 801654e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016550:	687b      	ldr	r3, [r7, #4]
 8016552:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	2b00      	cmp	r3, #0
 8016558:	d106      	bne.n	8016568 <ipfrag_free_pbuf_custom+0x20>
 801655a:	4b11      	ldr	r3, [pc, #68]	; (80165a0 <ipfrag_free_pbuf_custom+0x58>)
 801655c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016560:	4910      	ldr	r1, [pc, #64]	; (80165a4 <ipfrag_free_pbuf_custom+0x5c>)
 8016562:	4811      	ldr	r0, [pc, #68]	; (80165a8 <ipfrag_free_pbuf_custom+0x60>)
 8016564:	f000 fc84 	bl	8016e70 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016568:	68fa      	ldr	r2, [r7, #12]
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	429a      	cmp	r2, r3
 801656e:	d006      	beq.n	801657e <ipfrag_free_pbuf_custom+0x36>
 8016570:	4b0b      	ldr	r3, [pc, #44]	; (80165a0 <ipfrag_free_pbuf_custom+0x58>)
 8016572:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016576:	490d      	ldr	r1, [pc, #52]	; (80165ac <ipfrag_free_pbuf_custom+0x64>)
 8016578:	480b      	ldr	r0, [pc, #44]	; (80165a8 <ipfrag_free_pbuf_custom+0x60>)
 801657a:	f000 fc79 	bl	8016e70 <iprintf>
  if (pcr->original != NULL) {
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	695b      	ldr	r3, [r3, #20]
 8016582:	2b00      	cmp	r3, #0
 8016584:	d004      	beq.n	8016590 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	695b      	ldr	r3, [r3, #20]
 801658a:	4618      	mov	r0, r3
 801658c:	f7f4 ff4a 	bl	800b424 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016590:	68f8      	ldr	r0, [r7, #12]
 8016592:	f7ff ffbd 	bl	8016510 <ip_frag_free_pbuf_custom_ref>
}
 8016596:	bf00      	nop
 8016598:	3710      	adds	r7, #16
 801659a:	46bd      	mov	sp, r7
 801659c:	bd80      	pop	{r7, pc}
 801659e:	bf00      	nop
 80165a0:	0801b9a4 	.word	0x0801b9a4
 80165a4:	0801bb68 	.word	0x0801bb68
 80165a8:	0801b9ec 	.word	0x0801b9ec
 80165ac:	0801bb74 	.word	0x0801bb74

080165b0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80165b0:	b580      	push	{r7, lr}
 80165b2:	b094      	sub	sp, #80	; 0x50
 80165b4:	af02      	add	r7, sp, #8
 80165b6:	60f8      	str	r0, [r7, #12]
 80165b8:	60b9      	str	r1, [r7, #8]
 80165ba:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80165bc:	2300      	movs	r3, #0
 80165be:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80165c2:	68bb      	ldr	r3, [r7, #8]
 80165c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80165c6:	3b14      	subs	r3, #20
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	da00      	bge.n	80165ce <ip4_frag+0x1e>
 80165cc:	3307      	adds	r3, #7
 80165ce:	10db      	asrs	r3, r3, #3
 80165d0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80165d2:	2314      	movs	r3, #20
 80165d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80165d6:	68fb      	ldr	r3, [r7, #12]
 80165d8:	685b      	ldr	r3, [r3, #4]
 80165da:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80165dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80165de:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80165e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165e2:	781b      	ldrb	r3, [r3, #0]
 80165e4:	f003 030f 	and.w	r3, r3, #15
 80165e8:	b2db      	uxtb	r3, r3
 80165ea:	009b      	lsls	r3, r3, #2
 80165ec:	b2db      	uxtb	r3, r3
 80165ee:	2b14      	cmp	r3, #20
 80165f0:	d002      	beq.n	80165f8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80165f2:	f06f 0305 	mvn.w	r3, #5
 80165f6:	e110      	b.n	801681a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80165f8:	68fb      	ldr	r3, [r7, #12]
 80165fa:	895b      	ldrh	r3, [r3, #10]
 80165fc:	2b13      	cmp	r3, #19
 80165fe:	d809      	bhi.n	8016614 <ip4_frag+0x64>
 8016600:	4b88      	ldr	r3, [pc, #544]	; (8016824 <ip4_frag+0x274>)
 8016602:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8016606:	4988      	ldr	r1, [pc, #544]	; (8016828 <ip4_frag+0x278>)
 8016608:	4888      	ldr	r0, [pc, #544]	; (801682c <ip4_frag+0x27c>)
 801660a:	f000 fc31 	bl	8016e70 <iprintf>
 801660e:	f06f 0305 	mvn.w	r3, #5
 8016612:	e102      	b.n	801681a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016616:	88db      	ldrh	r3, [r3, #6]
 8016618:	b29b      	uxth	r3, r3
 801661a:	4618      	mov	r0, r3
 801661c:	f7f3 fb4a 	bl	8009cb4 <lwip_htons>
 8016620:	4603      	mov	r3, r0
 8016622:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016624:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016626:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801662a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801662e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016634:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8016636:	68fb      	ldr	r3, [r7, #12]
 8016638:	891b      	ldrh	r3, [r3, #8]
 801663a:	3b14      	subs	r3, #20
 801663c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016640:	e0e1      	b.n	8016806 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016642:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	b29b      	uxth	r3, r3
 8016648:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801664c:	4293      	cmp	r3, r2
 801664e:	bf28      	it	cs
 8016650:	4613      	movcs	r3, r2
 8016652:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016654:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016658:	2114      	movs	r1, #20
 801665a:	200e      	movs	r0, #14
 801665c:	f7f4 fbfe 	bl	800ae5c <pbuf_alloc>
 8016660:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016664:	2b00      	cmp	r3, #0
 8016666:	f000 80d5 	beq.w	8016814 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801666c:	895b      	ldrh	r3, [r3, #10]
 801666e:	2b13      	cmp	r3, #19
 8016670:	d806      	bhi.n	8016680 <ip4_frag+0xd0>
 8016672:	4b6c      	ldr	r3, [pc, #432]	; (8016824 <ip4_frag+0x274>)
 8016674:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016678:	496d      	ldr	r1, [pc, #436]	; (8016830 <ip4_frag+0x280>)
 801667a:	486c      	ldr	r0, [pc, #432]	; (801682c <ip4_frag+0x27c>)
 801667c:	f000 fbf8 	bl	8016e70 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016682:	685b      	ldr	r3, [r3, #4]
 8016684:	2214      	movs	r2, #20
 8016686:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016688:	4618      	mov	r0, r3
 801668a:	f000 fbc1 	bl	8016e10 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801668e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016690:	685b      	ldr	r3, [r3, #4]
 8016692:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016694:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016696:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801669a:	e064      	b.n	8016766 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801669c:	68fb      	ldr	r3, [r7, #12]
 801669e:	895a      	ldrh	r2, [r3, #10]
 80166a0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80166a2:	1ad3      	subs	r3, r2, r3
 80166a4:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 80166a6:	68fb      	ldr	r3, [r7, #12]
 80166a8:	895b      	ldrh	r3, [r3, #10]
 80166aa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80166ac:	429a      	cmp	r2, r3
 80166ae:	d906      	bls.n	80166be <ip4_frag+0x10e>
 80166b0:	4b5c      	ldr	r3, [pc, #368]	; (8016824 <ip4_frag+0x274>)
 80166b2:	f240 322d 	movw	r2, #813	; 0x32d
 80166b6:	495f      	ldr	r1, [pc, #380]	; (8016834 <ip4_frag+0x284>)
 80166b8:	485c      	ldr	r0, [pc, #368]	; (801682c <ip4_frag+0x27c>)
 80166ba:	f000 fbd9 	bl	8016e70 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80166be:	8bfa      	ldrh	r2, [r7, #30]
 80166c0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80166c4:	4293      	cmp	r3, r2
 80166c6:	bf28      	it	cs
 80166c8:	4613      	movcs	r3, r2
 80166ca:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80166ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d105      	bne.n	80166e2 <ip4_frag+0x132>
        poff = 0;
 80166d6:	2300      	movs	r3, #0
 80166d8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80166da:	68fb      	ldr	r3, [r7, #12]
 80166dc:	681b      	ldr	r3, [r3, #0]
 80166de:	60fb      	str	r3, [r7, #12]
        continue;
 80166e0:	e041      	b.n	8016766 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80166e2:	f7ff ff0d 	bl	8016500 <ip_frag_alloc_pbuf_custom_ref>
 80166e6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80166e8:	69bb      	ldr	r3, [r7, #24]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d103      	bne.n	80166f6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80166ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166f0:	f7f4 fe98 	bl	800b424 <pbuf_free>
        goto memerr;
 80166f4:	e08f      	b.n	8016816 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166f6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80166f8:	68fb      	ldr	r3, [r7, #12]
 80166fa:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80166fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80166fe:	4413      	add	r3, r2
 8016700:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016704:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8016708:	9201      	str	r2, [sp, #4]
 801670a:	9300      	str	r3, [sp, #0]
 801670c:	4603      	mov	r3, r0
 801670e:	2241      	movs	r2, #65	; 0x41
 8016710:	2000      	movs	r0, #0
 8016712:	f7f4 fccd 	bl	800b0b0 <pbuf_alloced_custom>
 8016716:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8016718:	697b      	ldr	r3, [r7, #20]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801671e:	69b8      	ldr	r0, [r7, #24]
 8016720:	f7ff fef6 	bl	8016510 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016726:	f7f4 fe7d 	bl	800b424 <pbuf_free>
        goto memerr;
 801672a:	e074      	b.n	8016816 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801672c:	68f8      	ldr	r0, [r7, #12]
 801672e:	f7f4 ff1f 	bl	800b570 <pbuf_ref>
      pcr->original = p;
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	68fa      	ldr	r2, [r7, #12]
 8016736:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016738:	69bb      	ldr	r3, [r7, #24]
 801673a:	4a3f      	ldr	r2, [pc, #252]	; (8016838 <ip4_frag+0x288>)
 801673c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801673e:	6979      	ldr	r1, [r7, #20]
 8016740:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016742:	f7f4 ff3d 	bl	800b5c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016746:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801674a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801674e:	1ad3      	subs	r3, r2, r3
 8016750:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016754:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016758:	2b00      	cmp	r3, #0
 801675a:	d004      	beq.n	8016766 <ip4_frag+0x1b6>
        poff = 0;
 801675c:	2300      	movs	r3, #0
 801675e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016766:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801676a:	2b00      	cmp	r3, #0
 801676c:	d196      	bne.n	801669c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801676e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016770:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016774:	4413      	add	r3, r2
 8016776:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016778:	68bb      	ldr	r3, [r7, #8]
 801677a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801677c:	f1a3 0213 	sub.w	r2, r3, #19
 8016780:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016784:	429a      	cmp	r2, r3
 8016786:	bfcc      	ite	gt
 8016788:	2301      	movgt	r3, #1
 801678a:	2300      	movle	r3, #0
 801678c:	b2db      	uxtb	r3, r3
 801678e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016790:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016798:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801679a:	6a3b      	ldr	r3, [r7, #32]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d002      	beq.n	80167a6 <ip4_frag+0x1f6>
 80167a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	d003      	beq.n	80167ae <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 80167a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80167ac:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80167ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80167b0:	4618      	mov	r0, r3
 80167b2:	f7f3 fa7f 	bl	8009cb4 <lwip_htons>
 80167b6:	4603      	mov	r3, r0
 80167b8:	461a      	mov	r2, r3
 80167ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167bc:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80167be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167c0:	3314      	adds	r3, #20
 80167c2:	b29b      	uxth	r3, r3
 80167c4:	4618      	mov	r0, r3
 80167c6:	f7f3 fa75 	bl	8009cb4 <lwip_htons>
 80167ca:	4603      	mov	r3, r0
 80167cc:	461a      	mov	r2, r3
 80167ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80167d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80167d4:	2200      	movs	r2, #0
 80167d6:	729a      	strb	r2, [r3, #10]
 80167d8:	2200      	movs	r2, #0
 80167da:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80167dc:	68bb      	ldr	r3, [r7, #8]
 80167de:	695b      	ldr	r3, [r3, #20]
 80167e0:	687a      	ldr	r2, [r7, #4]
 80167e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80167e4:	68b8      	ldr	r0, [r7, #8]
 80167e6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80167e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80167ea:	f7f4 fe1b 	bl	800b424 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80167ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80167f2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80167fa:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80167fe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016800:	4413      	add	r3, r2
 8016802:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8016806:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801680a:	2b00      	cmp	r3, #0
 801680c:	f47f af19 	bne.w	8016642 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016810:	2300      	movs	r3, #0
 8016812:	e002      	b.n	801681a <ip4_frag+0x26a>
      goto memerr;
 8016814:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016816:	f04f 33ff 	mov.w	r3, #4294967295
}
 801681a:	4618      	mov	r0, r3
 801681c:	3748      	adds	r7, #72	; 0x48
 801681e:	46bd      	mov	sp, r7
 8016820:	bd80      	pop	{r7, pc}
 8016822:	bf00      	nop
 8016824:	0801b9a4 	.word	0x0801b9a4
 8016828:	0801bb80 	.word	0x0801bb80
 801682c:	0801b9ec 	.word	0x0801b9ec
 8016830:	0801bb9c 	.word	0x0801bb9c
 8016834:	0801bbbc 	.word	0x0801bbbc
 8016838:	08016549 	.word	0x08016549

0801683c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801683c:	b580      	push	{r7, lr}
 801683e:	b086      	sub	sp, #24
 8016840:	af00      	add	r7, sp, #0
 8016842:	6078      	str	r0, [r7, #4]
 8016844:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016846:	230e      	movs	r3, #14
 8016848:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	895b      	ldrh	r3, [r3, #10]
 801684e:	2b0e      	cmp	r3, #14
 8016850:	d96e      	bls.n	8016930 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	7bdb      	ldrb	r3, [r3, #15]
 8016856:	2b00      	cmp	r3, #0
 8016858:	d106      	bne.n	8016868 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801685a:	683b      	ldr	r3, [r7, #0]
 801685c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016860:	3301      	adds	r3, #1
 8016862:	b2da      	uxtb	r2, r3
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685b      	ldr	r3, [r3, #4]
 801686c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801686e:	693b      	ldr	r3, [r7, #16]
 8016870:	7b1a      	ldrb	r2, [r3, #12]
 8016872:	7b5b      	ldrb	r3, [r3, #13]
 8016874:	021b      	lsls	r3, r3, #8
 8016876:	4313      	orrs	r3, r2
 8016878:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801687a:	693b      	ldr	r3, [r7, #16]
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	f003 0301 	and.w	r3, r3, #1
 8016882:	2b00      	cmp	r3, #0
 8016884:	d023      	beq.n	80168ce <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016886:	693b      	ldr	r3, [r7, #16]
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d10f      	bne.n	80168ae <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801688e:	693b      	ldr	r3, [r7, #16]
 8016890:	785b      	ldrb	r3, [r3, #1]
 8016892:	2b00      	cmp	r3, #0
 8016894:	d11b      	bne.n	80168ce <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016896:	693b      	ldr	r3, [r7, #16]
 8016898:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801689a:	2b5e      	cmp	r3, #94	; 0x5e
 801689c:	d117      	bne.n	80168ce <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	7b5b      	ldrb	r3, [r3, #13]
 80168a2:	f043 0310 	orr.w	r3, r3, #16
 80168a6:	b2da      	uxtb	r2, r3
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	735a      	strb	r2, [r3, #13]
 80168ac:	e00f      	b.n	80168ce <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80168ae:	693b      	ldr	r3, [r7, #16]
 80168b0:	2206      	movs	r2, #6
 80168b2:	4928      	ldr	r1, [pc, #160]	; (8016954 <ethernet_input+0x118>)
 80168b4:	4618      	mov	r0, r3
 80168b6:	f000 fa9d 	bl	8016df4 <memcmp>
 80168ba:	4603      	mov	r3, r0
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d106      	bne.n	80168ce <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	7b5b      	ldrb	r3, [r3, #13]
 80168c4:	f043 0308 	orr.w	r3, r3, #8
 80168c8:	b2da      	uxtb	r2, r3
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80168ce:	89fb      	ldrh	r3, [r7, #14]
 80168d0:	2b08      	cmp	r3, #8
 80168d2:	d003      	beq.n	80168dc <ethernet_input+0xa0>
 80168d4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80168d8:	d014      	beq.n	8016904 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80168da:	e032      	b.n	8016942 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80168e2:	f003 0308 	and.w	r3, r3, #8
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d024      	beq.n	8016934 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80168ea:	8afb      	ldrh	r3, [r7, #22]
 80168ec:	4619      	mov	r1, r3
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f7f4 fd12 	bl	800b318 <pbuf_remove_header>
 80168f4:	4603      	mov	r3, r0
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d11e      	bne.n	8016938 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80168fa:	6839      	ldr	r1, [r7, #0]
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7fe ff09 	bl	8015714 <ip4_input>
      break;
 8016902:	e013      	b.n	801692c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016904:	683b      	ldr	r3, [r7, #0]
 8016906:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801690a:	f003 0308 	and.w	r3, r3, #8
 801690e:	2b00      	cmp	r3, #0
 8016910:	d014      	beq.n	801693c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016912:	8afb      	ldrh	r3, [r7, #22]
 8016914:	4619      	mov	r1, r3
 8016916:	6878      	ldr	r0, [r7, #4]
 8016918:	f7f4 fcfe 	bl	800b318 <pbuf_remove_header>
 801691c:	4603      	mov	r3, r0
 801691e:	2b00      	cmp	r3, #0
 8016920:	d10e      	bne.n	8016940 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016922:	6839      	ldr	r1, [r7, #0]
 8016924:	6878      	ldr	r0, [r7, #4]
 8016926:	f7fe f8a5 	bl	8014a74 <etharp_input>
      break;
 801692a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801692c:	2300      	movs	r3, #0
 801692e:	e00c      	b.n	801694a <ethernet_input+0x10e>
    goto free_and_return;
 8016930:	bf00      	nop
 8016932:	e006      	b.n	8016942 <ethernet_input+0x106>
        goto free_and_return;
 8016934:	bf00      	nop
 8016936:	e004      	b.n	8016942 <ethernet_input+0x106>
        goto free_and_return;
 8016938:	bf00      	nop
 801693a:	e002      	b.n	8016942 <ethernet_input+0x106>
        goto free_and_return;
 801693c:	bf00      	nop
 801693e:	e000      	b.n	8016942 <ethernet_input+0x106>
        goto free_and_return;
 8016940:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f7f4 fd6e 	bl	800b424 <pbuf_free>
  return ERR_OK;
 8016948:	2300      	movs	r3, #0
}
 801694a:	4618      	mov	r0, r3
 801694c:	3718      	adds	r7, #24
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	0801bda4 	.word	0x0801bda4

08016958 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016958:	b580      	push	{r7, lr}
 801695a:	b086      	sub	sp, #24
 801695c:	af00      	add	r7, sp, #0
 801695e:	60f8      	str	r0, [r7, #12]
 8016960:	60b9      	str	r1, [r7, #8]
 8016962:	607a      	str	r2, [r7, #4]
 8016964:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016966:	8c3b      	ldrh	r3, [r7, #32]
 8016968:	4618      	mov	r0, r3
 801696a:	f7f3 f9a3 	bl	8009cb4 <lwip_htons>
 801696e:	4603      	mov	r3, r0
 8016970:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016972:	210e      	movs	r1, #14
 8016974:	68b8      	ldr	r0, [r7, #8]
 8016976:	f7f4 fcbf 	bl	800b2f8 <pbuf_add_header>
 801697a:	4603      	mov	r3, r0
 801697c:	2b00      	cmp	r3, #0
 801697e:	d125      	bne.n	80169cc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016980:	68bb      	ldr	r3, [r7, #8]
 8016982:	685b      	ldr	r3, [r3, #4]
 8016984:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016986:	693b      	ldr	r3, [r7, #16]
 8016988:	8afa      	ldrh	r2, [r7, #22]
 801698a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801698c:	693b      	ldr	r3, [r7, #16]
 801698e:	2206      	movs	r2, #6
 8016990:	6839      	ldr	r1, [r7, #0]
 8016992:	4618      	mov	r0, r3
 8016994:	f000 fa3c 	bl	8016e10 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016998:	693b      	ldr	r3, [r7, #16]
 801699a:	3306      	adds	r3, #6
 801699c:	2206      	movs	r2, #6
 801699e:	6879      	ldr	r1, [r7, #4]
 80169a0:	4618      	mov	r0, r3
 80169a2:	f000 fa35 	bl	8016e10 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80169a6:	68fb      	ldr	r3, [r7, #12]
 80169a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80169ac:	2b06      	cmp	r3, #6
 80169ae:	d006      	beq.n	80169be <ethernet_output+0x66>
 80169b0:	4b0a      	ldr	r3, [pc, #40]	; (80169dc <ethernet_output+0x84>)
 80169b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 80169b6:	490a      	ldr	r1, [pc, #40]	; (80169e0 <ethernet_output+0x88>)
 80169b8:	480a      	ldr	r0, [pc, #40]	; (80169e4 <ethernet_output+0x8c>)
 80169ba:	f000 fa59 	bl	8016e70 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80169be:	68fb      	ldr	r3, [r7, #12]
 80169c0:	699b      	ldr	r3, [r3, #24]
 80169c2:	68b9      	ldr	r1, [r7, #8]
 80169c4:	68f8      	ldr	r0, [r7, #12]
 80169c6:	4798      	blx	r3
 80169c8:	4603      	mov	r3, r0
 80169ca:	e002      	b.n	80169d2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80169cc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80169ce:	f06f 0301 	mvn.w	r3, #1
}
 80169d2:	4618      	mov	r0, r3
 80169d4:	3718      	adds	r7, #24
 80169d6:	46bd      	mov	sp, r7
 80169d8:	bd80      	pop	{r7, pc}
 80169da:	bf00      	nop
 80169dc:	0801bbcc 	.word	0x0801bbcc
 80169e0:	0801bc04 	.word	0x0801bc04
 80169e4:	0801bc38 	.word	0x0801bc38

080169e8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b086      	sub	sp, #24
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80169f2:	683b      	ldr	r3, [r7, #0]
 80169f4:	60bb      	str	r3, [r7, #8]
 80169f6:	2304      	movs	r3, #4
 80169f8:	60fb      	str	r3, [r7, #12]
 80169fa:	2300      	movs	r3, #0
 80169fc:	613b      	str	r3, [r7, #16]
 80169fe:	2300      	movs	r3, #0
 8016a00:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8016a02:	f107 0308 	add.w	r3, r7, #8
 8016a06:	2100      	movs	r1, #0
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7ee f87c 	bl	8004b06 <osMessageCreate>
 8016a0e:	4602      	mov	r2, r0
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016a14:	687b      	ldr	r3, [r7, #4]
 8016a16:	681b      	ldr	r3, [r3, #0]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d102      	bne.n	8016a22 <sys_mbox_new+0x3a>
    return ERR_MEM;
 8016a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8016a20:	e000      	b.n	8016a24 <sys_mbox_new+0x3c>

  return ERR_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3718      	adds	r7, #24
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8016a2c:	b580      	push	{r7, lr}
 8016a2e:	b082      	sub	sp, #8
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4618      	mov	r0, r3
 8016a3a:	f7ee f941 	bl	8004cc0 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	4618      	mov	r0, r3
 8016a44:	f7ee f952 	bl	8004cec <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8016a48:	bf00      	nop
 8016a4a:	3708      	adds	r7, #8
 8016a4c:	46bd      	mov	sp, r7
 8016a4e:	bd80      	pop	{r7, pc}

08016a50 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016a50:	b580      	push	{r7, lr}
 8016a52:	b084      	sub	sp, #16
 8016a54:	af00      	add	r7, sp, #0
 8016a56:	6078      	str	r0, [r7, #4]
 8016a58:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	681b      	ldr	r3, [r3, #0]
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	2200      	movs	r2, #0
 8016a62:	4618      	mov	r0, r3
 8016a64:	f7ee f878 	bl	8004b58 <osMessagePut>
 8016a68:	4603      	mov	r3, r0
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d102      	bne.n	8016a74 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8016a6e:	2300      	movs	r3, #0
 8016a70:	73fb      	strb	r3, [r7, #15]
 8016a72:	e001      	b.n	8016a78 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016a74:	23ff      	movs	r3, #255	; 0xff
 8016a76:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a7c:	4618      	mov	r0, r3
 8016a7e:	3710      	adds	r7, #16
 8016a80:	46bd      	mov	sp, r7
 8016a82:	bd80      	pop	{r7, pc}

08016a84 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016a84:	b580      	push	{r7, lr}
 8016a86:	b08c      	sub	sp, #48	; 0x30
 8016a88:	af00      	add	r7, sp, #0
 8016a8a:	61f8      	str	r0, [r7, #28]
 8016a8c:	61b9      	str	r1, [r7, #24]
 8016a8e:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8016a90:	f7ed fe63 	bl	800475a <osKernelSysTick>
 8016a94:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016a96:	697b      	ldr	r3, [r7, #20]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	d017      	beq.n	8016acc <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016a9c:	69fb      	ldr	r3, [r7, #28]
 8016a9e:	6819      	ldr	r1, [r3, #0]
 8016aa0:	f107 0320 	add.w	r3, r7, #32
 8016aa4:	697a      	ldr	r2, [r7, #20]
 8016aa6:	4618      	mov	r0, r3
 8016aa8:	f7ee f896 	bl	8004bd8 <osMessageGet>

    if(event.status == osEventMessage)
 8016aac:	6a3b      	ldr	r3, [r7, #32]
 8016aae:	2b10      	cmp	r3, #16
 8016ab0:	d109      	bne.n	8016ac6 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8016ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ab4:	461a      	mov	r2, r3
 8016ab6:	69bb      	ldr	r3, [r7, #24]
 8016ab8:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016aba:	f7ed fe4e 	bl	800475a <osKernelSysTick>
 8016abe:	4602      	mov	r2, r0
 8016ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ac2:	1ad3      	subs	r3, r2, r3
 8016ac4:	e019      	b.n	8016afa <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8016aca:	e016      	b.n	8016afa <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	6819      	ldr	r1, [r3, #0]
 8016ad0:	463b      	mov	r3, r7
 8016ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8016ad6:	4618      	mov	r0, r3
 8016ad8:	f7ee f87e 	bl	8004bd8 <osMessageGet>
 8016adc:	f107 0320 	add.w	r3, r7, #32
 8016ae0:	463a      	mov	r2, r7
 8016ae2:	ca07      	ldmia	r2, {r0, r1, r2}
 8016ae4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aea:	461a      	mov	r2, r3
 8016aec:	69bb      	ldr	r3, [r7, #24]
 8016aee:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016af0:	f7ed fe33 	bl	800475a <osKernelSysTick>
 8016af4:	4602      	mov	r2, r0
 8016af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016af8:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016afa:	4618      	mov	r0, r3
 8016afc:	3730      	adds	r7, #48	; 0x30
 8016afe:	46bd      	mov	sp, r7
 8016b00:	bd80      	pop	{r7, pc}

08016b02 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016b02:	b580      	push	{r7, lr}
 8016b04:	b086      	sub	sp, #24
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
 8016b0a:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6819      	ldr	r1, [r3, #0]
 8016b10:	f107 030c 	add.w	r3, r7, #12
 8016b14:	2200      	movs	r2, #0
 8016b16:	4618      	mov	r0, r3
 8016b18:	f7ee f85e 	bl	8004bd8 <osMessageGet>

  if(event.status == osEventMessage)
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	2b10      	cmp	r3, #16
 8016b20:	d105      	bne.n	8016b2e <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8016b22:	693b      	ldr	r3, [r7, #16]
 8016b24:	461a      	mov	r2, r3
 8016b26:	683b      	ldr	r3, [r7, #0]
 8016b28:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8016b2a:	2300      	movs	r3, #0
 8016b2c:	e001      	b.n	8016b32 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8016b2e:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3718      	adds	r7, #24
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016b3a:	b480      	push	{r7}
 8016b3c:	b083      	sub	sp, #12
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	681b      	ldr	r3, [r3, #0]
 8016b46:	2b00      	cmp	r3, #0
 8016b48:	d101      	bne.n	8016b4e <sys_mbox_valid+0x14>
    return 0;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	e000      	b.n	8016b50 <sys_mbox_valid+0x16>
  else
    return 1;
 8016b4e:	2301      	movs	r3, #1
}
 8016b50:	4618      	mov	r0, r3
 8016b52:	370c      	adds	r7, #12
 8016b54:	46bd      	mov	sp, r7
 8016b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b5a:	4770      	bx	lr

08016b5c <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8016b5c:	b480      	push	{r7}
 8016b5e:	b083      	sub	sp, #12
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	2200      	movs	r2, #0
 8016b68:	601a      	str	r2, [r3, #0]
}
 8016b6a:	bf00      	nop
 8016b6c:	370c      	adds	r7, #12
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b74:	4770      	bx	lr

08016b76 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b084      	sub	sp, #16
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	6078      	str	r0, [r7, #4]
 8016b7e:	460b      	mov	r3, r1
 8016b80:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8016b82:	2300      	movs	r3, #0
 8016b84:	60bb      	str	r3, [r7, #8]
 8016b86:	2300      	movs	r3, #0
 8016b88:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8016b8a:	f107 0308 	add.w	r3, r7, #8
 8016b8e:	2101      	movs	r1, #1
 8016b90:	4618      	mov	r0, r3
 8016b92:	f7ed feef 	bl	8004974 <osSemaphoreCreate>
 8016b96:	4602      	mov	r2, r0
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	681b      	ldr	r3, [r3, #0]
 8016ba0:	2b00      	cmp	r3, #0
 8016ba2:	d102      	bne.n	8016baa <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8016ba8:	e009      	b.n	8016bbe <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8016baa:	78fb      	ldrb	r3, [r7, #3]
 8016bac:	2b00      	cmp	r3, #0
 8016bae:	d105      	bne.n	8016bbc <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	2100      	movs	r1, #0
 8016bb6:	4618      	mov	r0, r3
 8016bb8:	f7ed ff0e 	bl	80049d8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016bbc:	2300      	movs	r3, #0
}
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	3710      	adds	r7, #16
 8016bc2:	46bd      	mov	sp, r7
 8016bc4:	bd80      	pop	{r7, pc}

08016bc6 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016bc6:	b580      	push	{r7, lr}
 8016bc8:	b084      	sub	sp, #16
 8016bca:	af00      	add	r7, sp, #0
 8016bcc:	6078      	str	r0, [r7, #4]
 8016bce:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8016bd0:	f7ed fdc3 	bl	800475a <osKernelSysTick>
 8016bd4:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8016bd6:	683b      	ldr	r3, [r7, #0]
 8016bd8:	2b00      	cmp	r3, #0
 8016bda:	d011      	beq.n	8016c00 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8016bdc:	687b      	ldr	r3, [r7, #4]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	6839      	ldr	r1, [r7, #0]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7ed fef8 	bl	80049d8 <osSemaphoreWait>
 8016be8:	4603      	mov	r3, r0
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d105      	bne.n	8016bfa <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8016bee:	f7ed fdb4 	bl	800475a <osKernelSysTick>
 8016bf2:	4602      	mov	r2, r0
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	1ad3      	subs	r3, r2, r3
 8016bf8:	e012      	b.n	8016c20 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8016bfe:	e00f      	b.n	8016c20 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8016c00:	bf00      	nop
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	681b      	ldr	r3, [r3, #0]
 8016c06:	f04f 31ff 	mov.w	r1, #4294967295
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7ed fee4 	bl	80049d8 <osSemaphoreWait>
 8016c10:	4603      	mov	r3, r0
 8016c12:	2b00      	cmp	r3, #0
 8016c14:	d1f5      	bne.n	8016c02 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8016c16:	f7ed fda0 	bl	800475a <osKernelSysTick>
 8016c1a:	4602      	mov	r2, r0
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016c20:	4618      	mov	r0, r3
 8016c22:	3710      	adds	r7, #16
 8016c24:	46bd      	mov	sp, r7
 8016c26:	bd80      	pop	{r7, pc}

08016c28 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016c28:	b580      	push	{r7, lr}
 8016c2a:	b082      	sub	sp, #8
 8016c2c:	af00      	add	r7, sp, #0
 8016c2e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	4618      	mov	r0, r3
 8016c36:	f7ed ff1d 	bl	8004a74 <osSemaphoreRelease>
}
 8016c3a:	bf00      	nop
 8016c3c:	3708      	adds	r7, #8
 8016c3e:	46bd      	mov	sp, r7
 8016c40:	bd80      	pop	{r7, pc}

08016c42 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016c42:	b580      	push	{r7, lr}
 8016c44:	b082      	sub	sp, #8
 8016c46:	af00      	add	r7, sp, #0
 8016c48:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016c4a:	687b      	ldr	r3, [r7, #4]
 8016c4c:	681b      	ldr	r3, [r3, #0]
 8016c4e:	4618      	mov	r0, r3
 8016c50:	f7ed ff46 	bl	8004ae0 <osSemaphoreDelete>
}
 8016c54:	bf00      	nop
 8016c56:	3708      	adds	r7, #8
 8016c58:	46bd      	mov	sp, r7
 8016c5a:	bd80      	pop	{r7, pc}

08016c5c <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016c5c:	b480      	push	{r7}
 8016c5e:	b083      	sub	sp, #12
 8016c60:	af00      	add	r7, sp, #0
 8016c62:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d101      	bne.n	8016c70 <sys_sem_valid+0x14>
    return 0;
 8016c6c:	2300      	movs	r3, #0
 8016c6e:	e000      	b.n	8016c72 <sys_sem_valid+0x16>
  else
    return 1;
 8016c70:	2301      	movs	r3, #1
}
 8016c72:	4618      	mov	r0, r3
 8016c74:	370c      	adds	r7, #12
 8016c76:	46bd      	mov	sp, r7
 8016c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7c:	4770      	bx	lr

08016c7e <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016c7e:	b480      	push	{r7}
 8016c80:	b083      	sub	sp, #12
 8016c82:	af00      	add	r7, sp, #0
 8016c84:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	2200      	movs	r2, #0
 8016c8a:	601a      	str	r2, [r3, #0]
}
 8016c8c:	bf00      	nop
 8016c8e:	370c      	adds	r7, #12
 8016c90:	46bd      	mov	sp, r7
 8016c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c96:	4770      	bx	lr

08016c98 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016c98:	b580      	push	{r7, lr}
 8016c9a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016c9c:	4803      	ldr	r0, [pc, #12]	; (8016cac <sys_init+0x14>)
 8016c9e:	f7ed fdcc 	bl	800483a <osMutexCreate>
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	4a02      	ldr	r2, [pc, #8]	; (8016cb0 <sys_init+0x18>)
 8016ca6:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8016ca8:	bf00      	nop
 8016caa:	bd80      	pop	{r7, pc}
 8016cac:	0801bdb4 	.word	0x0801bdb4
 8016cb0:	2000f084 	.word	0x2000f084

08016cb4 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b084      	sub	sp, #16
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8016cbc:	2300      	movs	r3, #0
 8016cbe:	60bb      	str	r3, [r7, #8]
 8016cc0:	2300      	movs	r3, #0
 8016cc2:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8016cc4:	f107 0308 	add.w	r3, r7, #8
 8016cc8:	4618      	mov	r0, r3
 8016cca:	f7ed fdb6 	bl	800483a <osMutexCreate>
 8016cce:	4602      	mov	r2, r0
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8016cd4:	687b      	ldr	r3, [r7, #4]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d102      	bne.n	8016ce2 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8016ce0:	e000      	b.n	8016ce4 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016ce2:	2300      	movs	r3, #0
}
 8016ce4:	4618      	mov	r0, r3
 8016ce6:	3710      	adds	r7, #16
 8016ce8:	46bd      	mov	sp, r7
 8016cea:	bd80      	pop	{r7, pc}

08016cec <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b082      	sub	sp, #8
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	681b      	ldr	r3, [r3, #0]
 8016cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7ed fdb5 	bl	800486c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8016d02:	bf00      	nop
 8016d04:	3708      	adds	r7, #8
 8016d06:	46bd      	mov	sp, r7
 8016d08:	bd80      	pop	{r7, pc}

08016d0a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016d0a:	b580      	push	{r7, lr}
 8016d0c:	b082      	sub	sp, #8
 8016d0e:	af00      	add	r7, sp, #0
 8016d10:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	4618      	mov	r0, r3
 8016d18:	f7ed fdf6 	bl	8004908 <osMutexRelease>
}
 8016d1c:	bf00      	nop
 8016d1e:	3708      	adds	r7, #8
 8016d20:	46bd      	mov	sp, r7
 8016d22:	bd80      	pop	{r7, pc}

08016d24 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016d24:	b580      	push	{r7, lr}
 8016d26:	b08c      	sub	sp, #48	; 0x30
 8016d28:	af00      	add	r7, sp, #0
 8016d2a:	60f8      	str	r0, [r7, #12]
 8016d2c:	60b9      	str	r1, [r7, #8]
 8016d2e:	607a      	str	r2, [r7, #4]
 8016d30:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016d32:	f107 0314 	add.w	r3, r7, #20
 8016d36:	2200      	movs	r2, #0
 8016d38:	601a      	str	r2, [r3, #0]
 8016d3a:	605a      	str	r2, [r3, #4]
 8016d3c:	609a      	str	r2, [r3, #8]
 8016d3e:	60da      	str	r2, [r3, #12]
 8016d40:	611a      	str	r2, [r3, #16]
 8016d42:	615a      	str	r2, [r3, #20]
 8016d44:	619a      	str	r2, [r3, #24]
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	617b      	str	r3, [r7, #20]
 8016d4a:	68bb      	ldr	r3, [r7, #8]
 8016d4c:	61bb      	str	r3, [r7, #24]
 8016d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016d50:	b21b      	sxth	r3, r3
 8016d52:	83bb      	strh	r3, [r7, #28]
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8016d58:	f107 0314 	add.w	r3, r7, #20
 8016d5c:	6879      	ldr	r1, [r7, #4]
 8016d5e:	4618      	mov	r0, r3
 8016d60:	f7ed fd0b 	bl	800477a <osThreadCreate>
 8016d64:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8016d66:	4618      	mov	r0, r3
 8016d68:	3730      	adds	r7, #48	; 0x30
 8016d6a:	46bd      	mov	sp, r7
 8016d6c:	bd80      	pop	{r7, pc}
	...

08016d70 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016d70:	b580      	push	{r7, lr}
 8016d72:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016d74:	4b04      	ldr	r3, [pc, #16]	; (8016d88 <sys_arch_protect+0x18>)
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	f04f 31ff 	mov.w	r1, #4294967295
 8016d7c:	4618      	mov	r0, r3
 8016d7e:	f7ed fd75 	bl	800486c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016d82:	2301      	movs	r3, #1
}
 8016d84:	4618      	mov	r0, r3
 8016d86:	bd80      	pop	{r7, pc}
 8016d88:	2000f084 	.word	0x2000f084

08016d8c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b082      	sub	sp, #8
 8016d90:	af00      	add	r7, sp, #0
 8016d92:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016d94:	4b04      	ldr	r3, [pc, #16]	; (8016da8 <sys_arch_unprotect+0x1c>)
 8016d96:	681b      	ldr	r3, [r3, #0]
 8016d98:	4618      	mov	r0, r3
 8016d9a:	f7ed fdb5 	bl	8004908 <osMutexRelease>
}
 8016d9e:	bf00      	nop
 8016da0:	3708      	adds	r7, #8
 8016da2:	46bd      	mov	sp, r7
 8016da4:	bd80      	pop	{r7, pc}
 8016da6:	bf00      	nop
 8016da8:	2000f084 	.word	0x2000f084

08016dac <__libc_init_array>:
 8016dac:	b570      	push	{r4, r5, r6, lr}
 8016dae:	4d0d      	ldr	r5, [pc, #52]	; (8016de4 <__libc_init_array+0x38>)
 8016db0:	4c0d      	ldr	r4, [pc, #52]	; (8016de8 <__libc_init_array+0x3c>)
 8016db2:	1b64      	subs	r4, r4, r5
 8016db4:	10a4      	asrs	r4, r4, #2
 8016db6:	2600      	movs	r6, #0
 8016db8:	42a6      	cmp	r6, r4
 8016dba:	d109      	bne.n	8016dd0 <__libc_init_array+0x24>
 8016dbc:	4d0b      	ldr	r5, [pc, #44]	; (8016dec <__libc_init_array+0x40>)
 8016dbe:	4c0c      	ldr	r4, [pc, #48]	; (8016df0 <__libc_init_array+0x44>)
 8016dc0:	f001 fa62 	bl	8018288 <_init>
 8016dc4:	1b64      	subs	r4, r4, r5
 8016dc6:	10a4      	asrs	r4, r4, #2
 8016dc8:	2600      	movs	r6, #0
 8016dca:	42a6      	cmp	r6, r4
 8016dcc:	d105      	bne.n	8016dda <__libc_init_array+0x2e>
 8016dce:	bd70      	pop	{r4, r5, r6, pc}
 8016dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dd4:	4798      	blx	r3
 8016dd6:	3601      	adds	r6, #1
 8016dd8:	e7ee      	b.n	8016db8 <__libc_init_array+0xc>
 8016dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8016dde:	4798      	blx	r3
 8016de0:	3601      	adds	r6, #1
 8016de2:	e7f2      	b.n	8016dca <__libc_init_array+0x1e>
 8016de4:	0801c014 	.word	0x0801c014
 8016de8:	0801c014 	.word	0x0801c014
 8016dec:	0801c014 	.word	0x0801c014
 8016df0:	0801c018 	.word	0x0801c018

08016df4 <memcmp>:
 8016df4:	b530      	push	{r4, r5, lr}
 8016df6:	3901      	subs	r1, #1
 8016df8:	2400      	movs	r4, #0
 8016dfa:	42a2      	cmp	r2, r4
 8016dfc:	d101      	bne.n	8016e02 <memcmp+0xe>
 8016dfe:	2000      	movs	r0, #0
 8016e00:	e005      	b.n	8016e0e <memcmp+0x1a>
 8016e02:	5d03      	ldrb	r3, [r0, r4]
 8016e04:	3401      	adds	r4, #1
 8016e06:	5d0d      	ldrb	r5, [r1, r4]
 8016e08:	42ab      	cmp	r3, r5
 8016e0a:	d0f6      	beq.n	8016dfa <memcmp+0x6>
 8016e0c:	1b58      	subs	r0, r3, r5
 8016e0e:	bd30      	pop	{r4, r5, pc}

08016e10 <memcpy>:
 8016e10:	440a      	add	r2, r1
 8016e12:	4291      	cmp	r1, r2
 8016e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8016e18:	d100      	bne.n	8016e1c <memcpy+0xc>
 8016e1a:	4770      	bx	lr
 8016e1c:	b510      	push	{r4, lr}
 8016e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016e26:	4291      	cmp	r1, r2
 8016e28:	d1f9      	bne.n	8016e1e <memcpy+0xe>
 8016e2a:	bd10      	pop	{r4, pc}

08016e2c <memmove>:
 8016e2c:	4288      	cmp	r0, r1
 8016e2e:	b510      	push	{r4, lr}
 8016e30:	eb01 0402 	add.w	r4, r1, r2
 8016e34:	d902      	bls.n	8016e3c <memmove+0x10>
 8016e36:	4284      	cmp	r4, r0
 8016e38:	4623      	mov	r3, r4
 8016e3a:	d807      	bhi.n	8016e4c <memmove+0x20>
 8016e3c:	1e43      	subs	r3, r0, #1
 8016e3e:	42a1      	cmp	r1, r4
 8016e40:	d008      	beq.n	8016e54 <memmove+0x28>
 8016e42:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016e46:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016e4a:	e7f8      	b.n	8016e3e <memmove+0x12>
 8016e4c:	4402      	add	r2, r0
 8016e4e:	4601      	mov	r1, r0
 8016e50:	428a      	cmp	r2, r1
 8016e52:	d100      	bne.n	8016e56 <memmove+0x2a>
 8016e54:	bd10      	pop	{r4, pc}
 8016e56:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016e5a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016e5e:	e7f7      	b.n	8016e50 <memmove+0x24>

08016e60 <memset>:
 8016e60:	4402      	add	r2, r0
 8016e62:	4603      	mov	r3, r0
 8016e64:	4293      	cmp	r3, r2
 8016e66:	d100      	bne.n	8016e6a <memset+0xa>
 8016e68:	4770      	bx	lr
 8016e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8016e6e:	e7f9      	b.n	8016e64 <memset+0x4>

08016e70 <iprintf>:
 8016e70:	b40f      	push	{r0, r1, r2, r3}
 8016e72:	4b0a      	ldr	r3, [pc, #40]	; (8016e9c <iprintf+0x2c>)
 8016e74:	b513      	push	{r0, r1, r4, lr}
 8016e76:	681c      	ldr	r4, [r3, #0]
 8016e78:	b124      	cbz	r4, 8016e84 <iprintf+0x14>
 8016e7a:	69a3      	ldr	r3, [r4, #24]
 8016e7c:	b913      	cbnz	r3, 8016e84 <iprintf+0x14>
 8016e7e:	4620      	mov	r0, r4
 8016e80:	f000 f92c 	bl	80170dc <__sinit>
 8016e84:	ab05      	add	r3, sp, #20
 8016e86:	9a04      	ldr	r2, [sp, #16]
 8016e88:	68a1      	ldr	r1, [r4, #8]
 8016e8a:	9301      	str	r3, [sp, #4]
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	f000 fc0f 	bl	80176b0 <_vfiprintf_r>
 8016e92:	b002      	add	sp, #8
 8016e94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016e98:	b004      	add	sp, #16
 8016e9a:	4770      	bx	lr
 8016e9c:	20000020 	.word	0x20000020

08016ea0 <rand>:
 8016ea0:	4b17      	ldr	r3, [pc, #92]	; (8016f00 <rand+0x60>)
 8016ea2:	b510      	push	{r4, lr}
 8016ea4:	681c      	ldr	r4, [r3, #0]
 8016ea6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016ea8:	b9b3      	cbnz	r3, 8016ed8 <rand+0x38>
 8016eaa:	2018      	movs	r0, #24
 8016eac:	f000 f9c8 	bl	8017240 <malloc>
 8016eb0:	63a0      	str	r0, [r4, #56]	; 0x38
 8016eb2:	b928      	cbnz	r0, 8016ec0 <rand+0x20>
 8016eb4:	4602      	mov	r2, r0
 8016eb6:	4b13      	ldr	r3, [pc, #76]	; (8016f04 <rand+0x64>)
 8016eb8:	4813      	ldr	r0, [pc, #76]	; (8016f08 <rand+0x68>)
 8016eba:	214e      	movs	r1, #78	; 0x4e
 8016ebc:	f000 f898 	bl	8016ff0 <__assert_func>
 8016ec0:	4a12      	ldr	r2, [pc, #72]	; (8016f0c <rand+0x6c>)
 8016ec2:	4b13      	ldr	r3, [pc, #76]	; (8016f10 <rand+0x70>)
 8016ec4:	e9c0 2300 	strd	r2, r3, [r0]
 8016ec8:	4b12      	ldr	r3, [pc, #72]	; (8016f14 <rand+0x74>)
 8016eca:	6083      	str	r3, [r0, #8]
 8016ecc:	230b      	movs	r3, #11
 8016ece:	8183      	strh	r3, [r0, #12]
 8016ed0:	2201      	movs	r2, #1
 8016ed2:	2300      	movs	r3, #0
 8016ed4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8016ed8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016eda:	480f      	ldr	r0, [pc, #60]	; (8016f18 <rand+0x78>)
 8016edc:	690a      	ldr	r2, [r1, #16]
 8016ede:	694b      	ldr	r3, [r1, #20]
 8016ee0:	4c0e      	ldr	r4, [pc, #56]	; (8016f1c <rand+0x7c>)
 8016ee2:	4350      	muls	r0, r2
 8016ee4:	fb04 0003 	mla	r0, r4, r3, r0
 8016ee8:	fba2 3404 	umull	r3, r4, r2, r4
 8016eec:	1c5a      	adds	r2, r3, #1
 8016eee:	4404      	add	r4, r0
 8016ef0:	f144 0000 	adc.w	r0, r4, #0
 8016ef4:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8016ef8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016efc:	bd10      	pop	{r4, pc}
 8016efe:	bf00      	nop
 8016f00:	20000020 	.word	0x20000020
 8016f04:	0801bec4 	.word	0x0801bec4
 8016f08:	0801bedb 	.word	0x0801bedb
 8016f0c:	abcd330e 	.word	0xabcd330e
 8016f10:	e66d1234 	.word	0xe66d1234
 8016f14:	0005deec 	.word	0x0005deec
 8016f18:	5851f42d 	.word	0x5851f42d
 8016f1c:	4c957f2d 	.word	0x4c957f2d

08016f20 <siprintf>:
 8016f20:	b40e      	push	{r1, r2, r3}
 8016f22:	b500      	push	{lr}
 8016f24:	b09c      	sub	sp, #112	; 0x70
 8016f26:	ab1d      	add	r3, sp, #116	; 0x74
 8016f28:	9002      	str	r0, [sp, #8]
 8016f2a:	9006      	str	r0, [sp, #24]
 8016f2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016f30:	4809      	ldr	r0, [pc, #36]	; (8016f58 <siprintf+0x38>)
 8016f32:	9107      	str	r1, [sp, #28]
 8016f34:	9104      	str	r1, [sp, #16]
 8016f36:	4909      	ldr	r1, [pc, #36]	; (8016f5c <siprintf+0x3c>)
 8016f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8016f3c:	9105      	str	r1, [sp, #20]
 8016f3e:	6800      	ldr	r0, [r0, #0]
 8016f40:	9301      	str	r3, [sp, #4]
 8016f42:	a902      	add	r1, sp, #8
 8016f44:	f000 fa8a 	bl	801745c <_svfiprintf_r>
 8016f48:	9b02      	ldr	r3, [sp, #8]
 8016f4a:	2200      	movs	r2, #0
 8016f4c:	701a      	strb	r2, [r3, #0]
 8016f4e:	b01c      	add	sp, #112	; 0x70
 8016f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8016f54:	b003      	add	sp, #12
 8016f56:	4770      	bx	lr
 8016f58:	20000020 	.word	0x20000020
 8016f5c:	ffff0208 	.word	0xffff0208

08016f60 <strcasecmp>:
 8016f60:	b570      	push	{r4, r5, r6, lr}
 8016f62:	4d0c      	ldr	r5, [pc, #48]	; (8016f94 <strcasecmp+0x34>)
 8016f64:	4604      	mov	r4, r0
 8016f66:	462e      	mov	r6, r5
 8016f68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016f6c:	5d5a      	ldrb	r2, [r3, r5]
 8016f6e:	f002 0203 	and.w	r2, r2, #3
 8016f72:	2a01      	cmp	r2, #1
 8016f74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f78:	5cb0      	ldrb	r0, [r6, r2]
 8016f7a:	f000 0003 	and.w	r0, r0, #3
 8016f7e:	bf08      	it	eq
 8016f80:	3320      	addeq	r3, #32
 8016f82:	2801      	cmp	r0, #1
 8016f84:	bf08      	it	eq
 8016f86:	3220      	addeq	r2, #32
 8016f88:	1a98      	subs	r0, r3, r2
 8016f8a:	d101      	bne.n	8016f90 <strcasecmp+0x30>
 8016f8c:	2a00      	cmp	r2, #0
 8016f8e:	d1eb      	bne.n	8016f68 <strcasecmp+0x8>
 8016f90:	bd70      	pop	{r4, r5, r6, pc}
 8016f92:	bf00      	nop
 8016f94:	0801bdbd 	.word	0x0801bdbd

08016f98 <__strtok_r>:
 8016f98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f9a:	b908      	cbnz	r0, 8016fa0 <__strtok_r+0x8>
 8016f9c:	6810      	ldr	r0, [r2, #0]
 8016f9e:	b188      	cbz	r0, 8016fc4 <__strtok_r+0x2c>
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	f814 5b01 	ldrb.w	r5, [r4], #1
 8016fa8:	460f      	mov	r7, r1
 8016faa:	f817 6b01 	ldrb.w	r6, [r7], #1
 8016fae:	b91e      	cbnz	r6, 8016fb8 <__strtok_r+0x20>
 8016fb0:	b965      	cbnz	r5, 8016fcc <__strtok_r+0x34>
 8016fb2:	6015      	str	r5, [r2, #0]
 8016fb4:	4628      	mov	r0, r5
 8016fb6:	e005      	b.n	8016fc4 <__strtok_r+0x2c>
 8016fb8:	42b5      	cmp	r5, r6
 8016fba:	d1f6      	bne.n	8016faa <__strtok_r+0x12>
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d1f0      	bne.n	8016fa2 <__strtok_r+0xa>
 8016fc0:	6014      	str	r4, [r2, #0]
 8016fc2:	7003      	strb	r3, [r0, #0]
 8016fc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016fc6:	461c      	mov	r4, r3
 8016fc8:	e00c      	b.n	8016fe4 <__strtok_r+0x4c>
 8016fca:	b915      	cbnz	r5, 8016fd2 <__strtok_r+0x3a>
 8016fcc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8016fd0:	460e      	mov	r6, r1
 8016fd2:	f816 5b01 	ldrb.w	r5, [r6], #1
 8016fd6:	42ab      	cmp	r3, r5
 8016fd8:	d1f7      	bne.n	8016fca <__strtok_r+0x32>
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d0f3      	beq.n	8016fc6 <__strtok_r+0x2e>
 8016fde:	2300      	movs	r3, #0
 8016fe0:	f804 3c01 	strb.w	r3, [r4, #-1]
 8016fe4:	6014      	str	r4, [r2, #0]
 8016fe6:	e7ed      	b.n	8016fc4 <__strtok_r+0x2c>

08016fe8 <strtok_r>:
 8016fe8:	2301      	movs	r3, #1
 8016fea:	f7ff bfd5 	b.w	8016f98 <__strtok_r>
	...

08016ff0 <__assert_func>:
 8016ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016ff2:	4614      	mov	r4, r2
 8016ff4:	461a      	mov	r2, r3
 8016ff6:	4b09      	ldr	r3, [pc, #36]	; (801701c <__assert_func+0x2c>)
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	4605      	mov	r5, r0
 8016ffc:	68d8      	ldr	r0, [r3, #12]
 8016ffe:	b14c      	cbz	r4, 8017014 <__assert_func+0x24>
 8017000:	4b07      	ldr	r3, [pc, #28]	; (8017020 <__assert_func+0x30>)
 8017002:	9100      	str	r1, [sp, #0]
 8017004:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017008:	4906      	ldr	r1, [pc, #24]	; (8017024 <__assert_func+0x34>)
 801700a:	462b      	mov	r3, r5
 801700c:	f000 f8e4 	bl	80171d8 <fiprintf>
 8017010:	f000 ff38 	bl	8017e84 <abort>
 8017014:	4b04      	ldr	r3, [pc, #16]	; (8017028 <__assert_func+0x38>)
 8017016:	461c      	mov	r4, r3
 8017018:	e7f3      	b.n	8017002 <__assert_func+0x12>
 801701a:	bf00      	nop
 801701c:	20000020 	.word	0x20000020
 8017020:	0801bf3a 	.word	0x0801bf3a
 8017024:	0801bf47 	.word	0x0801bf47
 8017028:	0801bf75 	.word	0x0801bf75

0801702c <std>:
 801702c:	2300      	movs	r3, #0
 801702e:	b510      	push	{r4, lr}
 8017030:	4604      	mov	r4, r0
 8017032:	e9c0 3300 	strd	r3, r3, [r0]
 8017036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801703a:	6083      	str	r3, [r0, #8]
 801703c:	8181      	strh	r1, [r0, #12]
 801703e:	6643      	str	r3, [r0, #100]	; 0x64
 8017040:	81c2      	strh	r2, [r0, #14]
 8017042:	6183      	str	r3, [r0, #24]
 8017044:	4619      	mov	r1, r3
 8017046:	2208      	movs	r2, #8
 8017048:	305c      	adds	r0, #92	; 0x5c
 801704a:	f7ff ff09 	bl	8016e60 <memset>
 801704e:	4b05      	ldr	r3, [pc, #20]	; (8017064 <std+0x38>)
 8017050:	6263      	str	r3, [r4, #36]	; 0x24
 8017052:	4b05      	ldr	r3, [pc, #20]	; (8017068 <std+0x3c>)
 8017054:	62a3      	str	r3, [r4, #40]	; 0x28
 8017056:	4b05      	ldr	r3, [pc, #20]	; (801706c <std+0x40>)
 8017058:	62e3      	str	r3, [r4, #44]	; 0x2c
 801705a:	4b05      	ldr	r3, [pc, #20]	; (8017070 <std+0x44>)
 801705c:	6224      	str	r4, [r4, #32]
 801705e:	6323      	str	r3, [r4, #48]	; 0x30
 8017060:	bd10      	pop	{r4, pc}
 8017062:	bf00      	nop
 8017064:	08017c59 	.word	0x08017c59
 8017068:	08017c7b 	.word	0x08017c7b
 801706c:	08017cb3 	.word	0x08017cb3
 8017070:	08017cd7 	.word	0x08017cd7

08017074 <_cleanup_r>:
 8017074:	4901      	ldr	r1, [pc, #4]	; (801707c <_cleanup_r+0x8>)
 8017076:	f000 b8c1 	b.w	80171fc <_fwalk_reent>
 801707a:	bf00      	nop
 801707c:	08017fc1 	.word	0x08017fc1

08017080 <__sfmoreglue>:
 8017080:	b570      	push	{r4, r5, r6, lr}
 8017082:	1e4a      	subs	r2, r1, #1
 8017084:	2568      	movs	r5, #104	; 0x68
 8017086:	4355      	muls	r5, r2
 8017088:	460e      	mov	r6, r1
 801708a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801708e:	f000 f92f 	bl	80172f0 <_malloc_r>
 8017092:	4604      	mov	r4, r0
 8017094:	b140      	cbz	r0, 80170a8 <__sfmoreglue+0x28>
 8017096:	2100      	movs	r1, #0
 8017098:	e9c0 1600 	strd	r1, r6, [r0]
 801709c:	300c      	adds	r0, #12
 801709e:	60a0      	str	r0, [r4, #8]
 80170a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80170a4:	f7ff fedc 	bl	8016e60 <memset>
 80170a8:	4620      	mov	r0, r4
 80170aa:	bd70      	pop	{r4, r5, r6, pc}

080170ac <__sfp_lock_acquire>:
 80170ac:	4801      	ldr	r0, [pc, #4]	; (80170b4 <__sfp_lock_acquire+0x8>)
 80170ae:	f000 b8c5 	b.w	801723c <__retarget_lock_acquire_recursive>
 80170b2:	bf00      	nop
 80170b4:	2000f090 	.word	0x2000f090

080170b8 <__sfp_lock_release>:
 80170b8:	4801      	ldr	r0, [pc, #4]	; (80170c0 <__sfp_lock_release+0x8>)
 80170ba:	f000 b8c0 	b.w	801723e <__retarget_lock_release_recursive>
 80170be:	bf00      	nop
 80170c0:	2000f090 	.word	0x2000f090

080170c4 <__sinit_lock_acquire>:
 80170c4:	4801      	ldr	r0, [pc, #4]	; (80170cc <__sinit_lock_acquire+0x8>)
 80170c6:	f000 b8b9 	b.w	801723c <__retarget_lock_acquire_recursive>
 80170ca:	bf00      	nop
 80170cc:	2000f08b 	.word	0x2000f08b

080170d0 <__sinit_lock_release>:
 80170d0:	4801      	ldr	r0, [pc, #4]	; (80170d8 <__sinit_lock_release+0x8>)
 80170d2:	f000 b8b4 	b.w	801723e <__retarget_lock_release_recursive>
 80170d6:	bf00      	nop
 80170d8:	2000f08b 	.word	0x2000f08b

080170dc <__sinit>:
 80170dc:	b510      	push	{r4, lr}
 80170de:	4604      	mov	r4, r0
 80170e0:	f7ff fff0 	bl	80170c4 <__sinit_lock_acquire>
 80170e4:	69a3      	ldr	r3, [r4, #24]
 80170e6:	b11b      	cbz	r3, 80170f0 <__sinit+0x14>
 80170e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80170ec:	f7ff bff0 	b.w	80170d0 <__sinit_lock_release>
 80170f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80170f4:	6523      	str	r3, [r4, #80]	; 0x50
 80170f6:	4b13      	ldr	r3, [pc, #76]	; (8017144 <__sinit+0x68>)
 80170f8:	4a13      	ldr	r2, [pc, #76]	; (8017148 <__sinit+0x6c>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80170fe:	42a3      	cmp	r3, r4
 8017100:	bf04      	itt	eq
 8017102:	2301      	moveq	r3, #1
 8017104:	61a3      	streq	r3, [r4, #24]
 8017106:	4620      	mov	r0, r4
 8017108:	f000 f820 	bl	801714c <__sfp>
 801710c:	6060      	str	r0, [r4, #4]
 801710e:	4620      	mov	r0, r4
 8017110:	f000 f81c 	bl	801714c <__sfp>
 8017114:	60a0      	str	r0, [r4, #8]
 8017116:	4620      	mov	r0, r4
 8017118:	f000 f818 	bl	801714c <__sfp>
 801711c:	2200      	movs	r2, #0
 801711e:	60e0      	str	r0, [r4, #12]
 8017120:	2104      	movs	r1, #4
 8017122:	6860      	ldr	r0, [r4, #4]
 8017124:	f7ff ff82 	bl	801702c <std>
 8017128:	68a0      	ldr	r0, [r4, #8]
 801712a:	2201      	movs	r2, #1
 801712c:	2109      	movs	r1, #9
 801712e:	f7ff ff7d 	bl	801702c <std>
 8017132:	68e0      	ldr	r0, [r4, #12]
 8017134:	2202      	movs	r2, #2
 8017136:	2112      	movs	r1, #18
 8017138:	f7ff ff78 	bl	801702c <std>
 801713c:	2301      	movs	r3, #1
 801713e:	61a3      	str	r3, [r4, #24]
 8017140:	e7d2      	b.n	80170e8 <__sinit+0xc>
 8017142:	bf00      	nop
 8017144:	0801bec0 	.word	0x0801bec0
 8017148:	08017075 	.word	0x08017075

0801714c <__sfp>:
 801714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801714e:	4607      	mov	r7, r0
 8017150:	f7ff ffac 	bl	80170ac <__sfp_lock_acquire>
 8017154:	4b1e      	ldr	r3, [pc, #120]	; (80171d0 <__sfp+0x84>)
 8017156:	681e      	ldr	r6, [r3, #0]
 8017158:	69b3      	ldr	r3, [r6, #24]
 801715a:	b913      	cbnz	r3, 8017162 <__sfp+0x16>
 801715c:	4630      	mov	r0, r6
 801715e:	f7ff ffbd 	bl	80170dc <__sinit>
 8017162:	3648      	adds	r6, #72	; 0x48
 8017164:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017168:	3b01      	subs	r3, #1
 801716a:	d503      	bpl.n	8017174 <__sfp+0x28>
 801716c:	6833      	ldr	r3, [r6, #0]
 801716e:	b30b      	cbz	r3, 80171b4 <__sfp+0x68>
 8017170:	6836      	ldr	r6, [r6, #0]
 8017172:	e7f7      	b.n	8017164 <__sfp+0x18>
 8017174:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017178:	b9d5      	cbnz	r5, 80171b0 <__sfp+0x64>
 801717a:	4b16      	ldr	r3, [pc, #88]	; (80171d4 <__sfp+0x88>)
 801717c:	60e3      	str	r3, [r4, #12]
 801717e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017182:	6665      	str	r5, [r4, #100]	; 0x64
 8017184:	f000 f859 	bl	801723a <__retarget_lock_init_recursive>
 8017188:	f7ff ff96 	bl	80170b8 <__sfp_lock_release>
 801718c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017190:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017194:	6025      	str	r5, [r4, #0]
 8017196:	61a5      	str	r5, [r4, #24]
 8017198:	2208      	movs	r2, #8
 801719a:	4629      	mov	r1, r5
 801719c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80171a0:	f7ff fe5e 	bl	8016e60 <memset>
 80171a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80171a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80171ac:	4620      	mov	r0, r4
 80171ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80171b0:	3468      	adds	r4, #104	; 0x68
 80171b2:	e7d9      	b.n	8017168 <__sfp+0x1c>
 80171b4:	2104      	movs	r1, #4
 80171b6:	4638      	mov	r0, r7
 80171b8:	f7ff ff62 	bl	8017080 <__sfmoreglue>
 80171bc:	4604      	mov	r4, r0
 80171be:	6030      	str	r0, [r6, #0]
 80171c0:	2800      	cmp	r0, #0
 80171c2:	d1d5      	bne.n	8017170 <__sfp+0x24>
 80171c4:	f7ff ff78 	bl	80170b8 <__sfp_lock_release>
 80171c8:	230c      	movs	r3, #12
 80171ca:	603b      	str	r3, [r7, #0]
 80171cc:	e7ee      	b.n	80171ac <__sfp+0x60>
 80171ce:	bf00      	nop
 80171d0:	0801bec0 	.word	0x0801bec0
 80171d4:	ffff0001 	.word	0xffff0001

080171d8 <fiprintf>:
 80171d8:	b40e      	push	{r1, r2, r3}
 80171da:	b503      	push	{r0, r1, lr}
 80171dc:	4601      	mov	r1, r0
 80171de:	ab03      	add	r3, sp, #12
 80171e0:	4805      	ldr	r0, [pc, #20]	; (80171f8 <fiprintf+0x20>)
 80171e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80171e6:	6800      	ldr	r0, [r0, #0]
 80171e8:	9301      	str	r3, [sp, #4]
 80171ea:	f000 fa61 	bl	80176b0 <_vfiprintf_r>
 80171ee:	b002      	add	sp, #8
 80171f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80171f4:	b003      	add	sp, #12
 80171f6:	4770      	bx	lr
 80171f8:	20000020 	.word	0x20000020

080171fc <_fwalk_reent>:
 80171fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017200:	4606      	mov	r6, r0
 8017202:	4688      	mov	r8, r1
 8017204:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017208:	2700      	movs	r7, #0
 801720a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801720e:	f1b9 0901 	subs.w	r9, r9, #1
 8017212:	d505      	bpl.n	8017220 <_fwalk_reent+0x24>
 8017214:	6824      	ldr	r4, [r4, #0]
 8017216:	2c00      	cmp	r4, #0
 8017218:	d1f7      	bne.n	801720a <_fwalk_reent+0xe>
 801721a:	4638      	mov	r0, r7
 801721c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017220:	89ab      	ldrh	r3, [r5, #12]
 8017222:	2b01      	cmp	r3, #1
 8017224:	d907      	bls.n	8017236 <_fwalk_reent+0x3a>
 8017226:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801722a:	3301      	adds	r3, #1
 801722c:	d003      	beq.n	8017236 <_fwalk_reent+0x3a>
 801722e:	4629      	mov	r1, r5
 8017230:	4630      	mov	r0, r6
 8017232:	47c0      	blx	r8
 8017234:	4307      	orrs	r7, r0
 8017236:	3568      	adds	r5, #104	; 0x68
 8017238:	e7e9      	b.n	801720e <_fwalk_reent+0x12>

0801723a <__retarget_lock_init_recursive>:
 801723a:	4770      	bx	lr

0801723c <__retarget_lock_acquire_recursive>:
 801723c:	4770      	bx	lr

0801723e <__retarget_lock_release_recursive>:
 801723e:	4770      	bx	lr

08017240 <malloc>:
 8017240:	4b02      	ldr	r3, [pc, #8]	; (801724c <malloc+0xc>)
 8017242:	4601      	mov	r1, r0
 8017244:	6818      	ldr	r0, [r3, #0]
 8017246:	f000 b853 	b.w	80172f0 <_malloc_r>
 801724a:	bf00      	nop
 801724c:	20000020 	.word	0x20000020

08017250 <_free_r>:
 8017250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017252:	2900      	cmp	r1, #0
 8017254:	d048      	beq.n	80172e8 <_free_r+0x98>
 8017256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801725a:	9001      	str	r0, [sp, #4]
 801725c:	2b00      	cmp	r3, #0
 801725e:	f1a1 0404 	sub.w	r4, r1, #4
 8017262:	bfb8      	it	lt
 8017264:	18e4      	addlt	r4, r4, r3
 8017266:	f000 ff5d 	bl	8018124 <__malloc_lock>
 801726a:	4a20      	ldr	r2, [pc, #128]	; (80172ec <_free_r+0x9c>)
 801726c:	9801      	ldr	r0, [sp, #4]
 801726e:	6813      	ldr	r3, [r2, #0]
 8017270:	4615      	mov	r5, r2
 8017272:	b933      	cbnz	r3, 8017282 <_free_r+0x32>
 8017274:	6063      	str	r3, [r4, #4]
 8017276:	6014      	str	r4, [r2, #0]
 8017278:	b003      	add	sp, #12
 801727a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801727e:	f000 bf57 	b.w	8018130 <__malloc_unlock>
 8017282:	42a3      	cmp	r3, r4
 8017284:	d90b      	bls.n	801729e <_free_r+0x4e>
 8017286:	6821      	ldr	r1, [r4, #0]
 8017288:	1862      	adds	r2, r4, r1
 801728a:	4293      	cmp	r3, r2
 801728c:	bf04      	itt	eq
 801728e:	681a      	ldreq	r2, [r3, #0]
 8017290:	685b      	ldreq	r3, [r3, #4]
 8017292:	6063      	str	r3, [r4, #4]
 8017294:	bf04      	itt	eq
 8017296:	1852      	addeq	r2, r2, r1
 8017298:	6022      	streq	r2, [r4, #0]
 801729a:	602c      	str	r4, [r5, #0]
 801729c:	e7ec      	b.n	8017278 <_free_r+0x28>
 801729e:	461a      	mov	r2, r3
 80172a0:	685b      	ldr	r3, [r3, #4]
 80172a2:	b10b      	cbz	r3, 80172a8 <_free_r+0x58>
 80172a4:	42a3      	cmp	r3, r4
 80172a6:	d9fa      	bls.n	801729e <_free_r+0x4e>
 80172a8:	6811      	ldr	r1, [r2, #0]
 80172aa:	1855      	adds	r5, r2, r1
 80172ac:	42a5      	cmp	r5, r4
 80172ae:	d10b      	bne.n	80172c8 <_free_r+0x78>
 80172b0:	6824      	ldr	r4, [r4, #0]
 80172b2:	4421      	add	r1, r4
 80172b4:	1854      	adds	r4, r2, r1
 80172b6:	42a3      	cmp	r3, r4
 80172b8:	6011      	str	r1, [r2, #0]
 80172ba:	d1dd      	bne.n	8017278 <_free_r+0x28>
 80172bc:	681c      	ldr	r4, [r3, #0]
 80172be:	685b      	ldr	r3, [r3, #4]
 80172c0:	6053      	str	r3, [r2, #4]
 80172c2:	4421      	add	r1, r4
 80172c4:	6011      	str	r1, [r2, #0]
 80172c6:	e7d7      	b.n	8017278 <_free_r+0x28>
 80172c8:	d902      	bls.n	80172d0 <_free_r+0x80>
 80172ca:	230c      	movs	r3, #12
 80172cc:	6003      	str	r3, [r0, #0]
 80172ce:	e7d3      	b.n	8017278 <_free_r+0x28>
 80172d0:	6825      	ldr	r5, [r4, #0]
 80172d2:	1961      	adds	r1, r4, r5
 80172d4:	428b      	cmp	r3, r1
 80172d6:	bf04      	itt	eq
 80172d8:	6819      	ldreq	r1, [r3, #0]
 80172da:	685b      	ldreq	r3, [r3, #4]
 80172dc:	6063      	str	r3, [r4, #4]
 80172de:	bf04      	itt	eq
 80172e0:	1949      	addeq	r1, r1, r5
 80172e2:	6021      	streq	r1, [r4, #0]
 80172e4:	6054      	str	r4, [r2, #4]
 80172e6:	e7c7      	b.n	8017278 <_free_r+0x28>
 80172e8:	b003      	add	sp, #12
 80172ea:	bd30      	pop	{r4, r5, pc}
 80172ec:	200086f4 	.word	0x200086f4

080172f0 <_malloc_r>:
 80172f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80172f2:	1ccd      	adds	r5, r1, #3
 80172f4:	f025 0503 	bic.w	r5, r5, #3
 80172f8:	3508      	adds	r5, #8
 80172fa:	2d0c      	cmp	r5, #12
 80172fc:	bf38      	it	cc
 80172fe:	250c      	movcc	r5, #12
 8017300:	2d00      	cmp	r5, #0
 8017302:	4606      	mov	r6, r0
 8017304:	db01      	blt.n	801730a <_malloc_r+0x1a>
 8017306:	42a9      	cmp	r1, r5
 8017308:	d903      	bls.n	8017312 <_malloc_r+0x22>
 801730a:	230c      	movs	r3, #12
 801730c:	6033      	str	r3, [r6, #0]
 801730e:	2000      	movs	r0, #0
 8017310:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017312:	f000 ff07 	bl	8018124 <__malloc_lock>
 8017316:	4921      	ldr	r1, [pc, #132]	; (801739c <_malloc_r+0xac>)
 8017318:	680a      	ldr	r2, [r1, #0]
 801731a:	4614      	mov	r4, r2
 801731c:	b99c      	cbnz	r4, 8017346 <_malloc_r+0x56>
 801731e:	4f20      	ldr	r7, [pc, #128]	; (80173a0 <_malloc_r+0xb0>)
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	b923      	cbnz	r3, 801732e <_malloc_r+0x3e>
 8017324:	4621      	mov	r1, r4
 8017326:	4630      	mov	r0, r6
 8017328:	f000 fc86 	bl	8017c38 <_sbrk_r>
 801732c:	6038      	str	r0, [r7, #0]
 801732e:	4629      	mov	r1, r5
 8017330:	4630      	mov	r0, r6
 8017332:	f000 fc81 	bl	8017c38 <_sbrk_r>
 8017336:	1c43      	adds	r3, r0, #1
 8017338:	d123      	bne.n	8017382 <_malloc_r+0x92>
 801733a:	230c      	movs	r3, #12
 801733c:	6033      	str	r3, [r6, #0]
 801733e:	4630      	mov	r0, r6
 8017340:	f000 fef6 	bl	8018130 <__malloc_unlock>
 8017344:	e7e3      	b.n	801730e <_malloc_r+0x1e>
 8017346:	6823      	ldr	r3, [r4, #0]
 8017348:	1b5b      	subs	r3, r3, r5
 801734a:	d417      	bmi.n	801737c <_malloc_r+0x8c>
 801734c:	2b0b      	cmp	r3, #11
 801734e:	d903      	bls.n	8017358 <_malloc_r+0x68>
 8017350:	6023      	str	r3, [r4, #0]
 8017352:	441c      	add	r4, r3
 8017354:	6025      	str	r5, [r4, #0]
 8017356:	e004      	b.n	8017362 <_malloc_r+0x72>
 8017358:	6863      	ldr	r3, [r4, #4]
 801735a:	42a2      	cmp	r2, r4
 801735c:	bf0c      	ite	eq
 801735e:	600b      	streq	r3, [r1, #0]
 8017360:	6053      	strne	r3, [r2, #4]
 8017362:	4630      	mov	r0, r6
 8017364:	f000 fee4 	bl	8018130 <__malloc_unlock>
 8017368:	f104 000b 	add.w	r0, r4, #11
 801736c:	1d23      	adds	r3, r4, #4
 801736e:	f020 0007 	bic.w	r0, r0, #7
 8017372:	1ac2      	subs	r2, r0, r3
 8017374:	d0cc      	beq.n	8017310 <_malloc_r+0x20>
 8017376:	1a1b      	subs	r3, r3, r0
 8017378:	50a3      	str	r3, [r4, r2]
 801737a:	e7c9      	b.n	8017310 <_malloc_r+0x20>
 801737c:	4622      	mov	r2, r4
 801737e:	6864      	ldr	r4, [r4, #4]
 8017380:	e7cc      	b.n	801731c <_malloc_r+0x2c>
 8017382:	1cc4      	adds	r4, r0, #3
 8017384:	f024 0403 	bic.w	r4, r4, #3
 8017388:	42a0      	cmp	r0, r4
 801738a:	d0e3      	beq.n	8017354 <_malloc_r+0x64>
 801738c:	1a21      	subs	r1, r4, r0
 801738e:	4630      	mov	r0, r6
 8017390:	f000 fc52 	bl	8017c38 <_sbrk_r>
 8017394:	3001      	adds	r0, #1
 8017396:	d1dd      	bne.n	8017354 <_malloc_r+0x64>
 8017398:	e7cf      	b.n	801733a <_malloc_r+0x4a>
 801739a:	bf00      	nop
 801739c:	200086f4 	.word	0x200086f4
 80173a0:	200086f8 	.word	0x200086f8

080173a4 <__ssputs_r>:
 80173a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80173a8:	688e      	ldr	r6, [r1, #8]
 80173aa:	429e      	cmp	r6, r3
 80173ac:	4682      	mov	sl, r0
 80173ae:	460c      	mov	r4, r1
 80173b0:	4690      	mov	r8, r2
 80173b2:	461f      	mov	r7, r3
 80173b4:	d838      	bhi.n	8017428 <__ssputs_r+0x84>
 80173b6:	898a      	ldrh	r2, [r1, #12]
 80173b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80173bc:	d032      	beq.n	8017424 <__ssputs_r+0x80>
 80173be:	6825      	ldr	r5, [r4, #0]
 80173c0:	6909      	ldr	r1, [r1, #16]
 80173c2:	eba5 0901 	sub.w	r9, r5, r1
 80173c6:	6965      	ldr	r5, [r4, #20]
 80173c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80173cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80173d0:	3301      	adds	r3, #1
 80173d2:	444b      	add	r3, r9
 80173d4:	106d      	asrs	r5, r5, #1
 80173d6:	429d      	cmp	r5, r3
 80173d8:	bf38      	it	cc
 80173da:	461d      	movcc	r5, r3
 80173dc:	0553      	lsls	r3, r2, #21
 80173de:	d531      	bpl.n	8017444 <__ssputs_r+0xa0>
 80173e0:	4629      	mov	r1, r5
 80173e2:	f7ff ff85 	bl	80172f0 <_malloc_r>
 80173e6:	4606      	mov	r6, r0
 80173e8:	b950      	cbnz	r0, 8017400 <__ssputs_r+0x5c>
 80173ea:	230c      	movs	r3, #12
 80173ec:	f8ca 3000 	str.w	r3, [sl]
 80173f0:	89a3      	ldrh	r3, [r4, #12]
 80173f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173f6:	81a3      	strh	r3, [r4, #12]
 80173f8:	f04f 30ff 	mov.w	r0, #4294967295
 80173fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017400:	6921      	ldr	r1, [r4, #16]
 8017402:	464a      	mov	r2, r9
 8017404:	f7ff fd04 	bl	8016e10 <memcpy>
 8017408:	89a3      	ldrh	r3, [r4, #12]
 801740a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801740e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017412:	81a3      	strh	r3, [r4, #12]
 8017414:	6126      	str	r6, [r4, #16]
 8017416:	6165      	str	r5, [r4, #20]
 8017418:	444e      	add	r6, r9
 801741a:	eba5 0509 	sub.w	r5, r5, r9
 801741e:	6026      	str	r6, [r4, #0]
 8017420:	60a5      	str	r5, [r4, #8]
 8017422:	463e      	mov	r6, r7
 8017424:	42be      	cmp	r6, r7
 8017426:	d900      	bls.n	801742a <__ssputs_r+0x86>
 8017428:	463e      	mov	r6, r7
 801742a:	4632      	mov	r2, r6
 801742c:	6820      	ldr	r0, [r4, #0]
 801742e:	4641      	mov	r1, r8
 8017430:	f7ff fcfc 	bl	8016e2c <memmove>
 8017434:	68a3      	ldr	r3, [r4, #8]
 8017436:	6822      	ldr	r2, [r4, #0]
 8017438:	1b9b      	subs	r3, r3, r6
 801743a:	4432      	add	r2, r6
 801743c:	60a3      	str	r3, [r4, #8]
 801743e:	6022      	str	r2, [r4, #0]
 8017440:	2000      	movs	r0, #0
 8017442:	e7db      	b.n	80173fc <__ssputs_r+0x58>
 8017444:	462a      	mov	r2, r5
 8017446:	f000 fe79 	bl	801813c <_realloc_r>
 801744a:	4606      	mov	r6, r0
 801744c:	2800      	cmp	r0, #0
 801744e:	d1e1      	bne.n	8017414 <__ssputs_r+0x70>
 8017450:	6921      	ldr	r1, [r4, #16]
 8017452:	4650      	mov	r0, sl
 8017454:	f7ff fefc 	bl	8017250 <_free_r>
 8017458:	e7c7      	b.n	80173ea <__ssputs_r+0x46>
	...

0801745c <_svfiprintf_r>:
 801745c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017460:	4698      	mov	r8, r3
 8017462:	898b      	ldrh	r3, [r1, #12]
 8017464:	061b      	lsls	r3, r3, #24
 8017466:	b09d      	sub	sp, #116	; 0x74
 8017468:	4607      	mov	r7, r0
 801746a:	460d      	mov	r5, r1
 801746c:	4614      	mov	r4, r2
 801746e:	d50e      	bpl.n	801748e <_svfiprintf_r+0x32>
 8017470:	690b      	ldr	r3, [r1, #16]
 8017472:	b963      	cbnz	r3, 801748e <_svfiprintf_r+0x32>
 8017474:	2140      	movs	r1, #64	; 0x40
 8017476:	f7ff ff3b 	bl	80172f0 <_malloc_r>
 801747a:	6028      	str	r0, [r5, #0]
 801747c:	6128      	str	r0, [r5, #16]
 801747e:	b920      	cbnz	r0, 801748a <_svfiprintf_r+0x2e>
 8017480:	230c      	movs	r3, #12
 8017482:	603b      	str	r3, [r7, #0]
 8017484:	f04f 30ff 	mov.w	r0, #4294967295
 8017488:	e0d1      	b.n	801762e <_svfiprintf_r+0x1d2>
 801748a:	2340      	movs	r3, #64	; 0x40
 801748c:	616b      	str	r3, [r5, #20]
 801748e:	2300      	movs	r3, #0
 8017490:	9309      	str	r3, [sp, #36]	; 0x24
 8017492:	2320      	movs	r3, #32
 8017494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017498:	f8cd 800c 	str.w	r8, [sp, #12]
 801749c:	2330      	movs	r3, #48	; 0x30
 801749e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017648 <_svfiprintf_r+0x1ec>
 80174a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80174a6:	f04f 0901 	mov.w	r9, #1
 80174aa:	4623      	mov	r3, r4
 80174ac:	469a      	mov	sl, r3
 80174ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80174b2:	b10a      	cbz	r2, 80174b8 <_svfiprintf_r+0x5c>
 80174b4:	2a25      	cmp	r2, #37	; 0x25
 80174b6:	d1f9      	bne.n	80174ac <_svfiprintf_r+0x50>
 80174b8:	ebba 0b04 	subs.w	fp, sl, r4
 80174bc:	d00b      	beq.n	80174d6 <_svfiprintf_r+0x7a>
 80174be:	465b      	mov	r3, fp
 80174c0:	4622      	mov	r2, r4
 80174c2:	4629      	mov	r1, r5
 80174c4:	4638      	mov	r0, r7
 80174c6:	f7ff ff6d 	bl	80173a4 <__ssputs_r>
 80174ca:	3001      	adds	r0, #1
 80174cc:	f000 80aa 	beq.w	8017624 <_svfiprintf_r+0x1c8>
 80174d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80174d2:	445a      	add	r2, fp
 80174d4:	9209      	str	r2, [sp, #36]	; 0x24
 80174d6:	f89a 3000 	ldrb.w	r3, [sl]
 80174da:	2b00      	cmp	r3, #0
 80174dc:	f000 80a2 	beq.w	8017624 <_svfiprintf_r+0x1c8>
 80174e0:	2300      	movs	r3, #0
 80174e2:	f04f 32ff 	mov.w	r2, #4294967295
 80174e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80174ea:	f10a 0a01 	add.w	sl, sl, #1
 80174ee:	9304      	str	r3, [sp, #16]
 80174f0:	9307      	str	r3, [sp, #28]
 80174f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80174f6:	931a      	str	r3, [sp, #104]	; 0x68
 80174f8:	4654      	mov	r4, sl
 80174fa:	2205      	movs	r2, #5
 80174fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017500:	4851      	ldr	r0, [pc, #324]	; (8017648 <_svfiprintf_r+0x1ec>)
 8017502:	f7e8 fe7d 	bl	8000200 <memchr>
 8017506:	9a04      	ldr	r2, [sp, #16]
 8017508:	b9d8      	cbnz	r0, 8017542 <_svfiprintf_r+0xe6>
 801750a:	06d0      	lsls	r0, r2, #27
 801750c:	bf44      	itt	mi
 801750e:	2320      	movmi	r3, #32
 8017510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017514:	0711      	lsls	r1, r2, #28
 8017516:	bf44      	itt	mi
 8017518:	232b      	movmi	r3, #43	; 0x2b
 801751a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801751e:	f89a 3000 	ldrb.w	r3, [sl]
 8017522:	2b2a      	cmp	r3, #42	; 0x2a
 8017524:	d015      	beq.n	8017552 <_svfiprintf_r+0xf6>
 8017526:	9a07      	ldr	r2, [sp, #28]
 8017528:	4654      	mov	r4, sl
 801752a:	2000      	movs	r0, #0
 801752c:	f04f 0c0a 	mov.w	ip, #10
 8017530:	4621      	mov	r1, r4
 8017532:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017536:	3b30      	subs	r3, #48	; 0x30
 8017538:	2b09      	cmp	r3, #9
 801753a:	d94e      	bls.n	80175da <_svfiprintf_r+0x17e>
 801753c:	b1b0      	cbz	r0, 801756c <_svfiprintf_r+0x110>
 801753e:	9207      	str	r2, [sp, #28]
 8017540:	e014      	b.n	801756c <_svfiprintf_r+0x110>
 8017542:	eba0 0308 	sub.w	r3, r0, r8
 8017546:	fa09 f303 	lsl.w	r3, r9, r3
 801754a:	4313      	orrs	r3, r2
 801754c:	9304      	str	r3, [sp, #16]
 801754e:	46a2      	mov	sl, r4
 8017550:	e7d2      	b.n	80174f8 <_svfiprintf_r+0x9c>
 8017552:	9b03      	ldr	r3, [sp, #12]
 8017554:	1d19      	adds	r1, r3, #4
 8017556:	681b      	ldr	r3, [r3, #0]
 8017558:	9103      	str	r1, [sp, #12]
 801755a:	2b00      	cmp	r3, #0
 801755c:	bfbb      	ittet	lt
 801755e:	425b      	neglt	r3, r3
 8017560:	f042 0202 	orrlt.w	r2, r2, #2
 8017564:	9307      	strge	r3, [sp, #28]
 8017566:	9307      	strlt	r3, [sp, #28]
 8017568:	bfb8      	it	lt
 801756a:	9204      	strlt	r2, [sp, #16]
 801756c:	7823      	ldrb	r3, [r4, #0]
 801756e:	2b2e      	cmp	r3, #46	; 0x2e
 8017570:	d10c      	bne.n	801758c <_svfiprintf_r+0x130>
 8017572:	7863      	ldrb	r3, [r4, #1]
 8017574:	2b2a      	cmp	r3, #42	; 0x2a
 8017576:	d135      	bne.n	80175e4 <_svfiprintf_r+0x188>
 8017578:	9b03      	ldr	r3, [sp, #12]
 801757a:	1d1a      	adds	r2, r3, #4
 801757c:	681b      	ldr	r3, [r3, #0]
 801757e:	9203      	str	r2, [sp, #12]
 8017580:	2b00      	cmp	r3, #0
 8017582:	bfb8      	it	lt
 8017584:	f04f 33ff 	movlt.w	r3, #4294967295
 8017588:	3402      	adds	r4, #2
 801758a:	9305      	str	r3, [sp, #20]
 801758c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017658 <_svfiprintf_r+0x1fc>
 8017590:	7821      	ldrb	r1, [r4, #0]
 8017592:	2203      	movs	r2, #3
 8017594:	4650      	mov	r0, sl
 8017596:	f7e8 fe33 	bl	8000200 <memchr>
 801759a:	b140      	cbz	r0, 80175ae <_svfiprintf_r+0x152>
 801759c:	2340      	movs	r3, #64	; 0x40
 801759e:	eba0 000a 	sub.w	r0, r0, sl
 80175a2:	fa03 f000 	lsl.w	r0, r3, r0
 80175a6:	9b04      	ldr	r3, [sp, #16]
 80175a8:	4303      	orrs	r3, r0
 80175aa:	3401      	adds	r4, #1
 80175ac:	9304      	str	r3, [sp, #16]
 80175ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80175b2:	4826      	ldr	r0, [pc, #152]	; (801764c <_svfiprintf_r+0x1f0>)
 80175b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80175b8:	2206      	movs	r2, #6
 80175ba:	f7e8 fe21 	bl	8000200 <memchr>
 80175be:	2800      	cmp	r0, #0
 80175c0:	d038      	beq.n	8017634 <_svfiprintf_r+0x1d8>
 80175c2:	4b23      	ldr	r3, [pc, #140]	; (8017650 <_svfiprintf_r+0x1f4>)
 80175c4:	bb1b      	cbnz	r3, 801760e <_svfiprintf_r+0x1b2>
 80175c6:	9b03      	ldr	r3, [sp, #12]
 80175c8:	3307      	adds	r3, #7
 80175ca:	f023 0307 	bic.w	r3, r3, #7
 80175ce:	3308      	adds	r3, #8
 80175d0:	9303      	str	r3, [sp, #12]
 80175d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175d4:	4433      	add	r3, r6
 80175d6:	9309      	str	r3, [sp, #36]	; 0x24
 80175d8:	e767      	b.n	80174aa <_svfiprintf_r+0x4e>
 80175da:	fb0c 3202 	mla	r2, ip, r2, r3
 80175de:	460c      	mov	r4, r1
 80175e0:	2001      	movs	r0, #1
 80175e2:	e7a5      	b.n	8017530 <_svfiprintf_r+0xd4>
 80175e4:	2300      	movs	r3, #0
 80175e6:	3401      	adds	r4, #1
 80175e8:	9305      	str	r3, [sp, #20]
 80175ea:	4619      	mov	r1, r3
 80175ec:	f04f 0c0a 	mov.w	ip, #10
 80175f0:	4620      	mov	r0, r4
 80175f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80175f6:	3a30      	subs	r2, #48	; 0x30
 80175f8:	2a09      	cmp	r2, #9
 80175fa:	d903      	bls.n	8017604 <_svfiprintf_r+0x1a8>
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d0c5      	beq.n	801758c <_svfiprintf_r+0x130>
 8017600:	9105      	str	r1, [sp, #20]
 8017602:	e7c3      	b.n	801758c <_svfiprintf_r+0x130>
 8017604:	fb0c 2101 	mla	r1, ip, r1, r2
 8017608:	4604      	mov	r4, r0
 801760a:	2301      	movs	r3, #1
 801760c:	e7f0      	b.n	80175f0 <_svfiprintf_r+0x194>
 801760e:	ab03      	add	r3, sp, #12
 8017610:	9300      	str	r3, [sp, #0]
 8017612:	462a      	mov	r2, r5
 8017614:	4b0f      	ldr	r3, [pc, #60]	; (8017654 <_svfiprintf_r+0x1f8>)
 8017616:	a904      	add	r1, sp, #16
 8017618:	4638      	mov	r0, r7
 801761a:	f3af 8000 	nop.w
 801761e:	1c42      	adds	r2, r0, #1
 8017620:	4606      	mov	r6, r0
 8017622:	d1d6      	bne.n	80175d2 <_svfiprintf_r+0x176>
 8017624:	89ab      	ldrh	r3, [r5, #12]
 8017626:	065b      	lsls	r3, r3, #25
 8017628:	f53f af2c 	bmi.w	8017484 <_svfiprintf_r+0x28>
 801762c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801762e:	b01d      	add	sp, #116	; 0x74
 8017630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017634:	ab03      	add	r3, sp, #12
 8017636:	9300      	str	r3, [sp, #0]
 8017638:	462a      	mov	r2, r5
 801763a:	4b06      	ldr	r3, [pc, #24]	; (8017654 <_svfiprintf_r+0x1f8>)
 801763c:	a904      	add	r1, sp, #16
 801763e:	4638      	mov	r0, r7
 8017640:	f000 f9d4 	bl	80179ec <_printf_i>
 8017644:	e7eb      	b.n	801761e <_svfiprintf_r+0x1c2>
 8017646:	bf00      	nop
 8017648:	0801bfd8 	.word	0x0801bfd8
 801764c:	0801bfe2 	.word	0x0801bfe2
 8017650:	00000000 	.word	0x00000000
 8017654:	080173a5 	.word	0x080173a5
 8017658:	0801bfde 	.word	0x0801bfde

0801765c <__sfputc_r>:
 801765c:	6893      	ldr	r3, [r2, #8]
 801765e:	3b01      	subs	r3, #1
 8017660:	2b00      	cmp	r3, #0
 8017662:	b410      	push	{r4}
 8017664:	6093      	str	r3, [r2, #8]
 8017666:	da08      	bge.n	801767a <__sfputc_r+0x1e>
 8017668:	6994      	ldr	r4, [r2, #24]
 801766a:	42a3      	cmp	r3, r4
 801766c:	db01      	blt.n	8017672 <__sfputc_r+0x16>
 801766e:	290a      	cmp	r1, #10
 8017670:	d103      	bne.n	801767a <__sfputc_r+0x1e>
 8017672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017676:	f000 bb33 	b.w	8017ce0 <__swbuf_r>
 801767a:	6813      	ldr	r3, [r2, #0]
 801767c:	1c58      	adds	r0, r3, #1
 801767e:	6010      	str	r0, [r2, #0]
 8017680:	7019      	strb	r1, [r3, #0]
 8017682:	4608      	mov	r0, r1
 8017684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017688:	4770      	bx	lr

0801768a <__sfputs_r>:
 801768a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801768c:	4606      	mov	r6, r0
 801768e:	460f      	mov	r7, r1
 8017690:	4614      	mov	r4, r2
 8017692:	18d5      	adds	r5, r2, r3
 8017694:	42ac      	cmp	r4, r5
 8017696:	d101      	bne.n	801769c <__sfputs_r+0x12>
 8017698:	2000      	movs	r0, #0
 801769a:	e007      	b.n	80176ac <__sfputs_r+0x22>
 801769c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80176a0:	463a      	mov	r2, r7
 80176a2:	4630      	mov	r0, r6
 80176a4:	f7ff ffda 	bl	801765c <__sfputc_r>
 80176a8:	1c43      	adds	r3, r0, #1
 80176aa:	d1f3      	bne.n	8017694 <__sfputs_r+0xa>
 80176ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080176b0 <_vfiprintf_r>:
 80176b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80176b4:	460d      	mov	r5, r1
 80176b6:	b09d      	sub	sp, #116	; 0x74
 80176b8:	4614      	mov	r4, r2
 80176ba:	4698      	mov	r8, r3
 80176bc:	4606      	mov	r6, r0
 80176be:	b118      	cbz	r0, 80176c8 <_vfiprintf_r+0x18>
 80176c0:	6983      	ldr	r3, [r0, #24]
 80176c2:	b90b      	cbnz	r3, 80176c8 <_vfiprintf_r+0x18>
 80176c4:	f7ff fd0a 	bl	80170dc <__sinit>
 80176c8:	4b89      	ldr	r3, [pc, #548]	; (80178f0 <_vfiprintf_r+0x240>)
 80176ca:	429d      	cmp	r5, r3
 80176cc:	d11b      	bne.n	8017706 <_vfiprintf_r+0x56>
 80176ce:	6875      	ldr	r5, [r6, #4]
 80176d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176d2:	07d9      	lsls	r1, r3, #31
 80176d4:	d405      	bmi.n	80176e2 <_vfiprintf_r+0x32>
 80176d6:	89ab      	ldrh	r3, [r5, #12]
 80176d8:	059a      	lsls	r2, r3, #22
 80176da:	d402      	bmi.n	80176e2 <_vfiprintf_r+0x32>
 80176dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176de:	f7ff fdad 	bl	801723c <__retarget_lock_acquire_recursive>
 80176e2:	89ab      	ldrh	r3, [r5, #12]
 80176e4:	071b      	lsls	r3, r3, #28
 80176e6:	d501      	bpl.n	80176ec <_vfiprintf_r+0x3c>
 80176e8:	692b      	ldr	r3, [r5, #16]
 80176ea:	b9eb      	cbnz	r3, 8017728 <_vfiprintf_r+0x78>
 80176ec:	4629      	mov	r1, r5
 80176ee:	4630      	mov	r0, r6
 80176f0:	f000 fb5a 	bl	8017da8 <__swsetup_r>
 80176f4:	b1c0      	cbz	r0, 8017728 <_vfiprintf_r+0x78>
 80176f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176f8:	07dc      	lsls	r4, r3, #31
 80176fa:	d50e      	bpl.n	801771a <_vfiprintf_r+0x6a>
 80176fc:	f04f 30ff 	mov.w	r0, #4294967295
 8017700:	b01d      	add	sp, #116	; 0x74
 8017702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017706:	4b7b      	ldr	r3, [pc, #492]	; (80178f4 <_vfiprintf_r+0x244>)
 8017708:	429d      	cmp	r5, r3
 801770a:	d101      	bne.n	8017710 <_vfiprintf_r+0x60>
 801770c:	68b5      	ldr	r5, [r6, #8]
 801770e:	e7df      	b.n	80176d0 <_vfiprintf_r+0x20>
 8017710:	4b79      	ldr	r3, [pc, #484]	; (80178f8 <_vfiprintf_r+0x248>)
 8017712:	429d      	cmp	r5, r3
 8017714:	bf08      	it	eq
 8017716:	68f5      	ldreq	r5, [r6, #12]
 8017718:	e7da      	b.n	80176d0 <_vfiprintf_r+0x20>
 801771a:	89ab      	ldrh	r3, [r5, #12]
 801771c:	0598      	lsls	r0, r3, #22
 801771e:	d4ed      	bmi.n	80176fc <_vfiprintf_r+0x4c>
 8017720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017722:	f7ff fd8c 	bl	801723e <__retarget_lock_release_recursive>
 8017726:	e7e9      	b.n	80176fc <_vfiprintf_r+0x4c>
 8017728:	2300      	movs	r3, #0
 801772a:	9309      	str	r3, [sp, #36]	; 0x24
 801772c:	2320      	movs	r3, #32
 801772e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017732:	f8cd 800c 	str.w	r8, [sp, #12]
 8017736:	2330      	movs	r3, #48	; 0x30
 8017738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178fc <_vfiprintf_r+0x24c>
 801773c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017740:	f04f 0901 	mov.w	r9, #1
 8017744:	4623      	mov	r3, r4
 8017746:	469a      	mov	sl, r3
 8017748:	f813 2b01 	ldrb.w	r2, [r3], #1
 801774c:	b10a      	cbz	r2, 8017752 <_vfiprintf_r+0xa2>
 801774e:	2a25      	cmp	r2, #37	; 0x25
 8017750:	d1f9      	bne.n	8017746 <_vfiprintf_r+0x96>
 8017752:	ebba 0b04 	subs.w	fp, sl, r4
 8017756:	d00b      	beq.n	8017770 <_vfiprintf_r+0xc0>
 8017758:	465b      	mov	r3, fp
 801775a:	4622      	mov	r2, r4
 801775c:	4629      	mov	r1, r5
 801775e:	4630      	mov	r0, r6
 8017760:	f7ff ff93 	bl	801768a <__sfputs_r>
 8017764:	3001      	adds	r0, #1
 8017766:	f000 80aa 	beq.w	80178be <_vfiprintf_r+0x20e>
 801776a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801776c:	445a      	add	r2, fp
 801776e:	9209      	str	r2, [sp, #36]	; 0x24
 8017770:	f89a 3000 	ldrb.w	r3, [sl]
 8017774:	2b00      	cmp	r3, #0
 8017776:	f000 80a2 	beq.w	80178be <_vfiprintf_r+0x20e>
 801777a:	2300      	movs	r3, #0
 801777c:	f04f 32ff 	mov.w	r2, #4294967295
 8017780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017784:	f10a 0a01 	add.w	sl, sl, #1
 8017788:	9304      	str	r3, [sp, #16]
 801778a:	9307      	str	r3, [sp, #28]
 801778c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017790:	931a      	str	r3, [sp, #104]	; 0x68
 8017792:	4654      	mov	r4, sl
 8017794:	2205      	movs	r2, #5
 8017796:	f814 1b01 	ldrb.w	r1, [r4], #1
 801779a:	4858      	ldr	r0, [pc, #352]	; (80178fc <_vfiprintf_r+0x24c>)
 801779c:	f7e8 fd30 	bl	8000200 <memchr>
 80177a0:	9a04      	ldr	r2, [sp, #16]
 80177a2:	b9d8      	cbnz	r0, 80177dc <_vfiprintf_r+0x12c>
 80177a4:	06d1      	lsls	r1, r2, #27
 80177a6:	bf44      	itt	mi
 80177a8:	2320      	movmi	r3, #32
 80177aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177ae:	0713      	lsls	r3, r2, #28
 80177b0:	bf44      	itt	mi
 80177b2:	232b      	movmi	r3, #43	; 0x2b
 80177b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80177b8:	f89a 3000 	ldrb.w	r3, [sl]
 80177bc:	2b2a      	cmp	r3, #42	; 0x2a
 80177be:	d015      	beq.n	80177ec <_vfiprintf_r+0x13c>
 80177c0:	9a07      	ldr	r2, [sp, #28]
 80177c2:	4654      	mov	r4, sl
 80177c4:	2000      	movs	r0, #0
 80177c6:	f04f 0c0a 	mov.w	ip, #10
 80177ca:	4621      	mov	r1, r4
 80177cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80177d0:	3b30      	subs	r3, #48	; 0x30
 80177d2:	2b09      	cmp	r3, #9
 80177d4:	d94e      	bls.n	8017874 <_vfiprintf_r+0x1c4>
 80177d6:	b1b0      	cbz	r0, 8017806 <_vfiprintf_r+0x156>
 80177d8:	9207      	str	r2, [sp, #28]
 80177da:	e014      	b.n	8017806 <_vfiprintf_r+0x156>
 80177dc:	eba0 0308 	sub.w	r3, r0, r8
 80177e0:	fa09 f303 	lsl.w	r3, r9, r3
 80177e4:	4313      	orrs	r3, r2
 80177e6:	9304      	str	r3, [sp, #16]
 80177e8:	46a2      	mov	sl, r4
 80177ea:	e7d2      	b.n	8017792 <_vfiprintf_r+0xe2>
 80177ec:	9b03      	ldr	r3, [sp, #12]
 80177ee:	1d19      	adds	r1, r3, #4
 80177f0:	681b      	ldr	r3, [r3, #0]
 80177f2:	9103      	str	r1, [sp, #12]
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	bfbb      	ittet	lt
 80177f8:	425b      	neglt	r3, r3
 80177fa:	f042 0202 	orrlt.w	r2, r2, #2
 80177fe:	9307      	strge	r3, [sp, #28]
 8017800:	9307      	strlt	r3, [sp, #28]
 8017802:	bfb8      	it	lt
 8017804:	9204      	strlt	r2, [sp, #16]
 8017806:	7823      	ldrb	r3, [r4, #0]
 8017808:	2b2e      	cmp	r3, #46	; 0x2e
 801780a:	d10c      	bne.n	8017826 <_vfiprintf_r+0x176>
 801780c:	7863      	ldrb	r3, [r4, #1]
 801780e:	2b2a      	cmp	r3, #42	; 0x2a
 8017810:	d135      	bne.n	801787e <_vfiprintf_r+0x1ce>
 8017812:	9b03      	ldr	r3, [sp, #12]
 8017814:	1d1a      	adds	r2, r3, #4
 8017816:	681b      	ldr	r3, [r3, #0]
 8017818:	9203      	str	r2, [sp, #12]
 801781a:	2b00      	cmp	r3, #0
 801781c:	bfb8      	it	lt
 801781e:	f04f 33ff 	movlt.w	r3, #4294967295
 8017822:	3402      	adds	r4, #2
 8017824:	9305      	str	r3, [sp, #20]
 8017826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801790c <_vfiprintf_r+0x25c>
 801782a:	7821      	ldrb	r1, [r4, #0]
 801782c:	2203      	movs	r2, #3
 801782e:	4650      	mov	r0, sl
 8017830:	f7e8 fce6 	bl	8000200 <memchr>
 8017834:	b140      	cbz	r0, 8017848 <_vfiprintf_r+0x198>
 8017836:	2340      	movs	r3, #64	; 0x40
 8017838:	eba0 000a 	sub.w	r0, r0, sl
 801783c:	fa03 f000 	lsl.w	r0, r3, r0
 8017840:	9b04      	ldr	r3, [sp, #16]
 8017842:	4303      	orrs	r3, r0
 8017844:	3401      	adds	r4, #1
 8017846:	9304      	str	r3, [sp, #16]
 8017848:	f814 1b01 	ldrb.w	r1, [r4], #1
 801784c:	482c      	ldr	r0, [pc, #176]	; (8017900 <_vfiprintf_r+0x250>)
 801784e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017852:	2206      	movs	r2, #6
 8017854:	f7e8 fcd4 	bl	8000200 <memchr>
 8017858:	2800      	cmp	r0, #0
 801785a:	d03f      	beq.n	80178dc <_vfiprintf_r+0x22c>
 801785c:	4b29      	ldr	r3, [pc, #164]	; (8017904 <_vfiprintf_r+0x254>)
 801785e:	bb1b      	cbnz	r3, 80178a8 <_vfiprintf_r+0x1f8>
 8017860:	9b03      	ldr	r3, [sp, #12]
 8017862:	3307      	adds	r3, #7
 8017864:	f023 0307 	bic.w	r3, r3, #7
 8017868:	3308      	adds	r3, #8
 801786a:	9303      	str	r3, [sp, #12]
 801786c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801786e:	443b      	add	r3, r7
 8017870:	9309      	str	r3, [sp, #36]	; 0x24
 8017872:	e767      	b.n	8017744 <_vfiprintf_r+0x94>
 8017874:	fb0c 3202 	mla	r2, ip, r2, r3
 8017878:	460c      	mov	r4, r1
 801787a:	2001      	movs	r0, #1
 801787c:	e7a5      	b.n	80177ca <_vfiprintf_r+0x11a>
 801787e:	2300      	movs	r3, #0
 8017880:	3401      	adds	r4, #1
 8017882:	9305      	str	r3, [sp, #20]
 8017884:	4619      	mov	r1, r3
 8017886:	f04f 0c0a 	mov.w	ip, #10
 801788a:	4620      	mov	r0, r4
 801788c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017890:	3a30      	subs	r2, #48	; 0x30
 8017892:	2a09      	cmp	r2, #9
 8017894:	d903      	bls.n	801789e <_vfiprintf_r+0x1ee>
 8017896:	2b00      	cmp	r3, #0
 8017898:	d0c5      	beq.n	8017826 <_vfiprintf_r+0x176>
 801789a:	9105      	str	r1, [sp, #20]
 801789c:	e7c3      	b.n	8017826 <_vfiprintf_r+0x176>
 801789e:	fb0c 2101 	mla	r1, ip, r1, r2
 80178a2:	4604      	mov	r4, r0
 80178a4:	2301      	movs	r3, #1
 80178a6:	e7f0      	b.n	801788a <_vfiprintf_r+0x1da>
 80178a8:	ab03      	add	r3, sp, #12
 80178aa:	9300      	str	r3, [sp, #0]
 80178ac:	462a      	mov	r2, r5
 80178ae:	4b16      	ldr	r3, [pc, #88]	; (8017908 <_vfiprintf_r+0x258>)
 80178b0:	a904      	add	r1, sp, #16
 80178b2:	4630      	mov	r0, r6
 80178b4:	f3af 8000 	nop.w
 80178b8:	4607      	mov	r7, r0
 80178ba:	1c78      	adds	r0, r7, #1
 80178bc:	d1d6      	bne.n	801786c <_vfiprintf_r+0x1bc>
 80178be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80178c0:	07d9      	lsls	r1, r3, #31
 80178c2:	d405      	bmi.n	80178d0 <_vfiprintf_r+0x220>
 80178c4:	89ab      	ldrh	r3, [r5, #12]
 80178c6:	059a      	lsls	r2, r3, #22
 80178c8:	d402      	bmi.n	80178d0 <_vfiprintf_r+0x220>
 80178ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80178cc:	f7ff fcb7 	bl	801723e <__retarget_lock_release_recursive>
 80178d0:	89ab      	ldrh	r3, [r5, #12]
 80178d2:	065b      	lsls	r3, r3, #25
 80178d4:	f53f af12 	bmi.w	80176fc <_vfiprintf_r+0x4c>
 80178d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80178da:	e711      	b.n	8017700 <_vfiprintf_r+0x50>
 80178dc:	ab03      	add	r3, sp, #12
 80178de:	9300      	str	r3, [sp, #0]
 80178e0:	462a      	mov	r2, r5
 80178e2:	4b09      	ldr	r3, [pc, #36]	; (8017908 <_vfiprintf_r+0x258>)
 80178e4:	a904      	add	r1, sp, #16
 80178e6:	4630      	mov	r0, r6
 80178e8:	f000 f880 	bl	80179ec <_printf_i>
 80178ec:	e7e4      	b.n	80178b8 <_vfiprintf_r+0x208>
 80178ee:	bf00      	nop
 80178f0:	0801bf98 	.word	0x0801bf98
 80178f4:	0801bfb8 	.word	0x0801bfb8
 80178f8:	0801bf78 	.word	0x0801bf78
 80178fc:	0801bfd8 	.word	0x0801bfd8
 8017900:	0801bfe2 	.word	0x0801bfe2
 8017904:	00000000 	.word	0x00000000
 8017908:	0801768b 	.word	0x0801768b
 801790c:	0801bfde 	.word	0x0801bfde

08017910 <_printf_common>:
 8017910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017914:	4616      	mov	r6, r2
 8017916:	4699      	mov	r9, r3
 8017918:	688a      	ldr	r2, [r1, #8]
 801791a:	690b      	ldr	r3, [r1, #16]
 801791c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017920:	4293      	cmp	r3, r2
 8017922:	bfb8      	it	lt
 8017924:	4613      	movlt	r3, r2
 8017926:	6033      	str	r3, [r6, #0]
 8017928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801792c:	4607      	mov	r7, r0
 801792e:	460c      	mov	r4, r1
 8017930:	b10a      	cbz	r2, 8017936 <_printf_common+0x26>
 8017932:	3301      	adds	r3, #1
 8017934:	6033      	str	r3, [r6, #0]
 8017936:	6823      	ldr	r3, [r4, #0]
 8017938:	0699      	lsls	r1, r3, #26
 801793a:	bf42      	ittt	mi
 801793c:	6833      	ldrmi	r3, [r6, #0]
 801793e:	3302      	addmi	r3, #2
 8017940:	6033      	strmi	r3, [r6, #0]
 8017942:	6825      	ldr	r5, [r4, #0]
 8017944:	f015 0506 	ands.w	r5, r5, #6
 8017948:	d106      	bne.n	8017958 <_printf_common+0x48>
 801794a:	f104 0a19 	add.w	sl, r4, #25
 801794e:	68e3      	ldr	r3, [r4, #12]
 8017950:	6832      	ldr	r2, [r6, #0]
 8017952:	1a9b      	subs	r3, r3, r2
 8017954:	42ab      	cmp	r3, r5
 8017956:	dc26      	bgt.n	80179a6 <_printf_common+0x96>
 8017958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801795c:	1e13      	subs	r3, r2, #0
 801795e:	6822      	ldr	r2, [r4, #0]
 8017960:	bf18      	it	ne
 8017962:	2301      	movne	r3, #1
 8017964:	0692      	lsls	r2, r2, #26
 8017966:	d42b      	bmi.n	80179c0 <_printf_common+0xb0>
 8017968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801796c:	4649      	mov	r1, r9
 801796e:	4638      	mov	r0, r7
 8017970:	47c0      	blx	r8
 8017972:	3001      	adds	r0, #1
 8017974:	d01e      	beq.n	80179b4 <_printf_common+0xa4>
 8017976:	6823      	ldr	r3, [r4, #0]
 8017978:	68e5      	ldr	r5, [r4, #12]
 801797a:	6832      	ldr	r2, [r6, #0]
 801797c:	f003 0306 	and.w	r3, r3, #6
 8017980:	2b04      	cmp	r3, #4
 8017982:	bf08      	it	eq
 8017984:	1aad      	subeq	r5, r5, r2
 8017986:	68a3      	ldr	r3, [r4, #8]
 8017988:	6922      	ldr	r2, [r4, #16]
 801798a:	bf0c      	ite	eq
 801798c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017990:	2500      	movne	r5, #0
 8017992:	4293      	cmp	r3, r2
 8017994:	bfc4      	itt	gt
 8017996:	1a9b      	subgt	r3, r3, r2
 8017998:	18ed      	addgt	r5, r5, r3
 801799a:	2600      	movs	r6, #0
 801799c:	341a      	adds	r4, #26
 801799e:	42b5      	cmp	r5, r6
 80179a0:	d11a      	bne.n	80179d8 <_printf_common+0xc8>
 80179a2:	2000      	movs	r0, #0
 80179a4:	e008      	b.n	80179b8 <_printf_common+0xa8>
 80179a6:	2301      	movs	r3, #1
 80179a8:	4652      	mov	r2, sl
 80179aa:	4649      	mov	r1, r9
 80179ac:	4638      	mov	r0, r7
 80179ae:	47c0      	blx	r8
 80179b0:	3001      	adds	r0, #1
 80179b2:	d103      	bne.n	80179bc <_printf_common+0xac>
 80179b4:	f04f 30ff 	mov.w	r0, #4294967295
 80179b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80179bc:	3501      	adds	r5, #1
 80179be:	e7c6      	b.n	801794e <_printf_common+0x3e>
 80179c0:	18e1      	adds	r1, r4, r3
 80179c2:	1c5a      	adds	r2, r3, #1
 80179c4:	2030      	movs	r0, #48	; 0x30
 80179c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80179ca:	4422      	add	r2, r4
 80179cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80179d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80179d4:	3302      	adds	r3, #2
 80179d6:	e7c7      	b.n	8017968 <_printf_common+0x58>
 80179d8:	2301      	movs	r3, #1
 80179da:	4622      	mov	r2, r4
 80179dc:	4649      	mov	r1, r9
 80179de:	4638      	mov	r0, r7
 80179e0:	47c0      	blx	r8
 80179e2:	3001      	adds	r0, #1
 80179e4:	d0e6      	beq.n	80179b4 <_printf_common+0xa4>
 80179e6:	3601      	adds	r6, #1
 80179e8:	e7d9      	b.n	801799e <_printf_common+0x8e>
	...

080179ec <_printf_i>:
 80179ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179f0:	460c      	mov	r4, r1
 80179f2:	4691      	mov	r9, r2
 80179f4:	7e27      	ldrb	r7, [r4, #24]
 80179f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80179f8:	2f78      	cmp	r7, #120	; 0x78
 80179fa:	4680      	mov	r8, r0
 80179fc:	469a      	mov	sl, r3
 80179fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017a02:	d807      	bhi.n	8017a14 <_printf_i+0x28>
 8017a04:	2f62      	cmp	r7, #98	; 0x62
 8017a06:	d80a      	bhi.n	8017a1e <_printf_i+0x32>
 8017a08:	2f00      	cmp	r7, #0
 8017a0a:	f000 80d8 	beq.w	8017bbe <_printf_i+0x1d2>
 8017a0e:	2f58      	cmp	r7, #88	; 0x58
 8017a10:	f000 80a3 	beq.w	8017b5a <_printf_i+0x16e>
 8017a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017a1c:	e03a      	b.n	8017a94 <_printf_i+0xa8>
 8017a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017a22:	2b15      	cmp	r3, #21
 8017a24:	d8f6      	bhi.n	8017a14 <_printf_i+0x28>
 8017a26:	a001      	add	r0, pc, #4	; (adr r0, 8017a2c <_printf_i+0x40>)
 8017a28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8017a2c:	08017a85 	.word	0x08017a85
 8017a30:	08017a99 	.word	0x08017a99
 8017a34:	08017a15 	.word	0x08017a15
 8017a38:	08017a15 	.word	0x08017a15
 8017a3c:	08017a15 	.word	0x08017a15
 8017a40:	08017a15 	.word	0x08017a15
 8017a44:	08017a99 	.word	0x08017a99
 8017a48:	08017a15 	.word	0x08017a15
 8017a4c:	08017a15 	.word	0x08017a15
 8017a50:	08017a15 	.word	0x08017a15
 8017a54:	08017a15 	.word	0x08017a15
 8017a58:	08017ba5 	.word	0x08017ba5
 8017a5c:	08017ac9 	.word	0x08017ac9
 8017a60:	08017b87 	.word	0x08017b87
 8017a64:	08017a15 	.word	0x08017a15
 8017a68:	08017a15 	.word	0x08017a15
 8017a6c:	08017bc7 	.word	0x08017bc7
 8017a70:	08017a15 	.word	0x08017a15
 8017a74:	08017ac9 	.word	0x08017ac9
 8017a78:	08017a15 	.word	0x08017a15
 8017a7c:	08017a15 	.word	0x08017a15
 8017a80:	08017b8f 	.word	0x08017b8f
 8017a84:	680b      	ldr	r3, [r1, #0]
 8017a86:	1d1a      	adds	r2, r3, #4
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	600a      	str	r2, [r1, #0]
 8017a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8017a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a94:	2301      	movs	r3, #1
 8017a96:	e0a3      	b.n	8017be0 <_printf_i+0x1f4>
 8017a98:	6825      	ldr	r5, [r4, #0]
 8017a9a:	6808      	ldr	r0, [r1, #0]
 8017a9c:	062e      	lsls	r6, r5, #24
 8017a9e:	f100 0304 	add.w	r3, r0, #4
 8017aa2:	d50a      	bpl.n	8017aba <_printf_i+0xce>
 8017aa4:	6805      	ldr	r5, [r0, #0]
 8017aa6:	600b      	str	r3, [r1, #0]
 8017aa8:	2d00      	cmp	r5, #0
 8017aaa:	da03      	bge.n	8017ab4 <_printf_i+0xc8>
 8017aac:	232d      	movs	r3, #45	; 0x2d
 8017aae:	426d      	negs	r5, r5
 8017ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ab4:	485e      	ldr	r0, [pc, #376]	; (8017c30 <_printf_i+0x244>)
 8017ab6:	230a      	movs	r3, #10
 8017ab8:	e019      	b.n	8017aee <_printf_i+0x102>
 8017aba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8017abe:	6805      	ldr	r5, [r0, #0]
 8017ac0:	600b      	str	r3, [r1, #0]
 8017ac2:	bf18      	it	ne
 8017ac4:	b22d      	sxthne	r5, r5
 8017ac6:	e7ef      	b.n	8017aa8 <_printf_i+0xbc>
 8017ac8:	680b      	ldr	r3, [r1, #0]
 8017aca:	6825      	ldr	r5, [r4, #0]
 8017acc:	1d18      	adds	r0, r3, #4
 8017ace:	6008      	str	r0, [r1, #0]
 8017ad0:	0628      	lsls	r0, r5, #24
 8017ad2:	d501      	bpl.n	8017ad8 <_printf_i+0xec>
 8017ad4:	681d      	ldr	r5, [r3, #0]
 8017ad6:	e002      	b.n	8017ade <_printf_i+0xf2>
 8017ad8:	0669      	lsls	r1, r5, #25
 8017ada:	d5fb      	bpl.n	8017ad4 <_printf_i+0xe8>
 8017adc:	881d      	ldrh	r5, [r3, #0]
 8017ade:	4854      	ldr	r0, [pc, #336]	; (8017c30 <_printf_i+0x244>)
 8017ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8017ae2:	bf0c      	ite	eq
 8017ae4:	2308      	moveq	r3, #8
 8017ae6:	230a      	movne	r3, #10
 8017ae8:	2100      	movs	r1, #0
 8017aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aee:	6866      	ldr	r6, [r4, #4]
 8017af0:	60a6      	str	r6, [r4, #8]
 8017af2:	2e00      	cmp	r6, #0
 8017af4:	bfa2      	ittt	ge
 8017af6:	6821      	ldrge	r1, [r4, #0]
 8017af8:	f021 0104 	bicge.w	r1, r1, #4
 8017afc:	6021      	strge	r1, [r4, #0]
 8017afe:	b90d      	cbnz	r5, 8017b04 <_printf_i+0x118>
 8017b00:	2e00      	cmp	r6, #0
 8017b02:	d04d      	beq.n	8017ba0 <_printf_i+0x1b4>
 8017b04:	4616      	mov	r6, r2
 8017b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8017b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8017b0e:	5dc7      	ldrb	r7, [r0, r7]
 8017b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017b14:	462f      	mov	r7, r5
 8017b16:	42bb      	cmp	r3, r7
 8017b18:	460d      	mov	r5, r1
 8017b1a:	d9f4      	bls.n	8017b06 <_printf_i+0x11a>
 8017b1c:	2b08      	cmp	r3, #8
 8017b1e:	d10b      	bne.n	8017b38 <_printf_i+0x14c>
 8017b20:	6823      	ldr	r3, [r4, #0]
 8017b22:	07df      	lsls	r7, r3, #31
 8017b24:	d508      	bpl.n	8017b38 <_printf_i+0x14c>
 8017b26:	6923      	ldr	r3, [r4, #16]
 8017b28:	6861      	ldr	r1, [r4, #4]
 8017b2a:	4299      	cmp	r1, r3
 8017b2c:	bfde      	ittt	le
 8017b2e:	2330      	movle	r3, #48	; 0x30
 8017b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8017b38:	1b92      	subs	r2, r2, r6
 8017b3a:	6122      	str	r2, [r4, #16]
 8017b3c:	f8cd a000 	str.w	sl, [sp]
 8017b40:	464b      	mov	r3, r9
 8017b42:	aa03      	add	r2, sp, #12
 8017b44:	4621      	mov	r1, r4
 8017b46:	4640      	mov	r0, r8
 8017b48:	f7ff fee2 	bl	8017910 <_printf_common>
 8017b4c:	3001      	adds	r0, #1
 8017b4e:	d14c      	bne.n	8017bea <_printf_i+0x1fe>
 8017b50:	f04f 30ff 	mov.w	r0, #4294967295
 8017b54:	b004      	add	sp, #16
 8017b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b5a:	4835      	ldr	r0, [pc, #212]	; (8017c30 <_printf_i+0x244>)
 8017b5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017b60:	6823      	ldr	r3, [r4, #0]
 8017b62:	680e      	ldr	r6, [r1, #0]
 8017b64:	061f      	lsls	r7, r3, #24
 8017b66:	f856 5b04 	ldr.w	r5, [r6], #4
 8017b6a:	600e      	str	r6, [r1, #0]
 8017b6c:	d514      	bpl.n	8017b98 <_printf_i+0x1ac>
 8017b6e:	07d9      	lsls	r1, r3, #31
 8017b70:	bf44      	itt	mi
 8017b72:	f043 0320 	orrmi.w	r3, r3, #32
 8017b76:	6023      	strmi	r3, [r4, #0]
 8017b78:	b91d      	cbnz	r5, 8017b82 <_printf_i+0x196>
 8017b7a:	6823      	ldr	r3, [r4, #0]
 8017b7c:	f023 0320 	bic.w	r3, r3, #32
 8017b80:	6023      	str	r3, [r4, #0]
 8017b82:	2310      	movs	r3, #16
 8017b84:	e7b0      	b.n	8017ae8 <_printf_i+0xfc>
 8017b86:	6823      	ldr	r3, [r4, #0]
 8017b88:	f043 0320 	orr.w	r3, r3, #32
 8017b8c:	6023      	str	r3, [r4, #0]
 8017b8e:	2378      	movs	r3, #120	; 0x78
 8017b90:	4828      	ldr	r0, [pc, #160]	; (8017c34 <_printf_i+0x248>)
 8017b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b96:	e7e3      	b.n	8017b60 <_printf_i+0x174>
 8017b98:	065e      	lsls	r6, r3, #25
 8017b9a:	bf48      	it	mi
 8017b9c:	b2ad      	uxthmi	r5, r5
 8017b9e:	e7e6      	b.n	8017b6e <_printf_i+0x182>
 8017ba0:	4616      	mov	r6, r2
 8017ba2:	e7bb      	b.n	8017b1c <_printf_i+0x130>
 8017ba4:	680b      	ldr	r3, [r1, #0]
 8017ba6:	6826      	ldr	r6, [r4, #0]
 8017ba8:	6960      	ldr	r0, [r4, #20]
 8017baa:	1d1d      	adds	r5, r3, #4
 8017bac:	600d      	str	r5, [r1, #0]
 8017bae:	0635      	lsls	r5, r6, #24
 8017bb0:	681b      	ldr	r3, [r3, #0]
 8017bb2:	d501      	bpl.n	8017bb8 <_printf_i+0x1cc>
 8017bb4:	6018      	str	r0, [r3, #0]
 8017bb6:	e002      	b.n	8017bbe <_printf_i+0x1d2>
 8017bb8:	0671      	lsls	r1, r6, #25
 8017bba:	d5fb      	bpl.n	8017bb4 <_printf_i+0x1c8>
 8017bbc:	8018      	strh	r0, [r3, #0]
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	6123      	str	r3, [r4, #16]
 8017bc2:	4616      	mov	r6, r2
 8017bc4:	e7ba      	b.n	8017b3c <_printf_i+0x150>
 8017bc6:	680b      	ldr	r3, [r1, #0]
 8017bc8:	1d1a      	adds	r2, r3, #4
 8017bca:	600a      	str	r2, [r1, #0]
 8017bcc:	681e      	ldr	r6, [r3, #0]
 8017bce:	6862      	ldr	r2, [r4, #4]
 8017bd0:	2100      	movs	r1, #0
 8017bd2:	4630      	mov	r0, r6
 8017bd4:	f7e8 fb14 	bl	8000200 <memchr>
 8017bd8:	b108      	cbz	r0, 8017bde <_printf_i+0x1f2>
 8017bda:	1b80      	subs	r0, r0, r6
 8017bdc:	6060      	str	r0, [r4, #4]
 8017bde:	6863      	ldr	r3, [r4, #4]
 8017be0:	6123      	str	r3, [r4, #16]
 8017be2:	2300      	movs	r3, #0
 8017be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017be8:	e7a8      	b.n	8017b3c <_printf_i+0x150>
 8017bea:	6923      	ldr	r3, [r4, #16]
 8017bec:	4632      	mov	r2, r6
 8017bee:	4649      	mov	r1, r9
 8017bf0:	4640      	mov	r0, r8
 8017bf2:	47d0      	blx	sl
 8017bf4:	3001      	adds	r0, #1
 8017bf6:	d0ab      	beq.n	8017b50 <_printf_i+0x164>
 8017bf8:	6823      	ldr	r3, [r4, #0]
 8017bfa:	079b      	lsls	r3, r3, #30
 8017bfc:	d413      	bmi.n	8017c26 <_printf_i+0x23a>
 8017bfe:	68e0      	ldr	r0, [r4, #12]
 8017c00:	9b03      	ldr	r3, [sp, #12]
 8017c02:	4298      	cmp	r0, r3
 8017c04:	bfb8      	it	lt
 8017c06:	4618      	movlt	r0, r3
 8017c08:	e7a4      	b.n	8017b54 <_printf_i+0x168>
 8017c0a:	2301      	movs	r3, #1
 8017c0c:	4632      	mov	r2, r6
 8017c0e:	4649      	mov	r1, r9
 8017c10:	4640      	mov	r0, r8
 8017c12:	47d0      	blx	sl
 8017c14:	3001      	adds	r0, #1
 8017c16:	d09b      	beq.n	8017b50 <_printf_i+0x164>
 8017c18:	3501      	adds	r5, #1
 8017c1a:	68e3      	ldr	r3, [r4, #12]
 8017c1c:	9903      	ldr	r1, [sp, #12]
 8017c1e:	1a5b      	subs	r3, r3, r1
 8017c20:	42ab      	cmp	r3, r5
 8017c22:	dcf2      	bgt.n	8017c0a <_printf_i+0x21e>
 8017c24:	e7eb      	b.n	8017bfe <_printf_i+0x212>
 8017c26:	2500      	movs	r5, #0
 8017c28:	f104 0619 	add.w	r6, r4, #25
 8017c2c:	e7f5      	b.n	8017c1a <_printf_i+0x22e>
 8017c2e:	bf00      	nop
 8017c30:	0801bfe9 	.word	0x0801bfe9
 8017c34:	0801bffa 	.word	0x0801bffa

08017c38 <_sbrk_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4d06      	ldr	r5, [pc, #24]	; (8017c54 <_sbrk_r+0x1c>)
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	4604      	mov	r4, r0
 8017c40:	4608      	mov	r0, r1
 8017c42:	602b      	str	r3, [r5, #0]
 8017c44:	f7e8 fff8 	bl	8000c38 <_sbrk>
 8017c48:	1c43      	adds	r3, r0, #1
 8017c4a:	d102      	bne.n	8017c52 <_sbrk_r+0x1a>
 8017c4c:	682b      	ldr	r3, [r5, #0]
 8017c4e:	b103      	cbz	r3, 8017c52 <_sbrk_r+0x1a>
 8017c50:	6023      	str	r3, [r4, #0]
 8017c52:	bd38      	pop	{r3, r4, r5, pc}
 8017c54:	2000f080 	.word	0x2000f080

08017c58 <__sread>:
 8017c58:	b510      	push	{r4, lr}
 8017c5a:	460c      	mov	r4, r1
 8017c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c60:	f000 fa92 	bl	8018188 <_read_r>
 8017c64:	2800      	cmp	r0, #0
 8017c66:	bfab      	itete	ge
 8017c68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c6a:	89a3      	ldrhlt	r3, [r4, #12]
 8017c6c:	181b      	addge	r3, r3, r0
 8017c6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c72:	bfac      	ite	ge
 8017c74:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c76:	81a3      	strhlt	r3, [r4, #12]
 8017c78:	bd10      	pop	{r4, pc}

08017c7a <__swrite>:
 8017c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c7e:	461f      	mov	r7, r3
 8017c80:	898b      	ldrh	r3, [r1, #12]
 8017c82:	05db      	lsls	r3, r3, #23
 8017c84:	4605      	mov	r5, r0
 8017c86:	460c      	mov	r4, r1
 8017c88:	4616      	mov	r6, r2
 8017c8a:	d505      	bpl.n	8017c98 <__swrite+0x1e>
 8017c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c90:	2302      	movs	r3, #2
 8017c92:	2200      	movs	r2, #0
 8017c94:	f000 f9d0 	bl	8018038 <_lseek_r>
 8017c98:	89a3      	ldrh	r3, [r4, #12]
 8017c9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017ca2:	81a3      	strh	r3, [r4, #12]
 8017ca4:	4632      	mov	r2, r6
 8017ca6:	463b      	mov	r3, r7
 8017ca8:	4628      	mov	r0, r5
 8017caa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017cae:	f000 b869 	b.w	8017d84 <_write_r>

08017cb2 <__sseek>:
 8017cb2:	b510      	push	{r4, lr}
 8017cb4:	460c      	mov	r4, r1
 8017cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cba:	f000 f9bd 	bl	8018038 <_lseek_r>
 8017cbe:	1c43      	adds	r3, r0, #1
 8017cc0:	89a3      	ldrh	r3, [r4, #12]
 8017cc2:	bf15      	itete	ne
 8017cc4:	6560      	strne	r0, [r4, #84]	; 0x54
 8017cc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017cca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017cce:	81a3      	strheq	r3, [r4, #12]
 8017cd0:	bf18      	it	ne
 8017cd2:	81a3      	strhne	r3, [r4, #12]
 8017cd4:	bd10      	pop	{r4, pc}

08017cd6 <__sclose>:
 8017cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017cda:	f000 b8db 	b.w	8017e94 <_close_r>
	...

08017ce0 <__swbuf_r>:
 8017ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ce2:	460e      	mov	r6, r1
 8017ce4:	4614      	mov	r4, r2
 8017ce6:	4605      	mov	r5, r0
 8017ce8:	b118      	cbz	r0, 8017cf2 <__swbuf_r+0x12>
 8017cea:	6983      	ldr	r3, [r0, #24]
 8017cec:	b90b      	cbnz	r3, 8017cf2 <__swbuf_r+0x12>
 8017cee:	f7ff f9f5 	bl	80170dc <__sinit>
 8017cf2:	4b21      	ldr	r3, [pc, #132]	; (8017d78 <__swbuf_r+0x98>)
 8017cf4:	429c      	cmp	r4, r3
 8017cf6:	d12b      	bne.n	8017d50 <__swbuf_r+0x70>
 8017cf8:	686c      	ldr	r4, [r5, #4]
 8017cfa:	69a3      	ldr	r3, [r4, #24]
 8017cfc:	60a3      	str	r3, [r4, #8]
 8017cfe:	89a3      	ldrh	r3, [r4, #12]
 8017d00:	071a      	lsls	r2, r3, #28
 8017d02:	d52f      	bpl.n	8017d64 <__swbuf_r+0x84>
 8017d04:	6923      	ldr	r3, [r4, #16]
 8017d06:	b36b      	cbz	r3, 8017d64 <__swbuf_r+0x84>
 8017d08:	6923      	ldr	r3, [r4, #16]
 8017d0a:	6820      	ldr	r0, [r4, #0]
 8017d0c:	1ac0      	subs	r0, r0, r3
 8017d0e:	6963      	ldr	r3, [r4, #20]
 8017d10:	b2f6      	uxtb	r6, r6
 8017d12:	4283      	cmp	r3, r0
 8017d14:	4637      	mov	r7, r6
 8017d16:	dc04      	bgt.n	8017d22 <__swbuf_r+0x42>
 8017d18:	4621      	mov	r1, r4
 8017d1a:	4628      	mov	r0, r5
 8017d1c:	f000 f950 	bl	8017fc0 <_fflush_r>
 8017d20:	bb30      	cbnz	r0, 8017d70 <__swbuf_r+0x90>
 8017d22:	68a3      	ldr	r3, [r4, #8]
 8017d24:	3b01      	subs	r3, #1
 8017d26:	60a3      	str	r3, [r4, #8]
 8017d28:	6823      	ldr	r3, [r4, #0]
 8017d2a:	1c5a      	adds	r2, r3, #1
 8017d2c:	6022      	str	r2, [r4, #0]
 8017d2e:	701e      	strb	r6, [r3, #0]
 8017d30:	6963      	ldr	r3, [r4, #20]
 8017d32:	3001      	adds	r0, #1
 8017d34:	4283      	cmp	r3, r0
 8017d36:	d004      	beq.n	8017d42 <__swbuf_r+0x62>
 8017d38:	89a3      	ldrh	r3, [r4, #12]
 8017d3a:	07db      	lsls	r3, r3, #31
 8017d3c:	d506      	bpl.n	8017d4c <__swbuf_r+0x6c>
 8017d3e:	2e0a      	cmp	r6, #10
 8017d40:	d104      	bne.n	8017d4c <__swbuf_r+0x6c>
 8017d42:	4621      	mov	r1, r4
 8017d44:	4628      	mov	r0, r5
 8017d46:	f000 f93b 	bl	8017fc0 <_fflush_r>
 8017d4a:	b988      	cbnz	r0, 8017d70 <__swbuf_r+0x90>
 8017d4c:	4638      	mov	r0, r7
 8017d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d50:	4b0a      	ldr	r3, [pc, #40]	; (8017d7c <__swbuf_r+0x9c>)
 8017d52:	429c      	cmp	r4, r3
 8017d54:	d101      	bne.n	8017d5a <__swbuf_r+0x7a>
 8017d56:	68ac      	ldr	r4, [r5, #8]
 8017d58:	e7cf      	b.n	8017cfa <__swbuf_r+0x1a>
 8017d5a:	4b09      	ldr	r3, [pc, #36]	; (8017d80 <__swbuf_r+0xa0>)
 8017d5c:	429c      	cmp	r4, r3
 8017d5e:	bf08      	it	eq
 8017d60:	68ec      	ldreq	r4, [r5, #12]
 8017d62:	e7ca      	b.n	8017cfa <__swbuf_r+0x1a>
 8017d64:	4621      	mov	r1, r4
 8017d66:	4628      	mov	r0, r5
 8017d68:	f000 f81e 	bl	8017da8 <__swsetup_r>
 8017d6c:	2800      	cmp	r0, #0
 8017d6e:	d0cb      	beq.n	8017d08 <__swbuf_r+0x28>
 8017d70:	f04f 37ff 	mov.w	r7, #4294967295
 8017d74:	e7ea      	b.n	8017d4c <__swbuf_r+0x6c>
 8017d76:	bf00      	nop
 8017d78:	0801bf98 	.word	0x0801bf98
 8017d7c:	0801bfb8 	.word	0x0801bfb8
 8017d80:	0801bf78 	.word	0x0801bf78

08017d84 <_write_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4d07      	ldr	r5, [pc, #28]	; (8017da4 <_write_r+0x20>)
 8017d88:	4604      	mov	r4, r0
 8017d8a:	4608      	mov	r0, r1
 8017d8c:	4611      	mov	r1, r2
 8017d8e:	2200      	movs	r2, #0
 8017d90:	602a      	str	r2, [r5, #0]
 8017d92:	461a      	mov	r2, r3
 8017d94:	f7e8 feff 	bl	8000b96 <_write>
 8017d98:	1c43      	adds	r3, r0, #1
 8017d9a:	d102      	bne.n	8017da2 <_write_r+0x1e>
 8017d9c:	682b      	ldr	r3, [r5, #0]
 8017d9e:	b103      	cbz	r3, 8017da2 <_write_r+0x1e>
 8017da0:	6023      	str	r3, [r4, #0]
 8017da2:	bd38      	pop	{r3, r4, r5, pc}
 8017da4:	2000f080 	.word	0x2000f080

08017da8 <__swsetup_r>:
 8017da8:	4b32      	ldr	r3, [pc, #200]	; (8017e74 <__swsetup_r+0xcc>)
 8017daa:	b570      	push	{r4, r5, r6, lr}
 8017dac:	681d      	ldr	r5, [r3, #0]
 8017dae:	4606      	mov	r6, r0
 8017db0:	460c      	mov	r4, r1
 8017db2:	b125      	cbz	r5, 8017dbe <__swsetup_r+0x16>
 8017db4:	69ab      	ldr	r3, [r5, #24]
 8017db6:	b913      	cbnz	r3, 8017dbe <__swsetup_r+0x16>
 8017db8:	4628      	mov	r0, r5
 8017dba:	f7ff f98f 	bl	80170dc <__sinit>
 8017dbe:	4b2e      	ldr	r3, [pc, #184]	; (8017e78 <__swsetup_r+0xd0>)
 8017dc0:	429c      	cmp	r4, r3
 8017dc2:	d10f      	bne.n	8017de4 <__swsetup_r+0x3c>
 8017dc4:	686c      	ldr	r4, [r5, #4]
 8017dc6:	89a3      	ldrh	r3, [r4, #12]
 8017dc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017dcc:	0719      	lsls	r1, r3, #28
 8017dce:	d42c      	bmi.n	8017e2a <__swsetup_r+0x82>
 8017dd0:	06dd      	lsls	r5, r3, #27
 8017dd2:	d411      	bmi.n	8017df8 <__swsetup_r+0x50>
 8017dd4:	2309      	movs	r3, #9
 8017dd6:	6033      	str	r3, [r6, #0]
 8017dd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017ddc:	81a3      	strh	r3, [r4, #12]
 8017dde:	f04f 30ff 	mov.w	r0, #4294967295
 8017de2:	e03e      	b.n	8017e62 <__swsetup_r+0xba>
 8017de4:	4b25      	ldr	r3, [pc, #148]	; (8017e7c <__swsetup_r+0xd4>)
 8017de6:	429c      	cmp	r4, r3
 8017de8:	d101      	bne.n	8017dee <__swsetup_r+0x46>
 8017dea:	68ac      	ldr	r4, [r5, #8]
 8017dec:	e7eb      	b.n	8017dc6 <__swsetup_r+0x1e>
 8017dee:	4b24      	ldr	r3, [pc, #144]	; (8017e80 <__swsetup_r+0xd8>)
 8017df0:	429c      	cmp	r4, r3
 8017df2:	bf08      	it	eq
 8017df4:	68ec      	ldreq	r4, [r5, #12]
 8017df6:	e7e6      	b.n	8017dc6 <__swsetup_r+0x1e>
 8017df8:	0758      	lsls	r0, r3, #29
 8017dfa:	d512      	bpl.n	8017e22 <__swsetup_r+0x7a>
 8017dfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dfe:	b141      	cbz	r1, 8017e12 <__swsetup_r+0x6a>
 8017e00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017e04:	4299      	cmp	r1, r3
 8017e06:	d002      	beq.n	8017e0e <__swsetup_r+0x66>
 8017e08:	4630      	mov	r0, r6
 8017e0a:	f7ff fa21 	bl	8017250 <_free_r>
 8017e0e:	2300      	movs	r3, #0
 8017e10:	6363      	str	r3, [r4, #52]	; 0x34
 8017e12:	89a3      	ldrh	r3, [r4, #12]
 8017e14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017e18:	81a3      	strh	r3, [r4, #12]
 8017e1a:	2300      	movs	r3, #0
 8017e1c:	6063      	str	r3, [r4, #4]
 8017e1e:	6923      	ldr	r3, [r4, #16]
 8017e20:	6023      	str	r3, [r4, #0]
 8017e22:	89a3      	ldrh	r3, [r4, #12]
 8017e24:	f043 0308 	orr.w	r3, r3, #8
 8017e28:	81a3      	strh	r3, [r4, #12]
 8017e2a:	6923      	ldr	r3, [r4, #16]
 8017e2c:	b94b      	cbnz	r3, 8017e42 <__swsetup_r+0x9a>
 8017e2e:	89a3      	ldrh	r3, [r4, #12]
 8017e30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e38:	d003      	beq.n	8017e42 <__swsetup_r+0x9a>
 8017e3a:	4621      	mov	r1, r4
 8017e3c:	4630      	mov	r0, r6
 8017e3e:	f000 f931 	bl	80180a4 <__smakebuf_r>
 8017e42:	89a0      	ldrh	r0, [r4, #12]
 8017e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e48:	f010 0301 	ands.w	r3, r0, #1
 8017e4c:	d00a      	beq.n	8017e64 <__swsetup_r+0xbc>
 8017e4e:	2300      	movs	r3, #0
 8017e50:	60a3      	str	r3, [r4, #8]
 8017e52:	6963      	ldr	r3, [r4, #20]
 8017e54:	425b      	negs	r3, r3
 8017e56:	61a3      	str	r3, [r4, #24]
 8017e58:	6923      	ldr	r3, [r4, #16]
 8017e5a:	b943      	cbnz	r3, 8017e6e <__swsetup_r+0xc6>
 8017e5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017e60:	d1ba      	bne.n	8017dd8 <__swsetup_r+0x30>
 8017e62:	bd70      	pop	{r4, r5, r6, pc}
 8017e64:	0781      	lsls	r1, r0, #30
 8017e66:	bf58      	it	pl
 8017e68:	6963      	ldrpl	r3, [r4, #20]
 8017e6a:	60a3      	str	r3, [r4, #8]
 8017e6c:	e7f4      	b.n	8017e58 <__swsetup_r+0xb0>
 8017e6e:	2000      	movs	r0, #0
 8017e70:	e7f7      	b.n	8017e62 <__swsetup_r+0xba>
 8017e72:	bf00      	nop
 8017e74:	20000020 	.word	0x20000020
 8017e78:	0801bf98 	.word	0x0801bf98
 8017e7c:	0801bfb8 	.word	0x0801bfb8
 8017e80:	0801bf78 	.word	0x0801bf78

08017e84 <abort>:
 8017e84:	b508      	push	{r3, lr}
 8017e86:	2006      	movs	r0, #6
 8017e88:	f000 f9b8 	bl	80181fc <raise>
 8017e8c:	2001      	movs	r0, #1
 8017e8e:	f7e8 fe5b 	bl	8000b48 <_exit>
	...

08017e94 <_close_r>:
 8017e94:	b538      	push	{r3, r4, r5, lr}
 8017e96:	4d06      	ldr	r5, [pc, #24]	; (8017eb0 <_close_r+0x1c>)
 8017e98:	2300      	movs	r3, #0
 8017e9a:	4604      	mov	r4, r0
 8017e9c:	4608      	mov	r0, r1
 8017e9e:	602b      	str	r3, [r5, #0]
 8017ea0:	f7e8 fe95 	bl	8000bce <_close>
 8017ea4:	1c43      	adds	r3, r0, #1
 8017ea6:	d102      	bne.n	8017eae <_close_r+0x1a>
 8017ea8:	682b      	ldr	r3, [r5, #0]
 8017eaa:	b103      	cbz	r3, 8017eae <_close_r+0x1a>
 8017eac:	6023      	str	r3, [r4, #0]
 8017eae:	bd38      	pop	{r3, r4, r5, pc}
 8017eb0:	2000f080 	.word	0x2000f080

08017eb4 <__sflush_r>:
 8017eb4:	898a      	ldrh	r2, [r1, #12]
 8017eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017eba:	4605      	mov	r5, r0
 8017ebc:	0710      	lsls	r0, r2, #28
 8017ebe:	460c      	mov	r4, r1
 8017ec0:	d458      	bmi.n	8017f74 <__sflush_r+0xc0>
 8017ec2:	684b      	ldr	r3, [r1, #4]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	dc05      	bgt.n	8017ed4 <__sflush_r+0x20>
 8017ec8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	dc02      	bgt.n	8017ed4 <__sflush_r+0x20>
 8017ece:	2000      	movs	r0, #0
 8017ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017ed4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017ed6:	2e00      	cmp	r6, #0
 8017ed8:	d0f9      	beq.n	8017ece <__sflush_r+0x1a>
 8017eda:	2300      	movs	r3, #0
 8017edc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ee0:	682f      	ldr	r7, [r5, #0]
 8017ee2:	602b      	str	r3, [r5, #0]
 8017ee4:	d032      	beq.n	8017f4c <__sflush_r+0x98>
 8017ee6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017ee8:	89a3      	ldrh	r3, [r4, #12]
 8017eea:	075a      	lsls	r2, r3, #29
 8017eec:	d505      	bpl.n	8017efa <__sflush_r+0x46>
 8017eee:	6863      	ldr	r3, [r4, #4]
 8017ef0:	1ac0      	subs	r0, r0, r3
 8017ef2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017ef4:	b10b      	cbz	r3, 8017efa <__sflush_r+0x46>
 8017ef6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017ef8:	1ac0      	subs	r0, r0, r3
 8017efa:	2300      	movs	r3, #0
 8017efc:	4602      	mov	r2, r0
 8017efe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017f00:	6a21      	ldr	r1, [r4, #32]
 8017f02:	4628      	mov	r0, r5
 8017f04:	47b0      	blx	r6
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	89a3      	ldrh	r3, [r4, #12]
 8017f0a:	d106      	bne.n	8017f1a <__sflush_r+0x66>
 8017f0c:	6829      	ldr	r1, [r5, #0]
 8017f0e:	291d      	cmp	r1, #29
 8017f10:	d82c      	bhi.n	8017f6c <__sflush_r+0xb8>
 8017f12:	4a2a      	ldr	r2, [pc, #168]	; (8017fbc <__sflush_r+0x108>)
 8017f14:	40ca      	lsrs	r2, r1
 8017f16:	07d6      	lsls	r6, r2, #31
 8017f18:	d528      	bpl.n	8017f6c <__sflush_r+0xb8>
 8017f1a:	2200      	movs	r2, #0
 8017f1c:	6062      	str	r2, [r4, #4]
 8017f1e:	04d9      	lsls	r1, r3, #19
 8017f20:	6922      	ldr	r2, [r4, #16]
 8017f22:	6022      	str	r2, [r4, #0]
 8017f24:	d504      	bpl.n	8017f30 <__sflush_r+0x7c>
 8017f26:	1c42      	adds	r2, r0, #1
 8017f28:	d101      	bne.n	8017f2e <__sflush_r+0x7a>
 8017f2a:	682b      	ldr	r3, [r5, #0]
 8017f2c:	b903      	cbnz	r3, 8017f30 <__sflush_r+0x7c>
 8017f2e:	6560      	str	r0, [r4, #84]	; 0x54
 8017f30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017f32:	602f      	str	r7, [r5, #0]
 8017f34:	2900      	cmp	r1, #0
 8017f36:	d0ca      	beq.n	8017ece <__sflush_r+0x1a>
 8017f38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017f3c:	4299      	cmp	r1, r3
 8017f3e:	d002      	beq.n	8017f46 <__sflush_r+0x92>
 8017f40:	4628      	mov	r0, r5
 8017f42:	f7ff f985 	bl	8017250 <_free_r>
 8017f46:	2000      	movs	r0, #0
 8017f48:	6360      	str	r0, [r4, #52]	; 0x34
 8017f4a:	e7c1      	b.n	8017ed0 <__sflush_r+0x1c>
 8017f4c:	6a21      	ldr	r1, [r4, #32]
 8017f4e:	2301      	movs	r3, #1
 8017f50:	4628      	mov	r0, r5
 8017f52:	47b0      	blx	r6
 8017f54:	1c41      	adds	r1, r0, #1
 8017f56:	d1c7      	bne.n	8017ee8 <__sflush_r+0x34>
 8017f58:	682b      	ldr	r3, [r5, #0]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d0c4      	beq.n	8017ee8 <__sflush_r+0x34>
 8017f5e:	2b1d      	cmp	r3, #29
 8017f60:	d001      	beq.n	8017f66 <__sflush_r+0xb2>
 8017f62:	2b16      	cmp	r3, #22
 8017f64:	d101      	bne.n	8017f6a <__sflush_r+0xb6>
 8017f66:	602f      	str	r7, [r5, #0]
 8017f68:	e7b1      	b.n	8017ece <__sflush_r+0x1a>
 8017f6a:	89a3      	ldrh	r3, [r4, #12]
 8017f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017f70:	81a3      	strh	r3, [r4, #12]
 8017f72:	e7ad      	b.n	8017ed0 <__sflush_r+0x1c>
 8017f74:	690f      	ldr	r7, [r1, #16]
 8017f76:	2f00      	cmp	r7, #0
 8017f78:	d0a9      	beq.n	8017ece <__sflush_r+0x1a>
 8017f7a:	0793      	lsls	r3, r2, #30
 8017f7c:	680e      	ldr	r6, [r1, #0]
 8017f7e:	bf08      	it	eq
 8017f80:	694b      	ldreq	r3, [r1, #20]
 8017f82:	600f      	str	r7, [r1, #0]
 8017f84:	bf18      	it	ne
 8017f86:	2300      	movne	r3, #0
 8017f88:	eba6 0807 	sub.w	r8, r6, r7
 8017f8c:	608b      	str	r3, [r1, #8]
 8017f8e:	f1b8 0f00 	cmp.w	r8, #0
 8017f92:	dd9c      	ble.n	8017ece <__sflush_r+0x1a>
 8017f94:	6a21      	ldr	r1, [r4, #32]
 8017f96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017f98:	4643      	mov	r3, r8
 8017f9a:	463a      	mov	r2, r7
 8017f9c:	4628      	mov	r0, r5
 8017f9e:	47b0      	blx	r6
 8017fa0:	2800      	cmp	r0, #0
 8017fa2:	dc06      	bgt.n	8017fb2 <__sflush_r+0xfe>
 8017fa4:	89a3      	ldrh	r3, [r4, #12]
 8017fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017faa:	81a3      	strh	r3, [r4, #12]
 8017fac:	f04f 30ff 	mov.w	r0, #4294967295
 8017fb0:	e78e      	b.n	8017ed0 <__sflush_r+0x1c>
 8017fb2:	4407      	add	r7, r0
 8017fb4:	eba8 0800 	sub.w	r8, r8, r0
 8017fb8:	e7e9      	b.n	8017f8e <__sflush_r+0xda>
 8017fba:	bf00      	nop
 8017fbc:	20400001 	.word	0x20400001

08017fc0 <_fflush_r>:
 8017fc0:	b538      	push	{r3, r4, r5, lr}
 8017fc2:	690b      	ldr	r3, [r1, #16]
 8017fc4:	4605      	mov	r5, r0
 8017fc6:	460c      	mov	r4, r1
 8017fc8:	b913      	cbnz	r3, 8017fd0 <_fflush_r+0x10>
 8017fca:	2500      	movs	r5, #0
 8017fcc:	4628      	mov	r0, r5
 8017fce:	bd38      	pop	{r3, r4, r5, pc}
 8017fd0:	b118      	cbz	r0, 8017fda <_fflush_r+0x1a>
 8017fd2:	6983      	ldr	r3, [r0, #24]
 8017fd4:	b90b      	cbnz	r3, 8017fda <_fflush_r+0x1a>
 8017fd6:	f7ff f881 	bl	80170dc <__sinit>
 8017fda:	4b14      	ldr	r3, [pc, #80]	; (801802c <_fflush_r+0x6c>)
 8017fdc:	429c      	cmp	r4, r3
 8017fde:	d11b      	bne.n	8018018 <_fflush_r+0x58>
 8017fe0:	686c      	ldr	r4, [r5, #4]
 8017fe2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d0ef      	beq.n	8017fca <_fflush_r+0xa>
 8017fea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017fec:	07d0      	lsls	r0, r2, #31
 8017fee:	d404      	bmi.n	8017ffa <_fflush_r+0x3a>
 8017ff0:	0599      	lsls	r1, r3, #22
 8017ff2:	d402      	bmi.n	8017ffa <_fflush_r+0x3a>
 8017ff4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017ff6:	f7ff f921 	bl	801723c <__retarget_lock_acquire_recursive>
 8017ffa:	4628      	mov	r0, r5
 8017ffc:	4621      	mov	r1, r4
 8017ffe:	f7ff ff59 	bl	8017eb4 <__sflush_r>
 8018002:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018004:	07da      	lsls	r2, r3, #31
 8018006:	4605      	mov	r5, r0
 8018008:	d4e0      	bmi.n	8017fcc <_fflush_r+0xc>
 801800a:	89a3      	ldrh	r3, [r4, #12]
 801800c:	059b      	lsls	r3, r3, #22
 801800e:	d4dd      	bmi.n	8017fcc <_fflush_r+0xc>
 8018010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018012:	f7ff f914 	bl	801723e <__retarget_lock_release_recursive>
 8018016:	e7d9      	b.n	8017fcc <_fflush_r+0xc>
 8018018:	4b05      	ldr	r3, [pc, #20]	; (8018030 <_fflush_r+0x70>)
 801801a:	429c      	cmp	r4, r3
 801801c:	d101      	bne.n	8018022 <_fflush_r+0x62>
 801801e:	68ac      	ldr	r4, [r5, #8]
 8018020:	e7df      	b.n	8017fe2 <_fflush_r+0x22>
 8018022:	4b04      	ldr	r3, [pc, #16]	; (8018034 <_fflush_r+0x74>)
 8018024:	429c      	cmp	r4, r3
 8018026:	bf08      	it	eq
 8018028:	68ec      	ldreq	r4, [r5, #12]
 801802a:	e7da      	b.n	8017fe2 <_fflush_r+0x22>
 801802c:	0801bf98 	.word	0x0801bf98
 8018030:	0801bfb8 	.word	0x0801bfb8
 8018034:	0801bf78 	.word	0x0801bf78

08018038 <_lseek_r>:
 8018038:	b538      	push	{r3, r4, r5, lr}
 801803a:	4d07      	ldr	r5, [pc, #28]	; (8018058 <_lseek_r+0x20>)
 801803c:	4604      	mov	r4, r0
 801803e:	4608      	mov	r0, r1
 8018040:	4611      	mov	r1, r2
 8018042:	2200      	movs	r2, #0
 8018044:	602a      	str	r2, [r5, #0]
 8018046:	461a      	mov	r2, r3
 8018048:	f7e8 fde8 	bl	8000c1c <_lseek>
 801804c:	1c43      	adds	r3, r0, #1
 801804e:	d102      	bne.n	8018056 <_lseek_r+0x1e>
 8018050:	682b      	ldr	r3, [r5, #0]
 8018052:	b103      	cbz	r3, 8018056 <_lseek_r+0x1e>
 8018054:	6023      	str	r3, [r4, #0]
 8018056:	bd38      	pop	{r3, r4, r5, pc}
 8018058:	2000f080 	.word	0x2000f080

0801805c <__swhatbuf_r>:
 801805c:	b570      	push	{r4, r5, r6, lr}
 801805e:	460e      	mov	r6, r1
 8018060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018064:	2900      	cmp	r1, #0
 8018066:	b096      	sub	sp, #88	; 0x58
 8018068:	4614      	mov	r4, r2
 801806a:	461d      	mov	r5, r3
 801806c:	da07      	bge.n	801807e <__swhatbuf_r+0x22>
 801806e:	2300      	movs	r3, #0
 8018070:	602b      	str	r3, [r5, #0]
 8018072:	89b3      	ldrh	r3, [r6, #12]
 8018074:	061a      	lsls	r2, r3, #24
 8018076:	d410      	bmi.n	801809a <__swhatbuf_r+0x3e>
 8018078:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801807c:	e00e      	b.n	801809c <__swhatbuf_r+0x40>
 801807e:	466a      	mov	r2, sp
 8018080:	f000 f8d8 	bl	8018234 <_fstat_r>
 8018084:	2800      	cmp	r0, #0
 8018086:	dbf2      	blt.n	801806e <__swhatbuf_r+0x12>
 8018088:	9a01      	ldr	r2, [sp, #4]
 801808a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801808e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018092:	425a      	negs	r2, r3
 8018094:	415a      	adcs	r2, r3
 8018096:	602a      	str	r2, [r5, #0]
 8018098:	e7ee      	b.n	8018078 <__swhatbuf_r+0x1c>
 801809a:	2340      	movs	r3, #64	; 0x40
 801809c:	2000      	movs	r0, #0
 801809e:	6023      	str	r3, [r4, #0]
 80180a0:	b016      	add	sp, #88	; 0x58
 80180a2:	bd70      	pop	{r4, r5, r6, pc}

080180a4 <__smakebuf_r>:
 80180a4:	898b      	ldrh	r3, [r1, #12]
 80180a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80180a8:	079d      	lsls	r5, r3, #30
 80180aa:	4606      	mov	r6, r0
 80180ac:	460c      	mov	r4, r1
 80180ae:	d507      	bpl.n	80180c0 <__smakebuf_r+0x1c>
 80180b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80180b4:	6023      	str	r3, [r4, #0]
 80180b6:	6123      	str	r3, [r4, #16]
 80180b8:	2301      	movs	r3, #1
 80180ba:	6163      	str	r3, [r4, #20]
 80180bc:	b002      	add	sp, #8
 80180be:	bd70      	pop	{r4, r5, r6, pc}
 80180c0:	ab01      	add	r3, sp, #4
 80180c2:	466a      	mov	r2, sp
 80180c4:	f7ff ffca 	bl	801805c <__swhatbuf_r>
 80180c8:	9900      	ldr	r1, [sp, #0]
 80180ca:	4605      	mov	r5, r0
 80180cc:	4630      	mov	r0, r6
 80180ce:	f7ff f90f 	bl	80172f0 <_malloc_r>
 80180d2:	b948      	cbnz	r0, 80180e8 <__smakebuf_r+0x44>
 80180d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80180d8:	059a      	lsls	r2, r3, #22
 80180da:	d4ef      	bmi.n	80180bc <__smakebuf_r+0x18>
 80180dc:	f023 0303 	bic.w	r3, r3, #3
 80180e0:	f043 0302 	orr.w	r3, r3, #2
 80180e4:	81a3      	strh	r3, [r4, #12]
 80180e6:	e7e3      	b.n	80180b0 <__smakebuf_r+0xc>
 80180e8:	4b0d      	ldr	r3, [pc, #52]	; (8018120 <__smakebuf_r+0x7c>)
 80180ea:	62b3      	str	r3, [r6, #40]	; 0x28
 80180ec:	89a3      	ldrh	r3, [r4, #12]
 80180ee:	6020      	str	r0, [r4, #0]
 80180f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180f4:	81a3      	strh	r3, [r4, #12]
 80180f6:	9b00      	ldr	r3, [sp, #0]
 80180f8:	6163      	str	r3, [r4, #20]
 80180fa:	9b01      	ldr	r3, [sp, #4]
 80180fc:	6120      	str	r0, [r4, #16]
 80180fe:	b15b      	cbz	r3, 8018118 <__smakebuf_r+0x74>
 8018100:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018104:	4630      	mov	r0, r6
 8018106:	f000 f8a7 	bl	8018258 <_isatty_r>
 801810a:	b128      	cbz	r0, 8018118 <__smakebuf_r+0x74>
 801810c:	89a3      	ldrh	r3, [r4, #12]
 801810e:	f023 0303 	bic.w	r3, r3, #3
 8018112:	f043 0301 	orr.w	r3, r3, #1
 8018116:	81a3      	strh	r3, [r4, #12]
 8018118:	89a0      	ldrh	r0, [r4, #12]
 801811a:	4305      	orrs	r5, r0
 801811c:	81a5      	strh	r5, [r4, #12]
 801811e:	e7cd      	b.n	80180bc <__smakebuf_r+0x18>
 8018120:	08017075 	.word	0x08017075

08018124 <__malloc_lock>:
 8018124:	4801      	ldr	r0, [pc, #4]	; (801812c <__malloc_lock+0x8>)
 8018126:	f7ff b889 	b.w	801723c <__retarget_lock_acquire_recursive>
 801812a:	bf00      	nop
 801812c:	2000f08c 	.word	0x2000f08c

08018130 <__malloc_unlock>:
 8018130:	4801      	ldr	r0, [pc, #4]	; (8018138 <__malloc_unlock+0x8>)
 8018132:	f7ff b884 	b.w	801723e <__retarget_lock_release_recursive>
 8018136:	bf00      	nop
 8018138:	2000f08c 	.word	0x2000f08c

0801813c <_realloc_r>:
 801813c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801813e:	4607      	mov	r7, r0
 8018140:	4614      	mov	r4, r2
 8018142:	460e      	mov	r6, r1
 8018144:	b921      	cbnz	r1, 8018150 <_realloc_r+0x14>
 8018146:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801814a:	4611      	mov	r1, r2
 801814c:	f7ff b8d0 	b.w	80172f0 <_malloc_r>
 8018150:	b922      	cbnz	r2, 801815c <_realloc_r+0x20>
 8018152:	f7ff f87d 	bl	8017250 <_free_r>
 8018156:	4625      	mov	r5, r4
 8018158:	4628      	mov	r0, r5
 801815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801815c:	f000 f88c 	bl	8018278 <_malloc_usable_size_r>
 8018160:	42a0      	cmp	r0, r4
 8018162:	d20f      	bcs.n	8018184 <_realloc_r+0x48>
 8018164:	4621      	mov	r1, r4
 8018166:	4638      	mov	r0, r7
 8018168:	f7ff f8c2 	bl	80172f0 <_malloc_r>
 801816c:	4605      	mov	r5, r0
 801816e:	2800      	cmp	r0, #0
 8018170:	d0f2      	beq.n	8018158 <_realloc_r+0x1c>
 8018172:	4631      	mov	r1, r6
 8018174:	4622      	mov	r2, r4
 8018176:	f7fe fe4b 	bl	8016e10 <memcpy>
 801817a:	4631      	mov	r1, r6
 801817c:	4638      	mov	r0, r7
 801817e:	f7ff f867 	bl	8017250 <_free_r>
 8018182:	e7e9      	b.n	8018158 <_realloc_r+0x1c>
 8018184:	4635      	mov	r5, r6
 8018186:	e7e7      	b.n	8018158 <_realloc_r+0x1c>

08018188 <_read_r>:
 8018188:	b538      	push	{r3, r4, r5, lr}
 801818a:	4d07      	ldr	r5, [pc, #28]	; (80181a8 <_read_r+0x20>)
 801818c:	4604      	mov	r4, r0
 801818e:	4608      	mov	r0, r1
 8018190:	4611      	mov	r1, r2
 8018192:	2200      	movs	r2, #0
 8018194:	602a      	str	r2, [r5, #0]
 8018196:	461a      	mov	r2, r3
 8018198:	f7e8 fce0 	bl	8000b5c <_read>
 801819c:	1c43      	adds	r3, r0, #1
 801819e:	d102      	bne.n	80181a6 <_read_r+0x1e>
 80181a0:	682b      	ldr	r3, [r5, #0]
 80181a2:	b103      	cbz	r3, 80181a6 <_read_r+0x1e>
 80181a4:	6023      	str	r3, [r4, #0]
 80181a6:	bd38      	pop	{r3, r4, r5, pc}
 80181a8:	2000f080 	.word	0x2000f080

080181ac <_raise_r>:
 80181ac:	291f      	cmp	r1, #31
 80181ae:	b538      	push	{r3, r4, r5, lr}
 80181b0:	4604      	mov	r4, r0
 80181b2:	460d      	mov	r5, r1
 80181b4:	d904      	bls.n	80181c0 <_raise_r+0x14>
 80181b6:	2316      	movs	r3, #22
 80181b8:	6003      	str	r3, [r0, #0]
 80181ba:	f04f 30ff 	mov.w	r0, #4294967295
 80181be:	bd38      	pop	{r3, r4, r5, pc}
 80181c0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80181c2:	b112      	cbz	r2, 80181ca <_raise_r+0x1e>
 80181c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80181c8:	b94b      	cbnz	r3, 80181de <_raise_r+0x32>
 80181ca:	4620      	mov	r0, r4
 80181cc:	f000 f830 	bl	8018230 <_getpid_r>
 80181d0:	462a      	mov	r2, r5
 80181d2:	4601      	mov	r1, r0
 80181d4:	4620      	mov	r0, r4
 80181d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80181da:	f000 b817 	b.w	801820c <_kill_r>
 80181de:	2b01      	cmp	r3, #1
 80181e0:	d00a      	beq.n	80181f8 <_raise_r+0x4c>
 80181e2:	1c59      	adds	r1, r3, #1
 80181e4:	d103      	bne.n	80181ee <_raise_r+0x42>
 80181e6:	2316      	movs	r3, #22
 80181e8:	6003      	str	r3, [r0, #0]
 80181ea:	2001      	movs	r0, #1
 80181ec:	e7e7      	b.n	80181be <_raise_r+0x12>
 80181ee:	2400      	movs	r4, #0
 80181f0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80181f4:	4628      	mov	r0, r5
 80181f6:	4798      	blx	r3
 80181f8:	2000      	movs	r0, #0
 80181fa:	e7e0      	b.n	80181be <_raise_r+0x12>

080181fc <raise>:
 80181fc:	4b02      	ldr	r3, [pc, #8]	; (8018208 <raise+0xc>)
 80181fe:	4601      	mov	r1, r0
 8018200:	6818      	ldr	r0, [r3, #0]
 8018202:	f7ff bfd3 	b.w	80181ac <_raise_r>
 8018206:	bf00      	nop
 8018208:	20000020 	.word	0x20000020

0801820c <_kill_r>:
 801820c:	b538      	push	{r3, r4, r5, lr}
 801820e:	4d07      	ldr	r5, [pc, #28]	; (801822c <_kill_r+0x20>)
 8018210:	2300      	movs	r3, #0
 8018212:	4604      	mov	r4, r0
 8018214:	4608      	mov	r0, r1
 8018216:	4611      	mov	r1, r2
 8018218:	602b      	str	r3, [r5, #0]
 801821a:	f7e8 fc83 	bl	8000b24 <_kill>
 801821e:	1c43      	adds	r3, r0, #1
 8018220:	d102      	bne.n	8018228 <_kill_r+0x1c>
 8018222:	682b      	ldr	r3, [r5, #0]
 8018224:	b103      	cbz	r3, 8018228 <_kill_r+0x1c>
 8018226:	6023      	str	r3, [r4, #0]
 8018228:	bd38      	pop	{r3, r4, r5, pc}
 801822a:	bf00      	nop
 801822c:	2000f080 	.word	0x2000f080

08018230 <_getpid_r>:
 8018230:	f7e8 bc70 	b.w	8000b14 <_getpid>

08018234 <_fstat_r>:
 8018234:	b538      	push	{r3, r4, r5, lr}
 8018236:	4d07      	ldr	r5, [pc, #28]	; (8018254 <_fstat_r+0x20>)
 8018238:	2300      	movs	r3, #0
 801823a:	4604      	mov	r4, r0
 801823c:	4608      	mov	r0, r1
 801823e:	4611      	mov	r1, r2
 8018240:	602b      	str	r3, [r5, #0]
 8018242:	f7e8 fcd0 	bl	8000be6 <_fstat>
 8018246:	1c43      	adds	r3, r0, #1
 8018248:	d102      	bne.n	8018250 <_fstat_r+0x1c>
 801824a:	682b      	ldr	r3, [r5, #0]
 801824c:	b103      	cbz	r3, 8018250 <_fstat_r+0x1c>
 801824e:	6023      	str	r3, [r4, #0]
 8018250:	bd38      	pop	{r3, r4, r5, pc}
 8018252:	bf00      	nop
 8018254:	2000f080 	.word	0x2000f080

08018258 <_isatty_r>:
 8018258:	b538      	push	{r3, r4, r5, lr}
 801825a:	4d06      	ldr	r5, [pc, #24]	; (8018274 <_isatty_r+0x1c>)
 801825c:	2300      	movs	r3, #0
 801825e:	4604      	mov	r4, r0
 8018260:	4608      	mov	r0, r1
 8018262:	602b      	str	r3, [r5, #0]
 8018264:	f7e8 fccf 	bl	8000c06 <_isatty>
 8018268:	1c43      	adds	r3, r0, #1
 801826a:	d102      	bne.n	8018272 <_isatty_r+0x1a>
 801826c:	682b      	ldr	r3, [r5, #0]
 801826e:	b103      	cbz	r3, 8018272 <_isatty_r+0x1a>
 8018270:	6023      	str	r3, [r4, #0]
 8018272:	bd38      	pop	{r3, r4, r5, pc}
 8018274:	2000f080 	.word	0x2000f080

08018278 <_malloc_usable_size_r>:
 8018278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801827c:	1f18      	subs	r0, r3, #4
 801827e:	2b00      	cmp	r3, #0
 8018280:	bfbc      	itt	lt
 8018282:	580b      	ldrlt	r3, [r1, r0]
 8018284:	18c0      	addlt	r0, r0, r3
 8018286:	4770      	bx	lr

08018288 <_init>:
 8018288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801828a:	bf00      	nop
 801828c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801828e:	bc08      	pop	{r3}
 8018290:	469e      	mov	lr, r3
 8018292:	4770      	bx	lr

08018294 <_fini>:
 8018294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018296:	bf00      	nop
 8018298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801829a:	bc08      	pop	{r3}
 801829c:	469e      	mov	lr, r3
 801829e:	4770      	bx	lr
